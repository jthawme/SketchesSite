{"version":3,"sources":["../node_modules/process/browser.js","../node_modules/base64-js/index.js","../node_modules/ieee754/index.js","../node_modules/isarray/index.js","../node_modules/buffer/index.js","../src/environment.ts","../src/util.ts","../src/profiler.ts","../src/tensor_format.ts","../src/tensor.ts","../src/types.ts","../src/tensor_util.ts","../src/engine.ts","../src/tape.ts","../src/device_util.ts","../src/flags.ts","../src/backends/webgl/canvas_util.ts","../src/backends/webgl/tex_util.ts","../src/backends/webgl/webgl_util.ts","../src/globals.ts","../src/log.ts","../src/tensor_util_env.ts","../src/ops/axis_util.ts","../src/ops/concat_util.ts","../src/ops/operation.ts","../src/backends/webgl/flags_webgl.ts","../src/ops/complex_ops.ts","../src/ops/tensor_ops.ts","../src/ops/concat_split.ts","../node_modules/seedrandom/lib/alea.js","../node_modules/seedrandom/lib/xor128.js","../node_modules/seedrandom/lib/xorwow.js","../node_modules/seedrandom/lib/xorshift7.js","../node_modules/seedrandom/lib/xor4096.js","../node_modules/seedrandom/lib/tychei.js","../node_modules/seedrandom/seedrandom.js","../node_modules/seedrandom/index.js","../src/ops/rand.ts","../src/ops/array_ops.ts","../src/ops/array_ops_util.ts","../src/ops/gather_nd_util.ts","../src/ops/reduce_util.ts","../src/ops/scatter_nd_util.ts","../src/ops/slice_util.ts","../src/gradients.ts","../src/ops/softmax.ts","../src/backends/backend.ts","../src/ops/broadcast_util.ts","../src/ops/conv_util.ts","../src/backends/backend_util.ts","../src/backends/complex_util.ts","../src/backends/non_max_suppression_impl.ts","../src/backends/split_shared.ts","../src/backends/tile_impl.ts","../src/backends/topk_impl.ts","../src/backends/where_impl.ts","../src/backends/webgl/addn_gpu.ts","../src/backends/webgl/addn_packed_gpu.ts","../src/backends/webgl/argminmax_gpu.ts","../src/backends/packing_util.ts","../src/backends/webgl/glsl_version.ts","../src/backends/webgl/shader_compiler_util.ts","../src/backends/webgl/shader_compiler.ts","../src/backends/webgl/argminmax_packed_gpu.ts","../src/backends/webgl/avg_pool_backprop_gpu.ts","../src/backends/webgl/batchnorm_gpu.ts","../src/backends/webgl/batchnorm_packed_gpu.ts","../src/backends/webgl/binaryop_complex_gpu.ts","../src/backends/webgl/binaryop_gpu.ts","../src/backends/webgl/binaryop_packed_gpu.ts","../src/backends/webgl/clip_gpu.ts","../src/backends/webgl/clip_packed_gpu.ts","../src/backends/webgl/complex_abs_gpu.ts","../src/backends/webgl/concat_gpu.ts","../src/backends/webgl/concat_packed_gpu.ts","../src/backends/webgl/conv_backprop_gpu.ts","../src/backends/webgl/conv_backprop_gpu_depthwise.ts","../src/backends/webgl/conv_gpu.ts","../src/backends/webgl/conv_gpu_depthwise.ts","../src/backends/webgl/conv_packed_gpu_depthwise.ts","../src/backends/webgl/crop_and_resize_gpu.ts","../src/backends/webgl/cumsum_gpu.ts","../src/backends/webgl/decode_matrix_gpu.ts","../src/backends/webgl/decode_matrix_packed_gpu.ts","../src/backends/webgl/depth_to_space_gpu.ts","../src/backends/webgl/diag_gpu.ts","../src/backends/webgl/encode_float_gpu.ts","../src/backends/webgl/encode_float_packed_gpu.ts","../src/backends/webgl/encode_matrix_gpu.ts","../src/backends/webgl/encode_matrix_packed_gpu.ts","../src/backends/webgl/fft_gpu.ts","../src/backends/webgl/fill_gpu.ts","../src/backends/webgl/from_pixels_gpu.ts","../src/backends/webgl/from_pixels_packed_gpu.ts","../src/backends/webgl/gather_gpu.ts","../src/backends/webgl/gather_nd_gpu.ts","../src/backends/webgl/gpgpu_util.ts","../src/backends/webgl/gpgpu_context.ts","../src/backends/webgl/gpgpu_math.ts","../src/backends/webgl/im2col_packed_gpu.ts","../src/backends/webgl/lrn_gpu.ts","../src/backends/webgl/lrn_grad_gpu.ts","../src/backends/webgl/lrn_packed_gpu.ts","../src/backends/webgl/max_pool_backprop_gpu.ts","../src/backends/webgl/mulmat_packed_gpu.ts","../src/backends/webgl/multinomial_gpu.ts","../src/backends/webgl/onehot_gpu.ts","../src/backends/webgl/pack_gpu.ts","../src/backends/webgl/pad_gpu.ts","../src/backends/webgl/pad_packed_gpu.ts","../src/backends/webgl/pool_gpu.ts","../src/backends/webgl/reduce_gpu.ts","../src/backends/webgl/reshape_packed_gpu.ts","../src/backends/webgl/resize_bilinear_backprop_gpu.ts","../src/backends/webgl/resize_bilinear_gpu.ts","../src/backends/webgl/resize_bilinear_packed_gpu.ts","../src/backends/webgl/resize_nearest_neighbor_backprop_gpu.ts","../src/backends/webgl/resize_nearest_neighbor_gpu.ts","../src/backends/webgl/reverse_gpu.ts","../src/backends/webgl/reverse_packed_gpu.ts","../src/backends/webgl/scatter_gpu.ts","../src/backends/webgl/segment_gpu.ts","../src/backends/webgl/select_gpu.ts","../src/backends/webgl/slice_gpu.ts","../src/backends/webgl/slice_packed_gpu.ts","../src/backends/webgl/strided_slice_gpu.ts","../src/backends/webgl/texture_manager.ts","../src/backends/webgl/tile_gpu.ts","../src/backends/webgl/transpose_gpu.ts","../src/backends/webgl/transpose_packed_gpu.ts","../src/ops/selu_util.ts","../src/backends/webgl/unaryop_gpu.ts","../src/backends/webgl/unaryop_packed_gpu.ts","../src/backends/webgl/unpack_gpu.ts","../src/backends/webgl/backend_webgl.ts","../src/ops/segment_util.ts","../src/ops/unary_ops.ts","../src/ops/batchnorm.ts","../src/ops/logical_ops.ts","../src/ops/binary_ops.ts","../src/ops/compare.ts","../src/ops/segment_ops.ts","../src/ops/boolean_mask.ts","../src/ops/conv.ts","../src/ops/matmul.ts","../src/ops/reverse.ts","../src/ops/pool.ts","../src/ops/slice.ts","../src/ops/reduction_ops.ts","../src/ops/relu_ops.ts","../src/ops/transpose.ts","../src/ops/lrn.ts","../src/ops/norm.ts","../src/ops/lstm.ts","../src/ops/moving_average.ts","../src/ops/strided_slice.ts","../src/ops/topk.ts","../src/ops/scatter_nd.ts","../src/ops/spectral_ops.ts","../src/ops/sparse_to_dense.ts","../src/ops/sparse_to_dense_util.ts","../src/ops/gather_nd.ts","../src/ops/diag.ts","../src/ops/dropout.ts","../src/ops/dropout_util.ts","../src/ops/signal_ops.ts","../src/ops/in_top_k.ts","../src/ops/loss_ops.ts","../src/ops/linalg_ops.ts","../src/ops/image_ops.ts","../src/ops/fused_ops.ts","../src/backends/cpu/backend_cpu.ts","../src/ops/erf_util.ts","../src/platforms/platform_browser.ts","../src/platforms/platform_node.ts","../src/io/types.ts","../src/io/io_utils.ts","../src/io/router_registry.ts","../src/io/model_management.ts","../src/io/indexed_db.ts","../src/io/local_storage.ts","../src/io/browser_files.ts","../src/io/progress.ts","../src/io/weights_loader.ts","../src/io/http.ts","../src/io/passthrough.ts","../src/ops/confusion_matrix.ts","../src/ops/browser.ts","../src/serialization.ts","../src/test_util.ts","../src/version.ts","../src/webgl.ts","../src/optimizers/optimizer.ts","../src/optimizers/adadelta_optimizer.ts","../src/optimizers/adagrad_optimizer.ts","../src/optimizers/adam_optimizer.ts","../src/optimizers/adamax_optimizer.ts","../src/optimizers/sgd_optimizer.ts","../src/optimizers/momentum_optimizer.ts","../src/optimizers/rmsprop_optimizer.ts","../src/optimizers/optimizer_constructors.ts","../src/train.ts","../src/browser_util.ts","../src/index.ts","../src/data/compiled_api.ts","../src/operations/custom_op/register.ts","../src/operations/executors/utils.ts","../src/operations/op_list/arithmetic.ts","../src/operations/op_list/basic_math.ts","../src/operations/op_list/control.ts","../src/operations/op_list/convolution.ts","../src/operations/op_list/creation.ts","../src/operations/op_list/dynamic.ts","../src/operations/op_list/evaluation.ts","../src/operations/op_list/graph.ts","../src/operations/op_list/image.ts","../src/operations/op_list/logical.ts","../src/operations/op_list/matrices.ts","../src/operations/op_list/normalization.ts","../src/operations/op_list/reduction.ts","../src/operations/op_list/slice_join.ts","../src/operations/op_list/spectral.ts","../src/operations/op_list/transformation.ts","../src/operations/operation_mapper.ts","../src/operations/custom_op/node_value_impl.ts","../src/operations/executors/arithmetic_executor.ts","../src/operations/executors/basic_math_executor.ts","../src/executor/tensor_array.ts","../src/operations/executors/control_executor.ts","../src/operations/executors/convolution_executor.ts","../src/operations/executors/creation_executor.ts","../src/operations/executors/dynamic_executor.ts","../src/operations/executors/evaluation_executor.ts","../src/operations/executors/graph_executor.ts","../src/operations/executors/image_executor.ts","../src/operations/executors/logical_executor.ts","../src/operations/executors/matrices_executor.ts","../src/operations/executors/normalization_executor.ts","../src/operations/executors/reduction_executor.ts","../src/operations/executors/slice_join_executor.ts","../src/operations/executors/spectral_executor.ts","../src/operations/executors/transformation_executor.ts","../src/operations/operation_executor.ts","../src/executor/execution_context.ts","../src/executor/model_analysis.ts","../src/executor/graph_executor.ts","../src/executor/graph_model.ts","../node_modules/@tensorflow-models/posenet/dist/posenet.esm.js","../node_modules/chromotome/dist/index.umd.js","../node_modules/inherits/inherits_browser.js","../node_modules/node-libs-browser/node_modules/events/events.js","../node_modules/right-now/browser.js","src/performance-now.coffee","../node_modules/raf/index.js","../node_modules/raf-loop/index.js","../src/FileSaver.js","js/utils/engine.js","js/utils/camera.js","js/utils/utils.js","js/script.js","../node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["process","module","exports","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","Error","defaultClearTimeout","setTimeout","e","clearTimeout","runTimeout","fun","call","runClearTimeout","marker","queue","draining","currentQueue","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","nextTick","args","Array","arguments","i","push","Item","array","prototype","apply","title","env","argv","version","versions","noop","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","global","this","populateURLFlags","Environment","platformName","platform","console","warn","flagName","evaluationFn","setHook","flagRegistry","urlFlags","flagValue","set","flags","evaluateFlag","get","Object","value","assign","location","search","urlParams","getQueryParams","split","forEach","keyValue","_a","key","_this","toLowerCase","parseValue","queryString","params","replace","s","_i","t","decodeURIComponent","decodeParam","join","ENV","setEnvironmentGlobal","environment","shuffle","counter","temp","index","Math","random","clamp","min","x","max","nearestLargerEven","val","sum","arr","assert","expr","msg","assertShapesMatch","shapeA","shapeB","errorMessagePrefix","arraysEqual","assertNonNull","a","flatten","result","skipTypedArray","isArray","isTypedArray","sizeFromShape","shape","size","n1","n2","isInt","tanh","Infinity","e2x","exp","sizeToSquarishShape","width","ceil","sqrt","rightPad","repeat","repeatedTry","checkFn","delayFn","maxCounter","Promise","resolve","reject","tryCount","tryFn","nextBackoff","inferFromImplicitShape","shapeProd","implicitIdx","newShape","slice","parseAxisParam","axis","rank","map","every","ax","squeezeShape","keptDims","isEmptyArray","axes","sort","j","getTypedArrayFromDType","dtype","values","Float32Array","Int32Array","Uint8Array","getArrayFromDType","checkConversionForErrors","vals","num","isNaN","isFinite","isValidDtype","hasEncodingLoss","oldType","newType","bytesPerElement","bytesFromStringArray","bytes","isString","String","isBoolean","isNumber","inferDtype","isFunction","f","constructor","nearestDivisor","start","computeStrides","strides","toTypedArray","debugMode","noConversionNeeded","bool","round","toNestedArray","reduce","acc","c","createNestedArray","offset","ret","d","rest","makeOnesTypedArray","makeZerosTypedArray","now","assertNonNegativeIntegerDimensions","dimSize","Number","isInteger","encodeString","encoding","encode","decodeString","decode","b","r","diff","n","shuffledIndices","Uint32Array","path","requestInits","fetch","backendTimer","logger","Logger","Profiler","kernelName","inputs","timer","time","data","then","checkComputationForErrors","timing","extraInfo","getExtraProfileInfo","logKernelProfile","kernelMs","timeMs","util.rightPad","paddedName","toString","inputShapesDescription","name_1","inputShape","inputRank","log","FORMAT_LIMIT_NUM_VALS","FORMAT_NUM_FIRST_LAST_VALS","FORMAT_NUM_SIG_DIGITS","tensorToString","verbose","padPerCol","numCols","fill","valuesOrTuples","createComplexTuples","row","valToString","computeMaxSizePerColumn","valsLines","subTensorToString","isLast","storagePerElement","complexTuple","boolNumToString","firstValsSize","firstVals","from","lastVals","displayVals","subshape","substrides","stride","lines","end","sep","newLineSep","l","pad","parseFloat","toFixed","v","complexTuples","util.sizeFromShape","n_1","util.assert","util.getArrayFromDType","TensorBuffer","locs","locToIndex","locs_1","loc","i_1","floor","Tensor","make","trackerFn","opHandler","deprecationWarningFn","dataId","backend","id","nextTensorId","rankType","registerTensor","write","backendVals","util.isString","util.encodeString","throwIfDisposed","as1D","reshape","rows","columns","depth","depth2","depth3","cast","buffer","dataSync","read","util.decodeString","readSync","isDisposed","disposeTensor","isDisposedInternal","asType","print","expandDims","exclusive","reverse","cumsum","squeeze","clone","onValue","offValue","oneHot","reps","tile","indices","gather","transposeA","transposeB","matMul","dot","ord","keepDims","norm","begin","numOrSizeSplits","stack","unstack","paddings","constantValue","mean","variance","varianceEpsilon","scale","batchNorm","all","any","logSumExp","prod","argMin","argMax","add","addStrict","atan2","sub","subStrict","pow","powStrict","mul","mulStrict","div","floorDiv","divStrict","minimum","minimumStrict","maximum","maximumStrict","mod","modStrict","squaredDifference","squaredDifferenceStrict","perm","transpose","notEqual","notEqualStrict","less","lessStrict","equal","equalStrict","lessEqual","lessEqualStrict","greater","greaterStrict","greaterEqual","greaterEqualStrict","logicalAnd","logicalOr","logicalNot","logicalXor","condition","where","neg","sign","isInf","expm1","log1p","rsqrt","square","reciprocal","abs","clipByValue","relu","elu","selu","alpha","leakyRelu","prelu","sigmoid","logSigmoid","softplus","zerosLike","onesLike","sin","cos","tan","asin","acos","atan","sinh","cosh","asinh","acosh","atanh","erf","step","dim","softmax","logSoftmax","newShape2D","alignCorners","image","resizeBilinear","resizeNearestNeighbor","filter","dataFormat","dilation","dimRoundingMode","conv1d","dilations","conv2d","outputShape","conv2dTranspose","depthwiseConv2d","depthwiseFilter","pointwiseFilter","separableConv2d","filterSize","avgPool","maxPool","radius","bias","beta","localResponseNormalization","windowShape","poolingType","padding","dilationRate","pool","trainable","Variable","variable","segmentIds","numSegments","unsortedSegmentSum","blockShape","crops","batchToSpaceND","spaceToBatchND","k","sorted","topk","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","stridedSlice","blockSize","depthToSpace","spectral","fft","ifft","rfft","irfft","defineProperty","Symbol","hasInstance","instance","initialValue","_super","nextVariableId","registerVariable","ex","tslib_1.__extends","newValue","util.arraysEqual","disposeVariable","Function","Rank","UpcastInt32AndMap","UpcastBoolAndMap","UpcastFloat32AndMap","UpcastComplex64AndMap","upcastTypeMap","float32","int32","complex64","upcastType","typeA","typeB","sumOutType","type","makeTypesMatch","assertTypesMatch","getTensorsInContainer","list","walkTensorContainer","container","seen","obj","iterable","has","Set","GLOBAL","tensor","tensorList","WeakMap","newBytes","newTensors","peakBytes","kernels","EngineState","variableName","registeredVariables","dispose","state","Engine","pendingBackendInit","backendInstance","sortedBackends","getSortedBackends","backendName","initializeBackend","success","setBackend","keys","registryFactory","registry","factory","priority","_b","_c","profiler","registryFactoryEntry","promiseId_1","pendingBackendInitId","catch","err","message","asyncInit","destBackend","nameOrFn","fn","scopedRun","startScope","endScope","error","res","y","addTapeNode","dy","toFloat","forwardFunc","backwardsFunc","saved","isTapeOn","scopeName","activeScope","saveFunc","tensors","keep","startingBytecount","numBytes","startingNumTensors","numTensors","kernelDepth","getBool","profileKernel","tapeNode","nextTapeNodeId","outputs","gradient","activeTape","profiling","activeProfile","bytesAdded","totalBytesSnapshot","tensorsAdded","totalTensorsSnapshot","inputShapes","item","refCount","tensorInfo","numStringTensors","numDataBuffers","util.bytesPerElement","register","track","info","disposeData","delete","varName","memory","unreliable","reasons","query","startBytes","startNumTensors","gradientDepth","gradientsFunc","inputsMap","input","idx","resMap","kept","scopeInfo","nextScopeId","scopeStack","tensorsToTrackInParent","tensorsToTrackInParentSet","oldScope","pop","scopeId","xs","allowNoGradients","startTape","endTape","tidy","filteredTape","tape","tensorsFromX","nodesFromX","nodeInputs","node","inputName","anyInputFromX","output","tensorsLeadToY","nodesToY","prunedInputs","nodeInput","prunedNode","getFilteredNodesXToY","accumulatedGradientMap","tensorAccumulatedGradientMap","dys","o","gradTensor","util.makeZerosTypedArray","inputGradients","dx","curGradient","backpropagateGradients","grads","util.isFunction","inputMap","runKernel","_","save","gradFunc","gradRes","gradMap","grad","srcBackend","pixels","numChannels","fromPixels","timingInfo","wallMs","reset","ENGINE","ns","window","self","getGlobalNamespace","_tfengine","getOrMakeEngine","isBrowser","document","WorkerGlobalScope","registerFlag","debugValue","device_util.isBrowser","navigator","userAgent","test","vendor","TextureUsage","PhysicalTextureType","contexts","WEBGL_ATTRIBUTES","antialias","premultipliedAlpha","preserveDrawingBuffer","stencil","failIfMajorPerformanceCaveat","setWebGLContext","webGLVersion","gl","getWebGLContext","canvas","createCanvas","addEventListener","ev","preventDefault","getContext","getWebGLRenderingContext","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","OffscreenCanvas","createElement","getUnpackedMatrixTextureShapeWidthHeight","getDenseTexShape","util.sizeToSquarishShape","getPackedMatrixTextureShapeWidthHeight","getTextureConfig","textureHalfFloatExtension","internalFormatFloat","internalFormatHalfFloat","internalFormatPackedHalfFloat","internalFormatPackedFloat","textureFormatFloat","downloadUnpackNumChannels","defaultNumChannels","textureTypeHalfFloat","textureTypeFloat","glany","getNumber","R32F","R16F","RGBA16F","RGBA32F","RED","HALF_FLOAT","FLOAT","RGBA","HALF_FLOAT_OES","downloadTextureFormat","callAndCheck","func","returnValue","getError","NO_ERROR","getWebGLErrorMessage","checkWebGLError","MIN_FLOAT16","MAX_FLOAT16","canBeRepresented","status","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","getExtensionOrThrow","debug","extensionName","throwIfNull","getExtension","createVertexShader","vertexShaderSource","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createFragmentShader","fragmentShaderSource","fragmentShader","FRAGMENT_SHADER","shaderInfoLog","lineNumberRegexResult","lineNumberRegex","exec","lineNumber","shaderLines","linesWithLineNumbers","line","maxLineLength","beforeErrorLines","errorLine","afterErrorLines","logShaderSourceAndInfoLog","MAX_TEXTURE_SIZE","MAX_TEXTURES_IN_SHADER","createProgram","linkProgram","program","getProgramParameter","LINK_STATUS","getProgramInfoLog","validateProgram","VALIDATE_STATUS","createStaticVertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","createStaticIndexBuffer","ELEMENT_ARRAY_BUFFER","createTexture","validateTextureSize","height","maxTextureSize","requested","createFramebuffer","bindVertexBufferToProgramAttribute","attribute","arrayEntriesPerItem","itemStrideInBytes","itemOffsetInBytes","getAttribLocation","vertexAttribPointer","enableVertexAttribArray","bindTextureUnit","texture","textureUnit","validateTextureUnit","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","getProgramUniformLocationOrThrow","uniformName","getUniformLocation","getProgramUniformLocation","bindTextureToProgramUniformSampler","uniformSamplerLocation","uniform1i","bindColorTextureToFramebuffer","framebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","unbindColorTextureFromFramebuffer","validateFramebuffer","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","getFramebufferErrorMessage","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","returnTOrNull","failureMessage","tOrNull","maxTextureUnit","MAX_COMBINED_TEXTURE_IMAGE_UNITS","glTextureUnit","getBatchDim","dimsToSkip","getRowsCols","getShapeAs3D","shapeAs3D","getTextureShapeFromLogicalShape","logShape","isPacked","maxTexSize","util.nearestLargerEven","squeezeResult","util.squeezeShape","batchDim","cols","isEven","isReshapeFree","shape1","shape2","shape1Cols","shape2Cols","getWebGLMaxTextureSize","getParameter","getMaxTexturesInShader","MAX_TEXTURE_IMAGE_UNITS","getWebGLDisjointQueryTimerVersion","hasExtension","isWebGLVersionEnabled","isCapableOfRenderingToFloatTexture","createFloatTextureAndBindToFramebuffer","isDownloadFloatTextureEnabled","texConfig","texImage2D","frameBuffer","isFrameBufferComplete","deleteTexture","deleteFramebuffer","createHalfFloatTextureAndBindToFramebuffer","isWebGLFenceEnabled","fenceSync","viewport","scissor","enableProdMode","enableDebugMode","disableDeprecationWarnings","deprecationWarn","disposeVariables","profile","ready","getBackend","removeBackend","findBackend","findBackendFactory","registerBackend","setPlatform","inferShape","firstElem","deepAssertShapeConsistency","subShape","assertDtype","expectedDtype","actualDType","argName","functionName","convertToTensor","parseAsDtype","inferredDtype","indexOf","inferredShape","convertToTensorArray","arg","axesAreInnerMostDims","combineLocations","outputLoc","reduceLoc","outIdx","reduceIdx","computeOutAndReduceShapes","aShape","outShape","expandShapeToKeepDim","assertAxesAreInnerMostDims","getAxesPermutation","getUndoAxesPermutation","getInnerMostAxes","numAxes","assertParamsConsistent","shapes","firstShape","computeOutShape","op","opName","endsWith","substring","f2","configurable","webgl_util.isWebGLVersionEnabled","webgl_util.getWebGLMaxTextureSize","webgl_util.getMaxTexturesInShader","webgl_util.getWebGLDisjointQueryTimerVersion","opera","substr","webgl_util.isCapableOfRenderingToFloatTexture","webgl_util.isDownloadFloatTextureEnabled","webgl_util.isWebGLFenceEnabled","complex","complex_","real","imag","$real","$imag","util.assertShapesMatch","real_","$input","imag_","makeTensor","providedSize_1","inferredSize_1","inferred","flatDimsDontMatch","scalar","tensor1d","tensor2d","tensor3d","tensor4d","tensor5d","tensor6d","ones","real_1","imag_1","zeros","real_2","imag_2","linspace","stop","range","onesLike_","$x","zerosLike_","concat_","$tensors","sizeSplits","concat1d","concat1d_","concat2d","concat2d_","concat3d","concat3d_","concat4d","concat4d_","split_","splitSizes","define","Alea","seed","me","mash","h","charCodeAt","next","s0","s1","s2","copy","impl","opts","xg","prng","double","quick","amd","alea","XorGen","strseed","z","w","xor128","xorwow","X","init","Date","xorshift7","limit","xor4096","tychei","math","nodecrypto","chunks","rngname","startdenom","significance","overflow","mask","seedrandom","options","callback","shortseed","mixkey","prop","typ","entropy","tostring","out","randomBytes","crypto","msCrypto","getRandomValues","browser","plugins","screen","autoseed","arc4","ARC4","g","S","pass","is_math_call","keylen","count","smear","stringseed","fromCharCode","require","sr","stdDeviation","truncated","stdDev","nextVal","NaN","upper","lower","seedValue","seedrandom.alea","MPRandGauss","resultX","resultY","isValid","v1","v2","isValidTruncated","convertValue","randu","randn","RandGamma","x2","v0","u","nextValue","canReturnFloat","UniformRandom","util.assertNonNegativeIntegerDimensions","batchToSpaceND_","cast_","util.isValidDtype","clone_","cumsum_","permutation","permutedX","permutedAxis","depthToSpace_","inputHeight","inputWidth","inputDepth","expandDims_","splice","eye","eye_","numRows","numColumns","batchShape","buff","toTensor","as2D","multinomial","multinomial_","logits","numSamples","normalized","$logits","numOutcomes","origRank","logits2D","oneHot_","$indices","pad_","p","pad1d","pad1d_","pad2d","pad2d_","pad3d","pad3d_","pad4d","pad4d_","rand","rand_","randFunction","randomNormal","randomNormal_","randGauss","randomGamma","randomGamma_","rgamma","randomUniform","randomUniform_","minval","maxval","reshape_","util.inferFromImplicitShape","spaceToBatchND_","squeeze_","stack_","expandedTensors","tile_","xGrad","truncatedNormal","truncatedNormal_","unstack_","setdiff1dAsync","$y","xVals","yVals","ySet","outputSize","getReshaped","batchToSpace","reshaped","spatialLength","getPermuted","reshapedRank","blockShapeRank","permuted","permutedBeforeBatch","permutedAfterBatch","getReshapedPermuted","reshapedPermuted","getSliceBeginCoords","sliceBeginCoords","getSliceSize","uncroppedShape","sliceSize","prepareAndValidate","indicesShape","sliceRank","nResult","resultShape","PARALLELIZE_THRESHOLD","computeOptimalWindowSize","inSize","validateInput","updates","sliceDim","shapeError","validateUpdateShape","calculateShapes","totalNd","safeSliceDim","numUpdates","maskToAxes","startForAxis","startIndices","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","axisSize","util.clamp","stopForAxis","stopIndices","isSliceContinous","firstNonOneAxis","computeFlatOffset","flatOffset","$dy","checkGrads","$args","valueAndGrad","valueAndGrads","gradients","variableGrads","varList","specifiedVarList","specifiedNonTrainable","originalVarCount","some","namedGrads","customGrad","softmax_","lse","dyTimesY","logSoftmax_","xMax","shifted","dataMover","DataStorage","moveData","KernelBackend","floatPrecision","convInfo","activation","preluActivationWeights","dY","newHeight","newWidth","newHEight","inputImage","outputImage","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","boxIndex","cropSize","method","extrapolationValue","sparseIndices","sparseValues","defaultValue","getBroadcastDims","inShape","inRank","dims","unshift","getReductionAxes","inDim","outAxis","outDim","assertAndGetBroadcastShape","computePool2DInfo","roundingMode","filterShape","filterHeight","filterWidth","computeConv2DInfo","computePool3DInfo","$dataFormat","filterDepth","computeConv3DInfo","depthwise","batchSize","inHeight","inWidth","inChannels","filterChannels","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","getEffectiveFilterSize","effectiveFilterWidth","_d","padInfo","outHeight","outWidth","padType","top","bottom","left","right","fieldSize","zeroPad","computeDefaultPad","inputRows","inputCols","outputRows","conditionalRound","util.isInt","outputCols","computeOutputShape2D","padAlongHeight","padAlongWidth","top_1","outChannels","inDepth","strideDepth","dilationDepth","effectiveFilterDepth","outDepth","front","back","outputDepths","computeOutputShape4D","padAlongDepth","top_2","effectiveFieldSize","parseTupleParam","param","parse3TupleParam","tupleValuesAreOne","dimA","dimB","dimC","eitherStridesOrDilationsAreOne","convertConv2DDataFormat","castTensor","zerosTensor","floatX","int","zero","reshapeTensor","linspaceImpl","mergeRealAndImagArrays","getComplexWithIndex","assignToTypedArray","exponent","inverse","PI","nonMaxSuppressionImpl","candidates","score","c1","c2","selected","ignoreCandidate","intersectionOverUnion","iCoord","subarray","jCoord","yminI","xminI","ymaxI","xmaxI","yminJ","xminJ","ymaxJ","xmaxJ","areaI","areaJ","intersectionYmin","intersectionXmin","intersectionYmax","intersectionXmax","intersectionArea","xBuf","newLoc","indexToLoc","originalLoc","originalIndex","topkImpl","xShape","xDtype","lastDim","batch","allTopKVals","allTopKIndices","valAndInd","outOffset","topKVals","topKIndices","whereImpl","condShape","condVals","inBuffer","variableNames","snippets","operation","userCode","reduceInfo","firstPass","windowSize","outSize","compOp","indexSnippet","getVecChannels","getChannels","getGlslDifferences","varyingVs","varyingFs","texture2D","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","getLogicalCoordinatesFromFlatIndex","coords","util.computeStrides","getFlatIndexFrom3D","ENCODE_FLOAT_SNIPPET","makeShader","inputsInfo","usesPackedTextures","prefixSnippets","shapeInfo","logicalShape","isUniform","outputSamplingSnippet","floatTextureSetOutputSnippet","inputPrefixSnippet","inputSamplingSnippet","inInfo","outShapeInfo","getPackedSamplerFromInInfo","getSamplerFromInInfo","inputInfo","coordsSnippet","texName","texFuncSnippet","charAt","toUpperCase","funcName","outRank","broadcastDims","getCoordsDataType","rankDiff","fields","unpackedCoordsSnippet","isInputScalar","isOutputScalar","getPackedSamplerAtOutputCoords","outTexShape","texShape","inTexShape","getSamplerAtOutputCoords","getInputSamplingSnippet","glsl","floatTextureSampleSnippet","getFloatTextureSampleSnippet","shaderPrefix","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","getShaderPrefix","packedTexShape","getOutputPacked1DCoords","texelsInLogicalRow","getOutputPacked2DCoords","texelsInBatch","texelsInBatchN","batches","getOutputPackedNDCoords","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutput1DCoords","getOutput2DCoords","coordsFromIndexSnippet","shader_util.getLogicalCoordinatesFromFlatIndex","getOutput4DCoords","getOutput5DCoords","getOutput6DCoords","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","texNumR","texNumC","tNumR","tNumC","getFlatOffsetUniformName","getSamplerScalar","getUniformSampler","getSampler1D","texNumR_1","texNumC_1","squeezedShape","newInputInfo","squeezeInputInfo","getSqueezedParams","getSampler2D","stride0","stride1","getSampler3D","stride2","getSampler4D","stride3","getSampler5D","stride4","getSampler6D","getPackedSampler1D","valuesPerRow","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","JSON","parse","stringify","sourceLocSetup","sourceRank","sourceLocDType","channels","inChannel","intChannels","srcRCoords","srcGCoords","srcBCoords","srcACoords","fetchCandidateIdx","fetchValue","getBestIndicesAChannelSnippet","padTop","padLeft","avgMultiplier","padFront","meanShape","varianceShape","offsetShape","scaleShape","broadcast_util.assertAndGetBroadcastShape","offsetSnippet","scaleSnippet","COMPLEX_MULTIPLY","bShape","ADD","SUB","MUL","PRELU","checkOutOfBounds","checkOutOfBoundsString","ClipProgram","gpgpu","webGLProgram","minLoc","getUniformLocationNoThrow","maxLoc","uniform1f","ClipPackedProgram","concat_util.computeOutShape","offsets","shift","lastIndex","lastShift","channel","lastChannels","allChannels","getValueSnippet","shift_1","isChannelsLast","rowDim","colDim","channelDim","channelMul","addBias","hasPreluActivationWeights","inputDepthNearestVec4","inputDepthVec4Remainder","activationSnippet","applyActivationSnippet","addBiasSnippet","xNumRows","xNumCols","texelsAcross","mainLoop","texelC","nextTexelOffset","imageShape","boxShape","imageHeight","imageWidth","numBoxes","cropHeight","cropWidth","methodId","inputHeightFloat","inputWidthFloat","heightRatio","heightScale","inY","widthRatio","widthScale","inX","finalDim","comparator","getFinalCoord","getCoords","getHeightCoordString","getWidthCoordString","getDepthCoordString","getOutputDepthSize","getInputSamplingString","DepthToSpaceProgram","inputIsUnsignedByte","shader_util.getFlatIndexFrom3D","col","COMPLEX_FFT","innerDim","exponentMultiplierSnippet","resultDenominator","FillProgram","valueLoc","indicesLength","sourceCoords","currentCoords","getSourceCoords","stridesType","strideString","webgl_util.createVertexShader","createVertexBuffer","webgl_util.createStaticVertexBuffer","createIndexBuffer","webgl_util.createStaticIndexBuffer","Uint16Array","createAndConfigureTexture","internalFormat","textureFormat","textureType","webgl_util.validateTextureSize","webgl_util.createTexture","tex2d","webgl_util.callAndCheck","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","createFloat32MatrixTexture","textureConfig","createFloat16MatrixTexture","createUnsignedBytesMatrixTexture","UNSIGNED_BYTE","createPackedMatrixTexture","createFloat16PackedMatrixTexture","bindVertexProgramAttributeStreams","vertexBuffer","webgl_util.bindVertexBufferToProgramAttribute","uploadDenseMatrixToTexture","dataForUpload","texelDataType","uploadPixelDataToTexture","createBufferFromOutputTexture","gl2","PIXEL_PACK_BUFFER","bufferSizeBytes","bytesPerFloat","STREAM_READ","readPixels","downloadFloat32MatrixFromBuffer","downloadTarget","getBufferSubData","downloadByteEncodedFloatMatrixFromOutputTexture","downloadPackedMatrixFromBuffer","physicalRows","physicalCols","tex_util.getPackedRGBAArraySizeFromMatrixShape","downloadMatrixFromPackedOutputTexture","packedRGBA","glVersion","textureFloatExtension","webgl_util.getExtensionOrThrow","colorBufferFloatExtension","colorBufferHalfFloatExtension","webgl_util.hasExtension","gpgpu_util.createVertexBuffer","indexBuffer","gpgpu_util.createIndexBuffer","webgl_util.createFramebuffer","tex_util.getTextureConfig","GPGPUContext","disposed","outputTexture","finish","deleteBuffer","gpgpu_util.createFloat32MatrixTexture","gpgpu_util.createFloat16MatrixTexture","gpgpu_util.createUnsignedBytesMatrixTexture","gpgpu_util.uploadPixelDataToTexture","gpgpu_util.uploadDenseMatrixToTexture","gpgpu_util.createFloat16PackedMatrixTexture","gpgpu_util.createPackedMatrixTexture","webgl_util.unbindColorTextureFromFramebuffer","downloadMatrixDriver","gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture","gpgpu_util.downloadPackedMatrixFromBuffer","gpgpu_util.downloadFloat32MatrixFromBuffer","bindTextureToFrameBuffer","gpgpu_util.createBufferFromOutputTexture","unbindTextureToFrameBuffer","fenceContext","createFence","pollFence","isFencePassed","gl2_1","sync_1","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","gpgpu_util.downloadMatrixFromPackedOutputTexture","webgl_util.createFragmentShader","gpgpu_util.createVertexShader","webgl_util.createProgram","attachShader","webgl_util.linkProgram","webgl_util.validateProgram","vertexAttrsAreBound","setProgram","gpgpu_util.bindVertexProgramAttributeStreams","deleteProgram","useProgram","shouldThrow","webgl_util.getProgramUniformLocationOrThrow","webgl_util.getProgramUniformLocation","inputMatrixTexture","uniformLocation","throwIfNoProgram","webgl_util.bindTextureToProgramUniformSampler","outputMatrixTexture","setOutputMatrixTextureDriver","outputPackedMatrixTexture","startRow","startColumn","setOutputMatrixWriteRegionDriver","webgl_util.validateFramebuffer","debugValidate","drawElements","TRIANGLES","UNSIGNED_SHORT","disjointQueryTimerExtension","getQueryTimerExtension","ext_1","getQueryTimerExtensionWebGL2","query_1","createQuery","TIME_ELAPSED_EXT","ext","getQueryTimerExtensionWebGL1","createQueryEXT","beginQueryEXT","endQueryEXT","ext_2","util.repeatedTry","getQueryTime","queryTimerVersion","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","available","QUERY_RESULT_AVAILABLE","disjoint","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","addItemToPoll","isDone","linearSearchLastTrue","itemsToPoll","isDoneFn","resolveFn","pollItems","webgl_util.bindColorTextureToFramebuffer","downloadAndDecode","outputMatrixTextureMaybePacked","validateBinaryAndProgram","shapeInfos","texShapeA","texShapeB","texData","itemsPerBlockRow","unrolled","powOperator","rad","maxD","basis","depthRadius","hasPreluActivation","sharedDim","sharedDimensionPacked","aSample","bSample","aSwizzle","bSwizzle","MultinomialProgram","seedLoc","numIndices","outOfBoundsCondition","cond","getOutOfBoundsCondition","setup","innerDims","getSetup","coord","getSourceCoordsArr","getOutput","unpackedCoords","source","cLimit","componentSetup","paddingArea","poolType","computePositions","isAvgPool","initializationValue","filterWidthNearestVec4","filterWidthVec4Remainder","updateSnippet","reduceType","compareOp","windowSizeNearestVec4","windowSizeVec4Remainder","vecType","thisRC","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","invHeightScale","invWidthScale","winHeight","winWidth","oldHeight","oldWidth","effectiveInSize","effectiveOutSize","roundBase","inCoords","getInCoord","nextColumn","nextRow","getChannel","inCoordsArray","channels1","getR","getG","getB","getA","updateSize","indicesRank","updatesRank","summingDupeIndex","indicesString","indicesSnippet","updatesString","updatesSnippet","segOpInfo","segOpType","checkValueOutOfBounds","checkSegmentIdOutOfBounds","cRank","cCoords","abCoords","cCoordVars","abCoordVars","destSize","body","uniformPart","SliceProgram","startLoc","uniform1iv","sourceLoc","upperRow","lowerRow","SlicePackedProgram","inputDtype","newCoords","outputAxis_1","TextureManager","shapeRC","usage","newTexture","physicalTexType","getPhysicalFromLogicalTextureType","shapeKey","getKeyFromTextureShape","freeTextures","usedTextures","numFreeTextures","numUsedTextures","newTexture_1","PACKED_2X2_FLOAT32","PACKED_2X2_FLOAT16","UNPACKED_FLOAT32","UNPACKED_FLOAT16","PACKED_4X1_UNSIGNED_BYTE","logicalTexType","texList","texIndex","logEnabled","total","tex","deleteMatrixTexture","UPLOAD","RENDER","getPhysicalTextureForRendering","DOWNLOAD","PIXELS","shapeRowsCol","newDim","switched","originalOrder","switchedCoords","getSwitchedCoords","outputOrder","switchedOrder","getc","SELU_SCALEALPHA","SELU_SCALE","opSnippet","CHECK_NAN_SNIPPET","LINEAR","ABS","RELU","ELU","SELU","selu_util.SELU_SCALEALPHA","selu_util.SELU_SCALE","NEG","CEIL","FLOOR","EXP","EXPM1","SIN","COS","ATAN","ACOSH","ATANH","CLONE","binaryCaches","mapActivationToShaderProgram","packed","unary_packed_op.LINEAR","unary_op.LINEAR","unary_packed_op.RELU","unary_op.RELU","unary_packed_op.ELU","unary_op.ELU","binaryop_packed_gpu.PRELU","binaryop_gpu.PRELU","BEFORE_PAGING_CONSTANT","WeakSet","binaryCache","gpgpuCreatedLocally","textureManager","numMBBeforeWarning","devicePixelRatio","MathBackendWebGL","isCanvas","HTMLCanvasElement","isPixelData","isImageData","ImageData","isVideo","HTMLVideoElement","isImage","HTMLImageElement","fromPixels2DContext","drawImage","tempPixelHandle","makeTensorHandle","getTexture","FromPixelsPackedProgram","packedOutput","makePackedTensor","compileAndRun","FromPixelsProgram","webgl_util.canBeRepresented","releaseGPUData","complexTensors","UnaryOpPackedProgram","unary_op.CLONE","UnaryOpProgram","convertAndCacheOnCPU","shouldTimeProgram","activeTimers","util.now","getValuesFromTexture","downloadWaitMs","pendingRead","subscribers_1","tmpDownloadTarget","tmpData","createBufferFromTexture","tex_util.getDenseTexShape","createAndWaitForFence","ps","realValues","imagValues","dTypeVals","subscribers","pendingDisposal","tmpTarget_1","tmpData_1","vals_1","downloadMatrixFromPackedTexture","shouldUsePackedProgram","webgl_util.getShapeAs3D","tmpTarget","EncodeFloatPackedProgram","EncodeFloatProgram","oldActiveTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","util.flatten","flattenedActiveTimerNames","uploadWaitMs","util.sum","ms","numBytesInGPU","startMs","endMs","waitForQueryAndGetTime","timerQuery","origDataId","dataRefCount","computeBytes","releaseTexture","uploadToGPU","cpuBackend","sizeThreshold","getCPUBackend","makeOutputArray","shouldExecuteOnCPU","isContinous","slice_util.isSliceContinous","customSetup","getCustomSetupFunc","shallowSlice","xTexData","newTexData","slice_util.computeFlatOffset","slice_util.computeOutShape","StridedSliceProgram","ReversePackedProgram","ReverseProgram","reals","imags","midIndex","leftSide","rightSide","program_1","ConcatPackedProgram","tensors2D","ConcatProgram","packedUnaryOp","unary_op.NEG","outerShapeA","outerShapeB","a3D","as3D","b3D","multiply","MatMulPackedProgram","hasBias","fusedActivation","aData","bData","realProgram","BinaryOpComplexProgram","binaryop_complex_gpu.COMPLEX_MULTIPLY","imagProgram","makeComplexComponentTensorHandle","complex_1","packedBinaryOp","binaryop_gpu.MUL","BinaryOpProgram","batchNormPackedProgram","BatchNormPackedProgram","batchNormProgram","BatchNormProgram","LRNPackedProgram","LRNProgram","LRNGradProgram","decodedData","TileProgram","PadPackedProgram","PadProgram","TransposePackedProgram","TransposeProgram","GatherProgram","array_ops_util.getReshaped","array_ops_util.getPermuted","array_ops_util.getReshapedPermuted","array_ops_util.getSliceBeginCoords","array_ops_util.getSliceSize","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","flattenShape","reduce_util.computeOptimalWindowSize","ReduceProgram","bestIndicesA","ArgMinMaxProgram","argReduce","ArgMinMaxPackedProgram","argReducePacked","axis_util.assertAxesAreInnerMostDims","a2D","outputDType","axis_util.getAxesPermutation","axis_util.getInnerMostAxes","segment_util.computeOutShape","segOpCompute","axis_util.getUndoAxesPermutation","done","segment_util.segOpComputeOptimalWindowSize","SegmentOpProgram","argMinMaxReduce","CumSumProgram","SelectProgram","BinaryOpPackedProgram","complexSeparableBinaryOp","binaryop_gpu.ADD","complexTensor","complexPart","addN","d1","d2","usePackedOp","AddNPackedProgram","AddNProgram","binaryop_gpu.SUB","subtract","unary_op.CEIL","unary_op.FLOOR","unary_op.EXP","unary_op.EXPM1","unary_op.SELU","unary_op.ABS","xData","ComplexAbsProgram","unary_op.SIN","unary_op.COS","unary_op.ATAN","unary_op.ACOSH","unary_op.ATANH","unary_op.STEP","sharedMatMulDim","outerShapeX","outerShapeFilter","batchMatMulWillBeUnpacked","reshapeWillBeExpensive","targetShape_1","xReshaped_1","filterReshaped_1","fusedBatchMatMul","targetShape","xReshaped","originalXTexDataShape","webgl_util.isReshapeFree","filterReshaped","pointwiseConv","pointwiseConvTexData","x2ColShape","xSqueezed","w2Row","im2ColProgram","Im2ColPackedProgram","im2Col","matmulProgram","product","conv2dByMatMul","conv2dWithIm2Row","Conv2DProgram","Conv2DDerInputProgram","Conv2DDerFilterProgram","DepthwiseConvPacked2DProgram","DepthwiseConv2DProgram","DepthwiseConv2DDerInputProgram","DepthwiseConv2DDerFilterProgram","Conv3DProgram","Conv3DDerInputProgram","Conv3DDerFilterProgram","Pool2DProgram","maxPoolPositionsProgram","maxPoolPositions","maxPoolBackPropProgram","MaxPool2DBackpropProgram","avgPoolBackpropProgram","AvgPool2DBackpropProgram","backend_util.castTensor","outIndex","Pool3DProgram","avgPool3dBackpropProgram","AvgPool3DBackpropProgram","maxPool3dPositionsProgram","maxPool3dPositions","maxPool3dBackPropProgram","MaxPool3DBackpropProgram","backend_util.reshapeTensor","packedReshape","ResizeBilinearPackedProgram","ResizeBilinearProgram","ResizeBilinearBackpropProgram","ResizeNearestNeighborProgram","ResizeNearestNeigborBackpropProgram","probs","OneHotProgram","DiagProgram","CropAndResizeProgram","outputHeight","outputWidth","outputDepth","flattenIndices","flattenX","ScatterProgram","fftImpl","FFTProgram","fft_gpu.COMPLEX_FFT","numSlices","GatherNDProgram","backend_util.linspaceImpl","packedTensor","UnpackProgram","PackProgram","afterShape","inputAs3D","webgl_util.getBatchDim","webgl_util.getRowsCols","afterShapeAs3D","ReshapePackedProgram","denseTexShape","DecodeMatrixPackedProgram","DecodeMatrixProgram","preventEagerUnpackingOfOutput","inputsData","uniformValues","unpackTensor","packTensor","savedInput","outputData","keyInputs","hasOffset","keyUserCode","gpgpu_math.makeShaderKey","binary","getAndSaveBinary","inputInfos","inShapeInfos","shader_compiler.makeShader","infLoc","nanLoc","uniformLocations","gpgpu_math.compileProgram","startTimer","outTex","setOutputPackedMatrixTexture","setOutputMatrixTexture","varLoc","varOffsetLoc","uniform1fv","setInputMatrixTexture","executeProgram","gpgpu_math.runProgram","endTimer","getBinary","remove","floatPrecisionValue","debugFlag","underflowCheckValue","webgl_util.getTextureShapeFromLogicalShape","isByteArray","EncodeMatrixPackedProgram","EncodeMatrixProgram","tempDenseInputHandle","encodedOutputTarget","outputTexData","acquireTexture","float32Values","float32ToTypedArray","texType","warnedAboutMemory","mb","abs_","complexAbs","acos_","acosh_","asin_","asinh_","atan_","atanh_","ceil_","clipByValue_","clipValueMin","clipValueMax","clip","cos_","cosh_","erf_","exp_","expm1_","floor_","log_","log1p_","logSigmoid_","neg_","reciprocal_","round_","rsqrt_","sigmoid_","sign_","isNaN_","isInf_","isFinite_","sin_","sinh_","softplus_","sqrt_","square_","step_","tan_","tanh_","batchNorm2d_","$scale","$offset","$mean","$variance","batchNorm_","batchNorm3d_","batchNorm4d_","x4D","as4D","batchNormalization","batchnormReshape4D","scaleValue","reductionAxes","tileShape","xMinusMean","dyTimesScaleValue","oneOverSqrtVariance","minusHalfRCube","meanDer","varianceDer","xMinusMean2TimesRsqrt","scaleDer","offsetDer","warnDeprecation","batchNormalization2d","batchNormalization2d_","batchNormalization3d","batchNormalization3d_","batchNormalization4d","batchNormalization4d_","batchNormalization_","batchNorm2d","batchNorm3d","batchNorm4d","logicalAnd_","$a","$b","logicalNot_","logicalOr_","logicalXor_","where_","$condition","select","whereAsync","add_","reduceAxes","broadcast_util.getReductionAxes","addN_","firstTensor","ders","addStrict_","atan2_","div_","realDivide","tmp","divStrict_","floorDiv_","maximum_","toInt","maximumStrict_","minimum_","minimumStrict_","mod_","modStrict_","mul_","mulStrict_","pow_","base","$base","$exp","expFloat","logBase","powStrict_","squaredDifference_","two","squaredDifferenceStrict_","sub_","subStrict_","equal_","equalStrict_","greater_","greaterEqual_","greaterEqualStrict_","greaterStrict_","less_","lessEqual_","lessEqualStrict_","lessStrict_","notEqual_","notEqualStrict_","arrayRange","arrayConcat","arrays","gather_","collectGatherOpShapeInfo","paramsShape","indicesSize","outerShape","outerDims","innerShape","outerAxesIndices","innerAxesIndices","valuesShape","reshapedIndices","transposeDims","valuesTranspose","paramsGrad","invertTransposeDims","unsortedSegmentSum_","$segmentIds","zeroClippedIndices","gathered","isPositive","numIters","zeroSlice","gatherDropNegatives","booleanMaskAsync","$tensor","$mask","axisFrom","maskDim","tensorShape","leadingSize","targetTensorShape","reshapedTensor","reshapedMask","positivePositions","conv2dDerInput_","xShape4D","dy4D","reshapedTo4D","conv_util.convertConv2DDataFormat","conv_util.computeConv2DInfo","conv2dDerInput","ddx","conv2dDerFilter","conv2dDerFilter_","conv3dDerInput_","xShape5D","dy5D","reshapedTo5D","as5D","conv_util.computeConv3DInfo","conv3dDerInput","conv1d_","$filter","x3D","reshapedTo3D","conv_util.eitherStridesOrDilationsAreOne","filter4D","input4D","conv2d_","conv_util.tupleValuesAreOne","conv3d","conv3d_","x5D","conv3dDerFilter","conv3dDerFilter_","depthwiseConv2d_","depthwiseConv2D","depthwiseConv2DDerInput","depthwiseConv2dDerInput","depthwiseConv2DDerFilter","depthwiseConv2dDerFilter","separableConv2d_","$depthwiseFilter","$pointwiseFilter","channelMultiplier","conv2dTranspose_","conv3dTranspose","conv3dTranspose_","matMul_","innerShapeA","innerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","batchMatMul","dot_","t1","t2","$t1","$t2","t1Inner","t2Inner","asScalar","outerProduct","outerProduct_","$v1","$v2","reverse_","util.parseAxisParam","reshapeAs","reverse1d","reverse1d_","reverse2d","reverse2d_","reverse3d","reverse3d_","reverse4d","reverse4d_","maxPoolImpl_","conv_util.computePool2DInfo","$output","maxPoolBackprop","avgPoolImpl_","avgPoolBackprop","maxPool_","avgPool_","pool_","basePadding","padExtraShape","padExtraStart","padExtraEnd","withSpaceToBatchBasePaddings","isDilationOne","padStart","origPadEnd","fullInputShape","padEndExtra","padEnd","adjustedPadding","adjustedCrops","convertedPad","convertedX","maxPool3d","maxPool3d_","conv_util.computePool3DInfo","input5D","output5D","maxPool3dBackprop","avgPool3d","avgPool3d_","avgPool3dBackprop","slice_","begin_","size_","slice_util.assertParamsValid","slice1d","slice1d_","slice2d","slice2d_","slice3d","slice3d_","slice4d","slice4d_","gradForMinAndMax","xOrig","origAxes","permutedAxes","axis_util.expandShapeToKeepDim","all_","any_","argMax_","argMin_","logSumExp_","max_","mean_","reduceSize","axis_util.computeOutAndReduceShapes","reduceSizeScalar","expandedDyShape","min_","moments","moments_","keepDimsShape","devSquared","sum_","prod_","elu_","eluDer","leakyRelu_","prelu_","$alpha","relu_","selu_","scaleAlpha","greaterThanZeroDer","lessEqualZeroDer","transpose_","undoPerm","localResponseNormalization_","localResponseNormalization4D","LRNGrad","norm_","normImpl","basicLSTMCell","basicLSTMCell_","forgetBias","lstmKernel","lstmBias","$forgetBias","$lstmKernel","$lstmBias","$data","$c","$h","sliceCols","newC","newH","multiRNNCell","multiRNNCell_","lstmCells","newStates","movingAverage","movingAverage_","decay","zeroDebias","$v","$decay","one","oneMinusDecay","update","$step","stridedSlice_","expandAxes","shrinkAxes","topk_","scatterND","scatterND_","$updates","scatter_nd_util.validateInput","fft_","innerDimensionSize","input2D","ifft_","rfft_","fftLength","adjustedInput","zerosShape","zerosInput","complexInput","half","realComplexConjugate","imagComplexConjugate","irfft_","realInput","imagInput","realConjugate","imagConjugate","sparseToDense","sparseToDense_","$sparseIndices","$sparseValues","$defaultValue","defaultValues","numElems","numDims","numValues","sparse_to_dense.validateInput","gatherND","gatherND_","diag","diag_","dropout","dropout_","rate","noiseShape","$noiseShape","newDimension","getNoiseShape","keepProb","multiplier","cosineWindow","windowLength","even","newValues","cosArg","hannWindow","hannWindow_","hammingWindow","hammingWindow_","frame","frame_","signal","frameLength","frameStep","padValue","padLen","stft","stft_","windowFn","framedSignal","windowedSignal","Reduction","inTopKAsync","predictions","targets","$predictions","$targets","predictionsVals","targetsVals","precision","absoluteDifference","absoluteDifference_","labels","weights","reduction","SUM_BY_NONZERO_WEIGHTS","$labels","$weights","losses","computeWeightedLoss","computeWeightedLoss_","$losses","weightedLoss","NONE","SUM","MEAN","broadcastFactor","numNonZeros","cosineDistance","cosineDistance_","hingeLoss","hingeLoss_","huberLoss","huberLoss_","delta","deltaScalar","quadratic","linear","logLoss","logLoss_","epsilon","epsilonScalar","meanSquaredError","meanSquaredError_","sigmoidCrossEntropy","sigmoidCrossEntropy_","multiClassLabels","labelSmoothing","$multiClassLabels","labelSmoothingScalar","maxOutput","outputXTarget","sigmoidOutput","sigmoidCrossEntropyWithLogits_","softmaxCrossEntropy","softmaxCrossEntropy_","onehotLabels","$onehotLabels","numClasses","logResult","dyShape","softmaxCrossEntropyWithLogits_","qr2d","fullMatrices","m","q","one2D","iters","rTemp","wTemp","qTemp","gramSchmidt","gramSchmidt_","inputIsTensor2D","dim_1","ys","xs1d","proj","qr","qr_","outerDimsProd","prev","x2ds","q2ds_1","r2ds_1","x2d","q2d","r2d","nonMaxSuppSanityCheck","NEGATIVE_INFINITY","resizeBilinear_","images","$images","batchImages","resizeBilinearBackprop","resizeNearestNeighbor_","resizeNearestNeighborBackprop","nonMaxSuppression","nonMaxSuppression_","$boxes","$scores","nonMaxSuppressionAsync","boxesVals","scoresVals","cropAndResize","cropAndResize_","boxInd","$image","$boxInd","_e","$bias","$preluActivationWeights","dyActivation","biasGradient","fusedConv2d","mapActivation","MathBackendCPU","firstUse","getImageData","numPixels","complex_util.mergeRealAndImagArrays","assertNotComplex","length_1","ops.buffer","bufferSync","xLoc","ops.tensor","outLoc","inLoc","innerSize","offset_1","colOffset_1","tVals","tIdx","resIdx","finalOutShape","ops.scalar","broadcastedBinaryComplexOp","aReal","aImag","bReal","bImag","broadcastedBinaryOp","aValue","bValue","resultVals","currVals","leftDim","rightDim","aValues","bValues","aBatch","aOuterStep","aInnerStep","bInnerStep","bOuterStep","bBatch","resVals","b_1","i0","j0","k0","iBlock","jBlock","kBlock","reduceShape","ops.zeros","aVals","segmentId","ops.equal","ops.stack","minIndex","maxIndex","resultDtype","indexAdjuster","prevIdx","aVal","bVal","rem","anyVal","inVals","xValue","resultValues","dyValues","hypot","threshold","tooLarge","tooSmall","expX","util.tanh","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","wVals","xOffset1","yOffset1","yR","yOffset2","xRCorner","wR","xR","wOffset1","xOffset2","yC","yOffset3","xCCorner","wC","xC","xOffset3","wOffset3","xVal","yF","xFCorner","wF","xF","wOffset2","yOffset4","xOffset4","wOffset4","dxValues","fltValues","fltS0","fltS1","fltS2","topPad","leftPad","xRMin","yRMax","xCMin","yCMax","dotProd","dyOffset","fltOffset","dxS0","dxS1","dxS2","dxS3","dyS0","dyS1","dyS2","dyS3","fltS3","frontPad","xFMin","yFMax","dW","dyBuf","yRMin","yCMin","dw","dwValues","dwS0","dwS1","dwS2","dwS3","xValues","xS0","xS1","xS2","xS3","yFMin","chMul","dm","trunc","xBuffer","outCoords","newIndex","indicesValues","POSITIVE_INFINITY","outputVals","outputBatchStrides","outputRowStrides","outputColStrides","outputBatchOffset","inputBatchOffset","xRMax","outputRowOffset","xCMax","minMaxValue","avgValue","xROffset","pixel","maxPositions","maxValue","maxPosition","maxPosBuf","dxR","dxC","dyRCorner","dyCCorner","dyR","dyC","outputDepthStrides","yDepth","xDepthCorner","xDepthMin","xDepthMax","outputDepthOffset","yRow","xRowCorner","xRowMin","xRowMax","yCol","xColCorner","xColMin","xColMax","outputColOffset","xDepth","xDepthOffset","xRow","xRowOffset","xCol","pool3d","dxDepth","dxRow","dxCol","dyDepthCorner","dyRowCorner","dyColCorner","wDepth","dyDepth","wRow","dyRow","wCol","dyCol","effectiveInputSize","effectiveOutputSize","outputIdx","effectiveRowSizeRatio","effectiveColSizeRatio","sourceFracRow","sourceRowFloor","rowFrac","sourceRowCeil","topRowOffset","botRowOffset","sourceFracCol","sourceColFloor","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","topLeft","bottomLeft","bOffset","topDxRIndex","bottomDxRIndex","topDxROffset","bottomDxROffset","dxRLerp","inverseDxRLerp","leftDxCIndex","rightDxCIndex","dxCLerp","inverseDxCLerp","topLeftRCOffset","topRightRCOffset","bottomLeftRCOffset","bottomRightRCOffset","inverseDxRLerpTimesInverseDxCLerp","inverseDxRLerpTimesDxCLerp","dxRLerpTimesInverseDxCLerp","dxRLerpTimesDxCLerp","dyVal","ops.tensor4d","outputOffset","batchOffset","rowOffset","colOffset","newVal","startRLerp","startDyR","startCLerp","startDyC","accum","dyRIndex","dyROffset","dyCIndex","dyCOffset","mVals","varVals","sVals","offVals","outVals","offValsLength","sValsLength","varValsLength","mValsLength","offi","mi","si","vi","sumAcrossChannels","currentChannel","beginSumOffset","endSumOffset","inputImageValues","outputImageValues","depthBegin","depthEnd","dyi","probabilities","ops.softmax","numEvents","probVals","cdf","event_1","sampleId","event_2","indicesVal","event_3","ops.tensor2d","fftBatch","realResult","imagResult","ops.real","ops.imag","ops.complex","complex_util.getComplexWithIndex","x1D","isExponentOf2","fftRadix2","complex_util.splitRealAndImagArrays","fourierTransformByMatmul","evenComplex","complex_util.complexWithEvenIndex","evenTensor","oddComplex","complex_util.complexWithOddIndex","oddTensor","complex_util.exponents","addPart","subPart","realTensor","imagTensor","complex_util.exponent","term","complex_util.assignToTypedArray","inH","offsetH","inW","offsetD","inputIdx","bVals","aBroadcastDims","broadcast_util.getBroadcastDims","bBroadcastDims","aBuf","bBuf","aLoc","aIndex","bLoc","bIndex","realVals","imagVals","aIdx","bIdx","aRealBuf","bRealBuf","opResult","boxVals","boxIndVals","imageVals","inStride","outStride","startInd","y1","x1","y2","bInd","yInd","ind","topInd","bottomInd","yLerp","xInd","leftInd","rightInd","xLerp","topRight","closestX","closestY","inInd","outInd","scatter","indicesData","flattenIndex","sumDupeIndices","updatesData","textEncoder","TextEncoder","PlatformBrowser","performance","text","TextDecoder","systemFetch","getNodeFetch","util","PlatformNode","hrtime","DTYPE_VALUE_SIZE_MAP","uint16","uint8","NUM_BYTES_STRING_LENGTH","decodeWeights","specs","spec","name_2","quantization_1","quantization","quantizationSizeFactor","byteBuffer","quantizedArray","size_1","byteLength","dtypeFactor","specs_1","concatenateTypedArrays","totalByteLength","normalizedXs","useNodeBuffer","Buffer","Blob","atob","btoa","stringByteLength","str","concatenateArrayBuffers","buffers","basename","trim","items","getModelArtifactsInfoForJSON","modelArtifacts","modelTopology","ArrayBuffer","dateSaved","modelTopologyType","modelTopologyBytes","weightSpecsBytes","weightSpecs","weightDataBytes","weightData","saveRouters","loadRouters","IORouterRegistry","saveRouter","getInstance","loadRouter","url","getHandlers","onProgress","handlerType","validHandlers","router","handler","URL_SCHEME_SUFFIX","managers","ModelStoreManagerRegistry","scheme","manager","parseURL","getSchemes","cloneModelInternal","sourceURL","destURL","deleteSource","loadHandlers","getLoadHandlers","loadHandler","saveHandlers","getSaveHandlers","saveHandler","sourceScheme","sourcePath","sameMedium","load","getManager","removeModel","saveResult","modelArtifactsInfo","MODEL_STORE_NAME","INFO_STORE_NAME","getIndexedDBFactory","theWindow","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","shimIndexedDB","setUpDatabase","openRequest","db","createObjectStore","keyPath","modelPath","BrowserIndexedDB","databaseAction","open","onupgradeneeded","onsuccess","modelTx","transaction","getRequest_1","objectStore","close","onerror","oncomplete","modelTx_1","modelArtifactsInfo_1","infoTx_1","infoStore_1","putInfoRequest_1","put","putModelRequest","deleteInfoRequest","indexedDBRouter","startsWith","URL_SCHEME","registerSaveRouter","registerLoadRouter","BrowserIndexedDBManager","tx","getAllInfoRequest","getAll","infoTx","infoStore","getInfoRequest","deleteModelData_1","deleteModelRequest","registerManager","PATH_SEPARATOR","PATH_PREFIX","INFO_SUFFIX","MODEL_TOPOLOGY_SUFFIX","WEIGHT_SPECS_SUFFIX","WEIGHT_DATA_SUFFIX","MODEL_METADATA_SUFFIX","getModelKeys","topology","modelMetadata","getModelPathFromKey","localStorage","LS","BrowserLocalStorage","setItem","format","generatedBy","convertedBy","removeItem","getItem","metadataString","metadata","weightDataBase64","buf","byteOffset","base64StringToArrayBuffer","localStorageRouter","BrowserLocalStorageManager","prefix","suffix","DEFAULT_FILE_NAME_PREFIX","DEFAULT_JSON_EXTENSION_NAME","DEFAULT_WEIGHT_DATA_EXTENSION_NAME","defer","fileNamePrefix","BrowserDownloads","modelTopologyFileName","weightDataFileName","weightsURL","URL","createObjectURL","weightsManifest","paths","modelTopologyAndWeightManifest","modelTopologyAndWeightManifestURL","jsonAnchor_1","jsonAnchor","download","href","dispatchEvent","MouseEvent","weightDataAnchor_1","weightDataAnchor","files","BrowserFiles","jsonFile","weightFiles","jsonReader","FileReader","onload","event","modelJSON","target","pathToFile","checkManifestAndWeightFiles","perFileBuffers","weightsGroup","weightFileReader","readAsArrayBuffer","readAsText","manifest","basenames","fileNames","file","manifest_1","pathBasename","monitorPromisesProgress","promises","startFraction","endFraction","checkPromises","checkFraction","resolvedPromise","promise","fraction","loadWeightsAsArrayBuffer","fetchURLs","loadOptions","fetchFunc","requests","fetchURL","requestInit","isBinary","fetchStartFraction","fetchEndFraction","bufferPromises","response","arrayBuffer","bufferStartFraction","bufferEndFraction","weightsLoaderFactory","fetchWeightsFunction","filePathPrefix","weightNames","groupIndicesToFetchMap","groupWeightsToFetch","weightsFound","allManifestWeightNames","manifestGroupConfig","groupIndex","groupOffset","weightsEntry","rawDtype","weightsBytes","enqueueWeightsForFetchingFn","manifestEntry","sizeBytes","weightName","weightIndex","found","weightsNotFound","groupIndicesToFetch","accumulator","shouldFetch","fetchUrls","filepath","fetchUrl","weightsTensorMap","bufferIndexOffset","numBuffers","groupBytes","groupBuffer","groupByteBuffer","groupBufferOffset","i_2","nameToTensorMap","weightPathPrefix","HTTPRequest","DEFAULT_METHOD","FormData","append","ok","responses","modelConfigRequest","json","modelConfig","loadWeights","results","weightPath","lastSlash","lastIndexOf","lastSearchParam","parseUrl","pathPrefix","weightsManifest_1","entry","isHTTPScheme","match","URL_SCHEME_REGEX","httpRouter","urlItem","http","PassthroughLoader","PassthroughSaver","group","dataPromises","names","utf8bytes","totalNumBytes","bytesOfLength","trainingConfig","loudRouter","schemes","schemes_1","listModels","schemeOut","schemeAndPath","confusionMatrix","confusionMatrix_","oneHotLabels","oneHotPredictions","fromPixels_","readyState","img","$img","minTensor","maxTensor","minVals","maxVals","Uint8ClampedArray","ctx","imageData","putImageData","Serializable","className","cls","config","classNameMap","SerializationMap","getMap","fromConfig","registerClass","TEST_EPSILON_FLOAT32","TEST_EPSILON_FLOAT16","testEpsilon","expectArraysPredicate","actual","expected","predicate","checkClassType","aType","bType","actualShape","expectedShape","actualFlat","expectedFlat","areClose","fail","low","high","expect","toEqual","Optimizer","returnCost","gradArray","applyGradients","iterations_","iterations","weightValues","getClassName","minimize","computeGradients","learningRate","rho","AdadeltaOptimizer","variableGradients","accumulatedGrads","originalName","accumulatedUpdates","accumulatedGrad","accumulatedUpdate","newAccumulatedGrad","newAccumulatedUpdate","incrementIterations","variables","saveIterations","extractIterations","variableCount","initialAccumulatorValue","AdagradOptimizer","beta1","beta2","accBeta1","accBeta2","AdamOptimizer","varNames","oneMinusAccBeta1","oneMinusAccBeta2","accumulatedFirstMoment","accumulatedSecondMoment","firstMoment","secondMoment","newFirstMoment","newSecondMoment","biasCorrectedFirstMoment","biasCorrectedSecondMoment","iteration","AdamaxOptimizer","lr","accumulatedWeightedInfNorm","weightedInfNorm","ut0","ut1","newWeightedInfNorm","setLearningRate","SGDOptimizer","momentum","useNesterov","MomentumOptimizer","accumulations","accumulation","newAccumulation","centered","RMSPropOptimizer","accumulatedMeanSquares","accumulatedMoments","accumulatedMeanGrads","accumulatedMeanSquare","newAccumulatedMeanSquare","accumulatedMeanGrad","newAccumulatedMeanGrad","newAccumulatedMoments","newAccumulatedMeanSquare_1","OptimizerConstructors","train","sgd","adadelta","adagrad","rmsprop","adamax","adam","delayCallback","requestAnimationFrame","setImmediate","nextFrame","ops","DataType","SaverDef","CheckpointFormatVersion","CUSTOM_OPS","registerOp","opFunc","opMapper","tfOpName","category","attrs","customExecutor","getRegisteredOp","deregisterOp","getParamValue","paramName","tensorMap","context","inputParam","inputParams","undefined","inputIndexStart","inputIndexEnd","getTensor","inputNames","attrParam","attrParams","tensorsMap","nodeName","contextId","currentContextIds","find","getNodeNameWithContextId","getTensorsForCurrentContenxt","currentContextId","getNodeNameAndIndex","parseNodeName","tfName","notSupported","tfDeprecatedName","arithmetic","basicMath","control","convolution","creation","dynamic","evaluation","logical","graph","matrices","normalization","sliceJoin","transformation","mappersJson","opMappers","mapper","OperationMapper","_instance","placeholders","nodes","mapNode","allNodes","children","attr","newNode","rawAttrs","getStringParam","getStringArrayParam","getNumberParam","getNumericArrayParam","getBoolParam","getBoolArrayParam","getTensorShapeParam","getTensorShapeArrayParam","getDtypeParam","getDtypeArrayParam","decodeBase64","parseStringParam","keepCase","def","parseInt","parseDtypeParam","tensorflow.DataType","DT_FLOAT","DT_INT32","DT_BOOL","DT_DOUBLE","DT_STRING","parseTensorShapeParam","unknownRank","getInput","getAttr","NodeValueImpl","executeOp","tfc.add","tfc.addN","tfc.mod","tfc.mul","tfc.div","tfc.floorDiv","tfc.sub","tfc.minimum","tfc.maximum","tfc.pow","tfc.squaredDifference","TypeError","tfc.abs","tfc.acos","tfc.acosh","tfc.asin","tfc.asinh","tfc.atan","tfc.atan2","tfc.atanh","tfc.ceil","tfc.complex","tfc.cos","tfc.cosh","tfc.elu","tfc.erf","tfc.exp","tfc.expm1","tfc.floor","tfc.log","tfc.log1p","tfc.imag","tfc.neg","tfc.reciprocal","tfc.real","tfc.relu","tfc.round","tfc.selu","tfc.sigmoid","tfc.sin","tfc.sign","tfc.sinh","tfc.softplus","tfc.sqrt","tfc.square","tfc.tanh","tfc.tan","tfc.clipByValue","tfc.rsqrt","tfc.prod","tfc.leakyRelu","maxSize","elementShape","identicalElementShapes","dynamicSize","clearAfterRead","TensorArray","nextId","closed_","tensorWithState","cleared","assertShapesMatchAllowUndefinedSize","written","readMany","writeMany","totalLength","cumulativeLengths","elementPerRow","indices_1","sizes","shapesEqualAllowUndefinedSize","pred","data_1","frameId","enterFrame","exitFrame","nextIteration","tensorArray","addTensorArray","writeTensor","getTensorArray","readId","readIndex","gatherId","gatherIndices","gatherDtype","scatterId","scatterIndices","scatterTensor","concatId","concatTensorArray","concatDtype","splitId","splitTensor","lengths","sizeId","sizeTensorArray","closeId","clearAndClose","tfc.conv1d","tfc.conv2d","extraOp","activationFunc","isBiasAdd","isPrelu","isBatchNorm","numArgs","biasArg","preluArg","tfc.fused","tfc.conv2dTranspose","tfc.depthwiseConv2d","tfc.conv3d","kernelSize","tfc.avgPool","tfc.maxPool","tfc.avgPool3d","tfc.maxPool3d","tfc.fill","stop_1","tfc.linspace","tfc.multinomial","tfc.oneHot","tfc.ones","tfc.onesLike","tfc.randomUniform","stop_2","tfc.range","tfc.truncatedNormal","tfc.zeros","tfc.zerosLike","tfc.image","tfc.whereAsync","tfc.setdiff1dAsync","tfc.topk","tfc.tensor1d","tfc.scalar","summarize","tfc.equal","tfc.notEqual","tfc.greater","tfc.greaterEqual","tfc.less","tfc.lessEqual","tfc.logicalAnd","tfc.logicalNot","tfc.logicalOr","tfc.where","tfc.matMul","tfc.transpose","tfc.batchNorm","tfc.localResponseNormalization","tfc.softmax","tfc.logSoftmax","tfc.sparseToDense","tfc.max","tfc.mean","tfc.min","tfc.sum","tfc.all","tfc.any","tfc.argMax","tfc.argMin","tfc.concat","tfc.gather","tfc.reverse","tfc.slice","tfc.stridedSlice","tfc.tidy","mapped","sameShape","tfc.util","tfc.stack","tfc.unstack","tfc.tile","tfc.split","tfc.scatterND","tfc.gatherND","tfc.fft","tfc.ifft","tfc.rfft","tfc.irfft","tfc.cast","tfc.expandDims","tfc.squeeze","tfc.reshape","tfc.pad","tfc.spaceToBatchND","tfc.batchToSpaceND","tfc.depthToSpace","arithmetic.executeOp","basicMath.executeOp","control.executeOp","convolution.executeOp","creation.executeOp","dynamic.executeOp","evaluation.executeOp","image.executeOp","graph.executeOp","logical.executeOp","matrices.executeOp","normalization.executeOp","reduction.executeOp","sliceJoin.executeOp","spectral.executeOp","transformation.executeOp","weightMap","tensorArrayMap","frameName","iterationId","rootContext","generateCurrentContextIds","ExecutionContext","_currentContextIds","contextIdforContexts","lastId","newFrame","getExecutionSubgraph","usedNodes","missingInputs","dynamicNode","syncInputs","frontier","isControlFlow","isDynamicShape","child","getNodesInTopologicalOrder","executionInfo","weight","orderedNodes","CONTROL_FLOW_OPS","DYNAMIC_SHAPE_OPS","Map","_outputs","GraphExecutor","_weightMap","weightIds","sortedInputs","sortedOutputs","SEPERATOR","outNames","inNames","checkInputs","checkInputShapeAndType","checkOutputs","inputNodes","outputNodes","compilationKey","getCompilationKey","compiledMap","compile","tensorsToKeep","getFrozenTensorIds","intermediateTensorConsumerCount","checkTensorForDisposal","ids","outputNames","executeWithControlFlow","outputIds","inputIds","currentContext","added","processStack","missingOutputs","alternativeMsg","currentContext_1","processChildNodes","this_1","childNode","shape_1","notInGraph","normalizedName","TFHUB_SEARCH_PARAM","DEFAULT_MODEL_NAME","modelUrl","GraphModel","executor","io","browserHTTPRequest","handlers","findIOHandler","artifacts","producer","minConsumer","Instance","transformGraph","convertTensorMapToTensorsMap","execute","normalizeInputs","normalizeOutputs","executeAsync","newMap","loadGraphModel","fromTFHub","model","VALID_OUTPUT_STRIDES","assertValidOutputStride","assertValidResolution","toFloatIfInt","MobileNet","outputStride","predict","heatmapScores","displacementFwd","displacementBwd","MaxHeap","priorityQueue","numberOfElements","getElementValue","enqueue","swim","dequeue","exchange","sink","empty","getValueAt","scoreIsMaximumInLocalWindow","buildPartWithScoreQueue","part","heatmapY","heatmapX","partNames","NUM_KEYPOINTS","partIds","connectedPartNames","poseChain","connectedPartIndices","partChannels","getOffsetPoint","getImageCoords","squaredDistance","addVectors","parentChildrenTuples","parentToChildEdges","childToParentEdges","getDisplacement","getStridedIndexNearPoint","traverseToTargetKeypoint","position","decodePose","withinNmsRadiusOfCorrespondingPoint","keypoints","getInstanceScore","kLocalMaximumRadius","decodeMultiplePoses","__assign","hasOwnProperty","__awaiter","throw","__generator","label","sent","trys","return","iterator","eitherPointDoesntMeetConfidence","getAdjacentKeyPoints","getBoundingBox","maxX","maxY","minX","minY","getBoundingBoxPoints","toTensorBuffer","toTensorBuffers3D","scalePose","scalePoses","flipPoseHorizontal","flipPosesHorizontal","getInputTensorDimensions","toInputTensor","padAndResizeTo","resized","scaleAndFlipPoses","argmax2d","getPointsConfidence","getOffsetPoint$1","getOffsetVectors","valueOf","getOffsetPoints","decodeSinglePose","MOBILENET_BASE_URL","RESNET50_BASE_URL","resNet50Checkpoint","mobileNetCheckpoint","toFloatIfInt$1","ResNet","MOBILENET_V1_CONFIG","architecture","inputResolution","VALID_ARCHITECTURE","VALID_STRIDE","MobileNetV1","ResNet50","VALID_INPUT_RESOLUTION","VALID_MULTIPLIER","VALID_QUANT_BYTES","validateModelConfig","quantBytes","SINGLE_PERSON_INFERENCE_CONFIG","flipHorizontal","MULTI_PERSON_INFERENCE_CONFIG","maxDetections","nmsRadius","validateMultiPersonInputConfig","PoseNet","baseModel","estimateMultiplePoses","I","E","N","T","estimateSinglePose","estimatePoses","decodingMethod","loadMobileNet","tf","loadResNet","R","Reflect","ReflectApply","receiver","ReflectOwnKeys","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","ProcessEmitWarning","warning","NumberIsNaN","EventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","enumerable","RangeError","getPrototypeOf","create","setMaxListeners","$getMaxListeners","that","getMaxListeners","doError","events","er","arrayClone","_addListener","listener","prepend","existing","newListener","warned","emitter","onceWrapper","fired","wrapFn","_onceWrap","wrapped","bind","originalListener","spliceOne","_listeners","unwrap","evlistener","unwrapListeners","rawListeners","listenerCount","eventNames","DEFAULTS","pixelRatio","clickToggleDebug","pixelate","SketchEngine","canvasEl","canvasCtx","loop","_renderer","_addEventListeners","updateDimensions","classList","toggle","style","dt","deltaTime","dStr","getFullYear","getMonth","getDate","toBlob","blob","media","el","getMediaInfo","getWebcam","mediaDevices","getUserMedia","audio","video","createVideo","stream","videoEl","querySelector","srcObject","opacity","pointerEvents","transform","appendChild","onCanPlay","play","videoWidth","videoHeight","removeEventListener","initialiseWebcam","trackMouse","mouseX","mouseY","getElementById","offsetLeft","offsetTop","interpolate","randomBetween","mapRange","r1l","r1u","r2l","r2u","distance","_arr","color","colorToString","colourInterpolate","color1","color2","getPointFromAngleRadius","angle","getInterpolatedColours","colours","granularity","colourStop","granularityStop","colourArr","currColourIdx","getClosestColour","WIDTH","HEIGHT","THRESHOLD","KEYS","app","tileSize","getReleventPose","poses","datas","poseData","includes","running","palette","tome","colors","mouthType","hairType","randomMouth","randomHair","randomColor","getPose","net","oldData","floorToIndex","checkHas","drawPart","fillStyle","translate","beginPath","moveTo","lineTo","arc","fillRect","restore","drawBody","strokeStyle","stroke","closePath","drawHair","topX","leftX","rightX","bezierCurveTo","drawMouth","bottomX","strokeRect","onRender","clearRect","posenet","OVERLAY_ID","OldModule","bundle","Module","moduleName","hot","hotData","_acceptCallbacks","_disposeCallbacks","accept","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","protocol","ws","onmessage","handled","assets","asset","isNew","didAccept","hmrAcceptCheck","parcelRequire","generated","js","clear","hmrApply","hmrAcceptRun","reload","onclose","removeErrorOverlay","overlay","createErrorOverlay","stackTrace","innerText","innerHTML","getParents","modules","parents","dep","deps","cached","cache","cb"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,IAAIA,OAAO,GAAGC,MAAM,CAACC,OAAP,GAAiB,EAA/B,EAEA;AACA;AACA;AACA;;AAEA,IAAIC,gBAAJ;AACA,IAAIC,kBAAJ;;AAEA,SAASC,gBAAT,GAA4B;AACxB,QAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;AACH;;AACD,SAASC,mBAAT,GAAgC;AAC5B,QAAM,IAAID,KAAJ,CAAU,mCAAV,CAAN;AACH;;AACA,aAAY;AACT,MAAI;AACA,QAAI,OAAOE,UAAP,KAAsB,UAA1B,EAAsC;AAClCL,MAAAA,gBAAgB,GAAGK,UAAnB;AACH,KAFD,MAEO;AACHL,MAAAA,gBAAgB,GAAGE,gBAAnB;AACH;AACJ,GAND,CAME,OAAOI,CAAP,EAAU;AACRN,IAAAA,gBAAgB,GAAGE,gBAAnB;AACH;;AACD,MAAI;AACA,QAAI,OAAOK,YAAP,KAAwB,UAA5B,EAAwC;AACpCN,MAAAA,kBAAkB,GAAGM,YAArB;AACH,KAFD,MAEO;AACHN,MAAAA,kBAAkB,GAAGG,mBAArB;AACH;AACJ,GAND,CAME,OAAOE,CAAP,EAAU;AACRL,IAAAA,kBAAkB,GAAGG,mBAArB;AACH;AACJ,CAnBA,GAAD;;AAoBA,SAASI,UAAT,CAAoBC,GAApB,EAAyB;AACrB,MAAIT,gBAAgB,KAAKK,UAAzB,EAAqC;AACjC;AACA,WAAOA,UAAU,CAACI,GAAD,EAAM,CAAN,CAAjB;AACH,GAJoB,CAKrB;;;AACA,MAAI,CAACT,gBAAgB,KAAKE,gBAArB,IAAyC,CAACF,gBAA3C,KAAgEK,UAApE,EAAgF;AAC5EL,IAAAA,gBAAgB,GAAGK,UAAnB;AACA,WAAOA,UAAU,CAACI,GAAD,EAAM,CAAN,CAAjB;AACH;;AACD,MAAI;AACA;AACA,WAAOT,gBAAgB,CAACS,GAAD,EAAM,CAAN,CAAvB;AACH,GAHD,CAGE,OAAMH,CAAN,EAAQ;AACN,QAAI;AACA;AACA,aAAON,gBAAgB,CAACU,IAAjB,CAAsB,IAAtB,EAA4BD,GAA5B,EAAiC,CAAjC,CAAP;AACH,KAHD,CAGE,OAAMH,CAAN,EAAQ;AACN;AACA,aAAON,gBAAgB,CAACU,IAAjB,CAAsB,IAAtB,EAA4BD,GAA5B,EAAiC,CAAjC,CAAP;AACH;AACJ;AAGJ;;AACD,SAASE,eAAT,CAAyBC,MAAzB,EAAiC;AAC7B,MAAIX,kBAAkB,KAAKM,YAA3B,EAAyC;AACrC;AACA,WAAOA,YAAY,CAACK,MAAD,CAAnB;AACH,GAJ4B,CAK7B;;;AACA,MAAI,CAACX,kBAAkB,KAAKG,mBAAvB,IAA8C,CAACH,kBAAhD,KAAuEM,YAA3E,EAAyF;AACrFN,IAAAA,kBAAkB,GAAGM,YAArB;AACA,WAAOA,YAAY,CAACK,MAAD,CAAnB;AACH;;AACD,MAAI;AACA;AACA,WAAOX,kBAAkB,CAACW,MAAD,CAAzB;AACH,GAHD,CAGE,OAAON,CAAP,EAAS;AACP,QAAI;AACA;AACA,aAAOL,kBAAkB,CAACS,IAAnB,CAAwB,IAAxB,EAA8BE,MAA9B,CAAP;AACH,KAHD,CAGE,OAAON,CAAP,EAAS;AACP;AACA;AACA,aAAOL,kBAAkB,CAACS,IAAnB,CAAwB,IAAxB,EAA8BE,MAA9B,CAAP;AACH;AACJ;AAIJ;;AACD,IAAIC,KAAK,GAAG,EAAZ;AACA,IAAIC,QAAQ,GAAG,KAAf;AACA,IAAIC,YAAJ;AACA,IAAIC,UAAU,GAAG,CAAC,CAAlB;;AAEA,SAASC,eAAT,GAA2B;AACvB,MAAI,CAACH,QAAD,IAAa,CAACC,YAAlB,EAAgC;AAC5B;AACH;;AACDD,EAAAA,QAAQ,GAAG,KAAX;;AACA,MAAIC,YAAY,CAACG,MAAjB,EAAyB;AACrBL,IAAAA,KAAK,GAAGE,YAAY,CAACI,MAAb,CAAoBN,KAApB,CAAR;AACH,GAFD,MAEO;AACHG,IAAAA,UAAU,GAAG,CAAC,CAAd;AACH;;AACD,MAAIH,KAAK,CAACK,MAAV,EAAkB;AACdE,IAAAA,UAAU;AACb;AACJ;;AAED,SAASA,UAAT,GAAsB;AAClB,MAAIN,QAAJ,EAAc;AACV;AACH;;AACD,MAAIO,OAAO,GAAGb,UAAU,CAACS,eAAD,CAAxB;AACAH,EAAAA,QAAQ,GAAG,IAAX;AAEA,MAAIQ,GAAG,GAAGT,KAAK,CAACK,MAAhB;;AACA,SAAMI,GAAN,EAAW;AACPP,IAAAA,YAAY,GAAGF,KAAf;AACAA,IAAAA,KAAK,GAAG,EAAR;;AACA,WAAO,EAAEG,UAAF,GAAeM,GAAtB,EAA2B;AACvB,UAAIP,YAAJ,EAAkB;AACdA,QAAAA,YAAY,CAACC,UAAD,CAAZ,CAAyBO,GAAzB;AACH;AACJ;;AACDP,IAAAA,UAAU,GAAG,CAAC,CAAd;AACAM,IAAAA,GAAG,GAAGT,KAAK,CAACK,MAAZ;AACH;;AACDH,EAAAA,YAAY,GAAG,IAAf;AACAD,EAAAA,QAAQ,GAAG,KAAX;AACAH,EAAAA,eAAe,CAACU,OAAD,CAAf;AACH;;AAEDxB,OAAO,CAAC2B,QAAR,GAAmB,UAAUf,GAAV,EAAe;AAC9B,MAAIgB,IAAI,GAAG,IAAIC,KAAJ,CAAUC,SAAS,CAACT,MAAV,GAAmB,CAA7B,CAAX;;AACA,MAAIS,SAAS,CAACT,MAAV,GAAmB,CAAvB,EAA0B;AACtB,SAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,SAAS,CAACT,MAA9B,EAAsCU,CAAC,EAAvC,EAA2C;AACvCH,MAAAA,IAAI,CAACG,CAAC,GAAG,CAAL,CAAJ,GAAcD,SAAS,CAACC,CAAD,CAAvB;AACH;AACJ;;AACDf,EAAAA,KAAK,CAACgB,IAAN,CAAW,IAAIC,IAAJ,CAASrB,GAAT,EAAcgB,IAAd,CAAX;;AACA,MAAIZ,KAAK,CAACK,MAAN,KAAiB,CAAjB,IAAsB,CAACJ,QAA3B,EAAqC;AACjCN,IAAAA,UAAU,CAACY,UAAD,CAAV;AACH;AACJ,CAXD,EAaA;;;AACA,SAASU,IAAT,CAAcrB,GAAd,EAAmBsB,KAAnB,EAA0B;AACtB,OAAKtB,GAAL,GAAWA,GAAX;AACA,OAAKsB,KAAL,GAAaA,KAAb;AACH;;AACDD,IAAI,CAACE,SAAL,CAAeT,GAAf,GAAqB,YAAY;AAC7B,OAAKd,GAAL,CAASwB,KAAT,CAAe,IAAf,EAAqB,KAAKF,KAA1B;AACH,CAFD;;AAGAlC,OAAO,CAACqC,KAAR,GAAgB,SAAhB;AAEArC,OAAO,CAACsC,GAAR,GAAc,EAAd;AACAtC,OAAO,CAACuC,IAAR,GAAe,EAAf;AACAvC,OAAO,CAACwC,OAAR,GAAkB,EAAlB,EAAsB;;AACtBxC,OAAO,CAACyC,QAAR,GAAmB,EAAnB;;AAEA,SAASC,IAAT,GAAgB,CAAE;;AAElB1C,OAAO,CAAC2C,EAAR,GAAaD,IAAb;AACA1C,OAAO,CAAC4C,WAAR,GAAsBF,IAAtB;AACA1C,OAAO,CAAC6C,IAAR,GAAeH,IAAf;AACA1C,OAAO,CAAC8C,GAAR,GAAcJ,IAAd;AACA1C,OAAO,CAAC+C,cAAR,GAAyBL,IAAzB;AACA1C,OAAO,CAACgD,kBAAR,GAA6BN,IAA7B;AACA1C,OAAO,CAACiD,IAAR,GAAeP,IAAf;AACA1C,OAAO,CAACkD,eAAR,GAA0BR,IAA1B;AACA1C,OAAO,CAACmD,mBAAR,GAA8BT,IAA9B;;AAEA1C,OAAO,CAACoD,SAAR,GAAoB,UAAUC,IAAV,EAAgB;AAAE,SAAO,EAAP;AAAW,CAAjD;;AAEArD,OAAO,CAACsD,OAAR,GAAkB,UAAUD,IAAV,EAAgB;AAC9B,QAAM,IAAI/C,KAAJ,CAAU,kCAAV,CAAN;AACH,CAFD;;AAIAN,OAAO,CAACuD,GAAR,GAAc,YAAY;AAAE,SAAO,GAAP;AAAY,CAAxC;;AACAvD,OAAO,CAACwD,KAAR,GAAgB,UAAUC,GAAV,EAAe;AAC3B,QAAM,IAAInD,KAAJ,CAAU,gCAAV,CAAN;AACH,CAFD;;AAGAN,OAAO,CAAC0D,KAAR,GAAgB,YAAW;AAAE,SAAO,CAAP;AAAW,CAAxC;;ACvvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzuDA;;AAAA,IAAA,CAAA,GAAA,YAAA;AAqBE,WAAA,CAAA,CAAmBC,CAAnB,EAAmBA;AAAAC,SAAAA,MAAAA,GAAAD,CAAAC,EATXA,KAAAA,KAAAA,GAAe,EASJA,EARXA,KAAAA,YAAAA,GAAwD,EAQ7CA,EANXA,KAAAA,QAAAA,GAAkB,EAMPA,EACjBA,KAAKC,gB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AR;IACH,MAAM,CAAC,OAAP,GAAiB,SAAA;aAAG,IAAI,CAAC,GAAL,CAAA,CAAA,GAAa;IAAhB;IACjB,QAAA,GAAW,IAAI,CAAC,GAAL,CAAA,EAFR;GAAA,MAAA;IAIH,MAAM,CAAC,OAAP,GAAiB,SAAA;aAAO,IAAA,IAAA,CAAA,CAAM,CAAC,OAAP,CAAA,CAAJ,GAAuB;IAA1B;IACjB,QAAA,GAAe,IAAA,IAAA,CAAA,CAAM,CAAC,OAAP,CAAA,EALZ;;AAXL;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;uLCzBA,QAAS,CAAA,CAAT,CAAc,CAAd,CAAoB,CAApB,CAA0B,OACJ,WAAhB,QAAO,CAAA,CADa,CACS,CAAI,CAAG,CAAE,OAAO,GAAT,CADhB,CAEC,QAAhB,QAAO,CAAA,CAFQ,GAGtB,OAAO,CAAC,IAAR,CAAa,oDAAb,CAHsB,CAItB,CAAI,CAAG,CAAE,OAAO,CAAE,CAAC,CAAZ,CAJe,EASpB,CAAI,CAAC,OAAL,EAAgB,6EAA6E,IAA7E,CAAkF,CAAI,CAAC,IAAvF,CATI,CAUf,GAAI,CAAA,IAAJ,CAAS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","file":"script.d573be0b.js","sourceRoot":"../src","sourcesContent":["// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Platform} from './platforms/platform';\n\n// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.\nconst TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';\n\ntype FlagValue = number|boolean;\nexport type Flags = {\n  [featureName: string]: FlagValue\n};\nexport type FlagRegistryEntry = {\n  evaluationFn: () => FlagValue;\n  setHook?: (value: FlagValue) => void;\n};\n\nexport class Environment {\n  private flags: Flags = {};\n  private flagRegistry: {[flagName: string]: FlagRegistryEntry} = {};\n\n  private urlFlags: Flags = {};\n\n  platformName: string;\n  platform: Platform;\n\n  // tslint:disable-next-line: no-any\n  constructor(public global: any) {\n    this.populateURLFlags();\n  }\n\n  setPlatform(platformName: string, platform: Platform) {\n    if (this.platform != null) {\n      console.warn(\n          `Platform ${this.platformName} has already been set. ` +\n          `Overwriting the platform with ${platform}.`);\n    }\n    this.platformName = platformName;\n    this.platform = platform;\n  }\n\n  registerFlag(\n      flagName: string, evaluationFn: () => FlagValue,\n      setHook?: (value: FlagValue) => void) {\n    this.flagRegistry[flagName] = {evaluationFn, setHook};\n\n    // Override the flag value from the URL. This has to happen here because the\n    // environment is initialized before flags get registered.\n    if (this.urlFlags[flagName] != null) {\n      const flagValue = this.urlFlags[flagName];\n      console.warn(\n          `Setting feature override from URL ${flagName}: ${flagValue}.`);\n      this.set(flagName, flagValue);\n    }\n  }\n\n  get(flagName: string): FlagValue {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n\n    this.flags[flagName] = this.evaluateFlag(flagName);\n\n    return this.flags[flagName];\n  }\n\n  getNumber(flagName: string): number {\n    return this.get(flagName) as number;\n  }\n\n  getBool(flagName: string): boolean {\n    return this.get(flagName) as boolean;\n  }\n\n  getFlags(): Flags {\n    return this.flags;\n  }\n  // For backwards compatibility.\n  get features(): Flags {\n    return this.flags;\n  }\n\n  set(flagName: string, value: FlagValue): void {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(\n          `Cannot set flag ${flagName} as it has not been registered.`);\n    }\n    this.flags[flagName] = value;\n    if (this.flagRegistry[flagName].setHook != null) {\n      this.flagRegistry[flagName].setHook(value);\n    }\n  }\n\n  private evaluateFlag(flagName: string): FlagValue {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(\n          `Cannot evaluate flag '${flagName}': no evaluation function found.`);\n    }\n    return this.flagRegistry[flagName].evaluationFn();\n  }\n\n  setFlags(flags: Flags) {\n    this.flags = Object.assign({}, flags);\n  }\n\n  reset() {\n    this.flags = {};\n    this.urlFlags = {};\n    this.populateURLFlags();\n  }\n\n  private populateURLFlags(): void {\n    if (typeof this.global === 'undefined' ||\n        typeof this.global.location === 'undefined' ||\n        typeof this.global.location.search === 'undefined') {\n      return;\n    }\n\n    const urlParams = getQueryParams(this.global.location.search);\n    if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {\n      const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');\n      keyValues.forEach(keyValue => {\n        const [key, value] = keyValue.split(':') as [string, string];\n        this.urlFlags[key] = parseValue(key, value);\n      });\n    }\n  }\n}\n\nexport function getQueryParams(queryString: string): {[key: string]: string} {\n  const params = {};\n  queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {\n    decodeParam(params, t[0], t[1]);\n    return t.join('=');\n  });\n  return params;\n}\n\nfunction decodeParam(\n    params: {[key: string]: string}, name: string, value?: string) {\n  params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\n\nfunction parseValue(flagName: string, value: string): FlagValue {\n  value = value.toLowerCase();\n  if (value === 'true' || value === 'false') {\n    return value === 'true';\n  } else if (`${+ value}` === value) {\n    return +value;\n  }\n  throw new Error(\n      `Could not parse value flag value ${value} for flag ${flagName}.`);\n}\n\nexport let ENV: Environment = null;\nexport function setEnvironmentGlobal(environment: Environment) {\n  ENV = environment;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENV} from './environment';\nimport {DataType, DataTypeMap, FlatVector, NumericDataType, RecursiveArray, TensorLike, TypedArray} from './types';\n\n/**\n * Shuffles the array in-place using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1, 2, 3, 4, 5];\n * tf.util.shuffle(a);\n * console.log(a);\n * ```\n *\n * @param array The array to shuffle in-place.\n */\n/** @doc {heading: 'Util', namespace: 'util'} */\n// tslint:disable-next-line:no-any\nexport function shuffle(array: any[]|Uint32Array|Int32Array|\n                        Float32Array): void {\n  let counter = array.length;\n  let temp = 0;\n  let index = 0;\n  // While there are elements in the array\n  while (counter > 0) {\n    // Pick a random index\n    index = (Math.random() * counter) | 0;\n    // Decrease counter by 1\n    counter--;\n    // And swap the last element with it\n    temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n}\n\n/** Clamps a value to a specified range. */\nexport function clamp(min: number, x: number, max: number): number {\n  return Math.max(min, Math.min(x, max));\n}\n\nexport function nearestLargerEven(val: number): number {\n  return val % 2 === 0 ? val : val + 1;\n}\n\nexport function sum(arr: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\n/**\n * Returns a sample from a uniform [a, b) distribution.\n *\n * @param a The minimum support (inclusive).\n * @param b The maximum support (exclusive).\n * @return A pseudorandom number on the half-open interval [a,b).\n */\nexport function randUniform(a: number, b: number) {\n  const r = Math.random();\n  return (b * r) + (1 - r) * a;\n}\n\n/** Returns the squared Euclidean distance between two vectors. */\nexport function distSquared(a: FlatVector, b: FlatVector): number {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    const diff = Number(a[i]) - Number(b[i]);\n    result += diff * diff;\n  }\n  return result;\n}\n\n/**\n * Asserts that the expression is true. Otherwise throws an error with the\n * provided message.\n *\n * ```js\n * const x = 2;\n * tf.util.assert(x === 2, 'x is not 2');\n * ```\n *\n * @param expr The expression to assert (as a boolean).\n * @param msg A function that returns the message to report when throwing an\n *     error. We use a function for performance reasons.\n */\n/** @doc {heading: 'Util', namespace: 'util'} */\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport function assertShapesMatch(\n    shapeA: number[], shapeB: number[], errorMessagePrefix = ''): void {\n  assert(\n      arraysEqual(shapeA, shapeB),\n      () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\n\nexport function assertNonNull(a: TensorLike): void {\n  assert(\n      a != null,\n      () => `The input to the tensor constructor must be a non-null value.`);\n}\n\n// NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\n/**\n *  Flattens an arbitrarily nested array.\n *\n * ```js\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\n * const flat = tf.util.flatten(a);\n * console.log(flat);\n * ```\n *\n *  @param arr The nested array to flatten.\n *  @param result The destination array which holds the elements.\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\n *      to false.\n */\n/** @doc {heading: 'Util', namespace: 'util'} */\nexport function\nflatten<T extends number|boolean|string|Promise<number>|TypedArray>(\n    arr: T|RecursiveArray<T>, result: T[] = [], skipTypedArray = false): T[] {\n  if (result == null) {\n    result = [];\n  }\n  if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) {\n    for (let i = 0; i < arr.length; ++i) {\n      flatten(arr[i], result, skipTypedArray);\n    }\n  } else {\n    result.push(arr as T);\n  }\n  return result;\n}\n\n/**\n * Returns the size (number of elements) of the tensor given its shape.\n *\n * ```js\n * const shape = [3, 4, 2];\n * const size = tf.util.sizeFromShape(shape);\n * console.log(size);\n * ```\n */\n/** @doc {heading: 'Util', namespace: 'util'} */\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\n\nexport function isScalarShape(shape: number[]): boolean {\n  return shape.length === 0;\n}\n\nexport function arraysEqual(n1: FlatVector, n2: FlatVector) {\n  if (n1 === n2) {\n    return true;\n  }\n  if (n1 == null || n2 == null) {\n    return false;\n  }\n\n  if (n1.length !== n2.length) {\n    return false;\n  }\n  for (let i = 0; i < n1.length; i++) {\n    if (n1[i] !== n2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\n\nexport function tanh(x: number): number {\n  // tslint:disable-next-line:no-any\n  if ((Math as any).tanh != null) {\n    // tslint:disable-next-line:no-any\n    return (Math as any).tanh(x);\n  }\n  if (x === Infinity) {\n    return 1;\n  } else if (x === -Infinity) {\n    return -1;\n  } else {\n    const e2x = Math.exp(2 * x);\n    return (e2x - 1) / (e2x + 1);\n  }\n}\n\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\n\n/**\n * Creates a new array with randomized indicies to a given quantity.\n *\n * ```js\n * const randomTen = tf.util.createShuffledIndices(10);\n * console.log(randomTen);\n * ```\n *\n * @param number Quantity of how many shuffled indicies to create.\n */\n/** @doc {heading: 'Util', namespace: 'util'} */\nexport function createShuffledIndices(n: number): Uint32Array {\n  const shuffledIndices = new Uint32Array(n);\n  for (let i = 0; i < n; ++i) {\n    shuffledIndices[i] = i;\n  }\n  shuffle(shuffledIndices);\n  return shuffledIndices;\n}\n\nexport function rightPad(a: string, size: number): string {\n  if (size <= a.length) {\n    return a;\n  }\n  return a + ' '.repeat(size - a.length);\n}\n\nexport function repeatedTry(\n    checkFn: () => boolean, delayFn = (counter: number) => 0,\n    maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Given the full size of the array and a shape that may contain -1 as the\n * implicit dimension, returns the inferred shape where -1 is replaced.\n * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].\n *\n * @param shape The shape, which may contain -1 in some dimension.\n * @param size The full size (number of elements) of the array.\n * @return The inferred shape where -1 is replaced with the inferred size.\n */\nexport function inferFromImplicitShape(\n    shape: number[], size: number): number[] {\n  let shapeProd = 1;\n  let implicitIdx = -1;\n\n  for (let i = 0; i < shape.length; ++i) {\n    if (shape[i] >= 0) {\n      shapeProd *= shape[i];\n    } else if (shape[i] === -1) {\n      if (implicitIdx !== -1) {\n        throw Error(\n            `Shapes can only have 1 implicit size. ` +\n            `Found -1 at dim ${implicitIdx} and dim ${i}`);\n      }\n      implicitIdx = i;\n    } else if (shape[i] < 0) {\n      throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);\n    }\n  }\n\n  if (implicitIdx === -1) {\n    if (size > 0 && size !== shapeProd) {\n      throw Error(`Size(${size}) must match the product of shape ${shape}`);\n    }\n    return shape;\n  }\n\n  if (shapeProd === 0) {\n    throw Error(\n        `Cannot infer the missing size in [${shape}] when ` +\n        `there are 0 elements`);\n  }\n  if (size % shapeProd !== 0) {\n    throw Error(\n        `The implicit shape can't be a fractional number. ` +\n        `Got ${size} / ${shapeProd}`);\n  }\n\n  const newShape = shape.slice();\n  newShape[implicitIdx] = size / shapeProd;\n  return newShape;\n}\n\nexport function parseAxisParam(\n    axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : [].concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () =>\n          `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(ax => isInt(ax)),\n      () => `All values in axis param must be integers but ` +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\n\n/** Reduces the shape by removing all dimensions of shape 1. */\nexport function squeezeShape(shape: number[], axis?: number[]):\n    {newShape: number[], keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ?\n      null :\n      parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(\n            `Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function getTypedArrayFromDType<D extends NumericDataType>(\n    dtype: D, size: number): DataTypeMap[D] {\n  let values = null;\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n  return values as DataTypeMap[D];\n}\n\nexport function getArrayFromDType<D extends DataType>(\n    dtype: D, size: number): DataTypeMap[D] {\n  let values = null;\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else if (dtype === 'string') {\n    values = new Array<'string'>(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n  return values as DataTypeMap[D];\n}\n\nexport function checkConversionForErrors<D extends DataType>(\n    vals: DataTypeMap[D]|number[], dtype: D): void {\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i] as number;\n    if (isNaN(num) || !isFinite(num)) {\n      throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);\n    }\n  }\n}\n\n/** Returns true if the dtype is valid. */\nexport function isValidDtype(dtype: DataType): boolean {\n  return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' ||\n      dtype === 'int32' || dtype === 'string';\n}\n\n/**\n * Returns true if the new type can't encode the old type without loss of\n * precision.\n */\nexport function hasEncodingLoss(oldType: DataType, newType: DataType): boolean {\n  if (newType === 'complex64') {\n    return false;\n  }\n  if (newType === 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n  if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n  if (newType === 'bool' && oldType === 'bool') {\n    return false;\n  }\n  return true;\n}\n\nexport function isTypedArray(a: {}): a is Float32Array|Int32Array|Uint8Array {\n  return a instanceof Float32Array || a instanceof Int32Array ||\n      a instanceof Uint8Array;\n}\n\nexport function bytesPerElement(dtype: DataType): number {\n  if (dtype === 'float32' || dtype === 'int32') {\n    return 4;\n  } else if (dtype === 'complex64') {\n    return 8;\n  } else if (dtype === 'bool') {\n    return 1;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n\n/**\n * Returns the approximate number of bytes allocated in the string array - 2\n * bytes per character. Computing the exact bytes for a native string in JS is\n * not possible since it depends on the encoding of the html page that serves\n * the website.\n */\nexport function bytesFromStringArray(arr: Uint8Array[]): number {\n  if (arr == null) {\n    return 0;\n  }\n  let bytes = 0;\n  arr.forEach(x => bytes += x.length);\n  return bytes;\n}\n\n/** Returns true if the value is a string. */\nexport function isString(value: {}): value is string {\n  return typeof value === 'string' || value instanceof String;\n}\n\nexport function isBoolean(value: {}): boolean {\n  return typeof value === 'boolean';\n}\n\nexport function isNumber(value: {}): boolean {\n  return typeof value === 'number';\n}\n\nexport function inferDtype(values: TensorLike): DataType {\n  if (Array.isArray(values)) {\n    return inferDtype(values[0]);\n  }\n  if (values instanceof Float32Array) {\n    return 'float32';\n  } else if (values instanceof Int32Array || values instanceof Uint8Array) {\n    return 'int32';\n  } else if (isNumber(values)) {\n    return 'float32';\n  } else if (isString(values)) {\n    return 'string';\n  } else if (isBoolean(values)) {\n    return 'bool';\n  }\n  return 'float32';\n}\n\nexport function isFunction(f: Function) {\n  return !!(f && f.constructor && f.call && f.apply);\n}\n\nexport function nearestDivisor(size: number, start: number): number {\n  for (let i = start; i < size; ++i) {\n    if (size % i === 0) {\n      return i;\n    }\n  }\n  return size;\n}\n\nexport function computeStrides(shape: number[]): number[] {\n  const rank = shape.length;\n  if (rank < 2) {\n    return [];\n  }\n\n  // Last dimension has implicit stride of 1, thus having D-1 (instead of D)\n  // strides.\n  const strides = new Array(rank - 1);\n  strides[rank - 2] = shape[rank - 1];\n  for (let i = rank - 3; i >= 0; --i) {\n    strides[i] = strides[i + 1] * shape[i + 1];\n  }\n  return strides;\n}\n\nexport function toTypedArray(\n    a: TensorLike, dtype: DataType, debugMode: boolean): TypedArray {\n  if (dtype === 'string') {\n    throw new Error('Cannot convert a string[] to a TypedArray');\n  }\n  if (Array.isArray(a)) {\n    a = flatten(a);\n  }\n  if (debugMode) {\n    checkConversionForErrors(a as number[], dtype);\n  }\n  if (noConversionNeeded(a, dtype)) {\n    return a as TypedArray;\n  }\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(a as number[]);\n  } else if (dtype === 'int32') {\n    return new Int32Array(a as number[]);\n  } else if (dtype === 'bool') {\n    const bool = new Uint8Array((a as number[]).length);\n    for (let i = 0; i < bool.length; ++i) {\n      if (Math.round((a as number[])[i]) !== 0) {\n        bool[i] = 1;\n      }\n    }\n    return bool;\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n\nfunction createNestedArray(offset: number, shape: number[], a: TypedArray) {\n  const ret = new Array();\n  if (shape.length === 1) {\n    const d = shape[0];\n    for (let i = 0; i < d; i++) {\n      ret[i] = a[offset + i];\n    }\n  } else {\n    const d = shape[0];\n    const rest = shape.slice(1);\n    const len = rest.reduce((acc, c) => acc * c);\n    for (let i = 0; i < d; i++) {\n      ret[i] = createNestedArray(offset + i * len, rest, a);\n    }\n  }\n  return ret;\n}\n\n// Provide a nested array of TypedArray in given shape.\nexport function toNestedArray(shape: number[], a: TypedArray) {\n  if (shape.length === 0) {\n    // Scalar type should return a single number.\n    return a[0];\n  }\n  const size = shape.reduce((acc, c) => acc * c);\n  if (size === 0) {\n    // A tensor with shape zero should be turned into empty list.\n    return [];\n  }\n  if (size !== a.length) {\n    throw new Error(`[${shape}] does not match the input size.`);\n  }\n\n  return createNestedArray(0, shape, a);\n}\n\nfunction noConversionNeeded(a: TensorLike, dtype: DataType): boolean {\n  return (a instanceof Float32Array && dtype === 'float32') ||\n      (a instanceof Int32Array && dtype === 'int32') ||\n      (a instanceof Uint8Array && dtype === 'bool');\n}\n\nexport function makeOnesTypedArray<D extends DataType>(\n    size: number, dtype: D): DataTypeMap[D] {\n  const array = makeZerosTypedArray(size, dtype);\n  for (let i = 0; i < array.length; i++) {\n    array[i] = 1;\n  }\n  return array;\n}\n\nexport function makeZerosTypedArray<D extends DataType>(\n    size: number, dtype: D): DataTypeMap[D] {\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(size) as DataTypeMap[D];\n  } else if (dtype === 'int32') {\n    return new Int32Array(size) as DataTypeMap[D];\n  } else if (dtype === 'bool') {\n    return new Uint8Array(size) as DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n\n/**\n * Returns the current high-resolution time in milliseconds relative to an\n * arbitrary time in the past. It works across different platforms (node.js,\n * browsers).\n *\n * ```js\n * console.log(tf.util.now());\n * ```\n */\n/** @doc {heading: 'Util', namespace: 'util'} */\nexport function now(): number {\n  return ENV.platform.now();\n}\n\nexport function assertNonNegativeIntegerDimensions(shape: number[]) {\n  shape.forEach(dimSize => {\n    assert(\n        Number.isInteger(dimSize) && dimSize >= 0,\n        () =>\n            `Tensor must have a shape comprised of positive integers but got ` +\n            `shape [${shape}].`);\n  });\n}\n\n/**\n * Returns a platform-specific implementation of\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n *\n * If `fetch` is defined on the global object (`window`, `process`, etc.),\n * `tf.util.fetch` returns that function.\n *\n * If not, `tf.util.fetch` returns a platform-specific solution.\n *\n * ```js\n * const resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');\n * // handle response\n * ```\n */\n/** @doc {heading: 'Util'} */\nexport function fetch(\n    path: string, requestInits?: RequestInit): Promise<Response> {\n  return ENV.platform.fetch(path, requestInits);\n}\n\n/**\n * Encodes the provided string into bytes using the provided encoding scheme.\n *\n * @param s The string to encode.\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n */\n/** @doc {heading: 'Util'} */\nexport function encodeString(s: string, encoding = 'utf-8'): Uint8Array {\n  encoding = encoding || 'utf-8';\n  return ENV.platform.encode(s, encoding);\n}\n\n/**\n * Decodes the provided bytes into a string using the provided encoding scheme.\n * @param bytes The bytes to decode.\n *\n * @param encoding The encoding scheme. Defaults to utf-8.\n */\n/** @doc {heading: 'Util'} */\nexport function decodeString(bytes: Uint8Array, encoding = 'utf-8'): string {\n  encoding = encoding || 'utf-8';\n  return ENV.platform.decode(bytes, encoding);\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendTimer} from './backends/backend';\nimport {Tensor} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport {DataType, DataTypeMap, TypedArray} from './types';\nimport * as util from './util';\n\nexport class Profiler {\n  constructor(private backendTimer: BackendTimer, private logger?: Logger) {\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n\n  profileKernel<T extends Tensor|Tensor[]>(\n      kernelName: string, inputs: NamedTensorMap, f: () => T | Tensor[]): T {\n    let result: T|Tensor[];\n    const holdResultWrapperFn = () => {\n      result = f();\n    };\n    const timer = this.backendTimer.time(holdResultWrapperFn);\n\n    const results: Tensor[] =\n        Array.isArray(result) ? result : [result] as Tensor[];\n    results.forEach(r => {\n      // Dangling promise here because we don't want to propagate up\n      // asynchronicity.\n      r.data().then(vals => {\n        checkComputationForErrors(vals, r.dtype, kernelName);\n\n        timer.then(timing => {\n          let extraInfo = '';\n          if (timing.getExtraProfileInfo != null) {\n            extraInfo = timing.getExtraProfileInfo();\n          }\n\n          this.logger.logKernelProfile(\n              kernelName, r, vals, timing.kernelMs, inputs, extraInfo);\n        });\n      });\n    });\n\n    return result as T;\n  }\n}\n\nexport function checkComputationForErrors<D extends DataType>(\n    vals: DataTypeMap[D], dtype: D, kernelName: string): boolean {\n  if (dtype !== 'float32') {\n    // Only floating point computations will generate NaN values\n    return false;\n  }\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i] as number;\n    if (isNaN(num) || !isFinite(num)) {\n      // Throwing custom exception so behavior is testable.\n      console.warn(`Found ${num} in the result of '${kernelName}'`);\n      return true;\n    }\n  }\n  return false;\n}\n\nexport class Logger {\n  logKernelProfile(\n      name: string, result: Tensor, vals: TypedArray, timeMs: number,\n      inputs: NamedTensorMap, extraInfo?: string) {\n    const time = util.rightPad(`${timeMs}ms`, 9);\n    const paddedName = util.rightPad(name, 25);\n    const rank = result.rank;\n    const size = result.size;\n    const shape = util.rightPad(result.shape.toString(), 14);\n    let inputShapesDescription = '';\n\n    for (const name in inputs) {\n      const inputShape = inputs[name].shape;\n      const inputRank = inputShape.length;\n      inputShapesDescription +=\n          `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n    }\n\n    console.log(\n        `%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${\n            inputShapesDescription}\\t%c${extraInfo}`,\n        'font-weight:bold', 'color:red', 'color:blue', 'color: orange',\n        'color: green', 'color: steelblue');\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray} from './types';\nimport {computeStrides, isString, rightPad, sizeFromShape} from './util';\n\n// Maximum number of values before we decide to show ellipsis.\nconst FORMAT_LIMIT_NUM_VALS = 20;\n// Number of first and last values to show when displaying a, b,...,y, z.\nconst FORMAT_NUM_FIRST_LAST_VALS = 3;\n// Number of significant digits to show.\nconst FORMAT_NUM_SIG_DIGITS = 7;\n\nexport function tensorToString(\n    vals: TypedArray|string[], shape: number[], dtype: DataType,\n    verbose: boolean) {\n  const strides = computeStrides(shape);\n  const padPerCol = computeMaxSizePerColumn(vals, shape, dtype, strides);\n  const rank = shape.length;\n  const valsLines = subTensorToString(vals, shape, dtype, strides, padPerCol);\n  const lines = ['Tensor'];\n  if (verbose) {\n    lines.push(`  dtype: ${dtype}`);\n    lines.push(`  rank: ${rank}`);\n    lines.push(`  shape: [${shape}]`);\n    lines.push(`  values:`);\n  }\n  lines.push(valsLines.map(l => '    ' + l).join('\\n'));\n  return lines.join('\\n');\n}\n\nfunction computeMaxSizePerColumn(\n    vals: TypedArray|string[], shape: number[], dtype: DataType,\n    strides: number[]): number[] {\n  const n = sizeFromShape(shape);\n  const numCols = strides[strides.length - 1];\n  const padPerCol = new Array(numCols).fill(0);\n  const rank = shape.length;\n  const valuesOrTuples =\n      dtype === 'complex64' ? createComplexTuples(vals) : vals;\n\n  if (rank > 1) {\n    for (let row = 0; row < n / numCols; row++) {\n      const offset = row * numCols;\n      for (let j = 0; j < numCols; j++) {\n        padPerCol[j] = Math.max(\n            padPerCol[j],\n            valToString(valuesOrTuples[offset + j], 0, dtype).length);\n      }\n    }\n  }\n  return padPerCol;\n}\n\nfunction valToString(\n    val: number|string|[number, number], pad: number, dtype: DataType) {\n  let valStr: string;\n  if (Array.isArray(val)) {\n    valStr = `${parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ` +\n        `${parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j`;\n  } else if (isString(val)) {\n    valStr = `'${val}'`;\n  } else if (dtype === 'bool') {\n    valStr = boolNumToString(val);\n  } else {\n    valStr = parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();\n  }\n\n  return rightPad(valStr, pad);\n}\n\nfunction boolNumToString(v: number): string {\n  return v === 0 ? 'false' : 'true';\n}\n\nfunction subTensorToString(\n    vals: TypedArray|string[], shape: number[], dtype: DataType,\n    strides: number[], padPerCol: number[], isLast = true): string[] {\n  const storagePerElement = dtype === 'complex64' ? 2 : 1;\n\n  const size = shape[0];\n  const rank = shape.length;\n  if (rank === 0) {\n    if (dtype === 'complex64') {\n      const complexTuple = createComplexTuples(vals);\n      return [valToString(complexTuple[0], 0, dtype)];\n    }\n    if (dtype === 'bool') {\n      return [boolNumToString(vals[0] as number)];\n    }\n    return [vals[0].toString()];\n  }\n\n  if (rank === 1) {\n    if (size > FORMAT_LIMIT_NUM_VALS) {\n      const firstValsSize = FORMAT_NUM_FIRST_LAST_VALS * storagePerElement;\n\n      let firstVals = Array.from<number|string|[number, number]>(\n          vals.slice(0, firstValsSize));\n      let lastVals = Array.from<number|string|[number, number]>(vals.slice(\n          size - FORMAT_NUM_FIRST_LAST_VALS * storagePerElement, size));\n      if (dtype === 'complex64') {\n        firstVals = createComplexTuples(firstVals);\n        lastVals = createComplexTuples(lastVals);\n      }\n      return [\n        '[' +\n        firstVals.map((x, i) => valToString(x, padPerCol[i], dtype))\n            .join(', ') +\n        ', ..., ' +\n        lastVals\n            .map(\n                (x, i) => valToString(\n                    x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i], dtype))\n            .join(', ') +\n        ']'\n      ];\n    }\n    const displayVals: Array<number|string|[number, number]> =\n        dtype === 'complex64' ? createComplexTuples(vals) :\n                                Array.from<number|string>(vals);\n\n    return [\n      '[' +\n      displayVals.map((x, i) => valToString(x, padPerCol[i], dtype))\n          .join(', ') +\n      ']'\n    ];\n  }\n\n  // The array is rank 2 or more.\n  const subshape = shape.slice(1);\n  const substrides = strides.slice(1);\n  const stride = strides[0] * storagePerElement;\n  const lines: string[] = [];\n  if (size > FORMAT_LIMIT_NUM_VALS) {\n    for (let i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(\n          vals.slice(start, end), subshape, dtype, substrides, padPerCol,\n          false /* isLast */));\n    }\n    lines.push('...');\n    for (let i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(\n          vals.slice(start, end), subshape, dtype, substrides, padPerCol,\n          i === size - 1 /* isLast */));\n    }\n  } else {\n    for (let i = 0; i < size; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(\n          vals.slice(start, end), subshape, dtype, substrides, padPerCol,\n          i === size - 1 /* isLast */));\n    }\n  }\n  const sep = rank === 2 ? ',' : '';\n  lines[0] = '[' + lines[0] + sep;\n  for (let i = 1; i < lines.length - 1; i++) {\n    lines[i] = ' ' + lines[i] + sep;\n  }\n  let newLineSep = ',\\n';\n  for (let i = 2; i < rank; i++) {\n    newLineSep += '\\n';\n  }\n  lines[lines.length - 1] =\n      ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);\n  return lines;\n}\n\nfunction createComplexTuples(vals: Array<{}>|\n                             TypedArray): Array<[number, number]> {\n  const complexTuples: Array<[number, number]> = [];\n  for (let i = 0; i < vals.length; i += 2) {\n    complexTuples.push([vals[i], vals[i + 1]] as [number, number]);\n  }\n  return complexTuples;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {tensorToString} from './tensor_format';\nimport {ArrayMap, BackendValues, DataType, DataTypeMap, NumericDataType, Rank, ShapeMap, SingleValueMap, TensorLike, TensorLike1D, TensorLike3D, TensorLike4D, TypedArray} from './types';\nimport * as util from './util';\nimport {computeStrides, toNestedArray} from './util';\n\nexport interface TensorData<D extends DataType> {\n  dataId?: DataId;\n  values?: DataTypeMap[D];\n}\n\n// This interface mimics KernelBackend (in backend.ts), which would create a\n// circular dependency if imported.\nexport interface Backend {\n  read(dataId: object): Promise<BackendValues>;\n  readSync(dataId: object): BackendValues;\n  disposeData(dataId: object): void;\n  write(dataId: object, values: BackendValues): void;\n}\n\n/**\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\n * at locations before converting to an immutable `tf.Tensor`.\n *\n * See `tf.buffer` for creating a tensor buffer.\n */\n/** @doc {heading: 'Tensors', subheading: 'Classes'} */\nexport class TensorBuffer<R extends Rank, D extends DataType = 'float32'> {\n  size: number;\n  shape: ShapeMap[R];\n  strides: number[];\n  values: DataTypeMap[D];\n\n  constructor(shape: ShapeMap[R], public dtype: D, values?: DataTypeMap[D]) {\n    this.shape = shape.slice() as ShapeMap[R];\n    this.size = util.sizeFromShape(shape);\n\n    if (values != null) {\n      const n = values.length;\n      util.assert(\n          n === this.size,\n          () => `Length of values '${n}' does not match the size ` +\n              `inferred by the shape '${this.size}'.`);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `complex64 dtype TensorBuffers are not supported. Please create ` +\n          `a TensorBuffer for the real and imaginary parts separately and ` +\n          `call tf.complex(real, imag).`);\n    }\n    this.values = values || util.getArrayFromDType(dtype, this.size);\n    this.strides = computeStrides(shape);\n  }\n\n  /**\n   * Sets a value in the buffer at a given location.\n   *\n   * @param value The value to set.\n   * @param locs  The location indices.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Creation'} */\n  set(value: SingleValueMap[D], ...locs: number[]): void {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n    util.assert(\n        locs.length === this.rank,\n        () => `The number of provided coordinates (${locs.length}) must ` +\n            `match the rank (${this.rank})`);\n\n    const index = this.locToIndex(locs);\n    this.values[index] = value as number;\n  }\n\n  /**\n   * Returns the value in the buffer at the provided location.\n   *\n   * @param locs The location indices.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Creation'} */\n  get(...locs: number[]): SingleValueMap[D] {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n    let i = 0;\n    for (const loc of locs) {\n      if (loc < 0 || loc >= this.shape[i]) {\n        const msg = `Requested out of range element at ${locs}. ` +\n            `  Buffer shape=${this.shape}`;\n        throw new Error(msg);\n      }\n      i++;\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n      index += this.strides[i] * locs[i];\n    }\n    return this.values[index] as SingleValueMap[D];\n  }\n\n  locToIndex(locs: number[]): number {\n    if (this.rank === 0) {\n      return 0;\n    } else if (this.rank === 1) {\n      return locs[0];\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n      index += this.strides[i] * locs[i];\n    }\n    return index;\n  }\n\n  indexToLoc(index: number): number[] {\n    if (this.rank === 0) {\n      return [];\n    } else if (this.rank === 1) {\n      return [index];\n    }\n    const locs: number[] = new Array(this.shape.length);\n    for (let i = 0; i < locs.length - 1; ++i) {\n      locs[i] = Math.floor(index / this.strides[i]);\n      index -= locs[i] * this.strides[i];\n    }\n    locs[locs.length - 1] = index;\n    return locs;\n  }\n\n  get rank() {\n    return this.shape.length;\n  }\n\n  /**\n   * Creates an immutable `tf.Tensor` object from the buffer.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Creation'} */\n  toTensor(): Tensor<R> {\n    return Tensor.make(this.shape, {values: this.values}, this.dtype);\n  }\n}\n\nexport interface TensorTracker {\n  registerTensor(t: Tensor, backend?: Backend): void;\n  disposeTensor(t: Tensor): void;\n  disposeVariable(v: Variable): void;\n  write(backend: Backend, dataId: DataId, values: BackendValues): void;\n  read(dataId: DataId): Promise<BackendValues>;\n  readSync(dataId: DataId): BackendValues;\n  registerVariable(v: Variable): void;\n  nextTensorId(): number;\n  nextVariableId(): number;\n}\n\n/**\n * The Tensor class calls into this handler to delegate chaining operations.\n */\nexport interface OpHandler {\n  cast<T extends Tensor>(x: T, dtype: DataType): T;\n  buffer<R extends Rank, D extends DataType>(\n      shape: ShapeMap[R], dtype: D,\n      values?: DataTypeMap[D]): TensorBuffer<R, D>;\n  print<T extends Tensor>(x: T, verbose: boolean): void;\n  reshape<R2 extends Rank>(x: Tensor, shape: ShapeMap[R2]): Tensor<R2>;\n  expandDims<R2 extends Rank>(x: Tensor, axis: number): Tensor<R2>;\n  cumsum<T extends Tensor>(\n      x: Tensor, axis: number, exclusive: boolean, reverse: boolean): T;\n  squeeze<T extends Tensor>(x: Tensor, axis?: number[]): T;\n  clone<T extends Tensor>(x: T): T;\n  oneHot(\n      x: Tensor|TensorLike, depth: number, onValue?: number,\n      offValue?: number): Tensor;\n  tile<T extends Tensor>(x: T, reps: number[]): T;\n  gather<T extends Tensor>(x: T, indices: Tensor|TensorLike, axis: number): T;\n  matMul<T extends Tensor>(\n      a: T, b: T|TensorLike, transposeA: boolean, transposeB: boolean): T;\n  dot(t1: Tensor, t2: Tensor|TensorLike): Tensor;\n  norm(\n      x: Tensor, ord: number|'euclidean'|'fro', axis: number|number[],\n      keepDims: boolean): Tensor;\n  slice<R extends Rank, T extends Tensor<R>>(\n      x: T, begin: number|number[], size?: number|number[]): T;\n  split<T extends Tensor>(\n      x: T, numOrSizeSplits: number[]|number, axis?: number): T[];\n  reverse<T extends Tensor>(x: T, axis?: number|number[]): T;\n  concat<T extends Tensor>(tensors: Array<T|TensorLike>, axis: number): T;\n  stack<T extends Tensor>(tensors: Array<T|TensorLike>, axis: number): Tensor;\n  unstack<T extends Tensor>(value: T, axis: number): Tensor[];\n  pad<T extends Tensor>(\n      x: T, paddings: Array<[number, number]>, constantValue: number): T;\n  batchNorm<R extends Rank>(\n      x: Tensor<R>, mean: Tensor<R>|Tensor1D|TensorLike,\n      variance: Tensor<R>|Tensor1D|TensorLike,\n      offset?: Tensor<R>|Tensor1D|TensorLike,\n      scale?: Tensor<R>|Tensor1D|TensorLike,\n      varianceEpsilon?: number): Tensor<R>;\n  all<T extends Tensor>(x: Tensor, axis: number|number[], keepDims: boolean): T;\n  any<T extends Tensor>(x: Tensor, axis: number|number[], keepDims: boolean): T;\n  logSumExp<T extends Tensor>(\n      x: Tensor, axis: number|number[], keepDims: boolean): T;\n  sum<T extends Tensor>(x: Tensor, axis: number|number[], keepDims: boolean): T;\n  prod<T extends Tensor>(x: Tensor, axis: number|number[], keepDims: boolean):\n      T;\n  mean<T extends Tensor>(x: Tensor, axis: number|number[], keepDims: boolean):\n      T;\n  min<T extends Tensor>(x: Tensor, axis: number|number[], keepDims: boolean): T;\n  max<T extends Tensor>(x: Tensor, axis: number|number[], keepDims: boolean): T;\n  argMin<T extends Tensor>(x: Tensor, axis: number): T;\n  argMax<T extends Tensor>(x: Tensor, axis: number): T;\n  add<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  addStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  atan2<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  sub<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  subStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  pow<T extends Tensor>(base: T, exp: Tensor|TensorLike): T;\n  powStrict<T extends Tensor>(base: T, exp: Tensor|TensorLike): T;\n  mul<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  mulStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  div<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  floorDiv<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  divStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  mod<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  modStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  minimum<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  minimumStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  maximum<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  maximumStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  squaredDifference<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  squaredDifferenceStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  transpose<T extends Tensor>(x: T, perm?: number[]): T;\n  logicalNot<T extends Tensor>(x: T): T;\n  logicalAnd<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  logicalOr<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  logicalXor<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  where<T extends Tensor>(condition: Tensor|TensorLike, a: T, b: T|TensorLike):\n      T;\n  notEqual<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  notEqualStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  less<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  lessStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  equal<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  equalStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  lessEqual<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  lessEqualStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  greater<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  greaterStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  greaterEqual<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  greaterEqualStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  neg<T extends Tensor>(x: T): T;\n  ceil<T extends Tensor>(x: T): T;\n  floor<T extends Tensor>(x: T): T;\n  sign<T extends Tensor>(x: T): T;\n  isNaN<T extends Tensor>(x: T): T;\n  isInf<T extends Tensor>(x: T): T;\n  isFinite<T extends Tensor>(x: T): T;\n  round<T extends Tensor>(x: T): T;\n  exp<T extends Tensor>(x: T): T;\n  expm1<T extends Tensor>(x: T): T;\n  log<T extends Tensor>(x: T): T;\n  log1p<T extends Tensor>(x: T): T;\n  sqrt<T extends Tensor>(x: T): T;\n  rsqrt<T extends Tensor>(x: T): T;\n  square<T extends Tensor>(x: T): T;\n  reciprocal<T extends Tensor>(x: T): T;\n  abs<T extends Tensor>(x: T): T;\n  clipByValue<T extends Tensor>(\n      x: T, clipValueMin: number, clipValueMax: number): T;\n  sigmoid<T extends Tensor>(x: T): T;\n  logSigmoid<T extends Tensor>(x: T): T;\n  softplus<T extends Tensor>(x: T): T;\n  zerosLike<T extends Tensor>(x: T): T;\n  onesLike<T extends Tensor>(x: T): T;\n  sin<T extends Tensor>(x: T): T;\n  cos<T extends Tensor>(x: T): T;\n  tan<T extends Tensor>(x: T): T;\n  asin<T extends Tensor>(x: T): T;\n  acos<T extends Tensor>(x: T): T;\n  atan<T extends Tensor>(x: T): T;\n  sinh<T extends Tensor>(x: T): T;\n  cosh<T extends Tensor>(x: T): T;\n  tanh<T extends Tensor>(x: T): T;\n  asinh<T extends Tensor>(x: T): T;\n  acosh<T extends Tensor>(x: T): T;\n  atanh<T extends Tensor>(x: T): T;\n  erf<T extends Tensor>(x: T): T;\n  step<T extends Tensor>(x: T, alpha: number): T;\n  relu<T extends Tensor>(x: T): T;\n  elu<T extends Tensor>(x: T): T;\n  selu<T extends Tensor>(x: T): T;\n  leakyRelu<T extends Tensor>(x: T, alpha: number): T;\n  prelu<T extends Tensor>(x: T, alpha: T|TensorLike): T;\n  softmax<T extends Tensor>(logits: T, dim: number): T;\n  logSoftmax<T extends Tensor>(logits: T, axis: number): T;\n  image: {\n    resizeBilinear<T extends Tensor3D|Tensor4D>(\n        images: T, size: [number, number], alignCorners: boolean): T;\n    resizeNearestNeighbor<T extends Tensor3D|Tensor4D>(\n        images: T, size: [number, number], alignCorners: boolean): T;\n  };\n  conv1d<T extends Tensor2D|Tensor3D>(\n      x: T, filter: Tensor3D|TensorLike3D, stride: number,\n      pad: 'valid'|'same'|number, dataFormat: 'NWC'|'NCW', dilation: number,\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T;\n  conv2d<T extends Tensor3D|Tensor4D>(\n      x: T, filter: Tensor4D|TensorLike4D, strides: [number, number]|number,\n      pad: 'valid'|'same'|number, dataFormat: 'NHWC'|'NCHW',\n      dilations: [number, number]|number,\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T;\n  conv2dTranspose<T extends Tensor3D|Tensor4D>(\n      x: T, filter: Tensor4D|TensorLike4D,\n      outputShape: [number, number, number, number]|[number, number, number],\n      strides: [number, number]|number, pad: 'valid'|'same'|number,\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T;\n  depthwiseConv2d<T extends Tensor3D|Tensor4D>(\n      x: T, filter: Tensor4D|TensorLike4D, strides: [number, number]|number,\n      pad: 'valid'|'same'|number, dataFormat: 'NHWC'|'NCHW',\n      dilations: [number, number]|number,\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T;\n  separableConv2d<T extends Tensor3D|Tensor4D>(\n      x: T|TensorLike, depthwiseFilter: Tensor4D|TensorLike4D,\n      pointwiseFilter: Tensor4D|TensorLike, strides: [number, number]|number,\n      pad: 'valid'|'same', dilation: [number, number]|number,\n      dataFormat: 'NHWC'|'NCHW'): T;\n  maxPool<T extends Tensor3D|Tensor4D>(\n      x: T, filterSize: [number, number]|number,\n      strides: [number, number]|number, pad: 'valid'|'same'|number,\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T;\n  avgPool<T extends Tensor3D|Tensor4D>(\n      x: T, filterSize: [number, number]|number,\n      strides: [number, number]|number, pad: 'valid'|'same'|number,\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T;\n  pool<T extends Tensor3D|Tensor4D>(\n      input: T, windowShape: [number, number]|number, poolingType: 'avg'|'max',\n      padding: 'valid'|'same'|number, diationRate?: [number, number]|number,\n      strides?: [number, number]|number): T;\n  localResponseNormalization<T extends Tensor3D|Tensor4D>(\n      x: T, depthRadius: number, bias: number, alpha: number, beta: number): T;\n  unsortedSegmentSum<T extends Tensor>(\n      x: T, segmentIds: Tensor1D|TensorLike1D, numSegments: number): T;\n  batchToSpaceND<T extends Tensor>(\n      x: T, blockShape: number[], crops: number[][]): T;\n  spaceToBatchND<T extends Tensor>(\n      x: T, blockShape: number[], paddings: number[][]): T;\n  topk<T extends Tensor>(x: T, k: number, sorted: boolean):\n      {values: T, indices: T};\n  stridedSlice(\n      x: Tensor, begin: number[], end: number[], strides: number[],\n      beginMask: number, endMask: number, ellipsisMask: number,\n      newAxisMask: number, shrinkAxisMask: number): Tensor;\n  depthToSpace(x: Tensor4D, blockSize: number, dataFormat: string): Tensor4D;\n  spectral: {\n    fft(x: Tensor): Tensor; ifft(x: Tensor): Tensor; rfft(x: Tensor): Tensor;\n    irfft(x: Tensor): Tensor\n  };\n}\n\n// For tracking tensor creation and disposal.\nlet trackerFn: () => TensorTracker = null;\n// Used by chaining methods to call into ops.\nlet opHandler: OpHandler = null;\n// Used to warn about deprecated methods.\nlet deprecationWarningFn: (msg: string) => void = null;\n// This here so that we can use this method on dev branches and keep the\n// functionality at master.\n// tslint:disable-next-line:no-unused-expression\n[deprecationWarningFn];\n\n/**\n * An external consumer can register itself as the tensor tracker. This way\n * the Tensor class can notify the tracker for every tensor created and\n * disposed.\n */\nexport function setTensorTracker(fn: () => TensorTracker) {\n  trackerFn = fn;\n}\n\n/**\n * An external consumer can register itself as the op handler. This way the\n * Tensor class can have chaining methods that call into ops via the op handler.\n */\nexport function setOpHandler(handler: OpHandler) {\n  opHandler = handler;\n}\n\n/**\n * Sets the deprecation warning function to be used by this file. This way the\n * Tensor class can be a leaf but still use the environment.\n */\nexport function setDeprecationWarningFn(fn: (msg: string) => void) {\n  deprecationWarningFn = fn;\n}\n\n/**\n * We wrap data id since we use weak map to avoid memory leaks.\n * Since we have our own memory management, we have a reference counter\n * mapping a tensor to its data, so there is always a pointer (even if that\n * data is otherwise garbage collectable).\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/\n * Global_Objects/WeakMap\n */\nexport type DataId = object;  // object instead of {} to force non-primitive.\n\n/**\n * A `tf.Tensor` object represents an immutable, multidimensional array of\n * numbers that has a shape and a data type.\n *\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\n */\n/** @doc {heading: 'Tensors', subheading: 'Classes'} */\nexport class Tensor<R extends Rank = Rank> {\n  /** Unique id of this tensor. */\n  readonly id: number;\n  /**\n   * Id of the bucket holding the data for this tensor. Multiple arrays can\n   * point to the same bucket (e.g. when calling array.reshape()).\n   */\n  dataId: DataId;\n  /** The shape of the tensor. */\n  readonly shape: ShapeMap[R];\n  /** Number of elements in the tensor. */\n  readonly size: number;\n  /** The data type for the array. */\n  readonly dtype: DataType;\n  /** The rank type for the array (see `Rank` enum). */\n  readonly rankType: R;\n\n  /** Whether this tensor has been globally kept. */\n  kept = false;\n  /** The id of the scope this tensor is being tracked in. */\n  scopeId: number;\n\n  /**\n   * Number of elements to skip in each dimension when indexing. See\n   * https://docs.scipy.org/doc/numpy/reference/generated/\\\n   * numpy.ndarray.strides.html\n   */\n  readonly strides: number[];\n\n  protected constructor(\n      shape: ShapeMap[R], dtype: DataType, values?: BackendValues,\n      dataId?: DataId, backend?: Backend) {\n    this.shape = shape.slice() as ShapeMap[R];\n    this.dtype = dtype || 'float32';\n    this.size = util.sizeFromShape(shape);\n    this.strides = computeStrides(shape);\n    this.dataId = dataId != null ? dataId : {};\n    this.id = trackerFn().nextTensorId();\n    this.rankType = (this.rank < 5 ? this.rank.toString() : 'higher') as R;\n    trackerFn().registerTensor(this, backend);\n    if (values != null) {\n      trackerFn().write(backend, this.dataId, values);\n    }\n  }\n\n  /**\n   * Makes a new tensor with the provided shape and values. Values should be in\n   * a flat array.\n   */\n  static make<T extends Tensor<R>, D extends DataType = 'float32',\n                                             R extends Rank = Rank>(\n      shape: ShapeMap[R], data: TensorData<D>, dtype?: D,\n      backend?: Backend): T {\n    let backendVals = data.values as BackendValues;\n    if (data.values != null && dtype === 'string' &&\n        util.isString(data.values[0])) {\n      backendVals = (data.values as string[]).map(d => util.encodeString(d));\n    }\n    return new Tensor(shape, dtype, backendVals, data.dataId, backend) as T;\n  }\n\n  /** Flatten a Tensor to a 1D array. */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  flatten(): Tensor1D {\n    this.throwIfDisposed();\n    return this.as1D();\n  }\n\n  /** Converts a size-1 `tf.Tensor` to a `tf.Scalar`. */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  asScalar(): Scalar {\n    this.throwIfDisposed();\n    util.assert(this.size === 1, () => 'The array must have only 1 element.');\n    return this.reshape<Rank.R0>([]);\n  }\n\n  /** Converts a `tf.Tensor` to a `tf.Tensor1D`. */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  as1D(): Tensor1D {\n    this.throwIfDisposed();\n    return this.reshape<Rank.R1>([this.size]);\n  }\n\n  /**\n   * Converts a `tf.Tensor` to a `tf.Tensor2D`.\n   *\n   * @param rows Number of rows in `tf.Tensor2D`.\n   * @param columns Number of columns in `tf.Tensor2D`.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  as2D(rows: number, columns: number): Tensor2D {\n    this.throwIfDisposed();\n    return this.reshape<Rank.R2>([rows, columns]);\n  }\n\n  /**\n   * Converts a `tf.Tensor` to a `tf.Tensor3D`.\n   *\n   * @param rows Number of rows in `tf.Tensor3D`.\n   * @param columns Number of columns in `tf.Tensor3D`.\n   * @param depth Depth of `tf.Tensor3D`.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  as3D(rows: number, columns: number, depth: number): Tensor3D {\n    this.throwIfDisposed();\n    return this.reshape<Rank.R3>([rows, columns, depth]);\n  }\n\n  /**\n   * Converts a `tf.Tensor` to a `tf.Tensor4D`.\n   *\n   * @param rows Number of rows in `tf.Tensor4D`.\n   * @param columns Number of columns in `tf.Tensor4D`.\n   * @param depth Depth of `tf.Tensor4D`.\n   * @param depth2 4th dimension of `tf.Tensor4D`.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  as4D(rows: number, columns: number, depth: number, depth2: number): Tensor4D {\n    this.throwIfDisposed();\n    return this.reshape<Rank.R4>([rows, columns, depth, depth2]);\n  }\n\n  /**\n   * Converts a `tf.Tensor` to a `tf.Tensor5D`.\n   *\n   * @param rows Number of rows in `tf.Tensor5D`.\n   * @param columns Number of columns in `tf.Tensor5D`.\n   * @param depth Depth of `tf.Tensor5D`.\n   * @param depth2 4th dimension of `tf.Tensor5D`.\n   * @param depth3 5th dimension of 'tf.Tensor5D'\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  as5D(\n      rows: number, columns: number, depth: number, depth2: number,\n      depth3: number): Tensor5D {\n    this.throwIfDisposed();\n    return this.reshape<Rank.R5>([rows, columns, depth, depth2, depth3]);\n  }\n\n  /**\n   * Casts a `tf.Tensor` to a specified dtype.\n   *\n   * @param dtype Data-type to cast the tensor to.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  asType<T extends this>(this: T, dtype: DataType): T {\n    this.throwIfDisposed();\n    return opHandler.cast(this, dtype);\n  }\n\n  get rank(): number {\n    return this.shape.length;\n  }\n\n  /** Returns a promise of `tf.TensorBuffer` that holds the underlying data. */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  async buffer<D extends DataType = 'float32'>(): Promise<TensorBuffer<R, D>> {\n    const vals = await this.data<D>();\n    return opHandler.buffer(this.shape, this.dtype as D, vals);\n  }\n\n  /** Returns a `tf.TensorBuffer` that holds the underlying data. */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  bufferSync<D extends DataType = 'float32'>(): TensorBuffer<R, D> {\n    return opHandler.buffer(this.shape, this.dtype as D, this.dataSync());\n  }\n\n  /**\n   * Returns the tensor data as a nested array. The transfer of data is done\n   * asynchronously.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  async array(): Promise<ArrayMap[R]> {\n    const vals = await this.data();\n    return toNestedArray(this.shape, vals) as ArrayMap[R];\n  }\n\n  /**\n   * Returns the tensor data as a nested array. The transfer of data is done\n   * synchronously.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  arraySync(): ArrayMap[R] {\n    return toNestedArray(this.shape, this.dataSync()) as ArrayMap[R];\n  }\n\n  /**\n   * Asynchronously downloads the values from the `tf.Tensor`. Returns a promise\n   * of `TypedArray` that resolves when the computation has finished.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  async data<D extends DataType = NumericDataType>(): Promise<DataTypeMap[D]> {\n    this.throwIfDisposed();\n    const data = trackerFn().read(this.dataId);\n    if (this.dtype === 'string') {\n      const bytes = await data as Uint8Array[];\n      try {\n        return bytes.map(b => util.decodeString(b)) as DataTypeMap[D];\n      } catch {\n        throw new Error(\n            'Failed to decode the string bytes into utf-8. ' +\n            'To get the original bytes, call tensor.bytes().');\n      }\n    }\n    return data as Promise<DataTypeMap[D]>;\n  }\n\n  /**\n   * Synchronously downloads the values from the `tf.Tensor`. This blocks the UI\n   * thread until the values are ready, which can cause performance issues.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  dataSync<D extends DataType = NumericDataType>(): DataTypeMap[D] {\n    this.throwIfDisposed();\n    const data = trackerFn().readSync(this.dataId);\n    if (this.dtype === 'string') {\n      try {\n        return (data as Uint8Array[]).map(b => util.decodeString(b)) as\n            DataTypeMap[D];\n      } catch {\n        throw new Error(\n            'Failed to decode the string bytes into utf-8. ' +\n            'To get the original bytes, call tensor.bytes().');\n      }\n    }\n    return data as DataTypeMap[D];\n  }\n\n  /** Returns the underlying bytes of the tensor's data. */\n  async bytes(): Promise<Uint8Array[]|Uint8Array> {\n    this.throwIfDisposed();\n    const data = await trackerFn().read(this.dataId);\n    if (this.dtype === 'string') {\n      return data as Uint8Array[];\n    } else {\n      return new Uint8Array((data as TypedArray).buffer);\n    }\n  }\n\n  /**\n   * Disposes `tf.Tensor` from memory.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    trackerFn().disposeTensor(this);\n    this.isDisposedInternal = true;\n  }\n\n  protected isDisposedInternal = false;\n  get isDisposed(): boolean {\n    return this.isDisposedInternal;\n  }\n\n  private throwIfDisposed() {\n    if (this.isDisposed) {\n      throw new Error(`Tensor is disposed.`);\n    }\n  }\n\n  /** Casts the array to type `float32` */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  toFloat<T extends this>(this: T): T {\n    return this.asType('float32');\n  }\n\n  /** Casts the array to type `int32` */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  toInt() {\n    return this.asType('int32');\n  }\n\n  /** Casts the array to type `bool` */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  toBool() {\n    return this.asType('bool');\n  }\n\n  /**\n   * Prints the `tf.Tensor`. See `tf.print` for details.\n   *\n   * @param verbose Whether to print verbose information about the tensor,\n   *    including dtype and size.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  print(verbose = false): void {\n    return opHandler.print(this, verbose);\n  }\n\n  /**\n   * Reshapes the tensor into the provided shape.\n   * See `tf.reshape` for more details.\n   *\n   * @param newShape An array of integers defining the output tensor shape.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  reshape<R2 extends Rank>(newShape: ShapeMap[R2]): Tensor<R2> {\n    this.throwIfDisposed();\n    return opHandler.reshape(this, newShape);\n  }\n\n  /**\n   * Reshapes the tensor into the shape of the provided tensor.\n   *\n   * @param x The tensor of required shape.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  reshapeAs<T extends Tensor>(x: T): T {\n    this.throwIfDisposed();\n    return this.reshape(x.shape) as T;\n  }\n\n  /**\n   * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension\n   * into the tensor's shape. See `tf.expandDims` for details.\n   *\n   * @param axis The dimension index at which to insert shape of 1. Defaults to\n   *    0 (the first dimension).\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  expandDims<R2 extends Rank>(axis = 0): Tensor<R2> {\n    return opHandler.expandDims(this, axis);\n  }\n\n  /**\n   * Returns the cumulative sum of the `tf.Tensor` along `axis`.\n   *\n   * @param axis The axis along which to sum. Optional. Defaults to 0.\n   * @param exclusive Whether to perform exclusive cumulative sum. Defaults to\n   *    false. If set to true then the sum of each tensor entry does not include\n   *    its own value, but only the values previous to it along the specified\n   *    axis.\n   * @param reverse Whether to sum in the opposite direction. Defaults to\n   *    false.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  cumsum<T extends Tensor>(axis = 0, exclusive = false, reverse = false): T {\n    return opHandler.cumsum(this, axis, exclusive, reverse);\n  }\n\n  /**\n   * Returns a `tf.Tensor` with dimensions of size 1 removed from the shape.\n   * See `tf.squeeze` for more details.\n   *\n   * @param axis A list of numbers. If specified, only squeezes the\n   *    dimensions listed. The dimension index starts at 0. It is an error to\n   *    squeeze a dimension that is not 1.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  squeeze<T extends Tensor>(axis?: number[]): T {\n    this.throwIfDisposed();\n    return opHandler.squeeze(this, axis);\n  }\n\n  /** Returns a copy of the tensor. See `tf.clone` for details. */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  clone<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.clone(this);\n  }\n\n  oneHot(this: Tensor, depth: number, onValue?: number, offValue?: number):\n      Tensor {\n    this.throwIfDisposed();\n    return opHandler.oneHot(this, depth, onValue, offValue);\n  }\n\n  /** Returns a human-readable description of the tensor. Useful for logging. */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  toString(verbose = false): string {\n    const vals = this.dataSync();\n    return tensorToString(vals, this.shape, this.dtype, verbose);\n  }\n\n  // Below is chain API that is not exposed to docs to avoid repetition. To\n  // expose a method, move it above this comment and add @doc and jsdoc.\n\n  tile<T extends this>(this: T, reps: number[]): T {\n    this.throwIfDisposed();\n    return opHandler.tile(this, reps);\n  }\n\n  gather<T extends this>(this: T, indices: Tensor|TensorLike, axis = 0): T {\n    this.throwIfDisposed();\n    return opHandler.gather(this, indices, axis);\n  }\n\n  matMul<T extends Tensor>(\n      this: T, b: T|TensorLike, transposeA = false, transposeB = false): T {\n    this.throwIfDisposed();\n    return opHandler.matMul(this, b, transposeA, transposeB);\n  }\n  dot(b: Tensor|TensorLike): Tensor {\n    this.throwIfDisposed();\n    return opHandler.dot(this, b);\n  }\n  norm(\n      ord: number|'euclidean'|'fro' = 'euclidean', axis: number|number[] = null,\n      keepDims = false): Tensor {\n    this.throwIfDisposed();\n    return opHandler.norm(this, ord, axis, keepDims);\n  }\n  slice<T extends Tensor<R>>(\n      this: T, begin: number|number[], size?: number|number[]): T {\n    this.throwIfDisposed();\n    return opHandler.slice(this, begin, size);\n  }\n  reverse<T extends Tensor>(this: T, axis?: number|number[]): T {\n    this.throwIfDisposed();\n    return opHandler.reverse(this, axis);\n  }\n  concat<T extends Tensor>(this: T, x: T|Array<T|TensorLike>, axis = 0): T {\n    this.throwIfDisposed();\n    if (x instanceof Tensor) {\n      x = [x];\n    }\n    return opHandler.concat([this, ...x], axis);\n  }\n  split<T extends Tensor>(this: T, numOrSizeSplits: number[]|number, axis = 0):\n      T[] {\n    this.throwIfDisposed();\n    return opHandler.split(this, numOrSizeSplits, axis);\n  }\n  stack(x: Tensor, axis = 0): Tensor {\n    return opHandler.stack([this, x], axis);\n  }\n  unstack(axis = 0): Tensor[] {\n    return opHandler.unstack(this, axis);\n  }\n  pad<T extends Tensor>(\n      this: T, paddings: Array<[number, number]>, constantValue = 0): T {\n    return opHandler.pad(this, paddings, constantValue);\n  }\n  /**\n   * @deprecated Use `tf.batchNorm` instead, and note the positional argument\n   *     change of scale, offset, and varianceEpsilon.\n   */\n  batchNormalization(\n      mean: Tensor<R>|Tensor1D|TensorLike,\n      variance: Tensor<R>|Tensor1D|TensorLike, varianceEpsilon = .001,\n      scale?: Tensor<R>|Tensor1D|TensorLike,\n      offset?: Tensor<R>|Tensor1D|TensorLike): Tensor<R> {\n    deprecationWarningFn(\n        'tf.batchNormalization() is going away. ' +\n        'Use tf.batchNorm() instead, and note the positional argument change ' +\n        'of scale, offset, and varianceEpsilon');\n    return this.batchNorm(mean, variance, offset, scale, varianceEpsilon);\n  }\n\n  batchNorm(\n      mean: Tensor<R>|Tensor1D|TensorLike,\n      variance: Tensor<R>|Tensor1D|TensorLike,\n      offset?: Tensor<R>|Tensor1D|TensorLike,\n      scale?: Tensor<R>|Tensor1D|TensorLike,\n      varianceEpsilon = .001,\n      ): Tensor<R> {\n    this.throwIfDisposed();\n    return opHandler.batchNorm(\n        this, mean, variance, offset, scale, varianceEpsilon);\n  }\n  // Reduction ops.\n  all<T extends Tensor>(axis: number|number[] = null, keepDims = false): T {\n    this.throwIfDisposed();\n    return opHandler.all(this, axis, keepDims);\n  }\n  any<T extends Tensor>(axis: number|number[] = null, keepDims = false): T {\n    this.throwIfDisposed();\n    return opHandler.any(this, axis, keepDims);\n  }\n  logSumExp<T extends Tensor>(axis: number|number[] = null, keepDims = false):\n      T {\n    this.throwIfDisposed();\n    return opHandler.logSumExp(this, axis, keepDims);\n  }\n  sum<T extends Tensor>(axis: number|number[] = null, keepDims = false): T {\n    this.throwIfDisposed();\n    return opHandler.sum(this, axis, keepDims);\n  }\n  prod<T extends Tensor>(axis: number|number[] = null, keepDims = false): T {\n    this.throwIfDisposed();\n    return opHandler.prod(this, axis, keepDims);\n  }\n  mean<T extends Tensor>(axis: number|number[] = null, keepDims = false): T {\n    this.throwIfDisposed();\n    return opHandler.mean(this, axis, keepDims);\n  }\n  min<T extends Tensor>(axis: number|number[] = null, keepDims = false): T {\n    this.throwIfDisposed();\n    return opHandler.min(this, axis, keepDims);\n  }\n  max<T extends Tensor>(axis: number|number[] = null, keepDims = false): T {\n    this.throwIfDisposed();\n    return opHandler.max(this, axis, keepDims);\n  }\n  argMin<T extends Tensor>(axis: number = null): T {\n    this.throwIfDisposed();\n    return opHandler.argMin(this, axis);\n  }\n  argMax<T extends Tensor>(axis: number = null): T {\n    this.throwIfDisposed();\n    return opHandler.argMax(this, axis);\n  }\n\n  // Transformations\n  cast<T extends this>(dtype: DataType): T {\n    this.throwIfDisposed();\n    return opHandler.cast(this as T, dtype);\n  }\n\n  // Binary ops.\n\n  add<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.add(this, x);\n  }\n  addStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.addStrict(this, x);\n  }\n  atan2<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.atan2(this, x);\n  }\n  sub<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.sub(this, x);\n  }\n  subStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.subStrict(this, x);\n  }\n  pow<T extends Tensor>(this: T, exp: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.pow(this, exp);\n  }\n  powStrict(exp: Tensor|TensorLike): Tensor<R> {\n    this.throwIfDisposed();\n    return opHandler.powStrict(this, exp);\n  }\n  mul<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.mul(this, x);\n  }\n  mulStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.mulStrict(this, x);\n  }\n  div<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.div(this, x);\n  }\n  floorDiv<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.floorDiv(this, x);\n  }\n  divStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.divStrict(this, x);\n  }\n  minimum<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.minimum(this, x);\n  }\n  minimumStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.minimumStrict(this, x);\n  }\n  maximum<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.maximum(this, x);\n  }\n  maximumStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.maximumStrict(this, x);\n  }\n  mod<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.mod(this, x);\n  }\n  modStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.modStrict(this, x);\n  }\n  squaredDifference<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.squaredDifference(this, x);\n  }\n  squaredDifferenceStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.squaredDifferenceStrict(this, x);\n  }\n  transpose<T extends Tensor>(this: T, perm?: number[]): T {\n    this.throwIfDisposed();\n    return opHandler.transpose(this, perm);\n  }\n\n  // Compare ops.\n\n  notEqual<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.notEqual(this, x);\n  }\n  notEqualStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.notEqualStrict(this, x);\n  }\n  less<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.less(this, x);\n  }\n  lessStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.lessStrict(this, x);\n  }\n  equal<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.equal(this, x);\n  }\n  equalStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.equalStrict(this, x);\n  }\n  lessEqual<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.lessEqual(this, x);\n  }\n  lessEqualStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.lessEqualStrict(this, x);\n  }\n  greater<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.greater(this, x);\n  }\n  greaterStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.greaterStrict(this, x);\n  }\n  greaterEqual<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.greaterEqual(this, x);\n  }\n  greaterEqualStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.greaterEqualStrict(this, x);\n  }\n\n  // Compare ops.\n  logicalAnd(x: Tensor|TensorLike): Tensor {\n    this.throwIfDisposed();\n    return opHandler.logicalAnd(this, x);\n  }\n  logicalOr(x: Tensor|TensorLike): Tensor {\n    this.throwIfDisposed();\n    return opHandler.logicalOr(this, x);\n  }\n  logicalNot<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.logicalNot(this);\n  }\n  logicalXor(x: Tensor|TensorLike): Tensor {\n    this.throwIfDisposed();\n    return opHandler.logicalXor(this, x);\n  }\n  where(condition: Tensor|TensorLike, x: Tensor|TensorLike): Tensor {\n    this.throwIfDisposed();\n    return opHandler.where(condition, this, x);\n  }\n\n  // Unary ops.\n  neg<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.neg(this);\n  }\n  ceil<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.ceil(this);\n  }\n  floor<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.floor(this);\n  }\n  sign<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.sign(this);\n  }\n  isNaN<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.isNaN(this);\n  }\n  isInf<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.isInf(this);\n  }\n  isFinite<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.isFinite(this);\n  }\n  exp<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.exp(this);\n  }\n  expm1<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.expm1(this);\n  }\n  log<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.log(this);\n  }\n  log1p<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.log1p(this);\n  }\n  sqrt<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.sqrt(this);\n  }\n  rsqrt<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.rsqrt(this);\n  }\n  square<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.square(this);\n  }\n  reciprocal<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.reciprocal(this);\n  }\n  abs<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.abs(this);\n  }\n  clipByValue(min: number, max: number): Tensor<R> {\n    this.throwIfDisposed();\n    return opHandler.clipByValue(this, min, max);\n  }\n  relu<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.relu(this);\n  }\n  elu<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.elu(this);\n  }\n  selu<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.selu(this);\n  }\n  leakyRelu(alpha = 0.2): Tensor<R> {\n    this.throwIfDisposed();\n    return opHandler.leakyRelu(this, alpha);\n  }\n  prelu(alpha: Tensor<R>|TensorLike): Tensor<R> {\n    this.throwIfDisposed();\n    return opHandler.prelu(this, alpha);\n  }\n  sigmoid<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.sigmoid(this);\n  }\n  logSigmoid<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.logSigmoid(this);\n  }\n  softplus<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.softplus(this);\n  }\n  zerosLike<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.zerosLike(this);\n  }\n  onesLike<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.onesLike(this);\n  }\n  sin<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.sin(this);\n  }\n  cos<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.cos(this);\n  }\n  tan<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.tan(this);\n  }\n  asin<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.asin(this);\n  }\n  acos<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.acos(this);\n  }\n  atan<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.atan(this);\n  }\n  sinh<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.sinh(this);\n  }\n  cosh<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.cosh(this);\n  }\n  tanh<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.tanh(this);\n  }\n  asinh<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.asinh(this);\n  }\n  acosh<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.acosh(this);\n  }\n  atanh<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.atanh(this);\n  }\n  erf<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.erf(this);\n  }\n  round<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.round(this);\n  }\n  step<T extends Tensor>(this: T, alpha = 0.0): T {\n    this.throwIfDisposed();\n    return opHandler.step(this, alpha);\n  }\n  softmax<T extends this>(this: T, dim = -1): T {\n    this.throwIfDisposed();\n    return opHandler.softmax(this, dim);\n  }\n  logSoftmax<T extends this>(this: T, axis = -1): T {\n    this.throwIfDisposed();\n    return opHandler.logSoftmax(this, axis);\n  }\n\n  // Image ops.\n  resizeBilinear<T extends Tensor3D|Tensor4D>(\n      this: T, newShape2D: [number, number], alignCorners = false): T {\n    (this as Tensor).throwIfDisposed();\n    return opHandler.image.resizeBilinear(this, newShape2D, alignCorners);\n  }\n\n  resizeNearestNeighbor<T extends Tensor3D|Tensor4D>(\n      this: T, newShape2D: [number, number], alignCorners = false): T {\n    (this as Tensor).throwIfDisposed();\n    return opHandler.image.resizeNearestNeighbor(\n        this, newShape2D, alignCorners);\n  }\n\n  // Convolutions.\n  conv1d<T extends Tensor2D|Tensor3D>(\n      this: T, filter: Tensor3D|TensorLike3D, stride: number,\n      pad: 'valid'|'same'|number, dataFormat: 'NWC'|'NCW' = 'NWC', dilation = 1,\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n    (this as Tensor).throwIfDisposed();\n    return opHandler.conv1d(\n        this, filter, stride, pad, dataFormat, dilation, dimRoundingMode);\n  }\n  conv2d<T extends Tensor3D|Tensor4D>(\n      this: T, filter: Tensor4D|TensorLike4D, strides: [number, number]|number,\n      pad: 'valid'|'same'|number, dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n      dilations: [number, number]|number = [1, 1],\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n    (this as Tensor).throwIfDisposed();\n    return opHandler.conv2d(\n        this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n  }\n  conv2dTranspose<T extends Tensor3D|Tensor4D>(\n      this: T, filter: Tensor4D|TensorLike4D,\n      outputShape: [number, number, number, number]|[number, number, number],\n      strides: [number, number]|number, pad: 'valid'|'same'|number,\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n    (this as Tensor).throwIfDisposed();\n    return opHandler.conv2dTranspose(\n        this, filter, outputShape, strides, pad, dimRoundingMode);\n  }\n  depthwiseConv2D<T extends Tensor3D|Tensor4D>(\n      this: T, filter: Tensor4D|TensorLike4D, strides: [number, number]|number,\n      pad: 'valid'|'same'|number, dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n      dilations: [number, number]|number = [1, 1],\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n    (this as Tensor).throwIfDisposed();\n    return opHandler.depthwiseConv2d(\n        this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n  }\n\n  separableConv2d<T extends Tensor3D|Tensor4D>(\n      this: T|TensorLike, depthwiseFilter: Tensor4D|TensorLike4D,\n      pointwiseFilter: Tensor4D|TensorLike, strides: [number, number]|number,\n      pad: 'valid'|'same', dilation: [number, number]|number = [1, 1],\n      dataFormat: 'NHWC'|'NCHW' = 'NHWC'): T {\n    (this as Tensor).throwIfDisposed();\n    return opHandler.separableConv2d(\n        this, depthwiseFilter, pointwiseFilter, strides, pad, dilation,\n        dataFormat);\n  }\n\n  // Pooling.\n  avgPool<T extends Tensor3D|Tensor4D>(\n      this: T, filterSize: [number, number]|number,\n      strides: [number, number]|number, pad: 'valid'|'same'|number,\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n    (this as Tensor).throwIfDisposed();\n    return opHandler.avgPool(this, filterSize, strides, pad, dimRoundingMode);\n  }\n  maxPool<T extends Tensor3D|Tensor4D>(\n      this: T, filterSize: [number, number]|number,\n      strides: [number, number]|number, pad: 'valid'|'same'|number,\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n    (this as Tensor).throwIfDisposed();\n    return opHandler.maxPool(this, filterSize, strides, pad, dimRoundingMode);\n  }\n  localResponseNormalization<T extends Tensor3D|Tensor4D>(\n      this: T, radius = 5, bias = 1, alpha = 1, beta = 0.5): T {\n    return opHandler.localResponseNormalization(\n        this, radius, bias, alpha, beta);\n  }\n  pool<T extends Tensor3D|Tensor4D>(\n      this: T, windowShape: [number, number]|number, poolingType: 'max'|'avg',\n      padding: 'valid'|'same'|number, dilationRate?: [number, number]|number,\n      strides?: [number, number]|number): T {\n    (this as Tensor).throwIfDisposed();\n    return opHandler.pool(\n        this, windowShape, poolingType, padding, dilationRate, strides);\n  }\n\n  variable(trainable = true, name?: string, dtype?: DataType): Variable<R> {\n    this.throwIfDisposed();\n    return Variable.variable(this, trainable, name, dtype);\n  }\n\n  unsortedSegmentSum<T extends Tensor>(\n      this: T, segmentIds: Tensor1D|TensorLike1D, numSegments: number): T {\n    this.throwIfDisposed();\n    return opHandler.unsortedSegmentSum(this, segmentIds, numSegments);\n  }\n\n  batchToSpaceND<T extends Tensor>(\n      this: T, blockShape: number[], crops: number[][]): T {\n    this.throwIfDisposed();\n    return opHandler.batchToSpaceND(this, blockShape, crops);\n  }\n\n  spaceToBatchND<T extends Tensor>(\n      this: T, blockShape: number[], paddings: number[][]): T {\n    this.throwIfDisposed();\n    return opHandler.spaceToBatchND(this, blockShape, paddings);\n  }\n\n  topk<T extends Tensor>(this: T, k = 1, sorted = true):\n      {values: T, indices: T} {\n    this.throwIfDisposed();\n    return opHandler.topk(this, k, sorted);\n  }\n\n  stridedSlice(\n      this: Tensor, begin: number[], end: number[], strides: number[],\n      beginMask = 0, endMask = 0, ellipsisMask = 0, newAxisMask = 0,\n      shrinkAxisMask = 0): Tensor {\n    this.throwIfDisposed();\n    return opHandler.stridedSlice(\n        this, begin, end, strides, beginMask, endMask, ellipsisMask,\n        newAxisMask, shrinkAxisMask);\n  }\n\n  depthToSpace(this: Tensor4D, blockSize: number, dataFormat: 'NHWC'|'NCHW'):\n      Tensor4D {\n    this.throwIfDisposed();\n    return opHandler.depthToSpace(this, blockSize, dataFormat);\n  }\n\n  fft(this: Tensor): Tensor {\n    this.throwIfDisposed();\n    return opHandler.spectral.fft(this);\n  }\n\n  ifft(this: Tensor): Tensor {\n    this.throwIfDisposed();\n    return opHandler.spectral.ifft(this);\n  }\n\n  rfft(this: Tensor): Tensor {\n    this.throwIfDisposed();\n    return opHandler.spectral.rfft(this);\n  }\n\n  irfft(this: Tensor): Tensor {\n    this.throwIfDisposed();\n    return opHandler.spectral.irfft(this);\n  }\n}\nObject.defineProperty(Tensor, Symbol.hasInstance, {\n  value: (instance: Tensor) => {\n    return !!instance && instance.dataId != null && instance.shape != null &&\n        instance.dtype != null;\n  }\n});\n\nexport interface NumericTensor<R extends Rank = Rank> extends Tensor<R> {\n  dtype: NumericDataType;\n  dataSync<D extends DataType = NumericDataType>(): DataTypeMap[D];\n  data<D extends DataType = NumericDataType>(): Promise<DataTypeMap[D]>;\n}\n\nexport interface StringTensor<R extends Rank = Rank> extends Tensor<R> {\n  dtype: 'string';\n  dataSync<D extends DataType = 'string'>(): DataTypeMap[D];\n  data<D extends DataType = 'string'>(): Promise<DataTypeMap[D]>;\n}\n\n/** @doclink Tensor */\nexport type Scalar = Tensor<Rank.R0>;\n/** @doclink Tensor */\nexport type Tensor1D = Tensor<Rank.R1>;\n/** @doclink Tensor */\nexport type Tensor2D = Tensor<Rank.R2>;\n/** @doclink Tensor */\nexport type Tensor3D = Tensor<Rank.R3>;\n/** @doclink Tensor */\nexport type Tensor4D = Tensor<Rank.R4>;\n/** @doclink Tensor */\nexport type Tensor5D = Tensor<Rank.R5>;\n/** @doclink Tensor */\nexport type Tensor6D = Tensor<Rank.R6>;\n\n/**\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\n */\n/** @doc {heading: 'Tensors', subheading: 'Classes'} */\nexport class Variable<R extends Rank = Rank> extends Tensor<R> {\n  name: string;\n\n  /**\n   * Private constructor since we cannot add logic before calling `super()`.\n   * Instead, we expose static `Variable.variable` method below, which will be\n   * added to global namespace.\n   */\n  private constructor(\n      initialValue: Tensor<R>, public trainable = true, name?: string) {\n    super(\n        initialValue.shape, initialValue.dtype, null /* values */,\n        initialValue.dataId);\n    this.name = name;\n    if (this.name == null) {\n      this.name = trackerFn().nextVariableId().toString();\n    }\n    try {\n      trackerFn().registerVariable(this);\n    } catch (ex) {\n      trackerFn().disposeTensor(this);\n      throw ex;\n    }\n  }\n\n  /**\n   * Creates a new variable with the provided initial value.\n   * ```js\n   * const x = tf.variable(tf.tensor([1, 2, 3]));\n   * x.assign(tf.tensor([4, 5, 6]));\n   *\n   * x.print();\n   * ```\n   *\n   * @param initialValue Initial value for the tensor.\n   * @param trainable If true, optimizers are allowed to update it.\n   * @param name Name of the variable. Defaults to a unique id.\n   * @param dtype If set, initialValue will be converted to the given type.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Creation'} */\n  static variable<R extends Rank>(\n      initialValue: Tensor<R>, trainable = true, name?: string,\n      dtype?: DataType): Variable<R> {\n    if (dtype != null && dtype !== initialValue.dtype) {\n      initialValue = initialValue.asType(dtype);\n    }\n    return new Variable(initialValue, trainable, name);\n  }\n\n  /**\n   * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\n   * the same shape and dtype as the old `tf.Tensor`.\n   *\n   * @param newValue New tensor to be assigned to this variable.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  assign(newValue: Tensor<R>): void {\n    if (newValue.dtype !== this.dtype) {\n      throw new Error(\n          `dtype of the new value (${newValue.dtype}) and ` +\n          `previous value (${this.dtype}) must match`);\n    }\n    if (!util.arraysEqual(newValue.shape, this.shape)) {\n      throw new Error(\n          `shape of the new value (${newValue.shape}) and ` +\n          `previous value (${this.shape}) must match`);\n    }\n    trackerFn().disposeTensor(this);\n    this.dataId = newValue.dataId;\n    trackerFn().registerTensor(this);\n  }\n\n  dispose(): void {\n    trackerFn().disposeVariable(this);\n    this.isDisposedInternal = true;\n  }\n}\n\nObject.defineProperty(Variable, Symbol.hasInstance, {\n  value: (instance: Variable) => {\n    return instance instanceof Tensor && instance.assign != null &&\n        instance.assign instanceof Function;\n  }\n});\n\nconst variable = Variable.variable;\nexport {variable};\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** @docalias number[] */\nexport interface ShapeMap {\n  R0: number[];\n  R1: [number];\n  R2: [number, number];\n  R3: [number, number, number];\n  R4: [number, number, number, number];\n  R5: [number, number, number, number, number];\n  R6: [number, number, number, number, number, number];\n}\n\n/** @docalias number[] */\nexport interface ArrayMap {\n  R0: number;\n  R1: number[];\n  R2: number[][];\n  R3: number[][][];\n  R4: number[][][][];\n  R5: number[][][][][];\n  R6: number[][][][][][];\n}\n\nexport interface DataTypeMap {\n  float32: Float32Array;\n  int32: Int32Array;\n  bool: Uint8Array;\n  complex64: Float32Array;\n  string: string[];\n}\n\nexport interface SingleValueMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  complex64: number;\n  string: string;\n}\n\n/** @docalias 'float32'|'int32'|'bool'|'complex64'|'string' */\nexport type DataType = keyof DataTypeMap;\nexport type NumericDataType = 'float32'|'int32'|'bool'|'complex64';\nexport type TypedArray = Float32Array|Int32Array|Uint8Array;\n/** Tensor data used in tensor creation and user-facing API. */\nexport type DataValues = DataTypeMap[DataType];\n/** The underlying tensor data that gets stored in a backend. */\nexport type BackendValues = Float32Array|Int32Array|Uint8Array|Uint8Array[];\n\nexport enum Rank {\n  R0 = 'R0',\n  R1 = 'R1',\n  R2 = 'R2',\n  R3 = 'R3',\n  R4 = 'R4',\n  R5 = 'R5',\n  R6 = 'R6'\n}\n\nexport type FlatVector = boolean[]|number[]|TypedArray;\nexport type RegularArray<T> =\n    T[]|T[][]|T[][][]|T[][][][]|T[][][][][]|T[][][][][][];\n\n// tslint:disable-next-line:no-any\nexport interface RecursiveArray<T extends any> {\n  [index: number]: T|RecursiveArray<T>;\n}\n\n// Looks for upcasting types. Used, for example, in operations with mixed dtype\n// inputs.\nenum UpcastInt32AndMap {\n  'float32' = 'float32',\n  'int32' = 'int32',\n  'bool' = 'int32',\n  'complex64' = 'complex64'\n}\n\nenum UpcastBoolAndMap {\n  'float32' = 'float32',\n  'int32' = 'int32',\n  'bool' = 'bool',\n  'complex64' = 'complex64'\n}\n\nenum UpcastFloat32AndMap {\n  'float32' = 'float32',\n  'int32' = 'float32',\n  'bool' = 'float32',\n  'complex64' = 'complex64'\n}\n\nenum UpcastComplex64AndMap {\n  'float32' = 'complex64',\n  'int32' = 'complex64',\n  'bool' = 'complex64',\n  'complex64' = 'complex64'\n}\n\nconst upcastTypeMap = {\n  'float32': UpcastFloat32AndMap,\n  'int32': UpcastInt32AndMap,\n  'bool': UpcastBoolAndMap,\n  'complex64': UpcastComplex64AndMap\n};\n\nexport function upcastType(typeA: DataType, typeB: DataType): DataType {\n  if (typeA === 'string' || typeB === 'string') {\n    if (typeA === 'string' && typeB === 'string') {\n      return 'string';\n    }\n    throw new Error(`Can not upcast ${typeA} with ${typeB}`);\n  }\n  return upcastTypeMap[typeA][typeB];\n}\n\n/** Returns the output type after summation. */\nexport function sumOutType(type: DataType): DataType {\n  return upcastType(type, 'int32');\n}\n\n/** @docalias TypedArray|Array */\nexport type TensorLike =\n    TypedArray|number|boolean|string|RecursiveArray<number|number[]|TypedArray>|\n    RecursiveArray<boolean>|RecursiveArray<string>|Uint8Array[];\nexport type ScalarLike = number|boolean|string|Uint8Array;\n/** @docalias TypedArray|Array */\nexport type TensorLike1D = TypedArray|number[]|boolean[]|string[]|Uint8Array[];\n/** @docalias TypedArray|Array */\nexport type TensorLike2D = TypedArray|number[]|number[][]|boolean[]|boolean[][]|\n    string[]|string[][]|Uint8Array[]|Uint8Array[][];\n/** @docalias TypedArray|Array */\nexport type TensorLike3D = TypedArray|number[]|number[][][]|boolean[]|\n    boolean[][][]|string[]|string[][][]|Uint8Array[]|Uint8Array[][][];\n/** @docalias TypedArray|Array */\nexport type TensorLike4D = TypedArray|number[]|number[][][][]|boolean[]|\n    boolean[][][][]|string[]|string[][][][]|Uint8Array[]|Uint8Array[][][][];\n/** @docalias TypedArray|Array */\nexport type TensorLike5D =\n    TypedArray|number[]|number[][][][][]|boolean[]|boolean[][][][][]|string[]|\n    string[][][][][]|Uint8Array[]|Uint8Array[][][][][];\n/** @docalias TypedArray|Array */\nexport type TensorLike6D =\n    TypedArray|number[]|number[][][][][][]|boolean[]|boolean[][][][][][]|\n    string[]|string[][][][][][]|Uint8Array[]|Uint8Array[][][][][];\n\n/** Type for representing image dat in Uint8Array type. */\nexport interface PixelData {\n  width: number;\n  height: number;\n  data: Uint8Array;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from './tensor';\nimport {TensorContainer, TensorContainerArray} from './tensor_types';\nimport {upcastType} from './types';\nimport {assert} from './util';\n\nexport function makeTypesMatch<T extends Tensor>(a: T, b: T): [T, T] {\n  if (a.dtype === b.dtype) {\n    return [a, b];\n  }\n  const dtype = upcastType(a.dtype, b.dtype);\n  return [a.cast(dtype), b.cast(dtype)];\n}\n\nexport function assertTypesMatch(a: Tensor, b: Tensor): void {\n  assert(\n      a.dtype === b.dtype,\n      () => `The dtypes of the first(${a.dtype}) and` +\n          ` second(${b.dtype}) input must match`);\n}\n\nexport function isTensorInList(tensor: Tensor, tensorList: Tensor[]): boolean {\n  for (let i = 0; i < tensorList.length; i++) {\n    if (tensorList[i].id === tensor.id) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Extracts any `Tensor`s found within the provided object.\n *\n * @param container an object that may be a `Tensor` or may directly contain\n *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it\n *   is safe to pass any object here, except that `Promise`s are not\n *   supported.\n * @returns An array of `Tensors` found within the passed object. If the\n *   argument is simply a `Tensor', a list containing that `Tensor` is\n *   returned. If the object is not a `Tensor` or does not\n *   contain `Tensors`, an empty list is returned.\n */\nexport function getTensorsInContainer(result: TensorContainer): Tensor[] {\n  const list: Tensor[] = [];\n  const seen = new Set<{}|void>();\n  walkTensorContainer(result, list, seen);\n  return list;\n}\n\nfunction walkTensorContainer(\n    container: TensorContainer, list: Tensor[], seen: Set<{}|void>): void {\n  if (container == null) {\n    return;\n  }\n  if (container instanceof Tensor) {\n    list.push(container);\n    return;\n  }\n  if (!isIterable(container)) {\n    return;\n  }\n  // Iteration over keys works also for arrays.\n  const iterable = container as TensorContainerArray;\n  for (const k in iterable) {\n    const val = iterable[k];\n    if (!seen.has(val)) {\n      seen.add(val);\n      walkTensorContainer(val, list, seen);\n    }\n  }\n}\n\n// tslint:disable-next-line:no-any\nfunction isIterable(obj: any): boolean {\n  return Array.isArray(obj) || typeof obj === 'object';\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendTimingInfo, DataMover, KernelBackend} from './backends/backend';\nimport {Environment, setEnvironmentGlobal} from './environment';\nimport {Profiler} from './profiler';\nimport {backpropagateGradients, getFilteredNodesXToY, NamedGradientMap, TapeNode} from './tape';\nimport {DataId, setTensorTracker, Tensor, Tensor3D, TensorTracker, Variable} from './tensor';\nimport {GradSaveFunc, NamedTensorMap, NamedVariableMap, TensorContainer} from './tensor_types';\nimport {getTensorsInContainer} from './tensor_util';\nimport {BackendValues, DataType, PixelData} from './types';\nimport * as util from './util';\nimport {bytesFromStringArray, makeOnesTypedArray, now, sizeFromShape} from './util';\n\n/**\n * A function that computes an output. The save function is for saving tensors\n * computed in the forward pass, that we need in the backward pass.\n */\nexport type ForwardFunc<T> = (backend: KernelBackend, save?: GradSaveFunc) => T;\n\n/**\n * @docalias (a: Tensor, b: Tensor,..., save?: Function) => {\n *   value: Tensor,\n *   gradFunc: (dy: Tensor, saved?: NamedTensorMap) => Tensor | Tensor[]\n * }\n */\nexport type CustomGradientFunc<T extends Tensor> =\n    (...inputs: Array<Tensor|GradSaveFunc>) => {\n      value: T;\n      gradFunc: (dy: T, saved: Tensor[]) => Tensor | Tensor[];\n    };\n\nexport type MemoryInfo = {\n  numTensors: number; numDataBuffers: number; numBytes: number;\n  unreliable?: boolean; reasons: string[];\n};\n\ntype KernelProfile = {\n  name: string; bytesAdded: number; totalBytesSnapshot: number;\n  tensorsAdded: number;\n  totalTensorsSnapshot: number;\n  inputShapes: number[][];\n  outputShape: number[] | number[][];\n};\n\nexport type ProfileInfo = {\n  newBytes: number; newTensors: number; peakBytes: number;\n  kernels: KernelProfile[];\n  result: TensorContainer;\n};\n\nexport interface TimingInfo extends BackendTimingInfo {\n  wallMs: number;\n}\n\n/** @docalias Function */\nexport type ScopeFn<T extends TensorContainer> = () => T;\n\nexport interface TensorManager {\n  registerTensor(a: Tensor, backend?: KernelBackend): void;\n  registerVariable(v: Variable): void;\n  disposeTensor(a: Tensor): void;\n  memory(): {numDataBuffers: number; numBytes: number;};\n}\n\ninterface ScopeState {\n  track: Tensor[];\n  name: string;\n  id: number;\n}\n\nclass EngineState {\n  // Public since optimizers will use it.\n  registeredVariables: NamedVariableMap = {};\n\n  nextTapeNodeId = 0;\n  numBytes = 0;\n  numTensors = 0;\n  numStringTensors = 0;\n  numDataBuffers = 0;\n\n  activeTape: TapeNode[];\n  // Number of nested tf.grad() statements when computing higher-order\n  // gradients. E.g. `1` for first-order gradients and `2` for second-order\n  // gradients. Used to track if the tape should be removed after a backprop.\n  gradientDepth = 0;\n  // Number of nested kernel calls. When kernel depth is greater than 1, we turn\n  // off the tape.\n  kernelDepth = 0;\n\n  // Keep Tensors that parallel the tapes.\n  activeScope: ScopeState;\n  scopeStack: ScopeState[] = [];\n  nextScopeId = 0;\n\n  tensorInfo = new WeakMap<DataId, {\n    backend: KernelBackend,\n    bytes: number,\n    dtype: DataType,\n    shape: number[],\n    refCount: number\n  }>();\n\n  profiling = false;\n  activeProfile: ProfileInfo =\n      {newBytes: 0, newTensors: 0, peakBytes: 0, kernels: [], result: null};\n\n  dispose() {\n    for (const variableName in this.registeredVariables) {\n      this.registeredVariables[variableName].dispose();\n    }\n  }\n}\n\nexport class Engine implements TensorManager, TensorTracker, DataMover {\n  state: EngineState;\n  backendName: string;\n  registry: {[id: string]: KernelBackend} = {};\n  registryFactory: {\n    [id: string]: {\n      factory: () => KernelBackend | Promise<KernelBackend>,\n      priority: number\n    }\n  } = {};\n\n  private profiler: Profiler;\n  private backendInstance: KernelBackend;\n  private pendingBackendInit: Promise<boolean>;\n  private pendingBackendInitId = 0;\n\n  constructor(public ENV: Environment) {\n    this.state = new EngineState();\n  }\n\n  async ready(): Promise<void> {\n    if (this.pendingBackendInit != null) {\n      return this.pendingBackendInit.then(() => {});\n    }\n    if (this.backendInstance != null) {\n      return;\n    }\n    const sortedBackends = this.getSortedBackends();\n\n    for (let i = 0; i < sortedBackends.length; i++) {\n      const backendName = sortedBackends[i];\n      const success = await this.initializeBackend(backendName).success;\n      if (success) {\n        await this.setBackend(backendName);\n        return;\n      }\n    }\n\n    throw new Error(\n        `Could not initialize any backends, all backend initializations ` +\n        `failed.`);\n  }\n\n  get backend(): KernelBackend {\n    if (this.pendingBackendInit != null) {\n      throw new Error(\n          `Backend '${this.backendName}' has not yet been initialized. Make ` +\n          `sure to await tf.ready() before calling other methods`);\n    }\n    if (this.backendInstance == null) {\n      const {name, asyncInit} = this.initializeBackendsAndReturnBest();\n      if (asyncInit) {\n        throw new Error(\n            `The highest priority backend '${name}' has not yet been ` +\n            `initialized. Make sure to await tf.ready() before calling ` +\n            `other methods`);\n      }\n      this.setBackend(name);\n    }\n    return this.backendInstance;\n  }\n\n  backendNames(): string[] {\n    return Object.keys(this.registryFactory);\n  }\n\n  findBackend(backendName: string): KernelBackend {\n    if (!(backendName in this.registry)) {\n      // If the backend hasn't been initialized but we have a registry entry for\n      // it, initialize it and return it.\n      if (backendName in this.registryFactory) {\n        const {asyncInit} = this.initializeBackend(backendName);\n        if (asyncInit) {\n          // Backend is not ready yet.\n          return null;\n        }\n      } else {\n        return null;\n      }\n    }\n    return this.registry[backendName];\n  }\n\n  findBackendFactory(backendName: string):\n      () => KernelBackend | Promise<KernelBackend> {\n    if (!(backendName in this.registryFactory)) {\n      return null;\n    }\n    return this.registryFactory[backendName].factory;\n  }\n\n  registerBackend(\n      backendName: string,\n      factory: () => KernelBackend | Promise<KernelBackend>,\n      priority = 1): boolean {\n    if (backendName in this.registryFactory) {\n      console.warn(\n          `${backendName} backend was already registered. ` +\n          `Reusing existing backend factory.`);\n      return false;\n    }\n    this.registryFactory[backendName] = {factory, priority};\n    return true;\n  }\n\n  async setBackend(backendName: string): Promise<boolean> {\n    if (this.registryFactory[backendName] == null) {\n      throw new Error(`Backend name '${backendName}' not found in registry`);\n    }\n    this.backendName = backendName;\n    if (this.registry[backendName] == null) {\n      this.backendInstance = null;\n      const {success, asyncInit} = this.initializeBackend(backendName);\n      const result = asyncInit ? await success : success;\n      if (!result) {\n        return false;\n      }\n    }\n    this.backendInstance = this.registry[backendName];\n\n    // Reset the profiler.\n    this.profiler = new Profiler(this.backendInstance);\n\n    return true;\n  }\n\n  /**\n   * Initializes a backend by looking up the backend name in the factory\n   * registry and calling the factory method. Returns a boolean representing\n   * whether the initialization of the backend suceeded. Throws an error if\n   * there is no backend in the factory registry.\n   */\n  private initializeBackend(backendName: string):\n      {success: boolean|Promise<boolean>, asyncInit: boolean} {\n    const registryFactoryEntry = this.registryFactory[backendName];\n    if (registryFactoryEntry == null) {\n      throw new Error(\n          `Cannot initialize backend ${backendName}, no registration found.`);\n    }\n\n    try {\n      const backend = registryFactoryEntry.factory();\n      // Test if the factory returns a promise.\n      if (Promise.resolve(backend) === backend) {\n        const promiseId = ++this.pendingBackendInitId;\n        const success =\n            backend\n                .then(backendInstance => {\n                  // Outdated promise. Another backend was set in the meantime.\n                  if (promiseId < this.pendingBackendInitId) {\n                    return false;\n                  }\n                  this.registry[backendName] = backendInstance;\n                  this.pendingBackendInit = null;\n                  return true;\n                })\n                .catch(err => {\n                  // Outdated promise. Another backend was set in the meantime.\n                  if (promiseId < this.pendingBackendInitId) {\n                    return false;\n                  }\n                  this.pendingBackendInit = null;\n                  console.warn(\n                      `Initialization of backend ${backendName} failed`);\n                  console.warn(err.stack || err.message);\n                  return false;\n                });\n        this.pendingBackendInit = success;\n        return {success, asyncInit: true};\n      } else {\n        this.registry[backendName] = backend as KernelBackend;\n        return {success: true, asyncInit: false};\n      }\n    } catch (err) {\n      console.warn(`Initialization of backend ${backendName} failed`);\n      console.warn(err.stack || err.message);\n      return {success: false, asyncInit: false};\n    }\n  }\n\n  removeBackend(backendName: string): void {\n    if (!(backendName in this.registryFactory)) {\n      throw new Error(`${backendName} backend not found in registry`);\n    }\n    if (this.backendName === backendName && this.pendingBackendInit != null) {\n      // There is a pending promise of the backend we want to remove. Make it\n      // obsolete.\n      this.pendingBackendInitId++;\n    }\n\n    if (backendName in this.registry) {\n      this.registry[backendName].dispose();\n      delete this.registry[backendName];\n    }\n\n    delete this.registryFactory[backendName];\n\n    // Unset the backend if it is active.\n    if (this.backendName === backendName) {\n      this.pendingBackendInit = null;\n      this.backendName = null;\n      this.backendInstance = null;\n    }\n  }\n\n  private getSortedBackends(): string[] {\n    if (Object.keys(this.registryFactory).length === 0) {\n      throw new Error('No backend found in registry.');\n    }\n    return Object.keys(this.registryFactory).sort((a: string, b: string) => {\n      // Highest priority comes first.\n      return this.registryFactory[b].priority -\n          this.registryFactory[a].priority;\n    });\n  }\n\n  private initializeBackendsAndReturnBest():\n      {name: string, asyncInit: boolean} {\n    const sortedBackends = this.getSortedBackends();\n\n    for (let i = 0; i < sortedBackends.length; i++) {\n      const backendName = sortedBackends[i];\n      const {success, asyncInit} = this.initializeBackend(backendName);\n      if (asyncInit || success) {\n        return {name: backendName, asyncInit};\n      }\n    }\n    throw new Error(\n        `Could not initialize any backends, all backend initializations ` +\n        `failed.`);\n  }\n\n  moveData(destBackend: KernelBackend, dataId: DataId) {\n    this.write(destBackend, dataId, this.readSync(dataId));\n  }\n\n  tidy<T extends TensorContainer>(nameOrFn: string|ScopeFn<T>, fn?: ScopeFn<T>):\n      T {\n    let name: string = null;\n    if (fn == null) {\n      // Called with only 1 argument.\n      if (typeof nameOrFn !== 'function') {\n        throw new Error('Please provide a function to tidy()');\n      }\n      fn = nameOrFn;\n    } else {\n      // Called with 2 arguments.\n      if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n        throw new Error(\n            'When calling with two arguments, the first argument ' +\n            'to tidy() must be a string');\n      }\n      if (typeof fn !== 'function') {\n        throw new Error(\n            'When calling with two arguments, the 2nd argument ' +\n            'to tidy() must be a function');\n      }\n      name = nameOrFn as string;\n      // TODO(nsthorat,smilkov): Do operation logging and performance\n      // profiling.\n    }\n    let result: T;\n    return this.scopedRun(\n        () => this.startScope(name), () => this.endScope(result), () => {\n          result = fn();\n          if (result instanceof Promise) {\n            console.error('Cannot return a Promise inside of tidy.');\n          }\n          return result;\n        });\n  }\n\n  private scopedRun<T>(start: () => void, end: () => void, f: () => T): T {\n    start();\n    try {\n      const res = f();\n      end();\n      return res;\n    } catch (ex) {\n      end();\n      throw ex;\n    }\n  }\n\n  private static nextTensorId = 0;\n  nextTensorId(): number {\n    return Engine.nextTensorId++;\n  }\n\n  private static nextVariableId = 0;\n  nextVariableId(): number {\n    return Engine.nextVariableId++;\n  }\n\n  /**\n   * This method is called instead of the public-facing tensor.clone() when\n   * saving a tensor for backwards pass. It makes sure to add the clone\n   * operation to the tape regardless of being called inside a kernel\n   * execution.\n   */\n  private clone(x: Tensor): Tensor {\n    const y = Tensor.make(x.shape, {dataId: x.dataId}, x.dtype);\n    this.addTapeNode([x], y, dy => [dy.toFloat()]);\n    return y;\n  }\n\n  runKernel<T extends Tensor|Tensor[], I extends NamedTensorMap>(\n      forwardFunc: ForwardFunc<T>,\n      inputs: I,\n      backwardsFunc?: (dy: T, saved: Tensor[]) => {[P in keyof I]: () => I[P]},\n      ): T {\n    let result: T;\n    let saved: Tensor[] = [];\n    const isTapeOn = this.isTapeOn();\n    const scopeName =\n        this.state.activeScope != null ? this.state.activeScope.name : '';\n    const saveFunc: GradSaveFunc = (tensors) => {\n      // Do not save unless we are recording to the tape. Otherwise it would\n      // cause a mem leak since we would never run backprop, which disposes\n      // the kept tensors.\n      if (!isTapeOn) {\n        return;\n      }\n      saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n    };\n\n    const startingBytecount = this.state.numBytes;\n    const startingNumTensors = this.state.numTensors;\n\n    // Stop recording to a tape when running a kernel.\n    this.scopedRun(\n        () => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {\n          if (!this.ENV.getBool('DEBUG')) {\n            result = forwardFunc(this.backend, saveFunc);\n          } else {\n            result = this.profiler.profileKernel(\n                scopeName, inputs, () => forwardFunc(this.backend, saveFunc));\n          }\n        });\n\n    if (isTapeOn) {\n      const tapeNode: TapeNode = {\n        id: this.state.nextTapeNodeId++,\n        name: scopeName,\n        inputs,\n        outputs: Array.isArray(result) ? result : [result] as Tensor[],\n        saved\n      };\n      if (backwardsFunc != null) {\n        tapeNode.gradient = (dy: T) => backwardsFunc(dy, saved);\n      }\n      this.state.activeTape.push(tapeNode);\n    }\n\n    if (this.state.profiling) {\n      this.state.activeProfile.kernels.push({\n        name: scopeName,\n        bytesAdded: this.state.numBytes - startingBytecount,\n        totalBytesSnapshot: this.state.numBytes,\n        tensorsAdded: this.state.numTensors - startingNumTensors,\n        totalTensorsSnapshot: this.state.numTensors,\n        inputShapes: Object.keys(inputs).map(key => inputs[key].shape),\n        outputShape: Array.isArray(result) ?\n            (result as Tensor[]).map(item => item.shape) :\n            (result as Tensor).shape\n      });\n    }\n\n    return result;\n  }\n\n  // TensorManager implementation.\n\n  registerTensor(a: Tensor|Variable, backend?: KernelBackend): void {\n    const refCount = this.state.tensorInfo.has(a.dataId) ?\n        this.state.tensorInfo.get(a.dataId).refCount :\n        0;\n    this.state.numTensors++;\n    if (a.dtype === 'string') {\n      this.state.numStringTensors++;\n    }\n    if (refCount === 0) {\n      this.state.numDataBuffers++;\n\n      // Bytes for complex numbers are counted by their components. Bytes for\n      // string tensors are counted when writing values.\n      let bytes = 0;\n      if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n        bytes = a.size * util.bytesPerElement(a.dtype);\n      }\n      this.state.tensorInfo.set(a.dataId, {\n        backend: backend != null ? backend : this.backend,\n        dtype: a.dtype,\n        shape: a.shape,\n        bytes,\n        refCount: 0\n      });\n      this.state.numBytes += bytes;\n      if (backend != null) {\n        backend.register(a.dataId, a.shape, a.dtype);\n      } else {\n        this.backend.register(a.dataId, a.shape, a.dtype);\n      }\n    }\n    this.state.tensorInfo.get(a.dataId).refCount++;\n    if (!(a instanceof Variable)) {\n      this.track(a);\n    }\n  }\n\n  registerVariable(v: Variable) {\n    if (this.state.registeredVariables[v.name] != null) {\n      throw new Error(`Variable with name ${v.name} was already registered`);\n    }\n    this.state.registeredVariables[v.name] = v;\n  }\n\n  disposeTensor(a: Tensor): void {\n    if (!this.state.tensorInfo.has(a.dataId)) {\n      return;\n    }\n\n    this.state.numTensors--;\n    if (a.dtype === 'string') {\n      this.state.numStringTensors--;\n    }\n    const info = this.state.tensorInfo.get(a.dataId);\n    const refCount = info.refCount;\n    if (refCount <= 1) {\n      // Don't count bytes for complex numbers as they are counted by their\n      // components.\n      if (a.dtype !== 'complex64') {\n        this.state.numBytes -= info.bytes;\n      }\n      this.state.numDataBuffers--;\n      info.backend.disposeData(a.dataId);\n      this.state.tensorInfo.delete(a.dataId);\n    } else {\n      this.state.tensorInfo.get(a.dataId).refCount--;\n    }\n    // TODO(nsthorat): Construct an error and save the stack trace for\n    // debugging when in debug mode. Creating a stack trace is too expensive\n    // to do unconditionally.\n  }\n\n  disposeVariables(): void {\n    for (const varName in this.state.registeredVariables) {\n      const v = this.state.registeredVariables[varName];\n      this.disposeVariable(v);\n    }\n  }\n\n  disposeVariable(v: Variable): void {\n    this.disposeTensor(v);\n    if (this.state.registeredVariables[v.name] != null) {\n      delete this.state.registeredVariables[v.name];\n    }\n  }\n\n  memory(): MemoryInfo {\n    const info = this.backend.memory() as MemoryInfo;\n    info.numTensors = this.state.numTensors;\n    info.numDataBuffers = this.state.numDataBuffers;\n    info.numBytes = this.state.numBytes;\n    if (this.state.numStringTensors > 0) {\n      info.unreliable = true;\n      if (info.reasons == null) {\n        info.reasons = [];\n      }\n      info.reasons.push(\n          'Memory usage by string tensors is approximate ' +\n          '(2 bytes per character)');\n    }\n    return info;\n  }\n\n  async profile(query: () => TensorContainer): Promise<ProfileInfo> {\n    this.state.profiling = true;\n\n    const startBytes = this.state.numBytes;\n    const startNumTensors = this.state.numTensors;\n\n    this.state.activeProfile.kernels = [];\n    this.state.activeProfile.result = query();\n\n    this.state.profiling = false;\n\n    this.state.activeProfile.peakBytes = Math.max(\n        ...this.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));\n    this.state.activeProfile.newBytes = this.state.numBytes - startBytes;\n    this.state.activeProfile.newTensors =\n        this.state.numTensors - startNumTensors;\n    return this.state.activeProfile;\n  }\n\n  isTapeOn(): boolean {\n    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;\n  }\n\n  private addTapeNode(\n      inputs: Tensor[], result: Tensor,\n      gradientsFunc: (dy: Tensor) => Tensor[]): void {\n    const inputsMap: NamedTensorMap = {};\n    inputs.forEach((input, idx) => {\n      inputsMap[idx] = input;\n    });\n\n    const gradient = (dy: Tensor) => {\n      const res = gradientsFunc(dy);\n      const resMap: NamedGradientMap = {};\n      res.forEach((r, idx) => {\n        resMap[idx] = () => r;\n      });\n      return resMap;\n    };\n\n    const tapeNode: TapeNode = {\n      id: this.state.nextTapeNodeId++,\n      name: this.state.activeScope.name,\n      inputs: inputsMap,\n      outputs: [result],\n      gradient\n    };\n    this.state.activeTape.push(tapeNode);\n  }\n\n  keep<T extends Tensor>(result: T): T {\n    result.kept = true;\n    return result;\n  }\n\n  private startTape() {\n    if (this.state.gradientDepth === 0) {\n      this.state.activeTape = [];\n    }\n    this.state.gradientDepth++;\n  }\n\n  private endTape() {\n    this.state.gradientDepth--;\n  }\n\n  /**\n   * Start a scope. Use this with endScope() to achieve the same functionality\n   * as scope() without the need for a function closure.\n   */\n  startScope(name?: string) {\n    const scopeInfo: ScopeState = {\n      track: [],\n      name: 'unnamed scope',\n      id: this.state.nextScopeId++\n    };\n    if (name) {\n      scopeInfo.name = name;\n    }\n    this.state.scopeStack.push(scopeInfo);\n    this.state.activeScope = scopeInfo;\n  }\n\n  /**\n   * End a scope. Use this with startScope() to achieve the same functionality\n   * as scope() without the need for a function closure.\n   */\n  endScope(result?: TensorContainer) {\n    const tensorsToTrackInParent = getTensorsInContainer(result);\n    const tensorsToTrackInParentSet =\n        new Set(tensorsToTrackInParent.map(t => t.id));\n\n    // Dispose the arrays tracked in this scope.\n    for (let i = 0; i < this.state.activeScope.track.length; i++) {\n      const tensor = this.state.activeScope.track[i];\n      if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {\n        tensor.dispose();\n      }\n    }\n\n    const oldScope = this.state.scopeStack.pop();\n    this.state.activeScope = this.state.scopeStack.length === 0 ?\n        null :\n        this.state.scopeStack[this.state.scopeStack.length - 1];\n\n    // Track the current result in the parent scope.\n    tensorsToTrackInParent.forEach(tensor => {\n      // Only track the tensor if was allocated in the inner scope and is not\n      // globally kept.\n      if (!tensor.kept && tensor.scopeId === oldScope.id) {\n        this.track(tensor);\n      }\n    });\n  }\n\n  /**\n   * Returns gradients of `f` with respect to each of the `xs`. The gradients\n   * returned are of the same length as `xs`, but some might be null if `f`\n   * was not a function of that `x`. It also takes optional dy to multiply the\n   * gradient, which defaults to `1`.\n   */\n  gradients<T extends Tensor>(\n      f: () => T, xs: Tensor[], dy?: T,\n      allowNoGradients = false): {value: T, grads: Tensor[]} {\n    util.assert(\n        xs.length > 0, () => 'gradients() received an empty list of xs.');\n    if (dy != null && dy.dtype !== 'float32') {\n      throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);\n    }\n\n    const y = this.scopedRun(\n        () => this.startTape(), () => this.endTape(),\n        () => this.tidy('forward', f));\n\n    util.assert(\n        y instanceof Tensor,\n        () => 'The result y returned by f() must be a tensor.');\n    // Filter out the nodes that don't connect x => y.\n    const filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);\n    if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n      throw new Error(\n          'Cannot compute gradient of y=f(x) with respect to x. Make sure ' +\n          'that the f you passed encloses all operations that lead from x ' +\n          'to y.');\n    }\n\n    return this.tidy('backward', () => {\n      const accumulatedGradientMap: {[tensorId: number]: Tensor} = {};\n      accumulatedGradientMap[y.id] = (dy == null) ? ones(y.shape) : dy;\n\n      // Backprop gradients through the filtered nodes.\n      backpropagateGradients(\n          accumulatedGradientMap, filteredTape,\n          // Pass the tidy function to avoid circular dep with `tape.ts`.\n          f => this.tidy(f as ScopeFn<Tensor>));\n      const grads = xs.map(x => accumulatedGradientMap[x.id]);\n\n      if (this.state.gradientDepth === 0) {\n        // This means that we are not computing higher-order gradients\n        // and can clean up the tape.\n        this.state.activeTape.forEach(node => {\n          for (const key in node.saved) {\n            node.saved[key].dispose();\n          }\n        });\n        this.state.activeTape = null;\n      }\n      return {value: y, grads};\n    });\n  }\n\n  customGrad<T extends Tensor>(f: CustomGradientFunc<T>):\n      (...args: Array<Tensor|GradSaveFunc>) => T {\n    util.assert(\n        util.isFunction(f),\n        () => 'The f passed in customGrad(f) must be a function.');\n    return (...inputs: Tensor[]): T => {\n      util.assert(\n          inputs.every(t => t instanceof Tensor),\n          () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' +\n              'tensors');\n\n      let res: {\n        value: T,\n        gradFunc: (dy: T, saved: Tensor[]) => Tensor | Tensor[],\n      };\n      const inputMap: NamedTensorMap = {};\n      inputs.forEach((input, i) => {\n        inputMap[i] = input;\n      });\n      return this.runKernel(\n          (_, save) => {\n            res = f(...[...inputs, save]);\n            util.assert(\n                res.value instanceof Tensor,\n                () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.value` is a tensor');\n            util.assert(\n                util.isFunction(res.gradFunc),\n                () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function.');\n            return res.value;\n          },\n          inputMap,\n          (dy: T, saved: Tensor[]) => {\n            const gradRes = res.gradFunc(dy, saved);\n            const grads: Tensor[] =\n                Array.isArray(gradRes) ? gradRes : [gradRes];\n            util.assert(\n                grads.length === inputs.length,\n                () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function that returns ' +\n                    'the same number of tensors as inputs passed to f(...).');\n            util.assert(\n                grads.every(t => t instanceof Tensor),\n                () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function that returns ' +\n                    'a list of only tensors.');\n            const gradMap: {[key: string]: () => Tensor} = {};\n            grads.forEach((grad, i) => {\n              gradMap[i] = () => grad;\n            });\n            return gradMap;\n          });\n    };\n  }\n\n  // Forwarding to backend.\n  write(destBackend: KernelBackend, dataId: DataId, values: BackendValues):\n      void {\n    const info = this.state.tensorInfo.get(dataId);\n\n    const srcBackend = info.backend;\n    destBackend = destBackend || this.backend;\n\n    // Bytes for string tensors are counted when writing.\n    if (info.dtype === 'string') {\n      const newBytes = bytesFromStringArray(values as Uint8Array[]);\n      this.state.numBytes += newBytes - info.bytes;\n      info.bytes = newBytes;\n    }\n\n    if (destBackend !== srcBackend) {\n      // Delete the tensor from the old backend and move it to the new\n      // backend.\n      srcBackend.disposeData(dataId);\n      info.backend = destBackend;\n      destBackend.register(dataId, info.shape, info.dtype);\n    }\n    destBackend.write(dataId, values);\n  }\n  readSync(dataId: DataId): BackendValues {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.readSync(dataId);\n  }\n  read(dataId: DataId): Promise<BackendValues> {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.read(dataId);\n  }\n  fromPixels(\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      HTMLVideoElement,\n      numChannels: number): Tensor3D {\n    return this.backend.fromPixels(pixels, numChannels);\n  }\n  async time(query: () => void): Promise<TimingInfo> {\n    const start = now();\n    const timingInfo = await this.backend.time(query) as TimingInfo;\n    timingInfo.wallMs = now() - start;\n    return timingInfo;\n  }\n\n  /**\n   * Tracks a Tensor in the current scope to be automatically cleaned up\n   * when the current scope ends, and returns the value.\n   *\n   * @param result The Tensor to track in the current scope.\n   */\n  private track<T extends Tensor>(result: T): T {\n    if (this.state.activeScope != null) {\n      result.scopeId = this.state.activeScope.id;\n      this.state.activeScope.track.push(result);\n    }\n\n    return result;\n  }\n\n  get registeredVariables(): NamedVariableMap {\n    return this.state.registeredVariables;\n  }\n\n  /**\n   * Resets the engine state. Removes all backends but does not remove\n   * registered backend factories.\n   */\n  reset(): void {\n    // Make any pending promise obsolete.\n    this.pendingBackendInitId++;\n\n    this.state.dispose();\n    this.ENV.reset();\n    this.state = new EngineState();\n\n    for (const backendName in this.registry) {\n      this.registry[backendName].dispose();\n      delete this.registry[backendName];\n    }\n    this.backendName = null;\n    this.backendInstance = null;\n    this.pendingBackendInit = null;\n  }\n}\n\nfunction ones(shape: number[]): Tensor {\n  const values = makeOnesTypedArray(sizeFromShape(shape), 'float32');\n  return Tensor.make(shape, {values});\n}\n\nlet GLOBAL: {_tfengine: Engine};\nfunction getGlobalNamespace(): {_tfengine: Engine} {\n  if (GLOBAL == null) {\n    // tslint:disable-next-line:no-any\n    let ns: any;\n    if (typeof (window) !== 'undefined') {\n      ns = window;\n    } else if (typeof (global) !== 'undefined') {\n      ns = global;\n    } else if (typeof (process) !== 'undefined') {\n      ns = process;\n    } else if (typeof (self) !== 'undefined') {\n      ns = self;\n    } else {\n      throw new Error('Could not find a global object');\n    }\n    GLOBAL = ns;\n  }\n  return GLOBAL;\n}\n\nfunction getOrMakeEngine(): Engine {\n  const ns = getGlobalNamespace();\n  if (ns._tfengine == null) {\n    const environment = new Environment(ns);\n    ns._tfengine = new Engine(environment);\n  }\n  setEnvironmentGlobal(ns._tfengine.ENV);\n\n  // Tell the current tensor interface that the global engine is responsible\n  // for tracking.\n  setTensorTracker(() => ns._tfengine);\n  return ns._tfengine;\n}\n\nexport let ENGINE = getOrMakeEngine();\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport * as util from './util';\n\nexport interface TapeNode {\n  id: number;\n  name: string;\n  outputs: Tensor[];\n  inputs: NamedTensorMap;\n  // Optional params, defined only for ops with gradient impl.\n  gradient?: (dy: Tensor|Tensor[]) => NamedGradientMap;\n  saved?: Tensor[];\n}\n\nexport type NamedGradientMap = {\n  [inputName: string]: () => Tensor;\n};\n\n/**\n * Computes a list of TapeNodes that connect x to y, filtering everything else\n * out and preserving the order of the original tape elements.\n *\n * @param tape The tape elements to filter.\n * @param xs The input Tensors.\n * @param y The output Tensor.\n */\nexport function getFilteredNodesXToY(\n    tape: TapeNode[], xs: Tensor[], y: Tensor): TapeNode[] {\n  // Forward pass to compute all the nodes and Tensors that are transitively a\n  // function of x.\n  const tensorsFromX: {[tensorId: number]: boolean} = {};\n  const nodesFromX: {[nodeId: number]: boolean} = {};\n  for (let i = 0; i < xs.length; i++) {\n    tensorsFromX[xs[i].id] = true;\n  }\n\n  for (let i = 0; i < tape.length; i++) {\n    const node = tape[i];\n    const nodeInputs = node.inputs;\n    for (const inputName in nodeInputs) {\n      const input = nodeInputs[inputName];\n\n      let anyInputFromX = false;\n      for (let j = 0; j < xs.length; j++) {\n        if (tensorsFromX[input.id]) {\n          node.outputs.forEach(output => tensorsFromX[output.id] = true);\n          anyInputFromX = true;\n          nodesFromX[node.id] = true;\n          break;\n        }\n      }\n\n      if (anyInputFromX) {\n        break;\n      }\n    }\n  }\n\n  // Backward pass to find all of the nodes and Tensors that lead to y.\n  const tensorsLeadToY: {[tensorId: number]: boolean} = {};\n  tensorsLeadToY[y.id] = true;\n  const nodesToY: {[nodeId: number]: boolean} = {};\n\n  for (let i = tape.length - 1; i >= 0; i--) {\n    const node = tape[i];\n    const nodeInputs = node.inputs;\n\n    // If any of the outputs lead to y, mark all of the inputs as leading to y.\n    for (let j = 0; j < node.outputs.length; j++) {\n      if (tensorsLeadToY[node.outputs[j].id]) {\n        for (const inputName in nodeInputs) {\n          tensorsLeadToY[nodeInputs[inputName].id] = true;\n          nodesToY[node.id] = true;\n        }\n        break;\n      }\n    }\n  }\n\n  // Return the paths that come from x and lead to y.\n  const filteredTape: TapeNode[] = [];\n  for (let i = 0; i < tape.length; i++) {\n    const node = tape[i];\n\n    if (nodesFromX[node.id] && nodesToY[node.id]) {\n      // Prune the inputs from the node that aren't a function of x.\n      const prunedInputs: {[inputName: string]: Tensor} = {};\n      for (const inputName in node.inputs) {\n        const nodeInput = node.inputs[inputName];\n        if (tensorsFromX[nodeInput.id]) {\n          prunedInputs[inputName] = nodeInput;\n        }\n      }\n\n      // Copy the node and overwrite inputsAndArgs to the pruned version.\n      const prunedNode = Object.assign({}, node);\n      prunedNode.inputs = prunedInputs;\n      prunedNode.outputs = node.outputs;\n\n      filteredTape.push(prunedNode);\n    }\n  }\n\n  return filteredTape;\n}\n\n/**\n * Backpropagate gradients through the filtered TapeNodes.\n *\n * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map\n * is mutated by this method.\n * @param filteredTape The filtered TapeNodes to backprop through.\n */\nexport function backpropagateGradients(\n    tensorAccumulatedGradientMap: {[tensorId: number]: Tensor},\n    filteredTape: TapeNode[], tidy: (f: Function) => Tensor) {\n  // Walk the tape backward and keep a map of Tensor to its gradient.\n  for (let i = filteredTape.length - 1; i >= 0; i--) {\n    const node = filteredTape[i];\n\n    const dys: Tensor[] = [];\n    node.outputs.forEach(o => {\n      const gradTensor = tensorAccumulatedGradientMap[o.id];\n      if (gradTensor != null) {\n        dys.push(gradTensor);\n      } else {\n        // This particular output is not in the back-propagation subgraph, so it\n        // does not affect the final output, thus we put zeros for its dy.\n        const dy = Tensor.make(\n            o.shape, {values: util.makeZerosTypedArray(o.size, o.dtype)},\n            o.dtype);\n        dys.push(dy);\n      }\n    });\n\n    if (node.gradient == null) {\n      throw new Error(\n          `Cannot compute gradient: gradient function not found ` +\n          `for ${node.name}.`);\n    }\n\n    // Backprop dy through this node and accumulate gradients over the inputs.\n    const inputGradients =\n        // Grad functions of ops with single outputs expect a dy, while ops\n        // with multiple outputs expect dys (array of dy).\n        node.gradient(node.outputs.length === 1 ? dys[0] : dys);\n    for (const inputName in node.inputs) {\n      if (!(inputName in inputGradients)) {\n        throw new Error(\n            `Cannot backprop through input ${inputName}. ` +\n            `Available gradients found: ${Object.keys(inputGradients)}.`);\n      }\n\n      // Call the gradient function.\n      const dx = tidy(() => inputGradients[inputName]());\n      if (dx.dtype !== 'float32') {\n        throw new Error(\n            `Error in gradient for op ${node.name}. The gradient of input ` +\n            `${inputName} must have 'float32' dtype, but has '${dx.dtype}'`);\n      }\n      const x = node.inputs[inputName];\n      if (!util.arraysEqual(dx.shape, x.shape)) {\n        throw new Error(\n            `Error in gradient for op ${node.name}. The gradient of input ` +\n            `'${inputName}' has shape '${dx.shape}', which does not match ` +\n            `the shape of the input '${x.shape}'`);\n      }\n\n      if (tensorAccumulatedGradientMap[x.id] == null) {\n        tensorAccumulatedGradientMap[x.id] = dx;\n      } else {\n        const curGradient = tensorAccumulatedGradientMap[x.id];\n        tensorAccumulatedGradientMap[x.id] = curGradient.add(dx);\n        curGradient.dispose();\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport function isMobile(): boolean {\n  // tslint:disable-next-line:no-any\n  const a = navigator.userAgent || navigator.vendor || (window as any).opera;\n  // tslint:disable-next-line:max-line-length\n  return /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i\n             .test(a) ||\n      // tslint:disable-next-line:max-line-length\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i\n          .test(a.substr(0, 4));\n}\n\nexport function isBrowser(): boolean {\n  return (typeof window !== 'undefined' && window.document != null) ||\n      //@ts-ignore\n      (typeof WorkerGlobalScope !== 'undefined');\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as device_util from './device_util';\nimport {ENV} from './environment';\n\n/**\n * This file contains environment-related flag registrations.\n */\n\n/** Whether to enable debug mode. */\nENV.registerFlag('DEBUG', () => false, debugValue => {\n  if (debugValue) {\n    console.warn(\n        'Debugging mode is ON. The output of every math call will ' +\n        'be downloaded to CPU and checked for NaNs. ' +\n        'This significantly impacts performance.');\n  }\n});\n\n/** Whether we are in a browser (as versus, say, node.js) environment. */\nENV.registerFlag('IS_BROWSER', () => device_util.isBrowser());\n\n/** Whether we are in a browser (as versus, say, node.js) environment. */\nENV.registerFlag(\n    'IS_NODE',\n    () => (typeof process !== 'undefined') &&\n        (typeof process.versions !== 'undefined') &&\n        (typeof process.versions.node !== 'undefined'));\n\n/** Whether this browser is Chrome. */\nENV.registerFlag(\n    'IS_CHROME',\n    () => typeof navigator !== 'undefined' && navigator != null &&\n        navigator.userAgent != null && /Chrome/.test(navigator.userAgent) &&\n        /Google Inc/.test(navigator.vendor));\n\n/**\n * True when the environment is \"production\" where we disable safety checks\n * to gain performance.\n */\nENV.registerFlag('PROD', () => false);\n\n/**\n * Whether to do sanity checks when inferring a shape from user-provided\n * values, used when creating a new tensor.\n */\nENV.registerFlag(\n    'TENSORLIKE_CHECK_SHAPE_CONSISTENCY', () => ENV.getBool('DEBUG'));\n\n/** Whether deprecation warnings are enabled. */\nENV.registerFlag('DEPRECATION_WARNINGS_ENABLED', () => true);\n\n/** True if running unit tests. */\nENV.registerFlag('IS_TEST', () => false);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst contexts: {[key: string]: WebGLRenderingContext} = {};\n\nconst WEBGL_ATTRIBUTES: WebGLContextAttributes = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\n\nexport function setWebGLContext(\n    webGLVersion: number, gl: WebGLRenderingContext) {\n  contexts[webGLVersion] = gl;\n}\n\nexport function getWebGLContext(webGLVersion: number): WebGLRenderingContext {\n  if (!(webGLVersion in contexts)) {\n    contexts[webGLVersion] = getWebGLRenderingContext(webGLVersion);\n  }\n  const gl = contexts[webGLVersion];\n  if (gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return contexts[webGLVersion];\n}\n\nexport function createCanvas(webGLVersion: number) {\n  if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\n\nfunction getWebGLRenderingContext(webGLVersion: number): WebGLRenderingContext {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n  const canvas = createCanvas(webGLVersion);\n\n  canvas.addEventListener('webglcontextlost', (ev: Event) => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n  if (webGLVersion === 1) {\n    return (canvas.getContext('webgl', WEBGL_ATTRIBUTES) ||\n            canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES)) as\n        WebGLRenderingContext;\n  }\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES) as WebGLRenderingContext;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENV} from '../../environment';\nimport {DataId, Tensor} from '../../tensor';\nimport {BackendValues, DataType} from '../../types';\nimport * as util from '../../util';\n\nexport enum TextureUsage {\n  RENDER,\n  UPLOAD,\n  PIXELS,\n  DOWNLOAD\n}\n\nexport enum PhysicalTextureType {\n  UNPACKED_FLOAT16,\n  UNPACKED_FLOAT32,\n  PACKED_4X1_UNSIGNED_BYTE,\n  PACKED_2X2_FLOAT32,\n  PACKED_2X2_FLOAT16\n}\n\nexport interface TextureData {\n  // Required.\n  shape: number[];\n  dtype: DataType;\n\n  // Optional.\n  values?: BackendValues;\n  texture?: WebGLTexture;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensors field. When this is defined, texture will be null.\n  complexTensors?: {real: Tensor, imag: Tensor};\n  /** [rows, columns] shape of the texture. */\n  texShape?: [number, number];\n  usage?: TextureUsage;\n  isPacked?: boolean;\n\n  // Available when the tensor has been sliced.\n  slice?: {\n    // Offset in the 'flat index' space.\n    flatOffset: number;\n    // Used for counting how many sliced tensors point to the same texture.\n    origDataId: DataId;\n  };\n}\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns, rows];\n}\n\nexport function getUnpackedArraySizeFromMatrixSize(\n    matrixSize: number, channelsPerTexture: number): number {\n  return matrixSize * channelsPerTexture;\n}\n\nexport function getColorMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns * 4, rows];\n}\n\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape: number[]): [number, number] {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\n\nexport function getMatrixSizeFromUnpackedArraySize(\n    unpackedSize: number, channelsPerTexture: number): number {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(\n        `unpackedSize (${unpackedSize}) must be a multiple of ` +\n        `${channelsPerTexture}`);\n  }\n  return unpackedSize / channelsPerTexture;\n}\n\nexport function decodeMatrixFromUnpackedColorRGBAArray(\n    unpackedArray: Float32Array, matrix: Float32Array, channels: number) {\n  const requiredSize = unpackedArray.length * channels / 4;\n  if (matrix.length < requiredSize) {\n    throw new Error(\n        `matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\n\nexport function getPackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [\n    Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n  ];\n}\n\nexport function getPackedRGBAArraySizeFromMatrixShape(\n    rows: number, columns: number): number {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\n\nexport interface TextureConfig {\n  internalFormatFloat: number;\n  textureFormatFloat: number;\n  internalFormatPackedHalfFloat: number;\n  internalFormatHalfFloat: number;\n  internalFormatPackedFloat: number;\n\n  // The format to use during a gl.readPixels call.\n  downloadTextureFormat: number;\n  // How many channels need to be unpacked after a gl.readPixels call.\n  downloadUnpackNumChannels: number;\n\n  defaultNumChannels: number;\n  textureTypeHalfFloat: number;\n  textureTypeFloat: number;\n}\n\nexport function getTextureConfig(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension?: any): TextureConfig {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n\n  let internalFormatFloat: number;\n  let internalFormatHalfFloat: number;\n  let internalFormatPackedHalfFloat: number;\n  let internalFormatPackedFloat: number;\n  let textureFormatFloat: number;\n\n  let downloadTextureFormat: number;\n  let downloadUnpackNumChannels: number;\n\n  let defaultNumChannels: number;\n  let textureTypeHalfFloat: number;\n  let textureTypeFloat: number;\n\n  if (ENV.getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ?\n        textureHalfFloatExtension.HALF_FLOAT_OES :\n        null;\n    textureTypeFloat = gl.FLOAT;\n  }\n  downloadTextureFormat = gl.RGBA;\n\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENV} from '../../environment';\nimport * as util from '../../util';\n\nimport {getWebGLContext} from './canvas_util';\nimport {getTextureConfig} from './tex_util';\n\nexport function callAndCheck<T>(\n    gl: WebGLRenderingContext, debugMode: boolean, func: () => T): T {\n  const returnValue = func();\n  if (debugMode) {\n    checkWebGLError(gl);\n  }\n  return returnValue;\n}\n\nfunction checkWebGLError(gl: WebGLRenderingContext) {\n  const error = gl.getError();\n  if (error !== gl.NO_ERROR) {\n    throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n  }\n}\n\n// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nconst MIN_FLOAT16 = 5.96e-8;\nconst MAX_FLOAT16 = 65504;\n\nexport function canBeRepresented(num: number): boolean {\n  if (ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||\n      (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {\n    return true;\n  }\n  return false;\n}\n\nexport function getWebGLErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.NO_ERROR:\n      return 'NO_ERROR';\n    case gl.INVALID_ENUM:\n      return 'INVALID_ENUM';\n    case gl.INVALID_VALUE:\n      return 'INVALID_VALUE';\n    case gl.INVALID_OPERATION:\n      return 'INVALID_OPERATION';\n    case gl.INVALID_FRAMEBUFFER_OPERATION:\n      return 'INVALID_FRAMEBUFFER_OPERATION';\n    case gl.OUT_OF_MEMORY:\n      return 'OUT_OF_MEMORY';\n    case gl.CONTEXT_LOST_WEBGL:\n      return 'CONTEXT_LOST_WEBGL';\n    default:\n      return `Unknown error code ${status}`;\n  }\n}\n\nexport function getExtensionOrThrow(\n    gl: WebGLRenderingContext, debug: boolean, extensionName: string): {} {\n  return throwIfNull<{}>(\n      gl, debug, () => gl.getExtension(extensionName),\n      'Extension \"' + extensionName + '\" not supported on this browser.');\n}\n\nexport function createVertexShader(\n    gl: WebGLRenderingContext, debug: boolean,\n    vertexShaderSource: string): WebGLShader {\n  const vertexShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, debug, () => gl.createShader(gl.VERTEX_SHADER),\n      'Unable to create vertex WebGLShader.');\n  callAndCheck(\n      gl, debug, () => gl.shaderSource(vertexShader, vertexShaderSource));\n  callAndCheck(gl, debug, () => gl.compileShader(vertexShader));\n  if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    throw new Error('Failed to compile vertex shader.');\n  }\n  return vertexShader;\n}\n\nexport function createFragmentShader(\n    gl: WebGLRenderingContext, debug: boolean,\n    fragmentShaderSource: string): WebGLShader {\n  const fragmentShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, debug, () => gl.createShader(gl.FRAGMENT_SHADER),\n      'Unable to create fragment WebGLShader.');\n  callAndCheck(\n      gl, debug, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n  callAndCheck(gl, debug, () => gl.compileShader(fragmentShader));\n  if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n    logShaderSourceAndInfoLog(\n        fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n    throw new Error('Failed to compile fragment shader.');\n  }\n  return fragmentShader;\n}\n\nconst lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nfunction logShaderSourceAndInfoLog(\n    shaderSource: string, shaderInfoLog: string) {\n  const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n  if (lineNumberRegexResult == null) {\n    console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n    console.log(shaderSource);\n    return;\n  }\n\n  const lineNumber = +lineNumberRegexResult[1];\n\n  const shaderLines = shaderSource.split('\\n');\n  const pad = shaderLines.length.toString().length + 2;\n  const linesWithLineNumbers = shaderLines.map(\n      (line, lineNumber) =>\n          util.rightPad((lineNumber + 1).toString(), pad) + line);\n  let maxLineLength = 0;\n  for (let i = 0; i < linesWithLineNumbers.length; i++) {\n    maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n  }\n\n  const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n  const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n  const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n\n  console.log(beforeErrorLines.join('\\n'));\n  console.log(shaderInfoLog.split('\\n')[0]);\n  console.log(\n      `%c ${util.rightPad(errorLine[0], maxLineLength)}`,\n      'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n  console.log(afterErrorLines.join('\\n'));\n}\n\nexport function createProgram(\n    gl: WebGLRenderingContext, debug: boolean): WebGLProgram {\n  return throwIfNull<WebGLProgram>(\n      gl, debug, () => gl.createProgram(), 'Unable to create WebGLProgram.');\n}\n\nexport function linkProgram(\n    gl: WebGLRenderingContext, debug: boolean, program: WebGLProgram) {\n  callAndCheck(gl, debug, () => gl.linkProgram(program));\n  if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Failed to link vertex and fragment shaders.');\n  }\n}\n\nexport function validateProgram(\n    gl: WebGLRenderingContext, debug: boolean, program: WebGLProgram) {\n  callAndCheck(gl, debug, () => gl.validateProgram(program));\n  if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Shader program validation failed.');\n  }\n}\n\nexport function createStaticVertexBuffer(\n    gl: WebGLRenderingContext, debug: boolean,\n    data: Float32Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, debug, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, debug, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl, debug, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function createStaticIndexBuffer(\n    gl: WebGLRenderingContext, debug: boolean, data: Uint16Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, debug, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, debug, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl, debug,\n      () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function getNumChannels(): number {\n  if (ENV.getNumber('WEBGL_VERSION') === 2) {\n    return 1;\n  }\n  return 4;\n}\n\nexport function createTexture(\n    gl: WebGLRenderingContext, debug: boolean): WebGLTexture {\n  return throwIfNull<WebGLTexture>(\n      gl, debug, () => gl.createTexture(), 'Unable to create WebGLTexture.');\n}\n\nexport function validateTextureSize(width: number, height: number) {\n  const maxTextureSize = ENV.getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if ((width <= 0) || (height <= 0)) {\n    const requested = `[${width}x${height}]`;\n    throw new Error('Requested texture size ' + requested + ' is invalid.');\n  }\n  if ((width > maxTextureSize) || (height > maxTextureSize)) {\n    const requested = `[${width}x${height}]`;\n    const max = `[${maxTextureSize}x${maxTextureSize}]`;\n    throw new Error(\n        'Requested texture size ' + requested +\n        ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n  }\n}\n\nexport function createFramebuffer(\n    gl: WebGLRenderingContext, debug: boolean): WebGLFramebuffer {\n  return throwIfNull<WebGLFramebuffer>(\n      gl, debug, () => gl.createFramebuffer(),\n      'Unable to create WebGLFramebuffer.');\n}\n\nexport function bindVertexBufferToProgramAttribute(\n    gl: WebGLRenderingContext, debug: boolean, program: WebGLProgram,\n    attribute: string, buffer: WebGLBuffer, arrayEntriesPerItem: number,\n    itemStrideInBytes: number, itemOffsetInBytes: number): boolean {\n  const loc = gl.getAttribLocation(program, attribute);\n  if (loc === -1) {\n    // The GPU compiler decided to strip out this attribute because it's unused,\n    // thus no need to bind.\n    return false;\n  }\n  callAndCheck(gl, debug, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl, debug,\n      () => gl.vertexAttribPointer(\n          loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes,\n          itemOffsetInBytes));\n  callAndCheck(gl, debug, () => gl.enableVertexAttribArray(loc));\n  return true;\n}\n\nexport function bindTextureUnit(\n    gl: WebGLRenderingContext, debug: boolean, texture: WebGLTexture,\n    textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, debug, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, debug, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\n\nexport function unbindTextureUnit(\n    gl: WebGLRenderingContext, debug: boolean, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, debug, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, debug, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function getProgramUniformLocationOrThrow(\n    gl: WebGLRenderingContext, debug: boolean, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return throwIfNull<WebGLUniformLocation>(\n      gl, debug, () => gl.getUniformLocation(program, uniformName),\n      'uniform \"' + uniformName + '\" not present in program.');\n}\n\nexport function getProgramUniformLocation(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return gl.getUniformLocation(program, uniformName);\n}\n\nexport function bindTextureToProgramUniformSampler(\n    gl: WebGLRenderingContext, debug: boolean, program: WebGLProgram,\n    texture: WebGLTexture, uniformSamplerLocation: WebGLUniformLocation,\n    textureUnit: number) {\n  callAndCheck(\n      gl, debug, () => bindTextureUnit(gl, debug, texture, textureUnit));\n  callAndCheck(\n      gl, debug, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\n\nexport function bindCanvasToFramebuffer(\n    gl: WebGLRenderingContext, debug: boolean) {\n  callAndCheck(gl, debug, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n  callAndCheck(\n      gl, debug, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n  callAndCheck(\n      gl, debug, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\n\nexport function bindColorTextureToFramebuffer(\n    gl: WebGLRenderingContext, debug: boolean, texture: WebGLTexture,\n    framebuffer: WebGLFramebuffer) {\n  callAndCheck(\n      gl, debug, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl, debug,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\n\nexport function unbindColorTextureFromFramebuffer(\n    gl: WebGLRenderingContext, debug: boolean, framebuffer: WebGLFramebuffer) {\n  callAndCheck(\n      gl, debug, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl, debug,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\n\nexport function validateFramebuffer(gl: WebGLRenderingContext) {\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status !== gl.FRAMEBUFFER_COMPLETE) {\n    throw new Error(\n        'Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n  }\n}\n\nexport function getFramebufferErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n      return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n    case gl.FRAMEBUFFER_UNSUPPORTED:\n      return 'FRAMEBUFFER_UNSUPPORTED';\n    default:\n      return `unknown error ${status}`;\n  }\n}\n\nfunction throwIfNull<T>(\n    gl: WebGLRenderingContext, debug: boolean, returnTOrNull: () => T | null,\n    failureMessage: string): T {\n  const tOrNull: T|null = callAndCheck(gl, debug, () => returnTOrNull());\n  if (tOrNull == null) {\n    throw new Error(failureMessage);\n  }\n  return tOrNull;\n}\n\nfunction validateTextureUnit(gl: WebGLRenderingContext, textureUnit: number) {\n  const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n  const glTextureUnit = textureUnit + gl.TEXTURE0;\n  if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n    const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n    throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n  }\n}\n\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [\n    shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]\n  ];\n}\n\nexport function getShapeAs3D(shape: number[]): [number, number, number] {\n  let shapeAs3D: [number, number, number] = [1, 1, 1];\n  const isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);\n  if (!isScalar) {\n    shapeAs3D =\n        [getBatchDim(shape), ...getRowsCols(shape)] as [number, number, number];\n  }\n  return shapeAs3D;\n}\n\nexport function getTextureShapeFromLogicalShape(\n    logShape: number[], isPacked = false): [number, number] {\n  let maxTexSize = ENV.getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if (isPacked) {\n    maxTexSize = maxTexSize * 2;\n\n    // This logic ensures we accurately count the number of packed texels needed\n    // to accommodate the tensor. We can only pack values in the same texel if\n    // they are from adjacent pairs of rows/cols within the same batch. So if a\n    // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n    // fact that the texels containing the third row are half empty.\n    logShape = logShape.map(\n        (d, i) => i >= logShape.length - 2 ?\n            util.nearestLargerEven(logShape[i]) :\n            logShape[i]);\n\n    // Packed texture height is at least 2 (the channel height of a single\n    // texel).\n    if (logShape.length === 1) {\n      logShape = [2, logShape[0]];\n    }\n  }\n\n  // If logical shape is 2, we don't squeeze, since we want to match physical.\n  if (logShape.length !== 2) {\n    const squeezeResult = util.squeezeShape(logShape);\n    logShape = squeezeResult.newShape;\n  }\n\n  let size = util.sizeFromShape(logShape);\n  if (logShape.length <= 1 && size <= maxTexSize) {\n    return [1, size];\n  } else if (\n      logShape.length === 2 && logShape[0] <= maxTexSize &&\n      logShape[1] <= maxTexSize) {\n    return logShape as [number, number];\n  } else if (\n      logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&\n      logShape[2] <= maxTexSize) {\n    return [logShape[0] * logShape[1], logShape[2]];\n  } else if (\n      logShape.length === 3 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2]];\n  } else if (\n      logShape.length === 4 &&\n      logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&\n      logShape[3] <= maxTexSize) {\n    return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n  } else if (\n      logShape.length === 4 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n  } else {\n    if (isPacked) {\n      // For packed textures size equals the number of channels required to\n      // accommodate the texture data. However in order to squarify such that\n      // inner dimensions stay even, we rewrite size to equal the number of\n      // texels. Then in the return statement we rehydrate the squarified\n      // dimensions to channel units.\n\n      const batchDim = getBatchDim(logShape);\n      let rows = 2, cols = 2;\n      if (logShape.length) {\n        [rows, cols] = getRowsCols(logShape);\n      }\n      size = batchDim * (rows / 2) * (cols / 2);\n      return util.sizeToSquarishShape(size).map(d => d * 2) as [number, number];\n    }\n    return util.sizeToSquarishShape(size);\n  }\n}\n\nfunction isEven(n: number): boolean {\n  return n % 2 === 0;\n}\n\n/**\n * This determines whether reshaping a packed texture requires rearranging\n * the data within the texture, assuming 2x2 packing.\n */\nexport function isReshapeFree(shape1: number[], shape2: number[]): boolean {\n  shape1 = shape1.slice(-2);\n  shape2 = shape2.slice(-2);\n\n  if (util.arraysEqual(shape1, shape2)) {\n    return true;\n  }\n\n  if (!shape1.length || !shape2.length) {  // One of the shapes is a scalar.\n    return true;\n  }\n\n  if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||\n      shape2[1] === 0) {\n    return true;\n  }\n\n  if (shape1.length !== shape2.length) {  // One of the shapes is a vector.\n    const shape1Cols = shape1.slice(-1)[0];\n    const shape2Cols = shape2.slice(-1)[0];\n    if (shape1Cols === shape2Cols) {\n      return true;\n    }\n\n    if (isEven(shape1Cols) && isEven(shape2Cols) &&\n        (shape1[0] === 1 || shape2[0] === 1)) {\n      return true;\n    }\n  }\n  return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\n\n// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nlet MAX_TEXTURE_SIZE: number;\nlet MAX_TEXTURES_IN_SHADER: number;\n\nexport function getWebGLMaxTextureSize(webGLVersion: number): number {\n  if (MAX_TEXTURE_SIZE == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  }\n  return MAX_TEXTURE_SIZE;\n}\n\nexport function resetMaxTextureSize() {\n  MAX_TEXTURE_SIZE = null;\n}\nexport function resetMaxTexturesInShader() {\n  MAX_TEXTURES_IN_SHADER = null;\n}\n\nexport function getMaxTexturesInShader(webGLVersion: number): number {\n  if (MAX_TEXTURES_IN_SHADER == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  }\n  // We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\n  return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\n\nexport function getWebGLDisjointQueryTimerVersion(webGLVersion: number):\n    number {\n  if (webGLVersion === 0) {\n    return 0;\n  }\n\n  let queryTimerVersion: number;\n  const gl = getWebGLContext(webGLVersion);\n\n  if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&\n      webGLVersion === 2) {\n    queryTimerVersion = 2;\n  } else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n    queryTimerVersion = 1;\n  } else {\n    queryTimerVersion = 0;\n  }\n  return queryTimerVersion;\n}\n\nexport function hasExtension(gl: WebGLRenderingContext, extensionName: string) {\n  const ext = gl.getExtension(extensionName);\n  return ext != null;\n}\n\nexport function isWebGLVersionEnabled(webGLVersion: 1|2) {\n  try {\n    const gl = getWebGLContext(webGLVersion);\n    if (gl != null) {\n      return true;\n    }\n  } catch (e) {\n    return false;\n  }\n  return false;\n}\n\nexport function isCapableOfRenderingToFloatTexture(webGLVersion: number):\n    boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n  } else {\n    if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n      return false;\n    }\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\n/**\n * Check if we can download values from a float/half-float texture.\n *\n * Note that for performance reasons we use binding a texture to a framebuffer\n * as a proxy for ability to download float values later using readPixels. The\n * texture params of this texture will not match those in readPixels exactly\n * but if we are unable to bind some kind of float texture to the frameBuffer\n * then we definitely will not be able to read float values from it.\n */\nexport function isDownloadFloatTextureEnabled(webGLVersion: number): boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n    if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {\n      return false;\n    }\n  } else {\n    if (hasExtension(gl, 'EXT_color_buffer_float')) {\n      return createFloatTextureAndBindToFramebuffer(gl);\n    }\n\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n      const textureHalfFloatExtension =\n          gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      return createHalfFloatTextureAndBindToFramebuffer(\n          gl, textureHalfFloatExtension);\n    }\n\n    return false;\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\nfunction createFloatTextureAndBindToFramebuffer(gl: WebGLRenderingContext):\n    boolean {\n  const texConfig = getTextureConfig(gl);\n\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nfunction createHalfFloatTextureAndBindToFramebuffer(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension: any): boolean {\n  const texConfig = getTextureConfig(gl, textureHalfFloatExtension);\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nexport function isWebGLFenceEnabled(webGLVersion: number) {\n  if (webGLVersion !== 2) {\n    return false;\n  }\n  const gl = getWebGLContext(webGLVersion);\n\n  // tslint:disable-next-line:no-any\n  const isEnabled = (gl as any).fenceSync != null;\n  return isEnabled;\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelBackend} from './backends/backend';\nimport {ENGINE, MemoryInfo, ProfileInfo, ScopeFn, TimingInfo} from './engine';\nimport {ENV} from './environment';\nimport {Platform} from './platforms/platform';\nimport {setDeprecationWarningFn, Tensor} from './tensor';\nimport {TensorContainer} from './tensor_types';\nimport {getTensorsInContainer} from './tensor_util';\n\n/**\n * Enables production mode which disables correctness checks in favor of\n * performance.\n */\n/** @doc {heading: 'Environment'} */\nexport function enableProdMode(): void {\n  ENV.set('PROD', true);\n}\n\n/**\n * Enables debug mode which will log information about all executed kernels:\n * the elapsed time of the kernel execution, as well as the rank, shape, and\n * size of the output tensor.\n *\n * Debug mode will significantly slow down your application as it will\n * download the result of every operation to the CPU. This should not be used in\n * production. Debug mode does not affect the timing information of the kernel\n * execution as we do not measure download time in the kernel execution time.\n *\n * See also: `tf.profile`, `tf.memory`.\n */\n/** @doc {heading: 'Environment'} */\nexport function enableDebugMode(): void {\n  ENV.set('DEBUG', true);\n}\n\n/** Globally disables deprecation warnings */\nexport function disableDeprecationWarnings(): void {\n  ENV.set('DEPRECATION_WARNINGS_ENABLED', false);\n  console.warn(`TensorFlow.js deprecation warnings have been disabled.`);\n}\n\n/** Warn users about deprecated functionality. */\nexport function deprecationWarn(msg: string) {\n  if (ENV.getBool('DEPRECATION_WARNINGS_ENABLED')) {\n    console.warn(\n        msg + ' You can disable deprecation warnings with ' +\n        'tf.disableDeprecationWarnings().');\n  }\n}\nsetDeprecationWarningFn(deprecationWarn);\n\n/**\n * Dispose all variables kept in backend engine.\n */\n/** @doc {heading: 'Environment'} */\nexport function disposeVariables(): void {\n  ENGINE.disposeVariables();\n}\n\n/**\n * Returns memory info at the current time in the program. The result is an\n * object with the following properties:\n *\n * - `numBytes`: Number of bytes allocated (undisposed) at this time.\n * - `numTensors`: Number of unique tensors allocated.\n * - `numDataBuffers`: Number of unique data buffers allocated\n *   (undisposed) at this time, which is ≤ the number of tensors\n *   (e.g. `a.reshape(newShape)` makes a new Tensor that shares the same\n *   data buffer with `a`).\n * - `unreliable`: True if the memory usage is unreliable. See `reasons` when\n *    `unreliable` is true.\n * - `reasons`: `string[]`, reasons why the memory is unreliable, present if\n *    `unreliable` is true.\n */\n/** @doc {heading: 'Performance', subheading: 'Memory'} */\nexport function memory(): MemoryInfo {\n  return ENGINE.memory();\n}\n\n/**\n * Executes the provided function `f()` and returns a promise that resolves\n * with information about the function's memory use:\n * - `newBytes`: tne number of new bytes allocated\n * - `newTensors`: the number of new tensors created\n * - `peakBytes`: the peak number of bytes allocated\n * - `kernels`: an array of objects for each kernel involved that reports\n * their input and output shapes, number of bytes used, and number of new\n * tensors created.\n *\n * ```js\n * const profile = await tf.profile(() => {\n *   const x = tf.tensor1d([1, 2, 3]);\n *   let x2 = x.square();\n *   x2.dispose();\n *   x2 = x.square();\n *   x2.dispose();\n *   return x;\n * });\n *\n * console.log(`newBytes: ${profile.newBytes}`);\n * console.log(`newTensors: ${profile.newTensors}`);\n * console.log(`byte usage over all kernels: ${profile.kernels.map(k =>\n * k.totalBytesSnapshot)}`);\n * ```\n *\n */\n/** @doc {heading: 'Performance', subheading: 'Profile'} */\nexport function profile(f: () => TensorContainer): Promise<ProfileInfo> {\n  return ENGINE.profile(f);\n}\n\n/**\n * Executes the provided function `fn` and after it is executed, cleans up all\n * intermediate tensors allocated by `fn` except those returned by `fn`.\n * `fn` must not return a Promise (async functions not allowed). The returned\n * result can be a complex object.\n *\n * Using this method helps avoid memory leaks. In general, wrap calls to\n * operations in `tf.tidy` for automatic memory cleanup.\n *\n * NOTE: Variables do *not* get cleaned up when inside a tidy(). If you want to\n * dispose variables, please use `tf.disposeVariables` or call dispose()\n * directly on variables.\n *\n * ```js\n * // y = 2 ^ 2 + 1\n * const y = tf.tidy(() => {\n *   // a, b, and one will be cleaned up when the tidy ends.\n *   const one = tf.scalar(1);\n *   const a = tf.scalar(2);\n *   const b = a.square();\n *\n *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\n *\n *   // The value returned inside the tidy function will return\n *   // through the tidy, in this case to the variable y.\n *   return b.add(one);\n * });\n *\n * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);\n * y.print();\n * ```\n *\n * @param nameOrFn The name of the closure, or the function to execute.\n *     If a name is provided, the 2nd argument should be the function.\n *     If debug mode is on, the timing and the memory usage of the function\n *     will be tracked and displayed on the console using the provided name.\n * @param fn The function to execute.\n */\n/** @doc {heading: 'Performance', subheading: 'Memory'} */\nexport function tidy<T extends TensorContainer>(\n    nameOrFn: string|ScopeFn<T>, fn?: ScopeFn<T>): T {\n  return ENGINE.tidy(nameOrFn, fn);\n}\n\n/**\n * Disposes any `tf.Tensor`s found within the provided object.\n *\n * @param container an object that may be a `tf.Tensor` or may directly\n *     contain `tf.Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. If\n *     the object is not a `tf.Tensor` or does not contain `Tensors`, nothing\n *     happens. In general it is safe to pass any object here, except that\n *     `Promise`s are not supported.\n */\n/** @doc {heading: 'Performance', subheading: 'Memory'} */\nexport function dispose(container: TensorContainer) {\n  const tensors = getTensorsInContainer(container);\n  tensors.forEach(tensor => tensor.dispose());\n}\n\n/**\n * Keeps a `tf.Tensor` generated inside a `tf.tidy` from being disposed\n * automatically.\n *\n * ```js\n * let b;\n * const y = tf.tidy(() => {\n *   const one = tf.scalar(1);\n *   const a = tf.scalar(2);\n *\n *   // b will not be cleaned up by the tidy. a and one will be cleaned up\n *   // when the tidy ends.\n *   b = tf.keep(a.square());\n *\n *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\n *\n *   // The value returned inside the tidy function will return\n *   // through the tidy, in this case to the variable y.\n *   return b.add(one);\n * });\n *\n * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);\n * console.log('y:');\n * y.print();\n * console.log('b:');\n * b.print();\n * ```\n *\n * @param result The tensor to keep from being disposed.\n */\n/** @doc {heading: 'Performance', subheading: 'Memory'} */\nexport function keep<T extends Tensor>(result: T): T {\n  return ENGINE.keep(result);\n}\n\n/**\n * Executes `f()` and returns a promise that resolves with timing\n * information.\n *\n * The result is an object with the following properties:\n *\n * - `wallMs`: Wall execution time.\n * - `kernelMs`: Kernel execution time, ignoring data transfer.\n * - On `WebGL` The following additional properties exist:\n *   - `uploadWaitMs`: CPU blocking time on texture uploads.\n *   - `downloadWaitMs`: CPU blocking time on texture downloads (readPixels).\n *\n * ```js\n * const x = tf.randomNormal([20, 20]);\n * const time = await tf.time(() => x.matMul(x));\n *\n * console.log(`kernelMs: ${time.kernelMs}, wallTimeMs: ${time.wallMs}`);\n * ```\n *\n * @param f The function to execute and time.\n */\n/** @doc {heading: 'Performance', subheading: 'Timing'} */\nexport function time(f: () => void): Promise<TimingInfo> {\n  return ENGINE.time(f);\n}\n\n/**\n * Sets the backend (cpu, webgl, etc) responsible for creating tensors and\n * executing operations on those tensors. Returns a promise that resolves\n * to a boolean if the backend initialization was successful.\n *\n * Note this disposes the current backend, if any, as well as any tensors\n * associated with it. A new backend is initialized, even if it is of the\n * same type as the previous one.\n *\n * @param backendName The name of the backend. Currently supports\n *     `'webgl'|'cpu'` in the browser, and `'tensorflow'` under node.js\n *     (requires tfjs-node).\n */\n/** @doc {heading: 'Backends'} */\nexport function setBackend(backendName: string): Promise<boolean> {\n  return ENGINE.setBackend(backendName);\n}\n\n/**\n * Returns a promise that resolves when the currently selected backend (or the\n * highest priority one) has initialized. Await this promise when you are using\n * a backend that has async initialization.\n */\n/** @doc {heading: 'Backends'} */\nexport function ready(): Promise<void> {\n  return ENGINE.ready();\n}\n\n/**\n * Returns the current backend name (cpu, webgl, etc). The backend is\n * responsible for creating tensors and executing operations on those tensors.\n */\n/** @doc {heading: 'Backends'} */\nexport function getBackend(): string {\n  return ENGINE.backendName;\n}\n\n/**\n * Removes a backend and the registered factory.\n */\n/** @doc {heading: 'Backends'} */\nexport function removeBackend(name: string): void {\n  ENGINE.removeBackend(name);\n}\n\n/**\n * Finds the backend registered under the provided name. Returns null if the\n * name is not in the registry, or the registration hasn't finished yet.\n */\nexport function findBackend(name: string): KernelBackend {\n  return ENGINE.findBackend(name);\n}\n\n/**\n * Finds the backend factory registered under the provided name. Returns a\n * function that produces a new backend when called. Returns null if the name\n * is not in the registry.\n */\nexport function findBackendFactory(name: string): () =>\n    KernelBackend | Promise<KernelBackend> {\n  return ENGINE.findBackendFactory(name);\n}\n\n/**\n * Registers a global backend. The registration should happen when importing\n * a module file (e.g. when importing `backend_webgl.ts`), and is used for\n * modular builds (e.g. custom tfjs bundle with only webgl support).\n *\n * @param factory The backend factory function. When called, it should\n * return a backend instance, or a promise of an instance.\n * @param priority The priority of the backend (higher = more important).\n *     In case multiple backends are registered, the priority is used to find\n *     the best backend. Defaults to 1.\n * @return False if there is already a registered backend under this name, true\n *     if not.\n */\n/** @doc {heading: 'Backends'} */\nexport function registerBackend(\n    name: string, factory: () => KernelBackend | Promise<KernelBackend>,\n    priority = 1): boolean {\n  return ENGINE.registerBackend(name, factory, priority);\n}\n\n/**\n * Gets the current backend. If no backends have been initialized, this will\n * attempt to initialize the best backend. Will throw an error if the highest\n * priority backend has async initialization, in which case, you should call\n * 'await tf.ready()' before running other code.\n */\n/** @doc {heading: 'Backends'} */\nexport function backend(): KernelBackend {\n  return ENGINE.backend;\n}\n\n/**\n * Sets the global platform.\n *\n * @param platformName The name of this platform.\n * @param platform A platform implementation.\n */\nexport function setPlatform(platformName: string, platform: Platform) {\n  ENV.setPlatform(platformName, platform);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENV} from './environment';\n\nexport function warn(...msg: Array<{}>): void {\n  if (!ENV.getBool('IS_TEST')) {\n    console.warn(...msg);\n  }\n}\n\nexport function log(...msg: Array<{}>): void {\n  if (!ENV.getBool('IS_TEST')) {\n    console.log(...msg);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENV} from './environment';\nimport {Tensor} from './tensor';\nimport {DataType, TensorLike} from './types';\nimport {assert, flatten, inferDtype, isTypedArray, toTypedArray} from './util';\n\nexport function inferShape(val: TensorLike, dtype?: DataType): number[] {\n  let firstElem: typeof val = val;\n\n  if (isTypedArray(val)) {\n    return dtype === 'string' ? [] : [val.length];\n  }\n  if (!Array.isArray(val)) {\n    return [];  // Scalar.\n  }\n  const shape: number[] = [];\n\n  while (Array.isArray(firstElem) ||\n         isTypedArray(firstElem) && dtype !== 'string') {\n    shape.push(firstElem.length);\n    firstElem = firstElem[0];\n  }\n  if (Array.isArray(val) && ENV.getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY')) {\n    deepAssertShapeConsistency(val, shape, []);\n  }\n\n  return shape;\n}\n\nfunction deepAssertShapeConsistency(\n    val: TensorLike, shape: number[], indices: number[]) {\n  indices = indices || [];\n  if (!(Array.isArray(val)) && !isTypedArray(val)) {\n    assert(\n        shape.length === 0,\n        () => `Element arr[${indices.join('][')}] is a primitive, ` +\n            `but should be an array/TypedArray of ${shape[0]} elements`);\n    return;\n  }\n  assert(\n      shape.length > 0,\n      () => `Element arr[${indices.join('][')}] should be a primitive, ` +\n          `but is an array of ${val.length} elements`);\n  assert(\n      val.length === shape[0],\n      () => `Element arr[${indices.join('][')}] should have ${shape[0]} ` +\n          `elements, but has ${val.length} elements`);\n  const subShape = shape.slice(1);\n  for (let i = 0; i < val.length; ++i) {\n    deepAssertShapeConsistency(val[i], subShape, indices.concat(i));\n  }\n}\n\nfunction assertDtype(\n    expectedDtype: DataType|'numeric', actualDType: DataType, argName: string,\n    functionName: string) {\n  if (expectedDtype == null) {\n    return;\n  }\n  if (expectedDtype !== 'numeric' && expectedDtype !== actualDType ||\n      expectedDtype === 'numeric' && actualDType === 'string') {\n    throw new Error(\n        `Argument '${argName}' passed to '${functionName}' must ` +\n        `be ${expectedDtype} tensor, but got ${actualDType} tensor`);\n  }\n}\n\nexport function convertToTensor<T extends Tensor>(\n    x: T|TensorLike, argName: string, functionName: string,\n    parseAsDtype: DataType|'numeric' = 'numeric'): T {\n  if (x instanceof Tensor) {\n    assertDtype(parseAsDtype, x.dtype, argName, functionName);\n    return x;\n  }\n  let inferredDtype = inferDtype(x);\n  // If the user expects a bool/int/float, use that info to update the\n  // inferredDtype when it is not a string.\n  if (inferredDtype !== 'string' &&\n      ['bool', 'int32', 'float32'].indexOf(parseAsDtype) >= 0) {\n    inferredDtype = parseAsDtype as DataType;\n  }\n  assertDtype(parseAsDtype, inferredDtype, argName, functionName);\n\n  if ((x == null) ||\n      (!isTypedArray(x) && !Array.isArray(x) && typeof x !== 'number' &&\n       typeof x !== 'boolean' && typeof x !== 'string')) {\n    const type = x == null ? 'null' : (x as {}).constructor.name;\n    throw new Error(\n        `Argument '${argName}' passed to '${functionName}' must be a ` +\n        `Tensor or TensorLike, but got '${type}'`);\n  }\n  const inferredShape = inferShape(x, inferredDtype);\n  if (!isTypedArray(x) && !Array.isArray(x)) {\n    x = [x] as number[];\n  }\n  const skipTypedArray = true;\n  const values = inferredDtype !== 'string' ?\n      toTypedArray(x, inferredDtype as DataType, ENV.getBool('DEBUG')) :\n      flatten(x as string[], [], skipTypedArray) as string[];\n  return Tensor.make(inferredShape, {values}, inferredDtype);\n}\n\nexport function convertToTensorArray<T extends Tensor>(\n    arg: Array<T|TensorLike>, argName: string, functionName: string,\n    parseAsDtype: DataType|'numeric' = 'numeric'): T[] {\n  if (!Array.isArray(arg)) {\n    throw new Error(\n        `Argument ${argName} passed to ${functionName} must be a ` +\n        '`Tensor[]` or `TensorLike[]`');\n  }\n  const tensors = arg as T[];\n  return tensors.map(\n      (t, i) => convertToTensor(t, `${argName}[${i}]`, functionName),\n      parseAsDtype);\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as util from '../util';\n\n/**\n * Returns true if the axis specifies the inner most dimensions of the\n * array.\n */\nexport function axesAreInnerMostDims(axes: number[], rank: number): boolean {\n  for (let i = 0; i < axes.length; ++i) {\n    if (axes[axes.length - i - 1] !== rank - 1 - i) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function combineLocations(\n    outputLoc: number[], reduceLoc: number[], axes: number[]): number[] {\n  const rank = outputLoc.length + reduceLoc.length;\n  const loc = [];\n  let outIdx = 0;\n  let reduceIdx = 0;\n    for (let dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      loc.push(outputLoc[outIdx++]);\n    } else {\n      loc.push(reduceLoc[reduceIdx++]);\n    }\n  }\n  return loc;\n}\n\nexport function computeOutAndReduceShapes(\n    aShape: number[], axes: number[]): [number[], number[]] {\n  const outShape = [];\n  const rank = aShape.length;\n  for (let dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      outShape.push(aShape[dim]);\n    }\n  }\n  const reduceShape = axes.map(dim => aShape[dim]);\n  return [outShape, reduceShape];\n}\n\nexport function expandShapeToKeepDim(\n    shape: number[], axes: number[]): number[] {\n  const reduceSubShape = axes.map(x => 1);\n  return combineLocations(shape, reduceSubShape, axes);\n}\n\nexport function assertAxesAreInnerMostDims(\n    msg: string, axes: number[], rank: number): void {\n  util.assert(\n      axesAreInnerMostDims(axes, rank),\n      () => `${msg} supports only inner-most axes for now. ` +\n          `Got axes ${axes} and rank-${rank} input.`);\n}\n\n/**\n * Returns the axes permutation to be used with `tf.transpose`, if such\n * permutation is necessary. Otherwise it returns null. This method is used by\n * operations that operate only on inner-most axes.\n */\nexport function getAxesPermutation(axes: number[], rank: number): number[]|\n    null {\n  if (axesAreInnerMostDims(axes, rank)) {\n    return null;\n  }\n  const result: number[] = [];\n  for (let i = 0; i < rank; ++i) {\n    if (axes.indexOf(i) === -1) {\n      result.push(i);\n    }\n  }\n  axes.forEach(axis => result.push(axis));\n  return result;\n}\n\n/** Returns the axes permutation that undoes the original permutation. */\nexport function getUndoAxesPermutation(axes: number[]): number[] {\n  return axes.map((axis, i) => [i, axis])\n      .sort((a, b) => a[1] - b[1])\n      .map(x => x[0]);\n}\n\nexport function getInnerMostAxes(numAxes: number, rank: number): number[] {\n  const res: number[] = [];\n  for (let i = rank - numAxes; i < rank; ++i) {\n    res.push(i);\n  }\n  return res;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as util from '../util';\n\nexport function assertParamsConsistent(shapes: number[][], axis: number) {\n  const rank = shapes[0].length;\n  shapes.forEach((shape, i) => {\n    util.assert(\n        shape.length === rank,\n        () =>\n            `Error in concat${rank}D: rank of tensors[${i}] must be the same ` +\n            `as the rank of the rest (${rank})`);\n  });\n\n  util.assert(\n      axis >= 0 && axis < rank,\n      () => `Error in concat${rank}D: axis must be between 0 and ${rank - 1}.`);\n\n  const firstShape = shapes[0];\n  shapes.forEach((shape, i) => {\n    for (let r = 0; r < rank; r++) {\n      util.assert(\n          (r === axis) || (shape[r] === firstShape[r]),\n          () => `Error in concat${rank}D: Shape of tensors[${i}] (${shape}) ` +\n              `does not match the shape of the rest (${firstShape}) ` +\n              `along the non-concatenated axis ${i}.`);\n    }\n  });\n}\n\nexport function computeOutShape(shapes: number[][], axis: number): number[] {\n  const outputShape = shapes[0].slice();\n  for (let i = 1; i < shapes.length; i++) {\n    outputShape[axis] += shapes[i][axis];\n  }\n  return outputShape;\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\n\n/**\n * Used for wrapping functions that perform math operations on\n * Tensors. The function will be wrapped in a named scope that cleans all\n * memory usage after the function is done.\n */\nexport function op<T extends Function>(f: {[name: string]: T}): T {\n  const keys = Object.keys(f);\n  if (keys.length !== 1) {\n    throw new Error(\n        `Please provide an object with a single key ` +\n        `(operation name) mapping to a function. Got an object with ` +\n        `${keys.length} keys.`);\n  }\n\n  let opName = keys[0];\n  const fn = f[opName];\n\n  // Strip the underscore from the end of the function name.\n  if (opName.endsWith('_')) {\n    opName = opName.substring(0, opName.length - 1);\n  }\n\n  // tslint:disable-next-line:no-any\n  const f2 = (...args: any[]) => {\n    ENGINE.startScope(opName);\n    try {\n      const result = fn(...args);\n      if (result instanceof Promise) {\n        console.error('Cannot return a Promise inside of tidy.');\n      }\n      ENGINE.endScope(result);\n      return result;\n    } catch (ex) {\n      ENGINE.endScope(null);\n      throw ex;\n    }\n  };\n  Object.defineProperty(f2, 'name', {value: opName, configurable: true});\n\n  // tslint:disable-next-line:no-any\n  return f2 as any as T;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as device_util from '../../device_util';\nimport {ENV} from '../../environment';\nimport * as webgl_util from './webgl_util';\n\n/**\n * This file contains WebGL-specific flag registrations.\n */\n\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n  if (webgl_util.isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (webgl_util.isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n  return 0;\n});\n\nENV.registerFlag(\n    'WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the depthwise conv op. */\n// TODO: https://github.com/tensorflow/tfjs/issues/1679\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => false);\n\n/** Whether we will pack binary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack unary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack array ops. */\nENV.registerFlag(\n    'WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack image ops. */\nENV.registerFlag(\n    'WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURE_SIZE',\n    () => webgl_util.getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURES_IN_SHADER',\n    () => webgl_util.getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n  const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  return webgl_util.getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag(\n    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE',\n    () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n        !device_util.isMobile());\n\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag(\n    'WEBGL_RENDER_FLOAT32_CAPABLE',\n    () => webgl_util.isCapableOfRenderingToFloatTexture(\n        ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n      false :\n      ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag(\n    'WEBGL_DOWNLOAD_FLOAT_ENABLED',\n    () => webgl_util.isDownloadFloatTextureEnabled(\n        ENV.getNumber('WEBGL_VERSION')));\n\n/** Whether the fence API is available. */\nENV.registerFlag(\n    'WEBGL_FENCE_API_ENABLED',\n    () => webgl_util.isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {op} from './operation';\n\n/**\n * Converts two real numbers to a complex number.\n *\n * Given a tensor `real` representing the real part of a complex number, and a\n * tensor `imag` representing the imaginary part of a complex number, this\n * operation returns complex numbers elementwise of the form [r0, i0, r1, i1],\n * where r represents the real part and i represents the imag part.\n *\n * The input tensors real and imag must have the same shape.\n *\n * ```js\n * const real = tf.tensor1d([2.25, 3.25]);\n * const imag = tf.tensor1d([4.75, 5.75]);\n * const complex = tf.complex(real, imag);\n *\n * complex.print();\n * ```\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction complex_<T extends Tensor>(real: T|TensorLike, imag: T|TensorLike): T {\n  const $real = convertToTensor(real, 'real', 'complex');\n  const $imag = convertToTensor(imag, 'imag', 'complex');\n  util.assertShapesMatch(\n      $real.shape, $imag.shape,\n      `real and imag shapes, ${$real.shape} and ${$imag.shape}, ` +\n          `must match in call to tf.complex().`);\n\n  return ENGINE.runKernel(\n      backend => backend.complex($real, $imag), {$real, $imag});\n}\n\n/**\n * Returns the real part of a complex (or real) tensor.\n *\n * Given a tensor input, this operation returns a tensor of type float that is\n * the real part of each element in input considered as a complex number.\n *\n * If the input is real, it simply makes a clone.\n *\n * ```js\n * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\n * tf.real(x).print();\n * ```\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction real_<T extends Tensor>(input: T|TensorLike): T {\n  const $input = convertToTensor(input, 'input', 'real');\n\n  return ENGINE.runKernel(backend => backend.real($input), {$input});\n}\n\n/**\n * Returns the imaginary part of a complex (or real) tensor.\n *\n * Given a tensor input, this operation returns a tensor of type float that is\n * the imaginary part of each element in input considered as a complex number.\n * If input is real, a tensor of all zeros is returned.\n *\n * ```js\n * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\n * tf.imag(x).print();\n * ```\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction imag_<T extends Tensor>(input: T|TensorLike): T {\n  const $input = convertToTensor(input, 'input', 'imag');\n\n  return ENGINE.runKernel(backend => backend.imag($input), {$input});\n}\n\nexport const complex = op({complex_});\nexport const real = op({real_});\nexport const imag = op({imag_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {ENV} from '../environment';\nimport {Scalar, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Tensor5D, Tensor6D} from '../tensor';\nimport {convertToTensor, inferShape} from '../tensor_util_env';\nimport {TensorLike, TensorLike1D, TensorLike2D, TensorLike3D, TensorLike4D, TensorLike5D, TensorLike6D, TypedArray} from '../types';\nimport {DataType, Rank, ShapeMap} from '../types';\nimport {assert, assertNonNegativeIntegerDimensions, assertNonNull, flatten, inferDtype, isTypedArray, makeOnesTypedArray, makeZerosTypedArray, sizeFromShape, toTypedArray} from '../util';\nimport {complex, imag, real} from './complex_ops';\nimport {op} from './operation';\n\n/**\n * Creates a `tf.Tensor` with the provided values, shape and dtype.\n *\n * ```js\n * // Pass an array of values to create a vector.\n * tf.tensor([1, 2, 3, 4]).print();\n * ```\n *\n * ```js\n * // Pass a nested array of values to make a matrix or a higher\n * // dimensional tensor.\n * tf.tensor([[1, 2], [3, 4]]).print();\n * ```\n *\n * ```js\n * // Pass a flat array and specify a shape yourself.\n * tf.tensor([1, 2, 3, 4], [2, 2]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`. If the values are strings,\n *     they will be encoded as utf-8 and kept as `Uint8Array[]`.\n * @param shape The shape of the tensor. Optional. If not provided,\n *   it is inferred from `values`.\n * @param dtype The data type.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction tensor<R extends Rank>(\n    values: TensorLike, shape?: ShapeMap[R], dtype?: DataType): Tensor<R> {\n  const inferredShape = inferShape(values, dtype);\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor<R>;\n}\n\n/** This is shared code across all tensor creation methods. */\nfunction makeTensor(\n    values: TensorLike, shape: number[], inferredShape: number[],\n    dtype?: DataType): Tensor {\n  if (dtype == null) {\n    dtype = inferDtype(values);\n  }\n  if (dtype === 'complex64') {\n    throw new Error(\n        `Cannot construct a complex64 tensor directly. ` +\n        `Please use tf.complex(real, imag).`);\n  }\n  if (!isTypedArray(values) && !Array.isArray(values) &&\n      typeof values !== 'number' && typeof values !== 'boolean' &&\n      typeof values !== 'string') {\n    throw new Error(\n        'values passed to tensor(values) must be a number/boolean/string or ' +\n        'an array of numbers/booleans/strings, or a TypedArray');\n  }\n  if (shape != null) {\n    assertNonNegativeIntegerDimensions(shape);\n\n    const providedSize = sizeFromShape(shape);\n    const inferredSize = sizeFromShape(inferredShape);\n    assert(\n        providedSize === inferredSize,\n        () =>\n            `Based on the provided shape, [${shape}], the tensor should have ` +\n            `${providedSize} values but has ${inferredSize}`);\n\n    for (let i = 0; i < inferredShape.length; ++i) {\n      const inferred = inferredShape[i];\n      const flatDimsDontMatch = i === inferredShape.length - 1 ?\n          inferred !== sizeFromShape(shape.slice(i)) :\n          true;\n      assert(\n          inferredShape[i] === shape[i] || !flatDimsDontMatch,\n          () => `Error creating a new Tensor. Inferred shape ` +\n              `(${inferredShape}) does not match the provided ` +\n              `shape (${shape}). `);\n    }\n  }\n\n  if (!isTypedArray(values) && !Array.isArray(values)) {\n    values = [values] as number[];\n  }\n\n  shape = shape || inferredShape;\n  values = dtype !== 'string' ?\n      toTypedArray(values, dtype, ENV.getBool('DEBUG')) :\n      flatten(values as string[], [], true) as string[];\n  return Tensor.make(shape, {values: values as TypedArray}, dtype);\n}\n\n/**\n * Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.scalar` as it makes the code more readable.\n *\n * ```js\n * tf.scalar(3.14).print();\n * ```\n *\n * @param value The value of the scalar.\n * @param dtype The data type.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction scalar(\n    value: number|boolean|string|Uint8Array, dtype?: DataType): Scalar {\n  if (((isTypedArray(value) && dtype !== 'string') || Array.isArray(value)) &&\n      dtype !== 'complex64') {\n    throw new Error(\n        'Error creating a new Scalar: value must be a primitive ' +\n        '(number|boolean|string)');\n  }\n  if (dtype === 'string' && isTypedArray(value) &&\n      !(value instanceof Uint8Array)) {\n    throw new Error(\n        'When making a scalar from encoded string, ' +\n        'the value must be `Uint8Array`.');\n  }\n  const shape: number[] = [];\n  const inferredShape: number[] = [];\n  return makeTensor(value, shape, inferredShape, dtype) as Scalar;\n}\n\n/**\n * Creates rank-1 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor1d` as it makes the code more readable.\n *\n * ```js\n * tf.tensor1d([1, 2, 3]).print();\n * ```\n *\n * @param values The values of the tensor. Can be array of numbers,\n *     or a `TypedArray`.\n * @param dtype The data type.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction tensor1d(values: TensorLike1D, dtype?: DataType): Tensor1D {\n  assertNonNull(values);\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 1) {\n    throw new Error('tensor1d() requires values to be a flat/TypedArray');\n  }\n  const shape: number[] = null;\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor1D;\n}\n\n/**\n * Creates rank-2 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor2d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor2d([[1, 2], [3, 4]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor2d([1, 2, 3, 4], [2, 2]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. If not provided, it is inferred from\n *     `values`.\n * @param dtype The data type.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction tensor2d(\n    values: TensorLike2D, shape?: [number, number],\n    dtype?: DataType): Tensor2D {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 2) {\n    throw new Error('tensor2d() requires shape to have two numbers');\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 2 && inferredShape.length !== 1) {\n    throw new Error(\n        'tensor2d() requires values to be number[][] or flat/TypedArray');\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\n        'tensor2d() requires shape to be provided when `values` ' +\n        'are a flat/TypedArray');\n  }\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor2D;\n}\n\n/**\n * Creates rank-3 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor3d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor3d([[[1], [2]], [[3], [4]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor3d([1, 2, 3, 4], [2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. If not provided,  it is inferred from\n *     `values`.\n * @param dtype The data type.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction tensor3d(\n    values: TensorLike3D, shape?: [number, number, number],\n    dtype?: DataType): Tensor3D {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 3) {\n    throw new Error('tensor3d() requires shape to have three numbers');\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 3 && inferredShape.length !== 1) {\n    throw new Error(\n        'tensor3d() requires values to be number[][][] or flat/TypedArray');\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\n        'tensor3d() requires shape to be provided when `values` ' +\n        'are a flat array');\n  }\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor3D;\n}\n\n/**\n * Creates rank-4 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor4d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor4d([[[[1], [2]], [[3], [4]]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. Optional. If not provided,\n *   it is inferred from `values`.\n * @param dtype The data type.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction tensor4d(\n    values: TensorLike4D, shape?: [number, number, number, number],\n    dtype?: DataType): Tensor4D {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 4) {\n    throw new Error('tensor4d() requires shape to have four numbers');\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 4 && inferredShape.length !== 1) {\n    throw new Error(\n        'tensor4d() requires values to be number[][][][] or flat/TypedArray');\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\n        'tensor4d() requires shape to be provided when `values` ' +\n        'are a flat array');\n  }\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor4D;\n}\n\n/**\n * Creates rank-5 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor5d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor5d([[[[[1], [2]], [[3], [4]]]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. Optional. If not provided,\n *   it is inferred from `values`.\n * @param dtype The data type.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction tensor5d(\n    values: TensorLike5D, shape?: [number, number, number, number, number],\n    dtype?: DataType): Tensor5D {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 5) {\n    throw new Error('tensor5d() requires shape to have five numbers');\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 5 && inferredShape.length !== 1) {\n    throw new Error(\n        'tensor5d() requires values to be ' +\n        'number[][][][][] or flat/TypedArray');\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\n        'tensor5d() requires shape to be provided when `values` ' +\n        'are a flat array');\n  }\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor5D;\n}\n\n/**\n * Creates rank-6 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor6d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor6d([[[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor6d([1, 2, 3, 4, 5, 6, 7, 8], [1, 1, 2, 2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. Optional. If not provided,\n *   it is inferred from `values`.\n * @param dtype The data type.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction tensor6d(\n    values: TensorLike6D,\n    shape?: [number, number, number, number, number, number],\n    dtype?: DataType): Tensor6D {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 6) {\n    throw new Error('tensor6d() requires shape to have six numbers');\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 6 && inferredShape.length !== 1) {\n    throw new Error(\n        'tensor6d() requires values to be number[][][][][][] or ' +\n        'flat/TypedArray');\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\n        'tensor6d() requires shape to be provided when `values` ' +\n        'are a flat array');\n  }\n  shape = shape ||\n      inferredShape as [number, number, number, number, number, number];\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor6D;\n}\n\n/**\n * Creates a `tf.Tensor` with all elements set to 1.\n *\n * ```js\n * tf.ones([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The type of an element in the resulting tensor. Defaults to\n *     'float'.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction ones<R extends Rank>(\n    shape: ShapeMap[R], dtype: DataType = 'float32'): Tensor<R> {\n  if (dtype === 'complex64') {\n    const real = ones(shape, 'float32');\n    const imag = zeros(shape, 'float32');\n    return complex(real, imag);\n  }\n  const values = makeOnesTypedArray(sizeFromShape(shape), dtype);\n  return Tensor.make(shape, {values}, dtype);\n}\n\n/**\n * Creates a `tf.Tensor` with all elements set to 0.\n *\n * ```js\n * tf.zeros([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The type of an element in the resulting tensor. Can\n *     be 'float32', 'int32' or 'bool'. Defaults to 'float'.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction zeros<R extends Rank>(\n    shape: ShapeMap[R], dtype: DataType = 'float32'): Tensor<R> {\n  if (dtype === 'complex64') {\n    const real = zeros(shape, 'float32');\n    const imag = zeros(shape, 'float32');\n    return complex(real, imag);\n  }\n  const values = makeZerosTypedArray(sizeFromShape(shape), dtype);\n  return Tensor.make(shape, {values}, dtype);\n}\n\n/**\n * Creates a `tf.Tensor` filled with a scalar value.\n *\n * ```js\n * tf.fill([2, 2], 4).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param value The scalar value to fill the tensor with.\n * @param dtype The type of an element in the resulting tensor. Defaults to\n * 'float'.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction fill<R extends Rank>(\n    shape: ShapeMap[R], value: number|string, dtype?: DataType): Tensor<R> {\n  return ENGINE.runKernel(backend => backend.fill(shape, value, dtype), {});\n}\n\n/**\n * Creates a `tf.Tensor` with all elements set to 1 with the same shape as the\n * given tensor.\n *\n * ```js\n * const x = tf.tensor([1, 2]);\n * tf.onesLike(x).print();\n * ```\n * @param x A tensor.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction onesLike_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'onesLike');\n  if ($x.dtype === 'complex64') {\n    const r = onesLike(real($x));\n    const i = zerosLike(imag($x));\n    return complex(r, i);\n  }\n  const der = (dy: T, saved: Tensor[]) => ({$x: () => zerosLike(dy)});\n  return ENGINE.runKernel(backend => backend.onesLike($x), {$x}, der) as T;\n}\n\n/**\n * Creates a `tf.Tensor` with all elements set to 0 with the same shape as the\n * given tensor.\n *\n * ```js\n * const x = tf.tensor([1, 2]);\n * tf.zerosLike(x).print();\n * ```\n *\n * @param x The tensor of required shape.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction zerosLike_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'zerosLike');\n  const der = (dy: T, saved: Tensor[]) => ({$x: () => zerosLike(dy)});\n  return ENGINE.runKernel(backend => backend.zerosLike($x), {$x}, der) as T;\n}\n\n/**\n * Return an evenly spaced sequence of numbers over the given interval.\n *\n * ```js\n * tf.linspace(0, 9, 10).print();\n * ```\n * @param start The start value of the sequence.\n * @param stop The end value of the sequence.\n * @param num The number of values to generate.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction linspace(start: number, stop: number, num: number): Tensor1D {\n  if (num <= 0) {\n    throw new Error('The number of values should be positive.');\n  }\n  return ENGINE.runKernel(backend => backend.linspace(start, stop, num), {});\n}\n\n/**\n * Creates a new `tf.Tensor1D` filled with the numbers in the range provided.\n *\n * The tensor is a is half-open interval meaning it includes start, but\n * excludes stop. Decrementing ranges and negative step values are also\n * supported.\n *\n * ```js\n * tf.range(0, 9, 2).print();\n * ```\n *\n * @param start An integer start value\n * @param stop An integer stop value\n * @param step An integer increment (will default to 1 or -1)\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction range(\n    start: number, stop: number, step = 1,\n    dtype: 'float32'|'int32' = 'float32'): Tensor1D {\n  if (step === 0) {\n    throw new Error('Cannot have a step of zero');\n  }\n\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return zeros([0], dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return tensor1d(values, dtype);\n}\n\nexport {\n  fill,\n  linspace,\n  ones,\n  range,\n  scalar,\n  tensor,\n  tensor1d,\n  tensor2d,\n  tensor3d,\n  tensor4d,\n  tensor5d,\n  tensor6d,\n  zeros\n};\n\nexport const onesLike = op({onesLike_});\nexport const zerosLike = op({zerosLike_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from '../tensor';\nimport {convertToTensor, convertToTensorArray} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assert, sizeFromShape} from '../util';\nimport {parseAxisParam} from '../util';\nimport {assertParamsConsistent, computeOutShape} from './concat_util';\nimport {op} from './operation';\nimport {tensor} from './tensor_ops';\n\n/**\n * Concatenates a list of`tf.Tensor1D`s along an axis. See `concat` for details.\n *\n * For example, if:\n * A: shape(3) = |r1, g1, b1|\n * B: shape(2) = |r2, g2|\n * C = tf.concat1d([A, B]) == |r1, g1, b1, r2, g2|\n *\n * @param tensors A list of`tf.Tensor`s to concatenate.\n * @return The concatenated array.\n */\nfunction concat1d_(tensors: Array<Tensor1D|TensorLike>): Tensor1D {\n  return concat(tensors, 0 /* axis */);\n}\n\n/**\n * Concatenates a list of`tf.Tensor2D`s along an axis. See `concat` for details.\n *\n * For example, if:\n * A: shape(2, 3) = | r1, g1, b1 |\n *                  | r2, g2, b2 |\n *\n * B: shape(2, 3) = | r3, g3, b3 |\n *                  | r4, g4, b4 |\n *\n * C = tf.concat2d([A, B], axis)\n *\n * if axis = 0:\n * C: shape(4, 3) = | r1, g1, b1 |\n *                  | r2, g2, b2 |\n *                  | r3, g3, b3 |\n *                  | r4, g4, b4 |\n *\n * if axis = 1:\n * C = shape(2, 6) = | r1, g1, b1, r3, g3, b3 |\n *                   | r2, g2, b2, r4, g4, b4 |\n *\n *\n * @param tensors A list of `tf.Tensor`s to concatenate.\n * @param axis The axis to concatenate along.\n * @return The concatenated array.\n */\nfunction concat2d_(\n    tensors: Array<Tensor2D|TensorLike>, axis: number): Tensor2D {\n  return concat(tensors, axis);\n}\n\n/**\n * Concatenates a list of `tf.Tensor3D`s along an axis.\n * See `concat` for details.\n *\n * For example, if:\n * A: shape(2, 1, 3) = | r1, g1, b1 |\n *                     | r2, g2, b2 |\n *\n * B: shape(2, 1, 3) = | r3, g3, b3 |\n *                     | r4, g4, b4 |\n *\n * C = tf.concat3d([A, B], axis)\n *\n * if axis = 0:\n * C: shape(4, 1, 3) = | r1, g1, b1 |\n *                     | r2, g2, b2 |\n *                     | r3, g3, b3 |\n *                     | r4, g4, b4 |\n *\n * if axis = 1:\n * C: shape(2, 2, 3) = | r1, g1, b1, r3, g3, b3 |\n *                     | r2, g2, b2, r4, g4, b4 |\n *\n * if axis = 2:\n * C = shape(2, 1, 6) = | r1, g1, b1, r3, g3, b3 |\n *                      | r2, g2, b2, r4, g4, b4 |\n *\n * @param tensors A list of`tf.Tensor`s to concatenate.\n * @param axis The axis to concate along.\n * @return The concatenated array.\n */\nfunction concat3d_(\n    tensors: Array<Tensor3D|TensorLike>, axis: number): Tensor3D {\n  return concat(tensors, axis);\n}\n\n/**\n * Concatenates a list of `tf.Tensor4D`s along an axis.\n * See `concat` for details.\n *\n * @param tensors A list of `tf.Tensor`s to concatenate.\n * @param axis The axis to concate along.\n * @return The concatenated array.\n */\nfunction concat4d_(\n    tensors: Array<Tensor4D|TensorLike>, axis: number): Tensor4D {\n  return concat(tensors, axis);\n}\n\n/**\n * Concatenates a list of `tf.Tensor`s along a given axis.\n *\n * The tensors ranks and types must match, and their sizes must match in all\n * dimensions except `axis`.\n *\n * Also available are stricter rank-specific methods that assert that\n * `tensors` are of the given rank:\n *   - `tf.concat1d`\n *   - `tf.concat2d`\n *   - `tf.concat3d`\n *   - `tf.concat4d`\n *\n * Except `tf.concat1d` (which does not have axis param), all methods have\n * same signature as this method.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * a.concat(b).print();  // or a.concat(b)\n * ```\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n * tf.concat([a, b, c]).print();\n * ```\n *\n * ```js\n * const a = tf.tensor2d([[1, 2], [10, 20]]);\n * const b = tf.tensor2d([[3, 4], [30, 40]]);\n * const axis = 1;\n * tf.concat([a, b], axis).print();\n * ```\n * @param tensors A list of tensors to concatenate.\n * @param axis The axis to concate along. Defaults to 0 (the first dim).\n */\n/** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */\nfunction concat_<T extends Tensor>(tensors: Array<T|TensorLike>, axis = 0): T {\n  assert(tensors.length >= 1, () => 'Pass at least one tensor to concat');\n  let $tensors = convertToTensorArray(tensors, 'tensors', 'concat');\n  if ($tensors[0].dtype === 'complex64') {\n    $tensors.forEach(tensor => {\n      if (tensor.dtype !== 'complex64') {\n        throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${tensor.dtype}. `);\n      }\n    });\n  }\n\n  axis = parseAxisParam(axis, $tensors[0].shape)[0];\n  const outShape = computeOutShape($tensors.map(t => t.shape), axis);\n  if (sizeFromShape(outShape) === 0) {\n    return tensor([], outShape) as T;\n  }\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  $tensors = $tensors.filter(t => t.size > 0);\n  if ($tensors.length === 1) {\n    return $tensors[0];\n  }\n\n  const shapes = $tensors.map(t => t.shape);\n  assertParamsConsistent(shapes, axis);\n  const der = (dy: T) => {\n    const sizeSplits = shapes.map(s => s[axis]);\n    const derTensors = split(dy, sizeSplits, axis);\n    return derTensors.map(t => () => t) as {};\n  };\n  const inputs = $tensors as {};\n  return ENGINE.runKernel(\n      backend => backend.concat($tensors, axis) as T, inputs, der);\n}\n\n/**\n * Splits a `tf.Tensor` into sub tensors.\n *\n * If `numOrSizeSplits` is a number, splits `x` along dimension `axis`\n * into `numOrSizeSplits` smaller tensors.\n * Requires that `numOrSizeSplits` evenly divides `x.shape[axis]`.\n *\n * If `numOrSizeSplits` is a number array, splits `x` into\n * `numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the\n * same size as `x` except along dimension `axis` where the size is\n * `numOrSizeSplits[i]`.\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);\n * const [a, b] = tf.split(x, 2, 1);\n * a.print();\n * b.print();\n *\n * const [c, d, e] = tf.split(x, [1, 2, 1], 1);\n * c.print();\n * d.print();\n * e.print();\n * ```\n *\n * @param x The input tensor to split.\n * @param numOrSizeSplits Either an integer indicating the number of\n * splits along the axis or an array of integers containing the sizes of\n * each output tensor along the axis. If a number then it must evenly divide\n * `x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.\n * @param axis The dimension along which to split. Defaults to 0 (the first\n * dim).\n */\n/** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */\nfunction split_<T extends Tensor>(\n    x: T|TensorLike, numOrSizeSplits: number[]|number, axis = 0): T[] {\n  const $x = convertToTensor(x, 'x', 'split');\n\n  axis = parseAxisParam(axis, $x.shape)[0];\n  let splitSizes: number[];\n  if (typeof (numOrSizeSplits) === 'number') {\n    assert(\n        $x.shape[axis] % numOrSizeSplits === 0,\n        () => 'Number of splits must evenly divide the axis.');\n    splitSizes =\n        new Array(numOrSizeSplits).fill($x.shape[axis] / numOrSizeSplits);\n  } else {\n    assert(\n        $x.shape[axis] === numOrSizeSplits.reduce((a, b) => a + b),\n        () => 'The sum of sizes must match the size of the axis dimension.');\n    splitSizes = numOrSizeSplits;\n  }\n  const der = (dy: T[]) => ({$x: () => concat(dy, axis)});\n  return ENGINE.runKernel(\n      backend => backend.split($x, splitSizes, axis), {$x}, der);\n}\n\nexport const concat = op({concat_});\nexport const concat1d = op({concat1d_});\nexport const concat2d = op({concat2d_});\nexport const concat3d = op({concat3d_});\nexport const concat4d = op({concat4d_});\nexport const split = op({split_});\n","// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n(function(global, module, define) {\n\nfunction Alea(seed) {\n  var me = this, mash = Mash();\n\n  me.next = function() {\n    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n    me.s0 = me.s1;\n    me.s1 = me.s2;\n    return me.s2 = t - (me.c = t | 0);\n  };\n\n  // Apply the seeding algorithm from Baagoe.\n  me.c = 1;\n  me.s0 = mash(' ');\n  me.s1 = mash(' ');\n  me.s2 = mash(' ');\n  me.s0 -= mash(seed);\n  if (me.s0 < 0) { me.s0 += 1; }\n  me.s1 -= mash(seed);\n  if (me.s1 < 0) { me.s1 += 1; }\n  me.s2 -= mash(seed);\n  if (me.s2 < 0) { me.s2 += 1; }\n  mash = null;\n}\n\nfunction copy(f, t) {\n  t.c = f.c;\n  t.s0 = f.s0;\n  t.s1 = f.s1;\n  t.s2 = f.s2;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new Alea(seed),\n      state = opts && opts.state,\n      prng = xg.next;\n  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }\n  prng.double = function() {\n    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n  };\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nfunction Mash() {\n  var n = 0xefc8249d;\n\n  var mash = function(data) {\n    data = data.toString();\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      var h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n\n  return mash;\n}\n\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.alea = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var t = (me.x ^ (me.x >>> 2));\n    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;\n    return (me.d = (me.d + 362437 | 0)) +\n       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;\n  };\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n  me.v = 0;\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    if (k == strseed.length) {\n      me.d = me.x << 10 ^ me.x >>> 4;\n    }\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  t.v = f.v;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorwow = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    // Update xor generator.\n    var X = me.x, i = me.i, t, v, w;\n    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);\n    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);\n    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);\n    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);\n    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\n    X[i] = v;\n    me.i = (i + 1) & 7;\n    return v;\n  };\n\n  function init(me, seed) {\n    var j, w, X = [];\n\n    if (seed === (seed | 0)) {\n      // Seed state array using a 32-bit integer.\n      w = X[0] = seed;\n    } else {\n      // Seed state using a string.\n      seed = '' + seed;\n      for (j = 0; j < seed.length; ++j) {\n        X[j & 7] = (X[j & 7] << 15) ^\n            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);\n      }\n    }\n    // Enforce an array length of 8, not all zeroes.\n    while (X.length < 8) X.push(0);\n    for (j = 0; j < 8 && X[j] === 0; ++j);\n    if (j == 8) w = X[7] = -1; else w = X[j];\n\n    me.x = X;\n    me.i = 0;\n\n    // Discard an initial 256 values.\n    for (j = 256; j > 0; --j) {\n      me.next();\n    }\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.x = f.x.slice();\n  t.i = f.i;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.x) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorshift7 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n","// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    var w = me.w,\n        X = me.X, i = me.i, t, v;\n    // Update Weyl generator.\n    me.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    me.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  };\n\n  function init(me, seed) {\n    var t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    me.w = w;\n    me.X = X;\n    me.i = i;\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.i = f.i;\n  t.w = f.w;\n  t.X = f.X.slice();\n  return t;\n};\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.X) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor4096 = impl;\n}\n\n})(\n  this,                                     // window object or global\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n","// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var b = me.b, c = me.c, d = me.d, a = me.a;\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    me.c = c = (c - d) | 0;\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\n    return me.a = (a - b) | 0;\n  };\n\n  /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */\n\n  me.a = 0;\n  me.b = 0;\n  me.c = 2654435769 | 0;\n  me.d = 1367130551;\n\n  if (seed === Math.floor(seed)) {\n    // Integer seed.\n    me.a = (seed / 0x100000000) | 0;\n    me.b = seed | 0;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 20; k++) {\n    me.b ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.a = f.a;\n  t.b = f.b;\n  t.c = f.c;\n  t.d = f.d;\n  return t;\n};\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.tychei = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","/*\nCopyright 2014 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n(function (pool, math) {\n//\n// The following constants are related to IEEE 754 limits.\n//\nvar global = this,\n    width = 256,        // each RC4 output is 0 <= x < 256\n    chunks = 6,         // at least six RC4 outputs for each double\n    digits = 52,        // there are 52 significant digits in a double\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\n    startdenom = math.pow(width, chunks),\n    significance = math.pow(2, digits),\n    overflow = significance * 2,\n    mask = width - 1,\n    nodecrypto;         // node.js crypto module, initialized at the bottom.\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed, options, callback) {\n  var key = [];\n  options = (options == true) ? { entropy: true } : (options || {});\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(\n    options.entropy ? [seed, tostring(pool)] :\n    (seed == null) ? autoseed() : seed, 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n  var prng = function() {\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\n        x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  prng.int32 = function() { return arc4.g(4) | 0; }\n  prng.quick = function() { return arc4.g(4) / 0x100000000; }\n  prng.double = prng;\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Calling convention: what to return as a function of prng, seed, is_math.\n  return (options.pass || callback ||\n      function(prng, seed, is_math_call, state) {\n        if (state) {\n          // Load the arc4 state from the given state if it has an S array.\n          if (state.S) { copy(state, arc4); }\n          // Only provide the .state method if requested via options.state.\n          prng.state = function() { return copy(arc4, {}); }\n        }\n\n        // If called as a method of Math (Math.seedrandom()), mutate\n        // Math.random because that is how seedrandom.js has worked since v1.0.\n        if (is_math_call) { math[rngname] = prng; return seed; }\n\n        // Otherwise, it is a newer calling convention, so return the\n        // prng directly.\n        else return prng;\n      })(\n  prng,\n  shortseed,\n  'global' in options ? options.global : (this == math),\n  options.state);\n}\nmath['seed' + rngname] = seedrandom;\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key) {\n  var t, keylen = key.length,\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function(count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t, r = 0,\n        i = me.i, j = me.j, s = me.S;\n    while (count--) {\n      t = s[i = mask & (i + 1)];\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\n    }\n    me.i = i; me.j = j;\n    return r;\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n  })(width);\n}\n\n//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f, t) {\n  t.i = f.i;\n  t.j = f.j;\n  t.S = f.S.slice();\n  return t;\n};\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [], typ = (typeof obj), prop;\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n    }\n  }\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '', smear, j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] =\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed() {\n  try {\n    var out;\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\n      // The use of 'out' to remember randomBytes makes tight minified code.\n      out = out(width);\n    } else {\n      out = new Uint8Array(width);\n      (global.crypto || global.msCrypto).getRandomValues(out);\n    }\n    return tostring(out);\n  } catch (e) {\n    var browser = global.navigator,\n        plugins = browser && browser.plugins;\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n//\n// Nodejs and AMD support: export the implementation as a module using\n// either convention.\n//\nif ((typeof module) == 'object' && module.exports) {\n  module.exports = seedrandom;\n  // When in node.js, try using crypto package for autoseeding.\n  try {\n    nodecrypto = require('crypto');\n  } catch (ex) {}\n} else if ((typeof define) == 'function' && define.amd) {\n  define(function() { return seedrandom; });\n}\n\n// End anonymous scope, and pass initial values.\n})(\n  [],     // pool: entropy pool starts empty\n  Math    // math: package containing random, pow, and seedrandom\n);\n","// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = require('./lib/alea');\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = require('./lib/xor128');\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = require('./lib/xorwow');\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = require('./lib/xorshift7');\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = require('./lib/xor4096');\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = require('./lib/tychei');\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = require('./seedrandom');\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as seedrandom from 'seedrandom';\n\nexport interface RandomBase {\n  nextValue(): number;\n}\n\nexport interface RandomGamma {\n  nextValue(): number;\n}\n\nexport interface RandNormalDataTypes {\n  float32: Float32Array;\n  int32: Int32Array;\n}\n\nexport interface RandGammaDataTypes {\n  float32: Float32Array;\n  int32: Int32Array;\n}\n\n// https://en.wikipedia.org/wiki/Marsaglia_polar_method\nexport class MPRandGauss implements RandomBase {\n  private mean: number;\n  private stdDev: number;\n  private nextVal: number;\n  private dtype?: keyof RandNormalDataTypes;\n  private truncated?: boolean;\n  private upper?: number;\n  private lower?: number;\n  private random: seedrandom.prng;\n\n  constructor(\n      mean: number, stdDeviation: number, dtype?: keyof RandNormalDataTypes,\n      truncated?: boolean, seed?: number) {\n    this.mean = mean;\n    this.stdDev = stdDeviation;\n    this.dtype = dtype;\n    this.nextVal = NaN;\n    this.truncated = truncated;\n    if (this.truncated) {\n      this.upper = this.mean + this.stdDev * 2;\n      this.lower = this.mean - this.stdDev * 2;\n    }\n    const seedValue = seed ? seed : Math.random();\n    this.random = seedrandom.alea(seedValue.toString());\n  }\n\n  /** Returns next sample from a Gaussian distribution. */\n  public nextValue(): number {\n    if (!isNaN(this.nextVal)) {\n      const value = this.nextVal;\n      this.nextVal = NaN;\n      return value;\n    }\n\n    let resultX: number, resultY: number;\n    let isValid = false;\n    while (!isValid) {\n      let v1: number, v2: number, s: number;\n      do {\n        v1 = 2 * this.random() - 1;\n        v2 = 2 * this.random() - 1;\n        s = v1 * v1 + v2 * v2;\n      } while (s >= 1 || s === 0);\n\n      const mul = Math.sqrt(-2.0 * Math.log(s) / s);\n      resultX = this.mean + this.stdDev * v1 * mul;\n      resultY = this.mean + this.stdDev * v2 * mul;\n\n      if (!this.truncated || this.isValidTruncated(resultX)) {\n        isValid = true;\n      }\n    }\n\n    if (!this.truncated || this.isValidTruncated(resultY)) {\n      this.nextVal = this.convertValue(resultY);\n    }\n    return this.convertValue(resultX);\n  }\n\n  /** Handles proper rounding for non-floating-point numbers. */\n  private convertValue(value: number): number {\n    if (this.dtype == null || this.dtype === 'float32') {\n      return value;\n    }\n    return Math.round(value);\n  }\n\n  /** Returns true if less than 2-standard-deviations from the mean. */\n  private isValidTruncated(value: number): boolean {\n    return value <= this.upper && value >= this.lower;\n  }\n}\n\n// Marsaglia, George, and Wai Wan Tsang. 2000. \"A Simple Method for Generating\n// Gamma Variables.\"\nexport class RandGamma implements RandomGamma {\n  private alpha: number;\n  private beta: number;\n  private d: number;\n  private c: number;\n  private dtype?: keyof RandGammaDataTypes;\n  private randu: seedrandom.prng;\n  private randn: MPRandGauss;\n\n  constructor(\n      alpha: number, beta: number, dtype: keyof RandGammaDataTypes,\n      seed?: number) {\n    this.alpha = alpha;\n    this.beta = 1 / beta;  // convert rate to scale parameter\n    this.dtype = dtype;\n\n    const seedValue = seed ? seed : Math.random();\n    this.randu = seedrandom.alea(seedValue.toString());\n    this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());\n\n    if (alpha < 1) {\n      this.d = alpha + (2 / 3);\n    } else {\n      this.d = alpha - (1 / 3);\n    }\n    this.c = 1 / Math.sqrt(9 * this.d);\n  }\n\n  /** Returns next sample from a gamma distribution. */\n  public nextValue(): number {\n    let x2: number, v0: number, v1: number, x: number, u: number, v: number;\n    while (true) {\n      do {\n        x = this.randn.nextValue();\n        v = 1 + (this.c * x);\n      } while (v <= 0);\n      v *= v * v;\n      x2 = x * x;\n      v0 = 1 - (0.331 * x2 * x2);\n      v1 = (0.5 * x2) + (this.d * (1 - v + Math.log(v)));\n      u = this.randu();\n      if (u < v0 || Math.log(u) < v1) {\n        break;\n      }\n    }\n    v = (1 / this.beta) * this.d * v;\n    if (this.alpha < 1) {\n      v *= Math.pow(this.randu(), 1 / this.alpha);\n    }\n    return this.convertValue(v);\n  }\n  /** Handles proper rounding for non-floating-point numbers. */\n  private convertValue(value: number): number {\n    if (this.dtype === 'float32') {\n      return value;\n    }\n    return Math.round(value);\n  }\n}\n\nexport class UniformRandom implements RandomBase {\n  private min: number;\n  private range: number;\n  private random: seedrandom.prng;\n  private dtype?: keyof RandNormalDataTypes;\n\n  constructor(\n      min = 0, max = 1, dtype?: keyof RandNormalDataTypes,\n      seed?: string|number) {\n    this.min = min;\n    this.range = max - min;\n    this.dtype = dtype;\n    if (seed == null) {\n      seed = Math.random();\n    }\n    if (typeof seed === 'number') {\n      seed = seed.toString();\n    }\n\n    if (!this.canReturnFloat() && this.range <= 1) {\n      throw new Error(\n          `The difference between ${min} - ${max} <= 1 and dtype is not float`);\n    }\n    this.random = seedrandom.alea(seed);\n  }\n\n  /** Handles proper rounding for non floating point numbers. */\n  private canReturnFloat = () =>\n      (this.dtype == null || this.dtype === 'float32');\n\n  private convertValue(value: number): number {\n    if (this.canReturnFloat()) {\n      return value;\n    }\n    return Math.round(value);\n  }\n\n  nextValue() {\n    return this.convertValue(this.min + this.range * this.random());\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, TensorBuffer} from '../tensor';\nimport {convertToTensor, convertToTensorArray} from '../tensor_util_env';\nimport {DataType, DataTypeMap, Rank, ShapeMap, TensorLike, TensorLike4D} from '../types';\nimport * as util from '../util';\nimport {getAxesPermutation, getInnerMostAxes} from './axis_util';\nimport {concat} from './concat_split';\nimport {op} from './operation';\nimport {MPRandGauss, RandGamma, UniformRandom} from './rand';\nimport {zeros, zerosLike} from './tensor_ops';\n\n/**\n * Creates a new tensor with the same values and shape as the specified\n * tensor.\n *\n * ```js\n * const x = tf.tensor([1, 2]);\n *\n * x.clone().print();\n * ```\n *\n * @param x The tensor to clone.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction clone_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'clone', null);\n  const der = (dy: T) => {\n    return {$x: () => dy.toFloat()};\n  };\n\n  return ENGINE.runKernel(\n      backend => Tensor.make($x.shape, {dataId: $x.dataId}, $x.dtype), {$x},\n      der);\n}\n\n/**\n * Create an identity matrix.\n *\n * @param numRows Number of rows.\n * @param numColumns Number of columns. Defaults to `numRows`.\n * @param batchShape If provided, will add the batch shape to the beginning\n *   of the shape of the returned `tf.Tensor` by repeating the identity\n *   matrix.\n * @param dtype Data type.\n * @returns Identity matrix of the specified size and data type, possibly\n *   with batch repetition if `batchShape` is specified.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction eye_(\n    numRows: number, numColumns?: number,\n    batchShape?:\n        [\n          number\n        ]|[number,\n           number]|[number, number, number]|[number, number, number, number],\n    dtype: DataType = 'float32'): Tensor2D {\n  if (numColumns == null) {\n    numColumns = numRows;\n  }\n  const buff = buffer([numRows, numColumns], dtype);\n  const n = numRows <= numColumns ? numRows : numColumns;\n  for (let i = 0; i < n; ++i) {\n    buff.set(1, i, i);\n  }\n  const out = buff.toTensor().as2D(numRows, numColumns);\n  if (batchShape == null) {\n    return out;\n  } else {\n    if (batchShape.length === 1) {\n      return tile(expandDims(out, 0), [batchShape[0], 1, 1]);\n    } else if (batchShape.length === 2) {\n      return tile(\n          expandDims(expandDims(out, 0), 0),\n          [batchShape[0], batchShape[1], 1, 1]);\n    } else if (batchShape.length === 3) {\n      return tile(\n          expandDims(expandDims(expandDims(out, 0), 0), 0),\n          [batchShape[0], batchShape[1], batchShape[2], 1, 1]);\n    } else {\n      throw new Error(\n          `eye() currently supports only 1D and 2D ` +\n          // tslint:disable-next-line:no-any\n          `batchShapes, but received ${(batchShape as any).length}D.`);\n    }\n  }\n}\n\n/**\n * Creates a `tf.Tensor` with values sampled from a normal distribution.\n *\n * ```js\n * tf.randomNormal([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param mean The mean of the normal distribution.\n * @param stdDev The standard deviation of the normal distribution.\n * @param dtype The data type of the output.\n * @param seed The seed for the random number generator.\n */\n/** @doc {heading: 'Tensors', subheading: 'Random'} */\nfunction randomNormal_<R extends Rank>(\n    shape: ShapeMap[R], mean = 0, stdDev = 1, dtype?: 'float32'|'int32',\n    seed?: number): Tensor<R> {\n  if (dtype != null && (dtype as DataType) === 'bool') {\n    throw new Error(`Unsupported data type ${dtype}`);\n  }\n  const randGauss =\n      new MPRandGauss(mean, stdDev, dtype, false /* truncated */, seed);\n  const res = buffer(shape, dtype);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = randGauss.nextValue();\n  }\n  return res.toTensor();\n}\n\n/**\n * Creates a `tf.Tensor` with values sampled from a truncated normal\n * distribution.\n *\n * ```js\n * tf.truncatedNormal([2, 2]).print();\n * ```\n *\n * The generated values follow a normal distribution with specified mean and\n * standard deviation, except that values whose magnitude is more than 2\n * standard deviations from the mean are dropped and re-picked.\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param mean The mean of the normal distribution.\n * @param stdDev The standard deviation of the normal distribution.\n * @param dtype The data type of the output tensor.\n * @param seed The seed for the random number generator.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction truncatedNormal_<R extends Rank>(\n    shape: ShapeMap[R], mean = 0, stdDev = 1, dtype?: 'float32'|'int32',\n    seed?: number): Tensor<R> {\n  if (dtype != null && (dtype as DataType) === 'bool') {\n    throw new Error(`Unsupported data type ${dtype}`);\n  }\n  const randGauss =\n      new MPRandGauss(mean, stdDev, dtype, true /* truncated */, seed);\n  const res = buffer(shape, dtype);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = randGauss.nextValue();\n  }\n  return res.toTensor();\n}\n\n/**\n * Creates a `tf.Tensor` with values sampled from a gamma distribution.\n *\n * ```js\n * tf.randomGamma([2, 2], 1).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param alpha The shape parameter of the gamma distribution.\n * @param beta The inverse scale parameter of the gamma distribution. Defaults\n *     to 1.\n * @param dtype The data type of the output. Defaults to float32.\n * @param seed The seed for the random number generator.\n */\n/** @doc {heading: 'Tensors', subheading: 'Random'} */\nfunction randomGamma_<R extends Rank>(\n    shape: ShapeMap[R], alpha: number, beta = 1,\n    dtype: 'float32'|'int32' = 'float32', seed?: number): Tensor<R> {\n  if (beta == null) {\n    beta = 1;\n  }\n  if (dtype == null) {\n    dtype = 'float32';\n  }\n  if (dtype !== 'float32' && dtype !== 'int32') {\n    throw new Error(`Unsupported data type ${dtype}`);\n  }\n  const rgamma = new RandGamma(alpha, beta, dtype, seed);\n  const res = buffer(shape, dtype);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = rgamma.nextValue();\n  }\n  return res.toTensor();\n}\n\n/**\n * Creates a `tf.Tensor` with values sampled from a uniform distribution.\n *\n * The generated values follow a uniform distribution in the range [minval,\n * maxval). The lower bound minval is included in the range, while the upper\n * bound maxval is excluded.\n *\n * ```js\n * tf.randomUniform([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param minval The lower bound on the range of random values to generate.\n *   Defaults to 0.\n * @param maxval The upper bound on the range of random values to generate.\n *   Defaults to 1.\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n */\n/** @doc {heading: 'Tensors', subheading: 'Random'} */\nfunction randomUniform_<R extends Rank>(\n    shape: ShapeMap[R], minval = 0, maxval = 1, dtype: DataType = 'float32',\n    seed?: number|string): Tensor<R> {\n  const res = buffer(shape, dtype);\n  const random = new UniformRandom(minval, maxval, null, seed);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = random.nextValue();\n  }\n  return res.toTensor();\n}\n\n/**\n * Creates a `tf.Tensor` with values sampled from a random number generator\n * function defined by the user.\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param randFunction A random number generator function which is called\n * for each element in the output tensor.\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n */\nfunction rand_<R extends Rank>(\n    shape: ShapeMap[R], randFunction: () => number,\n    dtype?: DataType): Tensor<R> {\n  const size = util.sizeFromShape(shape);\n\n  let values = null;\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n\n  for (let i = 0; i < size; i++) {\n    values[i] = randFunction();\n  }\n  return Tensor.make(shape, {values}, dtype);\n}\n\n/**\n * Creates a `tf.Tensor` with values drawn from a multinomial distribution.\n *\n * ```js\n * const probs = tf.tensor([.75, .25]);\n * tf.multinomial(probs, 3).print();\n * ```\n *\n * @param logits 1D array with unnormalized log-probabilities, or\n *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`\n *     parameter.\n * @param numSamples Number of samples to draw for each row slice.\n * @param seed The seed number.\n * @param normalized Whether the provided `logits` are normalized true\n *     probabilities (sum to 1). Defaults to false.\n * @return 1D array of shape `[numSamples]`, or 2D array of shape\n *     `[batchSize, numSamples]`, depending on the rank of the input.\n */\n/** @doc {heading: 'Tensors', subheading: 'Random'} */\nfunction multinomial_(\n    logits: Tensor1D|Tensor2D|TensorLike, numSamples: number, seed?: number,\n    normalized = false): Tensor1D|Tensor2D {\n  const $logits = convertToTensor(logits, 'logits', 'multinomial');\n  const numOutcomes = $logits.size;\n  const origRank = $logits.rank;\n  if (numOutcomes < 2) {\n    throw new Error(\n        `Error in multinomial: you need at least 2 outcomes, but got ` +\n        `${numOutcomes}.`);\n  }\n  if (origRank > 2) {\n    throw new Error(`Rank of probabilities must be 1 or 2, but is ${origRank}`);\n  }\n  seed = seed || Math.random();\n  const logits2D = origRank === 1 ? $logits.as2D(1, -1) : $logits as Tensor2D;\n  const res = ENGINE.runKernel(\n      backend => backend.multinomial(logits2D, normalized, numSamples, seed),\n      {logits2D});\n\n  return origRank === 1 ? res.as1D() : res;\n}\n\n/**\n * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take\n * value `onValue` (defaults to 1), while all other locations take value\n * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank\n * `R+1` with the last axis of size `depth`.\n *\n * ```js\n * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();\n * ```\n *\n * @param indices `tf.Tensor` of indices with dtype `int32`.\n * @param depth The depth of the one hot dimension.\n * @param onValue A number used to fill in the output when the index matches\n * the location.\n * @param offValue A number used to fill in the output when the index does\n *     not match the location.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction oneHot_(\n    indices: Tensor|TensorLike, depth: number, onValue = 1,\n    offValue = 0): Tensor {\n  if (depth < 2) {\n    throw new Error(`Error in oneHot: depth must be >=2, but it is ${depth}`);\n  }\n  let $indices = convertToTensor(indices, 'indices', 'oneHot', 'int32');\n  const outShape = [...$indices.shape, depth];\n  $indices = $indices.flatten();\n\n  const grad = (dy: Tensor2D) => {\n    return {$indices: () => zeros($indices.shape, 'float32')};\n  };\n  const result = ENGINE.runKernel(\n      backend => backend.oneHot($indices as Tensor1D, depth, onValue, offValue),\n      {$indices}, grad);\n  return result.reshape(outShape);\n}\n\n/**\n * Reshapes a `tf.Tensor` to a given shape.\n *\n * Given an input tensor, returns a new tensor with the same values as the\n * input tensor with shape `shape`.\n *\n * If one component of shape is the special value -1, the size of that\n * dimension is computed so that the total size remains constant. In\n * particular, a shape of [-1] flattens into 1-D. At most one component of\n * shape can be -1.\n *\n * If shape is 1-D or higher, then the operation returns a tensor with shape\n * shape filled with the values of tensor. In this case, the number of\n * elements implied by shape must be the same as the number of elements in\n * tensor.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * x.reshape([2, 2]).print();\n * ```\n *\n * @param x The input tensor to be reshaped.\n * @param shape An array of integers defining the output tensor shape.\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction reshape_<R2 extends Rank>(\n    x: Tensor|TensorLike, shape: ShapeMap[R2]): Tensor<R2> {\n  const $x = convertToTensor(x, 'x', 'reshape', null);\n  shape = util.inferFromImplicitShape(shape, $x.size) as ShapeMap[R2];\n  util.assert(\n      $x.size === util.sizeFromShape(shape),\n      () => 'new shape and old shape must have the same number of elements.');\n\n  const grad = (dy: Tensor<R2>) => {\n    return {$x: () => dy.reshape($x.shape)};\n  };\n  return ENGINE.runKernel(backend => backend.reshape($x, shape), {$x}, grad);\n}\n\n/**\n * Removes dimensions of size 1 from the shape of a `tf.Tensor`.\n *\n * ```js\n * const x = tf.tensor([1, 2, 3, 4], [1, 1, 4]);\n * x.squeeze().print();\n * ```\n *\n * @param x The input tensor to be squeezed.\n * @param axis An optional list of numbers. If specified, only\n *     squeezes the dimensions listed. The dimension index starts at 0. It\n * is an error to squeeze a dimension that is not 1.\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction squeeze_<T extends Tensor>(x: Tensor|TensorLike, axis?: number[]): T {\n  const $x = convertToTensor(x, 'x', 'squeeze');\n  return reshape($x, util.squeezeShape($x.shape, axis).newShape) as T;\n}\n\n/**\n * Casts a `tf.Tensor` to a new dtype.\n *\n * ```js\n * const x = tf.tensor1d([1.5, 2.5, 3]);\n * tf.cast(x, 'int32').print();\n * ```\n * @param x The input tensor to be casted.\n * @param dtype The dtype to cast the input tensor to.\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction cast_<T extends Tensor>(x: T|TensorLike, dtype: DataType): T {\n  const $x = convertToTensor(x, 'x', 'cast');\n\n  // Sanity checks.\n  if (!util.isValidDtype(dtype)) {\n    throw new Error(`Failed to cast to unknown dtype ${dtype}`);\n  }\n  if (dtype === 'string' && $x.dtype !== 'string' ||\n      dtype !== 'string' && $x.dtype === 'string') {\n    throw new Error('Only strings can be casted to strings');\n  }\n\n  const grad = (dy: T) => {\n    return {$x: () => dy.clone()};\n  };\n  return ENGINE.runKernel(backend => backend.cast($x, dtype), {$x}, grad);\n}\n\n/**\n * Construct a tensor by repeating it the number of times given by reps.\n *\n * This operation creates a new tensor by replicating `input` `reps`\n * times. The output tensor's i'th dimension has `input.shape[i] *\n * reps[i]` elements, and the values of `input` are replicated\n * `reps[i]` times along the i'th dimension. For example, tiling\n * `[a, b, c, d]` by `[2]` produces `[a, b, c, d, a, b, c, d]`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n *\n * a.tile([2]).print();    // or a.tile([2])\n * ```\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * a.tile([1, 2]).print();  // or a.tile([1, 2])\n * ```\n * @param x The tensor to tile.\n * @param reps Determines the number of replications per dimension.\n */\n/** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */\nfunction tile_<T extends Tensor>(x: T|TensorLike, reps: number[]): T {\n  const parseAs: DataType = null;\n  const $x = convertToTensor(x, 'x', 'tile', parseAs);\n\n  util.assert(\n      $x.rank === reps.length,\n      () => `Error in transpose: rank of input ${$x.rank} ` +\n          `must match length of reps ${reps}.`);\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    const derX = () => {\n      let xGrad = zerosLike($x);\n      // TODO(cais): Maybe reduce memory footprint by avoiding repeated\n      // slicing.\n      if ($x.rank === 1) {\n        for (let i = 0; i < reps[0]; ++i) {\n          xGrad = xGrad.add(dy.slice([i * $x.shape[0]], [$x.shape[0]]));\n        }\n      } else if ($x.rank === 2) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            xGrad = xGrad.add(dy.slice(\n                [i * $x.shape[0], j * $x.shape[1]],\n                [$x.shape[0], $x.shape[1]]));\n          }\n        }\n      } else if ($x.rank === 3) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            for (let k = 0; k < reps[2]; ++k) {\n              xGrad = xGrad.add(dy.slice(\n                  [i * $x.shape[0], j * $x.shape[1], k * $x.shape[2]],\n                  [$x.shape[0], $x.shape[1], $x.shape[2]]));\n            }\n          }\n        }\n      } else if ($x.rank === 4) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            for (let k = 0; k < reps[2]; ++k) {\n              for (let l = 0; l < reps[3]; ++l) {\n                xGrad = xGrad.add(dy.slice(\n                    [\n                      i * $x.shape[0], j * $x.shape[1], k * $x.shape[2],\n                      l * $x.shape[3]\n                    ],\n                    [$x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]));\n              }\n            }\n          }\n        }\n      } else {\n        throw new Error(\n            `Gradient for tile operation is not implemented for rank-` +\n            `${$x.rank} tensors yet.`);\n      }\n      return xGrad as T;\n    };\n    return {$x: derX};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.tile($x, reps);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Pads a `tf.Tensor1D` with a given value and paddings. See `pad` for details.\n */\nfunction pad1d_(\n    x: Tensor1D|TensorLike, paddings: [number, number],\n    constantValue = 0): Tensor1D {\n  util.assert(\n      paddings.length === 2,\n      () => 'Invalid number of paddings. Must be length of 2.');\n  return pad(x, [paddings], constantValue);\n}\n\n/**\n * Pads a `tf.Tensor2D` with a given value and paddings. See `pad` for details.\n */\nfunction pad2d_(\n    x: Tensor2D|TensorLike, paddings: [[number, number], [number, number]],\n    constantValue = 0): Tensor2D {\n  util.assert(\n      paddings.length === 2 && paddings[0].length === 2 &&\n          paddings[1].length === 2,\n      () => 'Invalid number of paddings. Must be length of 2 each.');\n  return pad(x, paddings, constantValue);\n}\n\n/**\n * Pads a `tf.Tensor3D` with a given value and paddings. See `pad` for details.\n */\nfunction pad3d_(\n    x: Tensor3D|TensorLike,\n    paddings: [[number, number], [number, number], [number, number]],\n    constantValue = 0): Tensor3D {\n  util.assert(\n      paddings.length === 3 && paddings[0].length === 2 &&\n          paddings[1].length === 2 && paddings[2].length === 2,\n      () => 'Invalid number of paddings. Must be length of 2 each.');\n  return pad(x, paddings, constantValue);\n}\n\n/**\n * Pads a `tf.Tensor4D` with a given value and paddings. See `pad` for details.\n */\nfunction pad4d_(\n    x: Tensor4D|TensorLike,\n    paddings:\n        [\n          [number, number], [number, number], [number, number], [number, number]\n        ],\n    constantValue = 0): Tensor4D {\n  util.assert(\n      paddings.length === 4 && paddings[0].length === 2 &&\n          paddings[1].length === 2 && paddings[2].length === 2 &&\n          paddings[3].length === 2,\n      () => 'Invalid number of paddings. Must be length of 2 each.');\n  return pad(x, paddings, constantValue);\n}\n\n/**\n * Pads a `tf.Tensor` with a given value and paddings.\n *\n * This operation currently only implements the `CONSTANT` mode.\n *\n * Also available are stricter rank-specific methods with the same signature\n * as this method that assert that `paddings` is of given length.\n *   - `tf.pad1d`\n *   - `tf.pad2d`\n *   - `tf.pad3d`\n *   - `tf.pad4d`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * x.pad([[1, 2]]).print();\n * ```\n * @param x The tensor to pad.\n * @param paddings An array of length `R` (the rank of the tensor), where\n * each element is a length-2 tuple of ints `[padBefore, padAfter]`,\n * specifying how much to pad along each dimension of the tensor.\n * @param constantValue The pad value to use. Defaults to 0.\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction pad_<T extends Tensor>(\n    x: T|TensorLike, paddings: Array<[number, number]>, constantValue = 0): T {\n  const $x = convertToTensor(x, 'x', 'pad');\n\n  if ($x.rank === 0) {\n    throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');\n  }\n  // Pad introduces values around the original tensor, so the gradient\n  // slices the original shape out of the gradient.\n  const begin = paddings.map(p => p[0]);\n  const grad = (dy: T) => {\n    return {$x: () => dy.slice(begin, $x.shape)};\n  };\n  return ENGINE.runKernel(\n      backend => backend.pad($x, paddings, constantValue), {$x}, grad);\n}\n\n/**\n * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n * tf.stack([a, b, c]).print();\n * ```\n *\n * @param tensors A list of tensor objects with the same shape and dtype.\n * @param axis The axis to stack along. Defaults to 0 (the first dim).\n */\n/** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */\nfunction stack_<T extends Tensor>(\n    tensors: Array<T|TensorLike>, axis = 0): Tensor {\n  const $tensors = convertToTensorArray(tensors, 'tensors', 'stack');\n\n  util.assert(\n      $tensors.length >= 1, () => 'Pass at least one tensor to tf.stack');\n  if ($tensors.length === 1) {\n    return $tensors[0].expandDims(axis);\n  }\n  const rank = $tensors[0].rank;\n  const shape = $tensors[0].shape;\n  const dtype = $tensors[0].dtype;\n\n  util.assert(axis <= rank, () => 'Axis must be <= rank of the tensor');\n\n  $tensors.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n  });\n\n  $tensors.forEach(t => {\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n  const expandedTensors = $tensors.map(t => t.expandDims(axis));\n  return concat(expandedTensors, axis);\n}\n\n/**\n * This operation reshapes the \"batch\" dimension 0 into `M + 1` dimensions of\n * shape `blockShape + [batch]`, interleaves these blocks back into the grid\n * defined by the spatial dimensions `[1, ..., M]`, to obtain a result with\n * the same rank as the input. The spatial dimensions of this intermediate\n * result are then optionally cropped according to `crops` to produce the\n * output. This is the reverse of `tf.spaceToBatchND`. See below for a precise\n * description.\n *\n * ```js\n * const x = tf.tensor4d([1, 2, 3, 4], [4, 1, 1, 1]);\n * const blockShape = [2, 2];\n * const crops = [[0, 0], [0, 0]];\n *\n * x.batchToSpaceND(blockShape, crops).print();\n * ```\n *\n * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +\n * remainingShape`, where spatialShape has `M` dimensions.\n * @param blockShape A 1-D array. Must have shape `[M]`, all values must\n * be >= 1.\n * @param crops A 2-D array.  Must have shape `[M, 2]`, all values must be >= 0.\n * `crops[i] = [cropStart, cropEnd]` specifies the amount to crop from input\n * dimension `i + 1`, which corresponds to spatial dimension `i`. It is required\n * that `cropStart[i] + cropEnd[i] <= blockShape[i] * inputShape[i + 1]`\n *\n * This operation is equivalent to the following steps:\n *\n * 1. Reshape `x` to `reshaped` of shape: `[blockShape[0], ...,\n * blockShape[M-1], batch / prod(blockShape), x.shape[1], ...,\n * x.shape[N-1]]`\n *\n * 2. Permute dimensions of `reshaped`to produce `permuted` of shape `[batch /\n * prod(blockShape),x.shape[1], blockShape[0], ..., x.shape[M],\n * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`\n *\n * 3. Reshape `permuted` to produce `reshapedPermuted` of shape `[batch /\n * prod(blockShape),x.shape[1] * blockShape[0], ..., x.shape[M] *\n * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`\n *\n * 4. Crop the start and end of dimensions `[1, ..., M]` of `reshapedPermuted`\n * according to `crops` to produce the output of shape: `[batch /\n * prod(blockShape),x.shape[1] * blockShape[0] - crops[0,0] - crops[0,1],\n * ..., x.shape[M] * blockShape[M-1] - crops[M-1,0] -\n * crops[M-1,1],x.shape[M+1], ..., x.shape[N-1]]`\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction batchToSpaceND_<T extends Tensor>(\n    x: T|TensorLike, blockShape: number[], crops: number[][]): T {\n  const $x = convertToTensor(x, 'x', 'batchToSpaceND');\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  util.assert(\n      $x.rank >= 1 + blockShape.length,\n      () => `input rank is ${$x.rank} but should be > than blockShape.length ${\n          blockShape.length}`);\n\n  util.assert(\n      crops.length === blockShape.length,\n      () => `crops.length is ${\n          crops.length} but should be equal to blockShape.length  ${\n          blockShape.length}`);\n\n  util.assert(\n      $x.shape[0] % prod === 0,\n      () => `input tensor batch is ${\n                $x.shape[0]} but is not divisible by the product of ` +\n          `the elements of blockShape ${blockShape.join(' * ')} === ${prod}`);\n\n  const grad = (dy: T) => {\n    return {$x: () => dy.spaceToBatchND(blockShape, crops)};\n  };\n\n  return ENGINE.runKernel(\n      backend => backend.batchToSpaceND($x, blockShape, crops), {$x}, grad);\n}\n\n/**\n * This operation divides \"spatial\" dimensions `[1, ..., M]` of the input into\n * a grid of blocks of shape `blockShape`, and interleaves these blocks with\n * the \"batch\" dimension (0) such that in the output, the spatial\n * dimensions `[1, ..., M]` correspond to the position within the grid,\n * and the batch dimension combines both the position within a spatial block\n * and the original batch position. Prior to division into blocks,\n * the spatial dimensions of the input are optionally zero padded\n * according to `paddings`. See below for a precise description.\n *\n * ```js\n * const x = tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]);\n * const blockShape = [2, 2];\n * const paddings = [[0, 0], [0, 0]];\n *\n * x.spaceToBatchND(blockShape, paddings).print();\n * ```\n *\n * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +\n * remainingShape`, where spatialShape has `M` dimensions.\n * @param blockShape A 1-D array. Must have shape `[M]`, all values must\n * be >= 1.\n * @param paddings A 2-D array. Must have shape `[M, 2]`, all values must be >=\n *     0. `paddings[i] = [padStart, padEnd]` specifies the amount to zero-pad\n * from input dimension `i + 1`, which corresponds to spatial dimension `i`. It\n * is required that\n * `(inputShape[i + 1] + padStart + padEnd) % blockShape[i] === 0`\n *\n * This operation is equivalent to the following steps:\n *\n * 1. Zero-pad the start and end of dimensions `[1, ..., M]` of the input\n * according to `paddings` to produce `padded` of shape paddedShape.\n *\n * 2. Reshape `padded` to `reshapedPadded` of shape:\n * `[batch] + [paddedShape[1] / blockShape[0], blockShape[0], ...,\n * paddedShape[M] / blockShape[M-1], blockShape[M-1]] + remainingShape`\n *\n * 3. Permute dimensions of `reshapedPadded` to produce `permutedReshapedPadded`\n * of shape: `blockShape + [batch] + [paddedShape[1] / blockShape[0], ...,\n * paddedShape[M] / blockShape[M-1]] + remainingShape`\n *\n * 4. Reshape `permutedReshapedPadded` to flatten `blockShape` into the\n * batch dimension, producing an output tensor of shape:\n * `[batch * prod(blockShape)] + [paddedShape[1] / blockShape[0], ...,\n * paddedShape[M] / blockShape[M-1]] + remainingShape`\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction spaceToBatchND_<T extends Tensor>(\n    x: T|TensorLike, blockShape: number[], paddings: number[][]): T {\n  const $x = convertToTensor(x, 'x', 'spaceToBatchND');\n\n  util.assert(\n      $x.rank >= 1 + blockShape.length,\n      () => `input rank ${$x.rank} should be > than [blockShape] ${\n          blockShape.length}`);\n\n  util.assert(\n      paddings.length === blockShape.length,\n      () => `paddings.shape[0] ${\n          paddings.length} must be equal to [blockShape] ${blockShape.length}`);\n\n  util.assert(\n      $x.shape.reduce(\n          (a, b, i) => {\n            if (i > 0 && i <= blockShape.length) {\n              return a &&\n                  ((b + paddings[i - 1][0] + paddings[i - 1][1]) %\n                       blockShape[i - 1] ===\n                   0);\n            }\n            return a;\n          },\n          true),\n      () => `input spatial dimensions ${$x.shape.slice(1)} with paddings ${\n          paddings.toString()} must be divisible by blockShapes ${\n          blockShape.toString()}`);\n\n  const grad = (dy: T) => {\n    return {$x: () => dy.batchToSpaceND(blockShape, paddings)};\n  };\n\n  return ENGINE.runKernel(\n      backend => backend.spaceToBatchND($x, blockShape, paddings), {$x}, grad);\n}\n\n/**\n * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * tf.unstack(a).forEach(tensor => tensor.print());\n * ```\n *\n * @param x A tensor object.\n * @param axis The axis to unstack along. Defaults to 0 (the first dim).\n */\n/** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */\nfunction unstack_(x: Tensor|TensorLike, axis = 0): Tensor[] {\n  axis = axis || 0;\n  const $x = convertToTensor(x, 'x', 'unstack');\n  util.assert(\n      axis >= -$x.shape.length && axis < $x.shape.length,\n      () =>\n          `Axis = ${axis} is not in [-${$x.shape.length}, ${$x.shape.length})`);\n  if (axis < 0) {\n    axis += $x.shape.length;\n  }\n  const grad = (dy: Tensor[]) => {\n    return {$x: () => stack(dy, axis)};\n  };\n  return ENGINE.runKernel(backend => backend.unstack($x, axis), {$x}, grad);\n}\n\n/**\n * Computes the cumulative sum of a `tf.Tensor` along `axis`.\n *\n * ```js\n * const x = tf.tensor([1, 2, 3, 4]);\n * x.cumsum().print();\n * ```\n * ```js\n * const x = tf.tensor([[1, 2], [3, 4]]);\n * x.cumsum().print();\n * ```\n *\n * @param x The input tensor to be summed.\n * @param axis The axis along which to sum. Optional. Defaults to 0.\n * @param exclusive Whether to perform exclusive cumulative sum. Optional.\n *     Defaults to false. If set to true then the sum of each tensor entry\n *     does not include its own value, but only the values previous to it\n *     along the specified axis.\n * @param reverse Whether to sum in the opposite direction. Optional.\n *     Defaults to false.\n */\n/** @doc {heading: 'Operations', subheading: 'Scan'} */\nfunction cumsum_<T extends Tensor>(\n    x: Tensor|TensorLike, axis = 0, exclusive = false, reverse = false): T {\n  const $x = convertToTensor(x, 'x', 'cumsum');\n\n  axis = axis | 0;\n  const permutation = getAxesPermutation([axis], $x.rank);\n  let permutedX = $x;\n  if (permutation != null) {\n    permutedX = $x.transpose(permutation);\n  }\n  const permutedAxis = getInnerMostAxes(1, $x.rank)[0];\n\n  const grad = (dy: T) => {\n    return {permutedX: () => dy.cumsum(axis, exclusive, !reverse)};\n  };\n  let value = ENGINE.runKernel(\n                  backend => backend.cumsum(\n                      permutedX, permutedAxis, exclusive, reverse),\n                  {permutedX}, grad) as T;\n\n  if (permutation != null) {\n    value = value.transpose(permutation);\n  }\n  return value;\n}\n\n/**\n * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension\n * into the tensor's shape.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const axis = 1;\n * x.expandDims(axis).print();\n * ```\n *\n * @param x The input tensor whose dimensions to be expanded.\n * @param axis The dimension index at which to insert shape of `1`. Defaults\n *     to 0 (the first dimension).\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction expandDims_<R2 extends Rank>(\n    x: Tensor|TensorLike, axis = 0): Tensor<R2> {\n  const parseAs: DataType = null;\n  const $x = convertToTensor(x, 'x', 'expandDims', parseAs);\n\n  util.assert(axis <= $x.rank, () => 'Axis must be <= rank of the tensor');\n  const newShape = $x.shape.slice();\n  if (axis < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -($x.rank + 1) <= axis,\n        () => `Axis must be in the interval [${- ($x.rank + 1)}, ${$x.rank}]`);\n    axis = $x.rank + axis + 1;\n  }\n  newShape.splice(axis, 0, 1);\n  return reshape($x, newShape as ShapeMap[R2]);\n}\n\n/**\n * Rearranges data from depth into blocks of spatial data. More specifically,\n * this op outputs a copy of the input tensor where values from the `depth`\n * dimension are moved in spatial blocks to the `height` and `width` dimensions.\n * The attr `blockSize` indicates the input block size and how the data is\n * moved.\n *\n *  - Chunks of data of size `blockSize * blockSize` from depth are rearranged\n * into non-overlapping blocks of size `blockSize x blockSize`\n *\n *  - The width the output tensor is `inputWidth * blockSize`, whereas the\n * height is `inputHeight * blockSize`\n *\n *  - The Y, X coordinates within each block of the output image are determined\n * by the high order component of the input channel index\n *\n *  - The depth of the input tensor must be divisible by `blockSize *\n * blockSize`\n *\n * The `dataFormat` attr specifies the layout of the input and output tensors\n * with the following options: \"NHWC\": [ `batch, height, width, channels` ]\n * \"NCHW\": [ `batch, channels, height, width` ]\n *\n * ```js\n * const x = tf.tensor4d([1, 2, 3, 4], [1, 1, 1, 4]);\n * const blockSize = 2;\n * const dataFormat = \"NHWC\";\n *\n * tf.depthToSpace(x, blockSize, dataFormat).print();\n * ```\n *\n * @param x The input tensor of rank 4\n * @param blockSIze  An `int` that is `>= 2`. The size of the spatial block\n * @param dataFormat An optional string from: \"NHWC\", \"NCHW\". Defaults to \"NHWC\"\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction depthToSpace_(\n    x: Tensor4D|TensorLike4D, blockSize: number,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC'): Tensor4D {\n  const $x = convertToTensor(x, 'x', 'depthToSpace') as Tensor4D;\n\n  const inputHeight = (dataFormat === 'NHWC') ? $x.shape[1] : $x.shape[2];\n  const inputWidth = (dataFormat === 'NHWC') ? $x.shape[2] : $x.shape[3];\n  const inputDepth = (dataFormat === 'NHWC') ? $x.shape[3] : $x.shape[1];\n\n  util.assert(\n      inputHeight * blockSize >= 0,\n      () => `Negative dimension size caused by overflow when multiplying\n      ${inputHeight} and ${blockSize}  for depthToSpace with input shape\n      ${$x.shape}`);\n\n  util.assert(\n      inputWidth * blockSize >= 0,\n      () => `Negative dimension size caused by overflow when multiplying\n      ${inputWidth} and ${blockSize} for depthToSpace with input shape\n          ${$x.shape}`);\n\n  util.assert(\n      (inputDepth % (blockSize * blockSize) === 0),\n      () => `Dimension size must be evenly divisible by ${\n          blockSize * blockSize} but is ${\n          inputDepth} for depthToSpace with input shape ${$x.shape}`);\n\n  return ENGINE.runKernel(\n      backend => backend.depthToSpace($x, blockSize, dataFormat), {$x});\n}\n\n/**\n * Computes the difference between two lists of numbers.\n *\n * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`\n * that represents all values that are in `x` but not in `y`. The returned\n * Tensor `out` is sorted in the same order that the numbers appear in `x`\n * (duplicates are preserved). This operation also returns a Tensor indices that\n * represents the position of each out element in `x`. In other words:\n *\n * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`\n *\n * ```js\n * const x = [1, 2, 3, 4, 5, 6];\n * const y = [1, 3, 5];\n *\n * const [out, indices] = await tf.setdiff1dAsync(x, y);\n * out.print(); // [2, 4, 6]\n * indices.print(); // [1, 3, 5]\n * ```\n *\n * @param x 1-D Tensor. Values to keep.\n * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the\n *     output.\n * @returns Promise of Tensor tuple [out, indices].\n *  out: Tensor with the same type as x.\n *  indices: A Tensor of type int32.\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nasync function setdiff1dAsync_(\n    x: Tensor|TensorLike, y: Tensor|TensorLike): Promise<[Tensor, Tensor]> {\n  const $x = convertToTensor(x, 'x', 'setdiff1d');\n  const $y = convertToTensor(y, 'y', 'setdiff1d');\n\n  util.assert(\n      $x.dtype === $y.dtype,\n      () => `x and y should have the same dtype, but got x (${\n          $x.dtype}) and y (${$y.dtype}).`);\n\n  util.assert(\n      $x.rank === 1, () => `x should be 1D tensor, but got x (${$x.shape}).`);\n\n  util.assert(\n      $y.rank === 1, () => `y should be 1D tensor, but got y (${$y.shape}).`);\n\n  const xVals = await $x.data();\n  const yVals = await $y.data();\n  const ySet = new Set(yVals);\n\n  let outputSize = 0;\n  for (let i = 0; i < xVals.length; i++) {\n    if (!ySet.has(xVals[i])) {\n      outputSize++;\n    }\n  }\n\n  const buffer = new TensorBuffer([outputSize], $x.dtype);\n  const indices = new TensorBuffer([outputSize], 'int32');\n  for (let i = 0, p = 0; i < xVals.length; i++) {\n    if (!ySet.has(xVals[i])) {\n      buffer.values[p] = xVals[i];\n      indices.values[p] = i;\n      p++;\n    }\n  }\n  return [buffer.toTensor(), indices.toTensor()];\n}\n\n/**\n * Creates an empty `tf.TensorBuffer` with the specified `shape` and `dtype`.\n *\n * The values are stored in CPU as `TypedArray`. Fill the buffer using\n * `buffer.set()`, or by modifying directly `buffer.values`.\n *\n * When done, call `buffer.toTensor()` to get an immutable `tf.Tensor` with\n * those values.\n *\n * ```js\n * // Create a buffer and set values at particular indices.\n * const buffer = tf.buffer([2, 2]);\n * buffer.set(3, 0, 0);\n * buffer.set(5, 1, 0);\n *\n * // Convert the buffer back to a tensor.\n * buffer.toTensor().print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The dtype of the buffer. Defaults to 'float32'.\n * @param values The values of the buffer as `TypedArray`. Defaults to\n * zeros.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction buffer<R extends Rank, D extends DataType = 'float32'>(\n    shape: ShapeMap[R], dtype: D = 'float32' as D,\n    values?: DataTypeMap[D]): TensorBuffer<R, D> {\n  dtype = dtype || 'float32' as D;\n  util.assertNonNegativeIntegerDimensions(shape);\n  return new TensorBuffer<R, D>(shape, dtype, values);\n}\n\n/**\n * Prints information about the `tf.Tensor` including its data.\n *\n * ```js\n * const verbose = true;\n * tf.tensor2d([1, 2, 3, 4], [2, 2]).print(verbose);\n * ```\n * @param x The tensor to be printed.\n * @param verbose Whether to print verbose information about the ` Tensor`,\n * including dtype and size.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction print<T extends Tensor>(x: T, verbose = false): void {\n  console.log(x.toString(verbose));\n}\n\nexport {\n  buffer,  // Not wrapped in op() since no tensors.\n  print    // Not wrapped in op() since no need to increase stack trace.\n};\n\nexport const batchToSpaceND = op({batchToSpaceND_});\nexport const cast = op({cast_});\nexport const clone = op({clone_});\nexport const cumsum = op({cumsum_});\nexport const depthToSpace = op({depthToSpace_});\nexport const expandDims = op({expandDims_});\nexport const eye = op({eye_});\nexport const multinomial = op({multinomial_});\nexport const oneHot = op({oneHot_});\nexport const pad = op({pad_});\nexport const pad1d = op({pad1d_});\nexport const pad2d = op({pad2d_});\nexport const pad3d = op({pad3d_});\nexport const pad4d = op({pad4d_});\nexport const rand = op({rand_});\nexport const randomNormal = op({randomNormal_});\nexport const randomGamma = op({randomGamma_});\nexport const randomUniform = op({randomUniform_});\nexport const reshape = op({reshape_});\nexport const spaceToBatchND = op({spaceToBatchND_});\nexport const squeeze = op({squeeze_});\nexport const stack = op({stack_});\nexport const tile = op({tile_});\nexport const truncatedNormal = op({truncatedNormal_});\nexport const unstack = op({unstack_});\nexport const setdiff1dAsync = setdiff1dAsync_;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Gets the new shape of the input Tensor after it's been reshaped\n * to:\n * [blockShape[0], ..., blockShape[M-1], batch / prod(blockShape),\n * inputShape[1], ..., inputShape[N-1]]\n *\n * See step 1: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getReshaped(\n    inputShape: number[], blockShape: number[], prod: number,\n    batchToSpace = true): number[] {\n  let reshaped: number[] = [];\n  if (batchToSpace) {\n    reshaped = reshaped.concat(blockShape.slice(0));\n    reshaped.push(inputShape[0] / prod);\n    reshaped = reshaped.concat(inputShape.slice(1));\n  } else {\n    reshaped = reshaped.concat(inputShape[0]);\n    const spatialLength = blockShape.length;\n    for (let i = 0; i < spatialLength; ++i) {\n      reshaped =\n          reshaped.concat([inputShape[i + 1] / blockShape[i], blockShape[i]]);\n    }\n    reshaped = reshaped.concat(inputShape.slice(spatialLength + 1));\n  }\n  return reshaped;\n}\n\n/**\n * Gets the permutation that will transpose the dimensions of the\n * reshaped tensor to shape:\n *\n * [batch / prod(block_shape),inputShape[1], blockShape[0], ...,\n * inputShape[M], blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * see step 2: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getPermuted(\n    reshapedRank: number, blockShapeRank: number,\n    batchToSpace = true): number[] {\n  const permuted = [];\n  if (batchToSpace) {\n    permuted.push(blockShapeRank);\n    for (let i = blockShapeRank + 1; i < reshapedRank; ++i) {\n      if (i <= 2 * blockShapeRank) {\n        permuted.push(i);\n        permuted.push(i - (blockShapeRank + 1));\n      } else {\n        permuted.push(i);\n      }\n    }\n  } else {\n    const permutedBeforeBatch = [];\n    const permutedAfterBatch = [];\n    for (let i = 1; i < reshapedRank; ++i) {\n      if (i >= blockShapeRank * 2 + 1 || i % 2 === 1) {\n        permutedAfterBatch.push(i);\n      } else {\n        permutedBeforeBatch.push(i);\n      }\n    }\n    permuted.push(...permutedBeforeBatch);\n    permuted.push(0);\n    permuted.push(...permutedAfterBatch);\n  }\n  return permuted;\n}\n\n/**\n * Gets the shape of the reshaped and permuted input Tensor before any cropping\n * is applied.  The new shape will be:\n *\n * [batch / prod(blockShape),inputShape[1] * blockShape[0], ...,\n * inputShape[M] * blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * See step 3: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getReshapedPermuted(\n    inputShape: number[], blockShape: number[], prod: number,\n    batchToSpace = true): number[] {\n  const reshapedPermuted = [];\n\n  if (batchToSpace) {\n    reshapedPermuted.push(inputShape[0] / prod);\n  } else {\n    reshapedPermuted.push(inputShape[0] * prod);\n  }\n\n  for (let i = 1; i < inputShape.length; ++i) {\n    if (i <= blockShape.length) {\n      if (batchToSpace) {\n        reshapedPermuted.push(blockShape[i - 1] * inputShape[i]);\n      } else {\n        reshapedPermuted.push(inputShape[i] / blockShape[i - 1]);\n      }\n    } else {\n      reshapedPermuted.push(inputShape[i]);\n    }\n  }\n\n  return reshapedPermuted;\n}\n\n/**\n * Converts the crops argument into the beginning coordinates of a slice\n * operation.\n */\nexport function getSliceBeginCoords(\n    crops: number[][], blockShape: number): number[] {\n  const sliceBeginCoords = [0];\n  for (let i = 0; i < blockShape; ++i) {\n    sliceBeginCoords.push(crops[i][0]);\n  }\n  return sliceBeginCoords;\n}\n\n/**\n * Converts the crops argument into the size of a slice operation.  When\n * combined with getSliceBeginCoords this function allows the reshaped and\n * permuted Tensor to be cropped to its final output shape of:\n *\n * inputShape[1] * blockShape[0] - crops[0,0] - crops[0,1], ...,\n * inputShape[M] * blockShape[M-1] -crops[M-1,0] -\n * crops[M-1,1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * See step 4: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getSliceSize(\n    uncroppedShape: number[], crops: number[][], blockShape: number): number[] {\n  const sliceSize = uncroppedShape.slice(0, 1);\n  for (let i = 0; i < blockShape; ++i) {\n    sliceSize.push(uncroppedShape[i + 1] - crops[i][0] - crops[i][1]);\n  }\n\n  return sliceSize;\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '../tensor';\nimport {computeStrides} from '../util';\n\n/**\n * Validate gather nd inputs.\n *\n * @param tensor The tensor contains the source values.\n * @param indices The tensor contains the indices to slice the source.\n *\n * @returns [resultShape, numUpdates, sliceSize, strides]\n */\nexport function prepareAndValidate(\n    tensor: Tensor, indices: Tensor): [number[], number, number, number[]] {\n  if (tensor.rank < 1) {\n    throw new Error(\n        'tf.gatherND() expects the input to be rank 1 or higher,' +\n        ` but the rank was ${tensor.rank}.`);\n  }\n  if (indices.rank < 1) {\n    throw new Error(\n        'tf.gatherND() expects the indices to be rank 1 or higher,' +\n        ` but the rank was ${indices.rank}.`);\n  }\n  if (indices.dtype !== 'int32') {\n    throw new Error(\n        'tf.gatherND() expects the indices to be int32 type,' +\n        ` but the dtype was ${indices.dtype}.`);\n  }\n  if (indices.shape[indices.rank - 1] > tensor.rank) {\n    throw new Error(\n        'index innermost dimension length must be <= tensor rank; saw: ' +\n        `${indices.shape[indices.rank - 1]} vs. ${tensor.rank}`);\n  }\n\n  if (tensor.size === 0) {\n    throw new Error(\n        'Requested more than 0 entries, but input is empty.' +\n        ` Input shape: ${tensor.shape}.`);\n  }\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  // The result shape is\n  //   indices.shape[:-1] + params.shape[indices.shape[-1]:]\n  let nResult = 1;\n  for (let i = 0; i < indicesShape.length - 1; ++i) {\n    nResult *= indicesShape[i];\n  }\n\n  const inputShape = tensor.shape;\n\n  const resultShape = indicesShape.slice();\n  resultShape.pop();\n\n  let sliceSize = 1;\n  for (let i = sliceRank; i < tensor.rank; ++i) {\n    sliceSize *= inputShape[i];\n    resultShape.push(inputShape[i]);\n  }\n\n  const strides =\n      [...computeStrides(tensor.shape).map(stride => stride / sliceSize),\n       1].slice(0, sliceRank);\n\n  return [resultShape, nResult, sliceSize, strides];\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Inputs of size above this threshold will be parallelized by calling multiple\n * shader programs.\n */\nimport {nearestDivisor} from '../util';\n\nexport const PARALLELIZE_THRESHOLD = 30;\n\nexport interface ReduceInfo {\n  windowSize: number;\n  batchSize: number;\n  inSize: number;\n}\n\nexport function computeOptimalWindowSize(inSize: number): number {\n  if (inSize <= PARALLELIZE_THRESHOLD) {\n    return inSize;\n  }\n  return nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '../tensor';\nimport {computeStrides, sizeFromShape} from '../util';\n\n/**\n * Check whether updates.shape = indices.shape[:batchDim] +\n * shape[sliceDim:]\n *\n * @param x The input tensor.\n */\nexport function validateUpdateShape(\n    shape: number[], indices: Tensor, updates: Tensor) {\n  const sliceDim = (indices.rank > 1) ? indices.shape[indices.rank - 1] : 1;\n  const batchDim = (indices.rank > 1) ? indices.rank - 1 : 1;\n\n  const shapeError = 'Must have updates.shape = indices.shape[:batchDim] + ' +\n      `shape[sliceDim:], got updates.shape: ${updates.shape}` +\n      `, indices.shape: ${indices.shape}, shape: ${shape}` +\n      `, sliceDim: ${sliceDim}, and batchDim: ${batchDim}.`;\n\n  if (updates.rank < batchDim) {\n    throw new Error(shapeError + ` update.rank < ${batchDim}. `);\n  }\n  if (shape.length < sliceDim + (updates.rank - batchDim)) {\n    throw new Error(\n        shapeError +\n        ` Output shape length < ${sliceDim + (updates.rank - batchDim)}`);\n  }\n  if (updates.rank !== batchDim + shape.length - sliceDim) {\n    throw new Error(\n        shapeError + ` update.rank != ${batchDim + shape.length - sliceDim}`);\n  }\n  for (let d = 0; d < batchDim; ++d) {\n    if (updates.shape[d] !== indices.shape[d]) {\n      throw new Error(\n          shapeError +\n          ` updates.shape[${d}] (${updates.shape[d]}) != indices.shape[${d}] (${\n              indices.shape[d]}).`);\n    }\n  }\n  for (let d = 0; d < updates.rank - batchDim; ++d) {\n    if (updates.shape[d + batchDim] !== shape[d + sliceDim]) {\n      throw new Error(\n          shapeError +\n          ` updates.shape[${d + batchDim}] (${\n              updates.shape[d + batchDim]}) != shape[${d + batchDim}] (${\n              shape[d + batchDim]})`);\n    }\n  }\n}\n\nexport interface ScatterShapeInfo {\n  sliceRank: number;\n  numUpdates: number;\n  sliceSize: number;\n  strides: number[];\n  outputSize: number;\n}\n/**\n * Validate scatter nd inputs.\n *\n * @param update The tensor contains the update values.\n * @param indices The tensor contains the indices for the update values.\n * @param shape The shape of the output tensor.\n */\nexport function validateInput(\n    updates: Tensor, indices: Tensor, shape: number[]) {\n  if (indices.rank < 1) {\n    throw new Error(\n        'tf.scatterND() expects the indices to be rank 1 or higher,' +\n        ` but the rank was ${indices.rank}.`);\n  }\n  if (updates.rank < 1) {\n    throw new Error(\n        'tf.scatterND() expects the updates to be rank 1 or higher,' +\n        ` but the rank was ${updates.rank}.`);\n  }\n  if (indices.dtype !== 'int32') {\n    throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${\n        indices.dtype}`);\n  }\n  if (shape.length < 1) {\n    throw new Error(\n        `Output rank must be greater or equal to 1, but got shape: ${shape}`);\n  }\n\n  if (shape.length === 0) {\n    if (indices.size === 0) {\n      throw new Error(`Indices specified for empty output. indices shape: ${\n          indices.shape}`);\n    }\n    if (updates.size === 0) {\n      throw new Error(`Updates specified for empty output. updates shape: ${\n          updates.shape}`);\n    }\n  }\n\n  validateUpdateShape(shape, indices, updates);\n}\n\n/**\n * Calculate the shape information for the output.\n *\n * @param update The tensor contains the update values.\n * @param indices The tensor contains the indices for the update values.\n * @param shape The shape of the output tensor.\n *\n * @returns ScatterShapeInfo\n */\nexport function calculateShapes(\n    updates: Tensor, indices: Tensor, shape: number[]): ScatterShapeInfo {\n  // Calculate the number of dimensions in indices\n  const sliceRank = (indices.rank > 1) ? indices.shape[indices.rank - 1] : 1;\n\n  // Calculate the number of elements that make up each slice of our updated\n  // tensor. This allows us to work with flattened tensors and copy over whole\n  // slices at a time.\n  const totalNd = shape.length;\n\n  let sliceSize = 1;\n  for (let i = sliceRank; i < totalNd; ++i) {\n    sliceSize *= shape[i];\n  }\n\n  const safeSliceDim = (sliceRank < 1) ? 1 : sliceRank;\n  const numUpdates = indices.size / safeSliceDim;\n\n  const strides = [...computeStrides(shape.slice(0, sliceRank)), 1];\n  const outputSize = sizeFromShape(shape);\n  return {sliceRank, numUpdates, sliceSize, strides, outputSize};\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport * as util from '../util';\n\nexport function assertParamsValid(\n    input: Tensor, begin: number[], size: number[]): void {\n  util.assert(\n      input.rank === begin.length,\n      () => `Error in slice${input.rank}D: Length of begin ${begin} must ` +\n          `match the rank of the array (${input.rank}).`);\n  util.assert(\n      input.rank === size.length,\n      () => `Error in slice${input.rank}D: Length of size ${size} must ` +\n          `match the rank of the array (${input.rank}).`);\n\n  for (let i = 0; i < input.rank; ++i) {\n    util.assert(\n        begin[i] + size[i] <= input.shape[i],\n        () => `Error in slice${input.rank}D: begin[${i}] + size[${i}] ` +\n            `(${begin[i] + size[i]}) would overflow input.shape[${i}] (${\n                  input.shape[i]})`);\n  }\n}\n\n/** Converts a binary mask to an array of axes. Used in stridedSlice(). */\nexport function maskToAxes(mask: number): number[] {\n  const axes = [];\n  let axis = 0;\n  while (mask > 0) {\n    if (mask & 1) {\n      axes.push(axis);\n    }\n    mask /= 2;\n    axis++;\n  }\n  return axes;\n}\n\n/** Computes the output shape given the strided slice params. */\nexport function computeOutShape(\n    begin: number[], end: number[], strides: number[]): number[] {\n  const size = [];\n  for (let axis = 0; axis < begin.length; axis++) {\n    size[axis] = Math.ceil((end[axis] - begin[axis]) / strides[axis]);\n  }\n  return size;\n}\n\nexport function startForAxis(\n    beginMask: number, startIndices: number[], strides: number[],\n    inputShape: number[], axis: number): number {\n  // Begin with the specified index\n  let start = startIndices[axis];\n  const stride = strides[axis] || 1;\n\n  // Check the axis bit from right of beginMask or the begin index is not set\n  // for the axis.\n  if (beginMask & 1 << axis || start == null) {\n    if (stride > 0) {\n      // Forward iteration - use the first element. These values will get\n      // clamped below (Note: We could have set them to 0 and axis_size-1, but\n      // use lowest() and max() to maintain symmetry with StopForAxis())\n      start = Number.MIN_SAFE_INTEGER;\n    } else {\n      // Backward iteration - use the last element.\n      start = Number.MAX_SAFE_INTEGER;\n    }\n  }\n\n  // Handle negative indices\n  const axisSize = inputShape[axis];\n  if (start < 0) {\n    start += axisSize;\n  }\n\n  // Clamping\n  start = util.clamp(0, start, axisSize - 1);\n\n  return start;\n}\n\nexport function stopForAxis(\n    endMask: number, stopIndices: number[], strides: number[],\n    inputShape: number[], axis: number): number {\n  // Begin with the specified index\n  let stop = stopIndices[axis];\n  const stride = strides[axis] || 1;\n\n  // Check the axis bit from right of endMask or if the stop index is not set\n  // for this axis.\n  if (endMask & (1 << axis) || stop == null) {\n    if (stride > 0) {\n      // Forward iteration - use the last element. These values will get\n      // clamped below\n      stop = Number.MAX_SAFE_INTEGER;\n    } else {\n      // Backward iteration - use the first element.\n      stop = Number.MIN_SAFE_INTEGER;\n    }\n  }\n\n  // Handle negative indices\n  const axisSize = inputShape[axis];\n  if (stop < 0) {\n    stop += axisSize;\n  }\n\n  // Clamping\n  // Because the end index points one past the last element, we need slightly\n  // different clamping ranges depending on the direction.\n  if (stride > 0) {\n    // Forward iteration\n    stop = util.clamp(0, stop, axisSize);\n  } else {\n    // Backward iteration\n    stop = util.clamp(-1, stop, axisSize - 1);\n  }\n\n  return stop;\n}\n\n/**\n * Returns true if the slice occupies a continous set of elements in the\n * 'flat' space.\n */\nexport function isSliceContinous(\n    shape: number[], begin: number[], size: number[]) {\n  // Index of the first axis that has size > 1.\n  let firstNonOneAxis = size.length;\n  for (let i = 0; i < size.length; i++) {\n    if (size[i] > 1) {\n      firstNonOneAxis = i;\n      break;\n    }\n  }\n\n  for (let i = firstNonOneAxis + 1; i < size.length; i++) {\n    if (begin[i] > 0 || size[i] !== shape[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function computeFlatOffset(begin: number[], strides: number[]): number {\n  let flatOffset = begin.length > 0 ? begin[begin.length - 1] : 1;\n  for (let i = 0; i < begin.length - 1; i++) {\n    flatOffset += begin[i] * strides[i];\n  }\n  return flatOffset;\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CustomGradientFunc, ENGINE} from './engine';\nimport {Scalar, Tensor, Variable} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport {convertToTensor, convertToTensorArray} from './tensor_util_env';\nimport {TensorLike} from './types';\nimport * as util from './util';\n\n/**\n * Provided `f(x)`, returns another function `g(x, dy?)`, which gives the\n * gradient of `f(x)` with respect to `x`.\n *\n * If `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to\n * `x` is computed instead. `f(x)` must take a single tensor `x` and return a\n * single tensor `y`. If `f()` takes multiple inputs, use `tf.grads` instead.\n *\n * ```js\n * // f(x) = x ^ 2\n * const f = x => x.square();\n * // f'(x) = 2x\n * const g = tf.grad(f);\n *\n * const x = tf.tensor1d([2, 3]);\n * g(x).print();\n * ```\n *\n * ```js\n * // f(x) = x ^ 3\n * const f = x => x.pow(tf.scalar(3, 'int32'));\n * // f'(x) = 3x ^ 2\n * const g = tf.grad(f);\n * // f''(x) = 6x\n * const gg = tf.grad(g);\n *\n * const x = tf.tensor1d([2, 3]);\n * gg(x).print();\n * ```\n *\n * @param f The function f(x), to compute gradient for.\n */\n/** @doc {heading: 'Training', subheading: 'Gradients'} */\nfunction grad(f: (x: Tensor) => Tensor): (\n    x: TensorLike|Tensor, dy?: TensorLike|Tensor) => Tensor {\n  util.assert(\n      util.isFunction(f), () => 'The f passed in grad(f) must be a function');\n  return (x: TensorLike|Tensor, dy?: TensorLike|Tensor): Tensor => {\n    // x can be of any dtype, thus null as the last argument.\n    const $x = convertToTensor(x, 'x', 'tf.grad', null);\n    const $dy: Tensor =\n        (dy != null) ? convertToTensor(dy, 'dy', 'tf.grad') : null;\n    return ENGINE.tidy(() => {\n      const {value, grads} = ENGINE.gradients(() => f($x), [$x], $dy);\n      if ($dy != null) {\n        util.assertShapesMatch(\n            value.shape, $dy.shape,\n            'The shape of dy passed in grad(f)(x, dy) must match the shape ' +\n                'returned by f(x)');\n      }\n      checkGrads(grads);\n      return grads[0];\n    });\n  };\n}\n\n/**\n * Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,\n * which gives an array of gradients of `f()` with respect to each input\n * [`x1`,`x2`,...].\n *\n * If `dy` is passed when calling `g()`, the gradient of\n * `f(x1,...).mul(dy).sum()` with respect to each input is computed instead.\n * The provided `f` must take one or more tensors and return a single tensor\n * `y`. If `f()` takes a single input, we recommend using `tf.grad` instead.\n *\n * ```js\n * // f(a, b) = a * b\n * const f = (a, b) => a.mul(b);\n * // df / da = b, df / db = a\n * const g = tf.grads(f);\n *\n * const a = tf.tensor1d([2, 3]);\n * const b = tf.tensor1d([-2, -3]);\n * const [da, db] = g([a, b]);\n * console.log('da');\n * da.print();\n * console.log('db');\n * db.print();\n * ```\n *\n * @param f The function `f(x1, x2,...)` to compute gradients for.\n */\n/** @doc {heading: 'Training', subheading: 'Gradients'} */\nfunction grads(f: (...args: Tensor[]) => Tensor): (\n    args: Array<Tensor|TensorLike>, dy?: Tensor|TensorLike) => Tensor[] {\n  util.assert(\n      util.isFunction(f), () => 'The f passed in grads(f) must be a function');\n  return (args: Array<Tensor|TensorLike>, dy?: Tensor|TensorLike): Tensor[] => {\n    util.assert(\n        Array.isArray(args),\n        () => 'The args passed in grads(f)(args) must be an array ' +\n            'of `Tensor`s or `TensorLike`s');\n    // args can be of any dtype, thus null as the last argument.\n    const $args = convertToTensorArray(args, 'args', 'tf.grads', null);\n    const $dy: Tensor =\n        (dy != null) ? convertToTensor(dy, 'dy', 'tf.grads') : null;\n    return ENGINE.tidy(() => {\n      const {value, grads} = ENGINE.gradients(() => f(...$args), $args, $dy);\n      if ($dy != null) {\n        util.assertShapesMatch(\n            value.shape, $dy.shape,\n            'The shape of dy passed in grads(f)([x1,...], dy) must ' +\n                'match the shape returned by f([x1,...])');\n      }\n      checkGrads(grads);\n      return grads;\n    });\n  };\n}\n\n/**\n * Like `tf.grad`, but also returns the value of `f()`. Useful when `f()`\n * returns a metric you want to show.\n *\n * The result is a rich object with the following properties:\n * - grad: The gradient of `f(x)` w.r.t `x` (result of `tf.grad`).\n * - value: The value returned by `f(x)`.\n *\n * ```js\n * // f(x) = x ^ 2\n * const f = x => x.square();\n * // f'(x) = 2x\n * const g = tf.valueAndGrad(f);\n *\n * const x = tf.tensor1d([2, 3]);\n * const {value, grad} = g(x);\n *\n * console.log('value');\n * value.print();\n * console.log('grad');\n * grad.print();\n * ```\n */\n/** @doc {heading: 'Training', subheading: 'Gradients'} */\nfunction valueAndGrad<I extends Tensor, O extends Tensor>(f: (x: I) => O): (\n    x: I, dy?: O) => {\n  value: O;\n  grad: I;\n} {\n  util.assert(\n      util.isFunction(f),\n      () => 'The f passed in valueAndGrad(f) must be a function');\n  return (x: I, dy?: O) => {\n    util.assert(\n        x instanceof Tensor,\n        () => 'The x passed in valueAndGrad(f)(x) must be a tensor');\n    util.assert(\n        dy == null || dy instanceof Tensor,\n        () => 'The dy passed in valueAndGrad(f)(x, dy) must be a tensor');\n    const {grads, value} = ENGINE.gradients(() => f(x), [x], dy);\n    checkGrads(grads);\n    return {grad: grads[0] as I, value};\n  };\n}\n\n/**\n * Like `tf.grads`, but returns also the value of `f()`. Useful when `f()`\n * returns a metric you want to show.\n *\n * The result is a rich object with the following properties:\n * - grads: The gradients of `f()` w.r.t each input (result of `tf.grads`).\n * - value: The value returned by `f(x)`.\n *\n * ```js\n * // f(a, b) = a * b\n * const f = (a, b) => a.mul(b);\n * // df/da = b, df/db = a\n * const g = tf.valueAndGrads(f);\n *\n * const a = tf.tensor1d([2, 3]);\n * const b = tf.tensor1d([-2, -3]);\n * const {value, grads} = g([a, b]);\n *\n * const [da, db] = grads;\n *\n * console.log('value');\n * value.print();\n *\n * console.log('da');\n * da.print();\n * console.log('db');\n * db.print();\n * ```\n */\n/** @doc {heading: 'Training', subheading: 'Gradients'} */\nfunction valueAndGrads<O extends Tensor>(f: (...args: Tensor[]) => O): (\n    args: Tensor[], dy?: O) => {\n  grads: Tensor[];\n  value: O;\n} {\n  util.assert(\n      util.isFunction(f),\n      () => 'The f passed in valueAndGrads(f) must be a function');\n  return (args: Tensor[], dy?: O) => {\n    util.assert(\n        Array.isArray(args) && args.every(arg => arg instanceof Tensor),\n        () => 'The args passed in valueAndGrads(f)(args) must be array of ' +\n            'tensors');\n    util.assert(\n        dy == null || dy instanceof Tensor,\n        () => 'The dy passed in valueAndGrads(f)(args, dy) must be a tensor');\n    const res = ENGINE.gradients(() => f(...args), args, dy);\n    if (dy != null) {\n      util.assertShapesMatch(\n          res.value.shape, dy.shape,\n          'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must ' +\n              'match the shape returned by f([x1,...])');\n    }\n    checkGrads(res.grads);\n    return res;\n  };\n}\n\n/**\n * Computes and returns the gradient of f(x) with respect to the list of\n * trainable variables provided by `varList`. If no list is provided, it\n * defaults to all trainable variables.\n *\n * ```js\n * const a = tf.variable(tf.tensor1d([3, 4]));\n * const b = tf.variable(tf.tensor1d([5, 6]));\n * const x = tf.tensor1d([1, 2]);\n *\n * // f(a, b) = a * x ^ 2 + b * x\n * const f = () => a.mul(x.square()).add(b.mul(x)).sum();\n * // df/da = x ^ 2, df/db = x\n * const {value, grads} = tf.variableGrads(f);\n *\n * Object.keys(grads).forEach(varName => grads[varName].print());\n * ```\n *\n * @param f The function to execute. f() should return a scalar.\n * @param varList The list of variables to compute the gradients with respect\n *     to. Defaults to all trainable variables.\n * @returns An object with the following keys and values:\n *   - `value`: The value of the function `f`.\n *   - `grads`: A map from the names of the variables to the gradients.\n *     If the `varList` argument is provided explicitly and contains a subset of\n *     non-trainable variables, this map in the return value will contain keys\n *     that map the names of the non-trainable variables to `null`.\n */\n/** @doc {heading: 'Training', subheading: 'Gradients'} */\nfunction variableGrads(f: () => Scalar, varList?: Variable[]):\n    {value: Scalar, grads: NamedTensorMap} {\n  util.assert(\n      util.isFunction(f),\n      () => 'The f passed in variableGrads(f) must be a function');\n  util.assert(\n      varList == null ||\n          Array.isArray(varList) && varList.every(v => v instanceof Variable),\n      () =>\n          'The varList passed in variableGrads(f, varList) must be an array ' +\n          'of variables');\n\n  const specifiedVarList = varList != null;\n  if (!specifiedVarList) {\n    // Get all of the trainable variables.\n    varList = [];\n    for (const varName in ENGINE.registeredVariables) {\n      varList.push(ENGINE.registeredVariables[varName]);\n    }\n  }\n\n  const specifiedNonTrainable: Variable[] =\n      specifiedVarList ? varList.filter(variable => !variable.trainable) : null;\n\n  // Prune non-trainable variables.\n  const originalVarCount = varList.length;\n  varList = varList.filter(variable => variable.trainable);\n  util.assert(\n      varList.length > 0,\n      () => `variableGrads() expects at least one of the input variables to ` +\n          `be trainable, but none of the ${originalVarCount} variables is ` +\n          `trainable.`);\n\n  const allowNoGradients = true;\n  const {value, grads} = ENGINE.gradients(f, varList, null, allowNoGradients);\n\n  util.assert(\n      grads.some(g => g != null),\n      () => 'Cannot find a connection between any variable and the result of ' +\n          'the loss function y=f(x). Please make sure the operations that ' +\n          'use variables are inside the function f passed to minimize().');\n  util.assert(\n      value.rank === 0,\n      () => `The f passed in variableGrads(f) must return a scalar, but it ` +\n          `returned a rank-${value.rank} tensor`);\n\n  const namedGrads: NamedTensorMap = {};\n  varList.forEach((v, i) => {\n    if (grads[i] != null) {\n      namedGrads[v.name] = grads[i];\n    }\n  });\n  if (specifiedNonTrainable != null) {\n    // If varList is explicitly provided and contains non-trainable values,\n    // add them to the returned gradients with `null` values.\n    specifiedNonTrainable.forEach(v => namedGrads[v.name] = null);\n  }\n  return {value, grads: namedGrads};\n}\n\n/**\n * Overrides the gradient computation of a function `f`.\n *\n * Takes a function\n * `f(...inputs, save) => {value: Tensor, gradFunc: (dy, saved) => Tensor[]}`\n * and returns another function `g(...inputs)` which takes the same inputs as\n * `f`. When called, `g` returns `f().value`. In backward mode, custom gradients\n * with respect to each input of `f` are computed using `f().gradFunc`.\n *\n * The `save` function passsed to `f` should be used for saving tensors needed\n * in the gradient. And the `saved` passed to the `gradFunc` is a\n * `NamedTensorMap`, which contains those saved tensor.\n *\n * ```js\n * const customOp = tf.customGrad((x, save) => {\n *   // Save x to make sure it's available later for the gradient.\n *   save([x]);\n *   // Override gradient of our custom x ^ 2 op to be dy * abs(x);\n *   return {\n *     value: x.square(),\n *     // Note `saved.x` which points to the `x` we saved earlier.\n *     gradFunc: (dy, saved) => [dy.mul(saved[0].abs())]\n *   };\n * });\n *\n * const x = tf.tensor1d([-1, -2, 3]);\n * const dx = tf.grad(x => customOp(x));\n *\n * console.log(`f(x):`);\n * customOp(x).print();\n * console.log(`f'(x):`);\n * dx(x).print();\n * ```\n *\n * @param f The function to evaluate in forward mode, which should return\n *     `{value: Tensor, gradFunc: (dy, saved) => Tensor[]}`, where `gradFunc`\n *     returns the custom gradients of `f` with respect to its inputs.\n */\n/** @doc {heading: 'Training', subheading: 'Gradients'} */\nfunction customGrad<T extends Tensor>(f: CustomGradientFunc<T>):\n    (...args: Tensor[]) => T {\n  return ENGINE.customGrad(f);\n}\n\nfunction checkGrads(grads: Tensor[]) {\n  const numNullGradients = grads.filter(g => g == null).length;\n  if (numNullGradients > 0) {\n    throw new Error(\n        `Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.`);\n  }\n}\n\nexport {\n  customGrad,\n  variableGrads,\n  valueAndGrad,\n  valueAndGrads,\n  grad,\n  grads,\n};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {customGrad} from '../gradients';\nimport {Tensor} from '../tensor';\nimport {GradSaveFunc} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Computes the softmax normalized vector given the logits.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n *\n * a.softmax().print();  // or tf.softmax(a)\n * ```\n *\n * ```js\n * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);\n *\n * a.softmax().print();  // or tf.softmax(a)\n * ```\n *\n * @param logits The logits array.\n * @param dim The dimension softmax would be performed on. Defaults to `-1`\n *     which indicates the last dimension.\n */\n/** @doc {heading: 'Operations', subheading: 'Normalization'} */\nfunction softmax_<T extends Tensor>(logits: T|TensorLike, dim = -1): T {\n  const $logits = convertToTensor(logits, 'logits', 'softmax');\n\n  if (dim === -1) {\n    dim = $logits.rank - 1;\n  }\n  if (dim !== $logits.rank - 1) {\n    throw Error(\n        'Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${$logits.rank} and dim was ${dim}`);\n  }\n\n  const customOp = customGrad((logits: Tensor, save: GradSaveFunc) => {\n    // Do it in log space for numerical stability.\n    // exp(X - logSumExp(X))\n    const keepDims = true;\n    const lse = logits.logSumExp([dim], keepDims);\n    const logResult = logits.toFloat().sub(lse);\n    const y = logResult.exp() as T;\n    save([y]);\n    const gradFunc = (dy: T, saved: Tensor[]) => {\n      const [y] = saved;\n      const dyTimesY = dy.mul(y);\n      const keepDims = true;\n      return dyTimesY.sub(dyTimesY.sum([dim], keepDims).mul(y));\n    };\n\n    return {value: y, gradFunc};\n  });\n\n  return customOp($logits);\n}\n\n/**\n * Computes the log softmax.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n *\n * a.logSoftmax().print();  // or tf.logSoftmax(a)\n * ```\n *\n * ```js\n * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);\n *\n * a.logSoftmax().print();  // or tf.logSoftmax(a)\n * ```\n *\n * @param logits The logits array.\n * @param axis The dimension softmax would be performed on. Defaults to `-1`\n *     which indicates the last dimension.\n */\n/** @doc {heading: 'Operations', subheading: 'Normalization'} */\nfunction logSoftmax_<T extends Tensor>(logits: T|TensorLike, axis = -1): T {\n  const $logits = convertToTensor(logits, 'logits', 'logSoftmax');\n\n  if (axis === -1) {\n    axis = $logits.rank - 1;\n  }\n  if (axis !== $logits.rank - 1) {\n    throw Error(\n        'Log Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${$logits.rank} and axis was ${axis}`);\n  }\n\n  const customOp = customGrad((logits: Tensor, save: GradSaveFunc) => {\n    const keepDims = true;\n    const xMax = logits.max(axis, true);\n    const shifted = logits.sub(xMax);\n    const value =\n        shifted.toFloat().sub(shifted.exp().sum(axis, keepDims).log());\n    save([value]);\n    const gradFunc = (dy: T, saved: Tensor[]) => {\n      const [value] = saved;\n      const softmax = value.exp();\n      return dy.sub(dy.sum(axis, keepDims).mul(softmax));\n    };\n\n    return {value, gradFunc};\n  });\n\n  return customOp($logits) as T;\n}\n\nexport const softmax = op({softmax_});\nexport const logSoftmax = op({logSoftmax_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Conv2DInfo, Conv3DInfo} from '../ops/conv_util';\nimport {Activation, FusedBatchMatMulConfig} from '../ops/fused_util';\nimport {Backend, DataId, Scalar, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Tensor5D} from '../tensor';\nimport {BackendValues, DataType, PixelData, Rank, ShapeMap} from '../types';\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\n// Required information for all backends.\nexport interface BackendTimingInfo {\n  kernelMs: number;\n  getExtraProfileInfo?(): string;  // a field for additional timing information\n                                   // e.g. packing / unpacking for WebGL backend\n}\n\nexport interface TensorStorage {\n  read(dataId: DataId): Promise<BackendValues>;\n  readSync(dataId: DataId): BackendValues;\n  disposeData(dataId: DataId): void;\n  write(dataId: DataId, values: BackendValues): void;\n  fromPixels(\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      HTMLVideoElement,\n      numChannels: number): Tensor3D;\n  register(dataId: DataId, shape: number[], dtype: DataType): void;\n  memory(): {unreliable: boolean;};  // Backend-specific information.\n}\n\n/** Convenient class for storing tensor-related data. */\nexport class DataStorage<T> {\n  private data = new WeakMap<DataId, T>();\n\n  constructor(private backend: KernelBackend, private dataMover: DataMover) {}\n\n  get(dataId: DataId) {\n    if (!this.data.has(dataId)) {\n      this.dataMover.moveData(this.backend, dataId);\n    }\n    return this.data.get(dataId);\n  }\n\n  set(dataId: DataId, value: T): void {\n    this.data.set(dataId, value);\n  }\n\n  has(dataId: DataId): boolean {\n    return this.data.has(dataId);\n  }\n\n  delete(dataId: DataId): boolean {\n    return this.data.delete(dataId);\n  }\n}\n\nexport interface DataMover {\n  /**\n   * To be called by backends whenever they see a dataId that they don't own.\n   * Upon calling this method, the mover will fetch the tensor from another\n   * backend and register it with the current active backend.\n   */\n  moveData(backend: KernelBackend, dataId: DataId): void;\n}\n\nexport interface BackendTimer {\n  time(f: () => void): Promise<BackendTimingInfo>;\n}\n\n/**\n * The interface that defines the kernels that should be implemented when\n * adding a new backend. New backends don't need to implement every one of the\n * methods, this can be done gradually (throw an error for unimplemented\n * methods).\n */\nexport class KernelBackend implements TensorStorage, Backend, BackendTimer {\n  time(f: () => void): Promise<BackendTimingInfo> {\n    throw new Error('Not yet implemented.');\n  }\n  read(dataId: object): Promise<BackendValues> {\n    throw new Error('Not yet implemented.');\n  }\n  readSync(dataId: object): BackendValues {\n    throw new Error('Not yet implemented.');\n  }\n  disposeData(dataId: object): void {\n    throw new Error('Not yet implemented.');\n  }\n  write(dataId: object, values: BackendValues): void {\n    throw new Error('Not yet implemented.');\n  }\n  fromPixels(\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      HTMLVideoElement,\n      numChannels: number): Tensor<Rank.R3> {\n    throw new Error('Not yet implemented.');\n  }\n  register(dataId: object, shape: number[], dtype: DataType): void {\n    throw new Error('Not yet implemented.');\n  }\n  memory(): {unreliable: boolean; reasons?: string[]} {\n    throw new Error('Not yet implemented.');\n  }\n  /** Returns the highest precision for floats in bits (e.g. 16 or 32) */\n  floatPrecision(): 16|32 {\n    throw new Error('Not yet implemented');\n  }\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  batchMatMul(\n      a: Tensor3D, b: Tensor3D, transposeA: boolean,\n      transposeB: boolean): Tensor3D {\n    throw new Error('Not yet implemented');\n  }\n\n  fusedBatchMatMul(\n      {a, b, transposeA, transposeB, bias, activation, preluActivationWeights}:\n          FusedBatchMatMulConfig): Tensor3D {\n    throw new Error('Not yet implemented');\n  }\n\n  slice<T extends Tensor>(x: T, begin: number[], size: number[]): T {\n    throw new Error('Not yet implemented');\n  }\n  stridedSlice<T extends Tensor>(\n      x: T, begin: number[], end: number[], strides: number[]): T {\n    throw new Error('Not yet implemented');\n  }\n  unstack(x: Tensor, axis: number): Tensor[] {\n    throw new Error('Not yet implemented');\n  }\n  reverse<T extends Tensor>(a: T, axis: number[]): T {\n    throw new Error('Not yet implemented');\n  }\n\n  concat(tensors: Tensor[], axis: number): Tensor {\n    throw new Error('Not yet implemented');\n  }\n\n  neg<T extends Tensor>(a: T): T {\n    throw new Error('Not yet implemented');\n  }\n\n  add(a: Tensor, b: Tensor): Tensor {\n    throw new Error('Not yet implemented');\n  }\n  addN<T extends Tensor>(tensors: T[]): T {\n    throw new Error('Not yet implemented');\n  }\n  subtract(a: Tensor, b: Tensor): Tensor {\n    throw new Error('Not yet implemented');\n  }\n  multiply(a: Tensor, b: Tensor): Tensor {\n    throw new Error('Not yet implemented');\n  }\n  realDivide(a: Tensor, b: Tensor): Tensor {\n    throw new Error('Not yet implemented');\n  }\n  floorDiv(a: Tensor, b: Tensor): Tensor {\n    throw new Error('Not yet implemented');\n  }\n\n  sum(x: Tensor, axes: number[]): Tensor {\n    throw new Error('Not yet implemented');\n  }\n  prod(x: Tensor, axes: number[]): Tensor {\n    throw new Error('Not yet implemented');\n  }\n\n  unsortedSegmentSum<T extends Tensor>(\n      x: T, segmentIds: Tensor1D, numSegments: number): Tensor {\n    throw new Error('Not yet implemented');\n  }\n\n  argMin(x: Tensor, axis: number): Tensor {\n    throw new Error('Not yet implemented');\n  }\n  argMax(x: Tensor, axis: number): Tensor {\n    throw new Error('Not yet implemented');\n  }\n\n  equal(a: Tensor, b: Tensor): Tensor {\n    throw new Error('Not yet implemented');\n  }\n  notEqual(a: Tensor, b: Tensor): Tensor {\n    throw new Error('Not yet implemented');\n  }\n\n  less(a: Tensor, b: Tensor): Tensor {\n    throw new Error('Not yet implemented');\n  }\n  lessEqual(a: Tensor, b: Tensor): Tensor {\n    throw new Error('Not yet implemented');\n  }\n\n  greater(a: Tensor, b: Tensor): Tensor {\n    throw new Error('Not yet implemented');\n  }\n  greaterEqual(a: Tensor, b: Tensor): Tensor {\n    throw new Error('Not yet implemented');\n  }\n\n  logicalNot<T extends Tensor>(a: T): T {\n    throw new Error('Not yet implemented');\n  }\n  logicalAnd(a: Tensor, b: Tensor): Tensor {\n    throw new Error('Not yet implemented');\n  }\n  logicalOr(a: Tensor, b: Tensor): Tensor {\n    throw new Error('Not yet implemented');\n  }\n\n  where(condition: Tensor): Tensor2D {\n    throw new Error('Not yet implemented');\n  }\n  select(condition: Tensor, a: Tensor, b: Tensor): Tensor {\n    throw new Error('Not yet implemented');\n  }\n\n  topk<T extends Tensor>(x: T, k: number, sorted: boolean): [T, T] {\n    throw new Error('Not yet implemented');\n  }\n\n  min(x: Tensor, axes: number[]): Tensor {\n    throw new Error('Not yet implemented');\n  }\n  minimum(a: Tensor, b: Tensor): Tensor {\n    throw new Error('Not yet implemented');\n  }\n\n  mod(a: Tensor, b: Tensor): Tensor {\n    throw new Error('Not yet implemented');\n  }\n\n  max(x: Tensor, axes: number[]): Tensor {\n    throw new Error('Not yet implemented');\n  }\n  maximum(a: Tensor, b: Tensor): Tensor {\n    throw new Error('Not yet implemented');\n  }\n\n  all(x: Tensor, axes: number[]): Tensor {\n    throw new Error('Not yet implemented');\n  }\n  any(x: Tensor, axes: number[]): Tensor {\n    throw new Error('Not yet implemented');\n  }\n\n  squaredDifference(a: Tensor, b: Tensor): Tensor {\n    throw new Error('Not yet implemented');\n  }\n\n  ceil<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  floor<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  round<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n\n  sign<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n\n  isNaN<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  isInf<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  isFinite<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n\n  pow<T extends Tensor>(a: T, b: Tensor): T {\n    throw new Error('Not yet implemented');\n  }\n  exp<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  expm1<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  log<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  log1p<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  sqrt<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  rsqrt<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n\n  square<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  reciprocal<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  relu<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  prelu<T extends Tensor>(x: T, a: T): T {\n    throw new Error('Not yet implemented');\n  }\n  elu<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  eluDer<T extends Tensor>(dy: T, y: T): T {\n    throw new Error('Not yet implemented');\n  }\n  selu<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  int<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n\n  clip<T extends Tensor>(x: T, min: number, max: number): T {\n    throw new Error('Not yet implemented');\n  }\n\n  abs<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  complexAbs<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n\n  sigmoid<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n\n  softplus<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n\n  sin<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  cos<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  tan<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n\n  asin<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  acos<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  atan<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  atan2<T extends Tensor>(a: T, b: T): T {\n    throw new Error('Not yet implemented');\n  }\n\n  sinh<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  cosh<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  tanh<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n\n  asinh<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  acosh<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n  atanh<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n\n  erf<T extends Tensor>(x: T): T {\n    throw new Error('Not yet implemented');\n  }\n\n  step<T extends Tensor>(x: T, alpha: number): T {\n    throw new Error('Not yet implemented');\n  }\n\n  fusedConv2d(\n      x: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo, bias?: Tensor4D,\n      activation?: Activation, preluActivationWeights?: Tensor): Tensor4D {\n    throw new Error('Not yet implemented');\n  }\n\n  conv2d(x: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    throw new Error('Not yet implemented');\n  }\n  conv2dDerInput(dy: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    throw new Error('Not yet implemented');\n  }\n  conv2dDerFilter(x: Tensor4D, dY: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    throw new Error('Not yet implemented');\n  }\n\n  depthwiseConv2D(input: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    throw new Error('Not yet implemented');\n  }\n  depthwiseConv2DDerInput(dy: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    throw new Error('Not yet implemented');\n  }\n  depthwiseConv2DDerFilter(x: Tensor4D, dY: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    throw new Error('Not yet implemented');\n  }\n  conv3d(x: Tensor5D, filter: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    throw new Error('Not yet implemented');\n  }\n  conv3dDerInput(dy: Tensor5D, filter: Tensor5D, convInfo: Conv3DInfo):\n      Tensor5D {\n    throw new Error('Not yet implemented');\n  }\n  conv3dDerFilter(x: Tensor5D, dY: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    throw new Error('Not yet implemented');\n  }\n  maxPool(x: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    throw new Error('Not yet implemented');\n  }\n  maxPoolBackprop(dy: Tensor4D, x: Tensor4D, y: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    throw new Error('Not yet implemented');\n  }\n  avgPool(x: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    throw new Error('Not yet implemented');\n  }\n  avgPoolBackprop(dy: Tensor4D, x: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    throw new Error('Not yet implemented');\n  }\n  avgPool3d(x: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    throw new Error('Not yet implemented');\n  }\n  avgPool3dBackprop(dy: Tensor5D, x: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    throw new Error('Not yet implemented');\n  }\n  maxPool3d(x: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    throw new Error('Not yet implemented');\n  }\n  maxPool3dBackprop(\n      dy: Tensor5D, x: Tensor5D, y: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    throw new Error('Not yet implemented');\n  }\n\n  reshape<T extends Tensor, R extends Rank>(x: T, shape: ShapeMap[R]):\n      Tensor<R> {\n    throw new Error('Not yet implemented');\n  }\n  cast<T extends Tensor>(x: T, dtype: DataType): T {\n    throw new Error('Not yet implemented');\n  }\n\n  tile<T extends Tensor>(x: T, reps: number[]): T {\n    throw new Error('Not yet implemented');\n  }\n\n  pad<T extends Tensor>(\n      x: T, paddings: Array<[number, number]>, constantValue: number): T {\n    throw new Error('Not yet implemented');\n  }\n\n  transpose<T extends Tensor>(x: T, perm: number[]): T {\n    throw new Error('Not yet implemented');\n  }\n\n  gather<T extends Tensor>(x: T, indices: Tensor1D, axis: number): T {\n    throw new Error('Not yet implemented');\n  }\n\n  gatherND(x: Tensor, indices: Tensor): Tensor {\n    throw new Error('Not yet implemented');\n  }\n\n  scatterND<R extends Rank>(\n      indices: Tensor, updates: Tensor, shape: ShapeMap[R]): Tensor<R> {\n    throw new Error('Not yet implemented');\n  }\n\n  batchToSpaceND<T extends Tensor>(\n      x: T, blockShape: number[], crops: number[][]): T {\n    throw new Error('Not yet implemented');\n  }\n\n  spaceToBatchND<T extends Tensor>(\n      x: T, blockShape: number[], paddings: number[][]): T {\n    throw new Error('Not yet implemented');\n  }\n\n  resizeBilinear(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    throw new Error('Not yet implemented');\n  }\n\n  resizeBilinearBackprop(dy: Tensor4D, x: Tensor4D, alignCorners: boolean):\n      Tensor4D {\n    throw new Error('Not yet implemented');\n  }\n\n  resizeNearestNeighbor(\n      x: Tensor4D, newHEight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    throw new Error('Not yet implemented');\n  }\n\n  resizeNearestNeighborBackprop(\n      dy: Tensor4D, x: Tensor4D, alignCorners: boolean): Tensor4D {\n    throw new Error('Not yet implemented');\n  }\n\n  batchNormalization(\n      x: Tensor4D, mean: Tensor4D|Tensor1D, variance: Tensor4D|Tensor1D,\n      varianceEpsilon: number, scale?: Tensor4D|Tensor1D,\n      offset?: Tensor4D|Tensor1D): Tensor4D {\n    throw new Error('Not yet implemented');\n  }\n\n  localResponseNormalization4D(\n      x: Tensor4D, radius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    throw new Error('Not yet implemented');\n  }\n\n  LRNGrad(\n      dy: Tensor4D, inputImage: Tensor4D, outputImage: Tensor4D, radius: number,\n      bias: number, alpha: number, beta: number): Tensor4D {\n    throw new Error('Not yet implemented');\n  }\n\n  multinomial(\n      logits: Tensor2D, normalized: boolean, numSamples: number,\n      seed: number): Tensor2D {\n    throw new Error('Not yet implemented');\n  }\n\n  oneHot(indices: Tensor1D, depth: number, onValue: number, offValue: number):\n      Tensor2D {\n    throw new Error('Not yet implemented');\n  }\n\n  cumsum(x: Tensor, axis: number, exclusive: boolean, reverse: boolean):\n      Tensor {\n    throw new Error('Not yet implemented');\n  }\n\n  nonMaxSuppression(\n      boxes: Tensor2D, scores: Tensor1D, maxOutputSize: number,\n      iouThreshold: number, scoreThreshold?: number): Tensor1D {\n    throw new Error('Not yet implemented');\n  }\n\n  fft(x: Tensor2D): Tensor2D {\n    throw new Error('Not yet implemented');\n  }\n  ifft(x: Tensor2D): Tensor2D {\n    throw new Error('Not yet implemented');\n  }\n  complex<T extends Tensor>(real: T, imag: T): T {\n    throw new Error('Not yet implemented');\n  }\n  real<T extends Tensor>(input: T): T {\n    throw new Error('Not yet implemented');\n  }\n  imag<T extends Tensor>(input: T): T {\n    throw new Error('Not yet implemented');\n  }\n\n  cropAndResize(\n      image: Tensor4D, boxes: Tensor2D, boxIndex: Tensor1D,\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number): Tensor4D {\n    throw new Error('Not yet implemented');\n  }\n\n  depthToSpace(x: Tensor4D, blockSize: number, dataFormat: string): Tensor4D {\n    throw new Error('Not yet implemented');\n  }\n\n  // Aligns with the \"SplitV\" kernel in TensorFlow.\n  split<T extends Tensor>(value: T, sizeSplits: number[], axis: number): T[] {\n    throw new Error('Not yet implemented');\n  }\n\n  sparseToDense<R extends Rank>(\n      sparseIndices: Tensor, sparseValues: Tensor, outputShape: ShapeMap[R],\n      defaultValue: Scalar): Tensor<R> {\n    throw new Error('Not yet implemented');\n  }\n\n  diag(x: Tensor): Tensor {\n    throw new Error('Not yet implemented');\n  }\n\n  fill<R extends Rank>(\n      shape: ShapeMap[R], value: number|string, dtype?: DataType): Tensor<R> {\n    throw new Error('Not yet implemented.');\n  }\n\n  onesLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    throw new Error('Not yet implemented');\n  }\n\n  zerosLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    throw new Error('Not yet implemented');\n  }\n\n  linspace(start: number, stop: number, num: number): Tensor1D {\n    throw new Error('Not yet implemented');\n  }\n\n  dispose(): void {\n    throw new Error('Not yet implemented');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Returns the dimensions in the input shape that are broadcasted to\n * produce the provided output shape.\n *\n * The returned dimensions are 0-indexed and sorted. An example:\n * inShape = [4, 1, 3]\n * outShape = [5, 4, 3, 3]\n * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.\n */\nexport function getBroadcastDims(\n    inShape: number[], outShape: number[]): number[] {\n  const inRank = inShape.length;\n  const dims: number[] = [];\n  for (let i = 0; i < inRank; i++) {\n    const dim = inRank - 1 - i;\n    const a = inShape[dim] || 1;\n    const b = outShape[outShape.length - 1 - i] || 1;\n    if (b > 1 && a === 1) {\n      dims.unshift(dim);\n    }\n  }\n  return dims;\n}\n\n/**\n * Returns the axes in the output space that should be reduced to produce\n * the input space.\n */\nexport function getReductionAxes(\n    inShape: number[], outShape: number[]): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < outShape.length; i++) {\n    const inDim = inShape[inShape.length - i - 1];\n    const outAxis = outShape.length - i - 1;\n    const outDim = outShape[outAxis];\n    if (inDim == null || (inDim === 1 && outDim > 1)) {\n      result.unshift(outAxis);\n    }\n  }\n  return result;\n}\n\nexport function assertAndGetBroadcastShape(\n    shapeA: number[], shapeB: number[]): number[] {\n  const result: number[] = [];\n  const l = Math.max(shapeA.length, shapeB.length);\n\n  for (let i = 0; i < l; i++) {\n    let a = shapeA[shapeA.length - i - 1];\n    if (a == null) {\n      a = 1;\n    }\n    let b = shapeB[shapeB.length - i - 1];\n    if (b == null) {\n      b = 1;\n    }\n    if (a === 1) {\n      result.unshift(b);\n    } else if (b === 1) {\n      result.unshift(a);\n    } else if (a !== b) {\n      const errMsg = `Operands could not be broadcast together with shapes ` +\n          `${shapeA} and ${shapeB}.`;\n      throw Error(errMsg);\n    } else {\n      result.unshift(a);\n    }\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as util from '../util';\n\nexport type PadInfo = {\n  top: number,\n  left: number,\n  right: number,\n  bottom: number,\n  type: string\n};\n\nexport type PadInfo3D = {\n  top: number,\n  left: number,\n  right: number,\n  bottom: number,\n  front: number,\n  back: number,\n  type: string\n};\n\n/**\n * Information about the forward pass of a convolution/pooling operation.\n * It includes input and output shape, strides, filter size and padding\n * information.\n */\nexport type Conv2DInfo = {\n  batchSize: number,\n  inHeight: number,\n  inWidth: number,\n  inChannels: number,\n  outHeight: number,\n  outWidth: number,\n  outChannels: number,\n  dataFormat: 'channelsFirst'|'channelsLast',\n  strideHeight: number,\n  strideWidth: number,\n  dilationHeight: number,\n  dilationWidth: number,\n  filterHeight: number,\n  filterWidth: number,\n  effectiveFilterHeight: number,\n  effectiveFilterWidth: number,\n  padInfo: PadInfo,\n  inShape: [number, number, number, number],\n  outShape: [number, number, number, number],\n  filterShape: [number, number, number, number]\n};\n\nexport function computePool2DInfo(\n    inShape: [number, number, number, number],\n    filterSize: [number, number]|number, strides: number|[number, number],\n    dilations: number|[number, number], pad: 'same'|'valid'|number,\n    roundingMode?: 'floor'|'round'|'ceil',\n    dataFormat: 'channelsFirst'|'channelsLast' = 'channelsLast'): Conv2DInfo {\n  const [filterHeight, filterWidth] = parseTupleParam(filterSize);\n\n  let filterShape: [number, number, number, number];\n  if (dataFormat === 'channelsLast') {\n    filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];\n  } else if (dataFormat === 'channelsFirst') {\n    filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  return computeConv2DInfo(\n      inShape, filterShape, strides, dilations, pad, roundingMode, false,\n      dataFormat);\n}\n\n/**\n * Computes the information for a forward pass of a pooling3D operation.\n */\nexport function computePool3DInfo(\n    inShape: [number, number, number, number, number],\n    filterSize: number|[number, number, number],\n    strides: number|[number, number, number],\n    dilations: number|[number, number, number], pad: 'same'|'valid'|number,\n    roundingMode?: 'floor'|'round'|'ceil',\n    dataFormat: 'NDHWC'|'NCDHW' = 'NDHWC'): Conv3DInfo {\n  const [filterDepth, filterHeight, filterWidth] = parse3TupleParam(filterSize);\n\n  let filterShape: [number, number, number, number, number];\n  let $dataFormat: 'channelsFirst'|'channelsLast';\n  if (dataFormat === 'NDHWC') {\n    $dataFormat = 'channelsLast';\n    filterShape =\n        [filterDepth, filterHeight, filterWidth, inShape[4], inShape[4]];\n  } else if (dataFormat === 'NCDHW') {\n    $dataFormat = 'channelsFirst';\n    filterShape =\n        [filterDepth, filterHeight, filterWidth, inShape[1], inShape[1]];\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  return computeConv3DInfo(\n      inShape, filterShape, strides, dilations, pad, false, $dataFormat,\n      roundingMode);\n}\n\n/**\n * Computes the information for a forward pass of a convolution/pooling\n * operation.\n */\nexport function computeConv2DInfo(\n    inShape: [number, number, number, number],\n    filterShape: [number, number, number, number],\n    strides: number|[number, number], dilations: number|[number, number],\n    pad: 'same'|'valid'|number, roundingMode?: 'floor'|'round'|'ceil',\n    depthwise = false,\n    dataFormat: 'channelsFirst'|'channelsLast' = 'channelsLast'): Conv2DInfo {\n  let [batchSize, inHeight, inWidth, inChannels] = [-1, -1, -1, -1];\n  if (dataFormat === 'channelsLast') {\n    [batchSize, inHeight, inWidth, inChannels] = inShape;\n  } else if (dataFormat === 'channelsFirst') {\n    [batchSize, inChannels, inHeight, inWidth] = inShape;\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  const [filterHeight, filterWidth, , filterChannels] = filterShape;\n  const [strideHeight, strideWidth] = parseTupleParam(strides);\n  const [dilationHeight, dilationWidth] = parseTupleParam(dilations);\n\n  const effectiveFilterHeight =\n      getEffectiveFilterSize(filterHeight, dilationHeight);\n  const effectiveFilterWidth =\n      getEffectiveFilterSize(filterWidth, dilationWidth);\n  const {padInfo, outHeight, outWidth} = getPadAndOutInfo(\n      pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight,\n      effectiveFilterWidth, roundingMode);\n\n  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n\n  let outShape: [number, number, number, number];\n  if (dataFormat === 'channelsFirst') {\n    outShape = [batchSize, outChannels, outHeight, outWidth];\n  } else if (dataFormat === 'channelsLast') {\n    outShape = [batchSize, outHeight, outWidth, outChannels];\n  }\n\n  return {\n    batchSize,\n    dataFormat,\n    inHeight,\n    inWidth,\n    inChannels,\n    outHeight,\n    outWidth,\n    outChannels,\n    padInfo,\n    strideHeight,\n    strideWidth,\n    filterHeight,\n    filterWidth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n    dilationHeight,\n    dilationWidth,\n    inShape,\n    outShape,\n    filterShape\n  };\n}\n\n/**\n * Information about the forward pass of a 3D convolution/pooling operation.\n * It includes input and output shape, strides, filter size and padding\n * information.\n */\nexport type Conv3DInfo = {\n  batchSize: number,\n  inDepth: number,\n  inHeight: number,\n  inWidth: number,\n  inChannels: number,\n  outDepth: number,\n  outHeight: number,\n  outWidth: number,\n  outChannels: number,\n  dataFormat: 'channelsFirst'|'channelsLast',\n  strideDepth: number,\n  strideHeight: number,\n  strideWidth: number,\n  dilationDepth: number,\n  dilationHeight: number,\n  dilationWidth: number,\n  filterDepth: number,\n  filterHeight: number,\n  filterWidth: number,\n  effectiveFilterDepth: number,\n  effectiveFilterHeight: number,\n  effectiveFilterWidth: number,\n  padInfo: PadInfo3D,\n  inShape: [number, number, number, number, number],\n  outShape: [number, number, number, number, number],\n  filterShape: [number, number, number, number, number]\n};\n\n/**\n * Computes the information for a forward pass of a 3D convolution/pooling\n * operation.\n */\nexport function computeConv3DInfo(\n    inShape: [number, number, number, number, number],\n    filterShape: [number, number, number, number, number],\n    strides: number|[number, number, number],\n    dilations: number|[number, number, number], pad: 'same'|'valid'|number,\n    depthwise = false,\n    dataFormat: 'channelsFirst'|'channelsLast' = 'channelsLast',\n    roundingMode?: 'floor'|'round'|'ceil'): Conv3DInfo {\n  let [batchSize, inDepth, inHeight, inWidth, inChannels] =\n      [-1, -1, -1, -1, -1];\n  if (dataFormat === 'channelsLast') {\n    [batchSize, inDepth, inHeight, inWidth, inChannels] = inShape;\n  } else if (dataFormat === 'channelsFirst') {\n    [batchSize, inChannels, inDepth, inHeight, inWidth] = inShape;\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  const [filterDepth, filterHeight, filterWidth, , filterChannels] =\n      filterShape;\n  const [strideDepth, strideHeight, strideWidth] = parse3TupleParam(strides);\n  const [dilationDepth, dilationHeight, dilationWidth] =\n      parse3TupleParam(dilations);\n\n  const effectiveFilterDepth =\n      getEffectiveFilterSize(filterDepth, dilationDepth);\n  const effectiveFilterHeight =\n      getEffectiveFilterSize(filterHeight, dilationHeight);\n  const effectiveFilterWidth =\n      getEffectiveFilterSize(filterWidth, dilationWidth);\n  const {padInfo, outDepth, outHeight, outWidth} = get3DPadAndOutInfo(\n      pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth,\n      effectiveFilterDepth, effectiveFilterHeight, effectiveFilterWidth,\n      roundingMode);\n\n  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n\n  let outShape: [number, number, number, number, number];\n  if (dataFormat === 'channelsFirst') {\n    outShape = [batchSize, outChannels, outDepth, outHeight, outWidth];\n  } else if (dataFormat === 'channelsLast') {\n    outShape = [batchSize, outDepth, outHeight, outWidth, outChannels];\n  }\n\n  return {\n    batchSize,\n    dataFormat,\n    inDepth,\n    inHeight,\n    inWidth,\n    inChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    outChannels,\n    padInfo,\n    strideDepth,\n    strideHeight,\n    strideWidth,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    effectiveFilterDepth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    inShape,\n    outShape,\n    filterShape\n  };\n}\n\nfunction computeOutputShape2D(\n    inShape: [number, number], fieldSize: number, stride: number,\n    zeroPad?: number, roundingMode?: 'floor'|'round'|'ceil'): [number, number] {\n  if (zeroPad == null) {\n    zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n  }\n  const inputRows = inShape[0];\n  const inputCols = inShape[1];\n\n  const outputRows = conditionalRound(\n      (inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  util.assert(\n      util.isInt(outputRows),\n      () => `The output # of rows (${outputRows}) must be an integer. ` +\n          `Change the stride and/or zero pad parameters`);\n\n  const outputCols = conditionalRound(\n      (inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  util.assert(\n      util.isInt(outputCols),\n      () => `The output # of columns (${outputCols}) must be an integer. ` +\n          `Change the stride and/or zero pad parameters`);\n\n  return [outputRows, outputCols];\n}\n\nfunction computeOutputShape4D(\n    inShape: [number, number, number, number], fieldSize: number,\n    outChannels: number, stride: number, zeroPad?: number,\n    roundingMode?: 'floor'|'round'|'ceil'): [number, number, number, number] {\n  if (zeroPad == null) {\n    zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n  }\n  const inputDepth = inShape[0];\n  const inputRows = inShape[1];\n  const inputCols = inShape[2];\n\n  const outputDepths = conditionalRound(\n      (inputDepth - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  util.assert(\n      util.isInt(outputDepths),\n      () => `The output # of depths (${outputDepths}) must be an integer. ` +\n          `Change the stride and/or zero pad parameters`);\n\n  const outputRows = conditionalRound(\n      (inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  util.assert(\n      util.isInt(outputRows),\n      () => `The output # of rows (${outputRows}) must be an integer. ` +\n          `Change the stride and/or zero pad parameters`);\n\n  const outputCols = conditionalRound(\n      (inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  util.assert(\n      util.isInt(outputCols),\n      () => `The output # of columns (${outputCols}) must be an integer. ` +\n          `Change the stride and/or zero pad parameters`);\n\n  return [outputDepths, outputRows, outputCols, outChannels];\n}\n\nexport function computeDefaultPad(\n    inputShape: [number, number]|[number, number, number, number],\n    fieldSize: number, stride: number, dilation = 1): number {\n  const effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);\n  return Math.floor(\n      (inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);\n}\n\nfunction parseTupleParam(param: number|number[]): [number, number, number] {\n  if (typeof param === 'number') {\n    return [param, param, param];\n  }\n  if (param.length === 2) {\n    return [param[0], param[1], 1];\n  }\n  return param as [number, number, number];\n}\n\nfunction parse3TupleParam(param: number|[number, number, number]):\n    [number, number, number] {\n  return typeof param === 'number' ? [param, param, param] : param;\n}\n\n/* See https://www.tensorflow.org/api_docs/python/tf/nn/atrous_conv2d\n * Atrous convolution is equivalent to standard convolution with upsampled\n * filters with effective_filter_height =\n * filter_height + (filter_height - 1) * (dilation - 1)\n * and effective_filter_width =\n * filter_width + (filter_width - 1) * (dilation - 1),\n * produced by inserting dilation - 1 zeros along consecutive elements across\n * the filters' spatial dimensions.\n * When there is a dilation, this converts a filter dimension to the\n * effective filter dimension, so it can be used in a standard convolution.\n */\nfunction getEffectiveFilterSize(filterSize: number, dilation: number) {\n  if (dilation <= 1) {\n    return filterSize;\n  }\n\n  return filterSize + (filterSize - 1) * (dilation - 1);\n}\n\nfunction getPadAndOutInfo(\n    pad: 'same'|'valid'|number, inHeight: number, inWidth: number,\n    strideHeight: number, strideWidth: number, filterHeight: number,\n    filterWidth: number, roundingMode?: 'floor'|'round'|'ceil'):\n    {padInfo: PadInfo, outHeight: number, outWidth: number} {\n  let padInfo: PadInfo;\n  let outHeight: number;\n  let outWidth: number;\n\n  if (typeof pad === 'number') {\n    const padType = (pad === 0) ? 'VALID' : 'NUMBER';\n    padInfo = {top: pad, bottom: pad, left: pad, right: pad, type: padType};\n    const outShape = computeOutputShape2D(\n        [inHeight, inWidth], filterHeight, strideHeight, pad, roundingMode);\n    outHeight = outShape[0];\n    outWidth = outShape[1];\n  } else if (pad === 'same') {\n    outHeight = Math.ceil(inHeight / strideHeight);\n    outWidth = Math.ceil(inWidth / strideWidth);\n    const padAlongHeight =\n        Math.max(0, (outHeight - 1) * strideHeight + filterHeight - inHeight);\n    const padAlongWidth =\n        Math.max(0, (outWidth - 1) * strideWidth + filterWidth - inWidth);\n    const top = Math.floor(padAlongHeight / 2);\n    const bottom = padAlongHeight - top;\n    const left = Math.floor(padAlongWidth / 2);\n    const right = padAlongWidth - left;\n    padInfo = {top, bottom, left, right, type: 'SAME'};\n  } else if (pad === 'valid') {\n    padInfo = {top: 0, bottom: 0, left: 0, right: 0, type: 'VALID'};\n    outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n    outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n  } else {\n    throw Error(`Unknown padding parameter: ${pad}`);\n  }\n  return {padInfo, outHeight, outWidth};\n}\n\nfunction get3DPadAndOutInfo(\n    pad: 'same'|'valid'|number, inDepth: number, inHeight: number,\n    inWidth: number, strideDepth: number, strideHeight: number,\n    strideWidth: number, filterDepth: number, filterHeight: number,\n    filterWidth: number, roundingMode?: 'floor'|'round'|'ceil'): {\n  padInfo: PadInfo3D,\n  outDepth: number,\n  outHeight: number,\n  outWidth: number\n} {\n  let padInfo: PadInfo3D;\n  let outDepth: number;\n  let outHeight: number;\n  let outWidth: number;\n\n  if (typeof pad === 'number') {\n    const padType = (pad === 0) ? 'VALID' : 'NUMBER';\n    padInfo = {\n      top: pad,\n      bottom: pad,\n      left: pad,\n      right: pad,\n      front: pad,\n      back: pad,\n      type: padType\n    };\n    const outShape = computeOutputShape4D(\n        [inDepth, inHeight, inWidth, 1], filterDepth, 1, strideDepth, pad,\n        roundingMode);\n    outDepth = outShape[0];\n    outHeight = outShape[1];\n    outWidth = outShape[2];\n  } else if (pad === 'same') {\n    outDepth = Math.ceil(inDepth / strideDepth);\n    outHeight = Math.ceil(inHeight / strideHeight);\n    outWidth = Math.ceil(inWidth / strideWidth);\n    const padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;\n    const padAlongHeight =\n        (outHeight - 1) * strideHeight + filterHeight - inHeight;\n    const padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;\n    const front = Math.floor(padAlongDepth / 2);\n    const back = padAlongDepth - front;\n    const top = Math.floor(padAlongHeight / 2);\n    const bottom = padAlongHeight - top;\n    const left = Math.floor(padAlongWidth / 2);\n    const right = padAlongWidth - left;\n\n    padInfo = {top, bottom, left, right, front, back, type: 'SAME'};\n  } else if (pad === 'valid') {\n    padInfo = {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      front: 0,\n      back: 0,\n      type: 'VALID'\n    };\n    outDepth = Math.ceil((inDepth - filterDepth + 1) / strideDepth);\n    outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n    outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n  } else {\n    throw Error(`Unknown padding parameter: ${pad}`);\n  }\n  return {padInfo, outDepth, outHeight, outWidth};\n}\n\n/**\n * Rounds a value depending on the rounding mode\n * @param value\n * @param roundingMode\n */\nfunction conditionalRound(\n    value: number, roundingMode?: 'floor'|'round'|'ceil') {\n  if (!roundingMode) {\n    return value;\n  }\n  switch (roundingMode) {\n    case 'round':\n      // used for Caffe Conv\n      return Math.round(value);\n    case 'ceil':\n      // used for Caffe Pool\n      return Math.ceil(value);\n    case 'floor':\n      return Math.floor(value);\n    default:\n      throw new Error(`Unknown roundingMode ${roundingMode}`);\n  }\n}\n\nexport function tupleValuesAreOne(param: number|number[]): boolean {\n  const [dimA, dimB, dimC] = parseTupleParam(param);\n  return dimA === 1 && dimB === 1 && dimC === 1;\n}\n\nexport function eitherStridesOrDilationsAreOne(\n    strides: number|number[], dilations: number|number[]): boolean {\n  return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);\n}\n\n/**\n * Convert Conv2D dataFormat from 'NHWC'|'NCHW' to\n *    'channelsLast'|'channelsFirst'\n * @param dataFormat in 'NHWC'|'NCHW' mode\n * @return dataFormat in 'channelsLast'|'channelsFirst' mode\n * @throws unknown dataFormat\n */\nexport function convertConv2DDataFormat(dataFormat: 'NHWC'|'NCHW'):\n    'channelsLast'|'channelsFirst' {\n  if (dataFormat === 'NHWC') {\n    return 'channelsLast';\n  } else if (dataFormat === 'NCHW') {\n    return 'channelsFirst';\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {scalar, tensor1d, zeros} from '../ops/tensor_ops';\nimport {Tensor} from '../tensor';\nimport {Rank} from '../types';\nimport {DataType, ShapeMap} from '../types';\nimport {hasEncodingLoss, makeZerosTypedArray} from '../util';\n\nimport {KernelBackend} from './backend';\n\n// Utilities needed by backend consumers of tf-core.\nexport * from '../ops/axis_util';\nexport * from '../ops/broadcast_util';\nexport * from '../ops/concat_util';\nexport * from '../ops/conv_util';\nexport {Activation} from '../ops/fused_util';\n\nexport {BackendValues, TypedArray, upcastType, PixelData} from '../types';\nexport {MemoryInfo, TimingInfo} from '../engine';\n\nexport function castTensor<T extends Tensor>(\n    x: T, dtype: DataType, backend: KernelBackend): T {\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return x.clone();\n    }\n    const zerosTensor = zeros(x.shape);\n    const floatX = x.toFloat();\n    const result = backend.complex(floatX, zerosTensor);\n    zerosTensor.dispose();\n    floatX.dispose();\n    return result as T;\n  }\n\n  if (!hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    return Tensor.make(x.shape, {dataId: x.dataId}, dtype);\n  }\n  if (x.dtype === 'complex64') {\n    const real = backend.real(x);\n    const result = real.cast(dtype);\n    real.dispose();\n    return result;\n  }\n  if (dtype === 'int32') {\n    return backend.int(x);\n  } else if (dtype === 'bool') {\n    const zero = scalar(0, x.dtype);\n    const result = backend.notEqual(x, zero) as T;\n    zero.dispose();\n    return result;\n  } else {\n    throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n  }\n}\n\nexport function reshapeTensor<T extends Tensor, R extends Rank>(\n    x: T, shape: ShapeMap[R]): Tensor<R> {\n  return Tensor.make(shape, {dataId: x.dataId}, x.dtype);\n}\n\nexport function linspaceImpl(start: number, stop: number, num: number) {\n  const step = (stop - start) / (num - 1);\n\n  const values = makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return tensor1d(values, 'float32');\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray} from '../types';\n/**\n * Merges real and imaginary Float32Arrays into a single complex Float32Array.\n *\n * The memory layout is interleaved as follows:\n * real: [r0, r1, r2]\n * imag: [i0, i1, i2]\n * complex: [r0, i0, r1, i1, r2, i2]\n *\n * This is the inverse of splitRealAndImagArrays.\n *\n * @param real The real values of the complex tensor values.\n * @param imag The imag values of the complex tensor values.\n * @returns A complex tensor as a Float32Array with merged values.\n */\nexport function mergeRealAndImagArrays(\n    real: Float32Array, imag: Float32Array): Float32Array {\n  if (real.length !== imag.length) {\n    throw new Error(\n        `Cannot merge real and imag arrays of different lengths. real:` +\n        `${real.length}, imag: ${imag.length}.`);\n  }\n  const result = new Float32Array(real.length * 2);\n  for (let i = 0; i < result.length; i += 2) {\n    result[i] = real[i / 2];\n    result[i + 1] = imag[i / 2];\n  }\n  return result;\n}\n\n/**\n * Splits a complex Float32Array into real and imag parts.\n *\n * The memory layout is interleaved as follows:\n * complex: [r0, i0, r1, i1, r2, i2]\n * real: [r0, r1, r2]\n * imag: [i0, i1, i2]\n *\n * This is the inverse of mergeRealAndImagArrays.\n *\n * @param complex The complex tensor values.\n * @returns An object with real and imag Float32Array components of the complex\n *     tensor.\n */\nexport function splitRealAndImagArrays(complex: Float32Array):\n    {real: Float32Array, imag: Float32Array} {\n  const real = new Float32Array(complex.length / 2);\n  const imag = new Float32Array(complex.length / 2);\n  for (let i = 0; i < complex.length; i += 2) {\n    real[i / 2] = complex[i];\n    imag[i / 2] = complex[i + 1];\n  }\n  return {real, imag};\n}\n\n/**\n * Extracts even indexed complex values in the given array.\n * @param complex The complex tensor values\n */\nexport function complexWithEvenIndex(complex: Float32Array):\n    {real: Float32Array, imag: Float32Array} {\n  const len = Math.ceil(complex.length / 4);\n  const real = new Float32Array(len);\n  const imag = new Float32Array(len);\n  for (let i = 0; i < complex.length; i += 4) {\n    real[Math.floor(i / 4)] = complex[i];\n    imag[Math.floor(i / 4)] = complex[i + 1];\n  }\n  return {real, imag};\n}\n\n/**\n * Extracts odd indexed comple values in the given array.\n * @param complex The complex tensor values\n */\nexport function complexWithOddIndex(complex: Float32Array):\n    {real: Float32Array, imag: Float32Array} {\n  const len = Math.floor(complex.length / 4);\n  const real = new Float32Array(len);\n  const imag = new Float32Array(len);\n  for (let i = 2; i < complex.length; i += 4) {\n    real[Math.floor(i / 4)] = complex[i];\n    imag[Math.floor(i / 4)] = complex[i + 1];\n  }\n  return {real, imag};\n}\n\n/**\n * Get the map representing a complex value in the given array.\n * @param complex The complex tensor values.\n * @param index An index of the target complex value.\n */\nexport function getComplexWithIndex(\n    complex: Float32Array, index: number): {real: number, imag: number} {\n  const real = complex[index * 2];\n  const imag = complex[index * 2 + 1];\n  return {real, imag};\n}\n\n/**\n * Insert a given complex value into the TypedArray.\n * @param data The array in which the complex value is inserted.\n * @param c The complex value to be inserted.\n * @param index An index of the target complex value.\n */\nexport function assignToTypedArray(\n    data: TypedArray, real: number, imag: number, index: number) {\n  data[index * 2] = real;\n  data[index * 2 + 1] = imag;\n}\n\n/**\n * Make the list of exponent terms used by FFT.\n */\nexport function exponents(\n    n: number, inverse: boolean): {real: Float32Array, imag: Float32Array} {\n  const real = new Float32Array(n / 2);\n  const imag = new Float32Array(n / 2);\n  for (let i = 0; i < Math.ceil(n / 2); i++) {\n    const x = (inverse ? 2 : -2) * Math.PI * (i / n);\n    real[i] = Math.cos(x);\n    imag[i] = Math.sin(x);\n  }\n  return {real, imag};\n}\n\n/**\n * Make the exponent term used by FFT.\n */\nexport function exponent(\n    k: number, n: number, inverse: boolean): {real: number, imag: number} {\n  const x = (inverse ? 2 : -2) * Math.PI * (k / n);\n  const real = Math.cos(x);\n  const imag = Math.sin(x);\n  return {real, imag};\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Implementation of the NonMaxSuppression kernel shared between webgl and cpu.\n */\n\nimport {tensor1d} from '../ops/tensor_ops';\nimport {Tensor1D} from '../tensor';\nimport {TypedArray} from '../types';\n\nexport function nonMaxSuppressionImpl(\n    boxes: TypedArray, scores: TypedArray, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number): Tensor1D {\n  const candidates = Array.from(scores)\n                         .map((score, boxIndex) => ({score, boxIndex}))\n                         .filter(c => c.score > scoreThreshold)\n                         .sort((c1, c2) => c2.score - c1.score);\n\n  const selected: number[] = [];\n\n  for (let i = 0; i < candidates.length; i++) {\n    const {score, boxIndex} = candidates[i];\n    if (score < scoreThreshold) {\n      break;\n    }\n\n    let ignoreCandidate = false;\n    for (let j = selected.length - 1; j >= 0; --j) {\n      const iou = intersectionOverUnion(boxes, boxIndex, selected[j]);\n      if (iou >= iouThreshold) {\n        ignoreCandidate = true;\n        break;\n      }\n    }\n\n    if (!ignoreCandidate) {\n      selected.push(boxIndex);\n      if (selected.length >= maxOutputSize) {\n        break;\n      }\n    }\n  }\n\n  return tensor1d(selected, 'int32');\n}\n\nfunction intersectionOverUnion(boxes: TypedArray, i: number, j: number) {\n  const iCoord = boxes.subarray(i * 4, i * 4 + 4);\n  const jCoord = boxes.subarray(j * 4, j * 4 + 4);\n  const yminI = Math.min(iCoord[0], iCoord[2]);\n  const xminI = Math.min(iCoord[1], iCoord[3]);\n  const ymaxI = Math.max(iCoord[0], iCoord[2]);\n  const xmaxI = Math.max(iCoord[1], iCoord[3]);\n  const yminJ = Math.min(jCoord[0], jCoord[2]);\n  const xminJ = Math.min(jCoord[1], jCoord[3]);\n  const ymaxJ = Math.max(jCoord[0], jCoord[2]);\n  const xmaxJ = Math.max(jCoord[1], jCoord[3]);\n  const areaI = (ymaxI - yminI) * (xmaxI - xminI);\n  const areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);\n  if (areaI <= 0 || areaJ <= 0) {\n    return 0.0;\n  }\n  const intersectionYmin = Math.max(yminI, yminJ);\n  const intersectionXmin = Math.max(xminI, xminJ);\n  const intersectionYmax = Math.min(ymaxI, ymaxJ);\n  const intersectionXmax = Math.min(xmaxI, xmaxJ);\n  const intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0.0) *\n      Math.max(intersectionXmax - intersectionXmin, 0.0);\n  return intersectionArea / (areaI + areaJ - intersectionArea);\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\n\n/** Shared implementation of the split kernel across WebGL and CPU. */\nexport function split<T extends Tensor>(\n    x: T, sizeSplits: number[], axis: number): T[] {\n  const begin = new Array(x.rank).fill(0);\n  const size = x.shape.slice();\n  return sizeSplits.map(s => {\n    size[axis] = s;\n    const slice = x.slice(begin, size);\n    begin[axis] += s;\n    return slice;\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nimport {buffer} from '../ops/array_ops';\nimport {Tensor, TensorBuffer} from '../tensor';\nimport {DataType, Rank} from '../types';\n\nexport function tile<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>, reps: number[]): Tensor<R> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let i = 0; i < originalLoc.length; i++) {\n      originalLoc[i] = newLoc[i] % xBuf.shape[i];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result.toTensor() as Tensor<R>;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {tensor} from '../ops/tensor_ops';\nimport {Tensor} from '../tensor';\nimport {NumericDataType, TypedArray} from '../types';\nimport {getTypedArrayFromDType} from '../util';\n\nexport function topkImpl<T extends Tensor>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean): [T, T] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n    const valAndInd: Array<{value: number, index: number}> = [];\n    for (let i = 0; i < vals.length; i++) {\n      valAndInd.push({value: vals[i], index: i});\n    }\n    valAndInd.sort((a, b) => b.value - a.value);\n\n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n  return [\n    tensor(allTopKVals, outputShape, xDtype) as T,\n    tensor(allTopKIndices, outputShape, 'int32') as T\n  ];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the Where kernel shared between cpu and webgl */\n\nimport {buffer} from '../ops/array_ops';\nimport {Tensor2D} from '../tensor';\nimport {TypedArray} from '../types';\n\nexport function whereImpl(condShape: number[], condVals: TypedArray): Tensor2D {\n  const indices = [];\n  for (let i = 0; i < condVals.length; i++) {\n    if (condVals[i]) {\n      indices.push(i);\n    }\n  }\n\n  const inBuffer = buffer(condShape, 'int32');\n\n  const out = buffer([indices.length, condShape.length], 'int32');\n  for (let i = 0; i < indices.length; i++) {\n    const loc = inBuffer.indexToLoc(indices[i]);\n    const offset = i * condShape.length;\n    out.values.set(loc, offset);\n  }\n  return out.toTensor() as Tensor2D;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  usesPackedTextures = true;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ReduceInfo} from '../../ops/reduce_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ArgMinMaxProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(reduceInfo: ReduceInfo, op: 'max'|'min', firstPass: boolean) {\n    const windowSize = reduceInfo.windowSize;\n    const batchSize = reduceInfo.batchSize;\n    const inSize = reduceInfo.inSize;\n    const outSize = Math.ceil(inSize / windowSize);\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    this.outputShape = [batchSize, outSize];\n    const compOp = (op === 'max') ? '>' : '<';\n    const indexSnippet = firstPass ?\n        'inOffset + i;' :\n        'round(getBestIndicesA(batch, inOffset + i));';\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENV} from '../../environment';\n\nexport type GLSL = {\n  version: string,\n  attribute: string,\n  varyingVs: string,\n  varyingFs: string,\n  texture2D: string,\n  output: string,\n  defineOutput: string,\n  defineSpecialNaN: string,\n  defineSpecialInf: string,\n  defineRound: string\n};\n\nexport function getGlslDifferences(): GLSL {\n  let version: string;\n  let attribute: string;\n  let varyingVs: string;\n  let varyingFs: string;\n  let texture2D: string;\n  let output: string;\n  let defineOutput: string;\n  let defineSpecialNaN: string;\n  let defineSpecialInf: string;\n  let defineRound: string;\n\n  if (ENV.getNumber('WEBGL_VERSION') === 2) {\n    version = '#version 300 es';\n    attribute = 'in';\n    varyingVs = 'out';\n    varyingFs = 'in';\n    texture2D = 'texture';\n    output = 'outputColor';\n    defineOutput = 'out vec4 outputColor;';\n    defineSpecialNaN = `\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 0. || val == 0.) ? false : true;\n      }\n    `;\n    // In webgl 2 we do not need to specify a custom isinf so there is no\n    // need for a special INFINITY constant.\n    defineSpecialInf = ``;\n    defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  } else {\n    version = '';\n    attribute = 'attribute';\n    varyingVs = 'varying';\n    varyingFs = 'varying';\n    texture2D = 'texture2D';\n    output = 'gl_FragColor';\n    defineOutput = '';\n    defineSpecialNaN = `\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n    `;\n    defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n    defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  }\n\n  return {\n    version,\n    attribute,\n    varyingVs,\n    varyingFs,\n    texture2D,\n    output,\n    defineOutput,\n    defineSpecialNaN,\n    defineSpecialInf,\n    defineRound\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as util from '../../util';\n\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nfunction buildVec(x: string[]): string {\n  if (x.length === 1) {\n    return `${x[0]}`;\n  }\n  return `vec${x.length}(${x.join(',')})`;\n}\n\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x: string[], y: string[]): string {\n  if (x.length !== y.length) {\n    throw new Error(\n        `Vectors to be dotted must be of the same length -` +\n        `got ${x.length} and ${y.length}`);\n  }\n\n  const slices: string[] = [];\n  const nearestVec4 = Math.floor(x.length / 4);\n  const nearestVec4Remainder = x.length % 4;\n\n  for (let i = 0; i < nearestVec4; i++) {\n    const xSlice = x.slice(i * 4, i * 4 + 4);\n    const ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  if (nearestVec4Remainder !== 0) {\n    let xSlice = x.slice(nearestVec4 * 4);\n    let ySlice = y.slice(nearestVec4 * 4);\n    if (xSlice.length === 1) {\n      xSlice = xSlice.map(d => `float(${d})`);\n      ySlice = ySlice.map(d => `float(${d})`);\n    }\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  return slices.map((d, i) => `dot(${d})`).join('+');\n}\n\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape: [number, number, number]): string {\n  const strides = util.computeStrides(shape).map(d => d.toString());\n\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\n\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getBroadcastDims} from '../../ops/broadcast_util';\nimport * as util from '../../util';\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo, userCode: string,\n    usesPackedTextures: boolean): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n  });\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet =\n      inputsInfo\n          .map(x => getInputSamplingSnippet(x, outputShape, usesPackedTextures))\n          .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet =\n        getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet =\n        getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (usesPackedTextures) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(inInfo: InputInfo): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo);\n    case 1:\n      return getSampler1D(inInfo);\n    case 2:\n      return getSampler2D(inInfo);\n    case 3:\n      return getSampler3D(inInfo);\n    case 4:\n      return getSampler4D(inInfo);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(inInfo: InputInfo): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo);\n    case 2:\n      return getPackedSampler2D(inInfo);\n    case 3:\n      return getPackedSampler3D(inInfo);\n    default:\n      return getPackedSamplerND(inInfo);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo,\n    usesPackedTextures = false): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo);\n  } else {\n    res += getSamplerFromInInfo(inInfo);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number]): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(outShape as [number], outTexShape);\n    case 2:\n      return getOutputPacked2DCoords(outShape as [number, number], outTexShape);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape);\n    default:\n      return getOutputPackedNDCoords(outShape, outTexShape);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number]): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(outShape as [number], outTexShape);\n    case 2:\n      return getOutput2DCoords(outShape as [number, number], outTexShape);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    #define isnan(value) isnan_custom(value)\n    ${glsl.defineSpecialNaN}\n    bvec4 isnan_custom(vec4 val) {\n      return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n    }\n\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number]): string {\n  if (texShape[0] === 1) {\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number]): string {\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number]): string {\n  if (util.arraysEqual(shape, texShape)) {\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const glsl = getGlslDifferences();\n\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n  const glsl = getGlslDifferences();\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nfunction squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {assert} from '../../util';\nimport {getChannels} from '../packing_util';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ArgMinMaxPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  usesPackedTextures = true;\n\n  constructor(\n      shape: number[], windowSize: number, op: 'max'|'min',\n      firstPass: boolean) {\n    assert(\n        shape.length > 2,\n        () => `Packed arg${\n            op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1];  // e.g. \".b\" for rank 3.\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords =\n        getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords =\n        getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords =\n        getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords =\n        getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n\n    const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Conv2DInfo, Conv3DInfo} from '../../ops/conv_util';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AvgPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class AvgPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as broadcast_util from '../../ops/broadcast_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    broadcast_util.assertAndGetBroadcastShape(xShape, meanShape);\n    broadcast_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = '0.0';\n    if (offsetShape != null) {\n      broadcast_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = '1.0';\n    if (scaleShape != null) {\n      broadcast_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as broadcast_util from '../../ops/broadcast_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  usesPackedTextures = true;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    broadcast_util.assertAndGetBroadcastShape(xShape, meanShape);\n    broadcast_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = 'vec4(0.0)';\n    if (offsetShape != null) {\n      broadcast_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = 'vec4(1.0)';\n    if (scaleShape != null) {\n      broadcast_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as broadcast_util from '../../ops/broadcast_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nexport const COMPLEX_MULTIPLY = {\n  REAL: 'return areal * breal - aimag * bimag;',\n  IMAG: 'return areal * bimag + aimag * breal;'\n};\n\nexport class BinaryOpComplexProgram implements GPGPUProgram {\n  variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape =\n        broadcast_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as broadcast_util from '../../ops/broadcast_util';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nconst CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const ADD = 'return a + b;';\nexport const SUB = 'return a - b;';\nexport const MUL = 'return a * b;';\n\n// Without the equality check div produces 0.9999 for a = b, which when\n// floored can cause errors.\nexport const DIV = `\nif (b == 0.0) {\n  return NAN;\n}\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;`;\n\n// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nexport const INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\n\nexport const POW = `\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\n\nexport const EQUAL = `return float(a == b);`;\n\nexport const NOT_EQUAL = `return float(a != b);`;\n\nexport const LESS = `return float(a < b);`;\n\nexport const LESS_EQUAL = `return float(a <= b);`;\n\nexport const GREATER = `return float(a > b);`;\n\nexport const GREATER_EQUAL = `return float(a >= b);`;\n\nexport const LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\n\nexport const LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\n\nexport const MAX = CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\nexport const MIN = CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\nexport const MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\n\nexport const ATAN2 = CHECK_NAN_SNIPPET + `\n  return atan(a, b);\n`;\n\nexport const ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;\n\nexport const PRELU = `return (a < 0.) ? b * a : a;`;\n\nexport class BinaryOpProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape =\n        broadcast_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as broadcast_util from '../../ops/broadcast_util';\nimport {sizeFromShape} from '../../util';\nimport {getChannels} from '../packing_util';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nconst CHECK_NAN_SNIPPET = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n\n// We do the same as in ./binaryop_gpu, with vec4 and ivec4.\n// On Linux, the vectorized implementation produces NaNs when a and b are 0.\nexport const DIV = `\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(b.x == 0.0) {\n    result.x = NAN;\n  } else if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(b.y == 0.0) {\n    result.y = NAN;\n  } else if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(b.z == 0.0) {\n    result.z = NAN;\n  } else if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(b.w == 0.0) {\n    result.w = NAN;\n  } else if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n`;\n\nexport const INT_DIV = `\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n`;\n\nexport const POW = `\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const PRELU = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const ATAN2 = `\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const EQUAL = `\n  return vec4(equal(a, b));\n`;\n\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\n\nexport const LESS = `\n  return vec4(lessThan(a, b));\n`;\n\nexport const LESS_EQUAL = `\n  return vec4(lessThanEqual(a, b));\n`;\n\nexport const GREATER = `\n  return vec4(greaterThan(a, b));\n`;\n\nexport const GREATER_EQUAL = `\n  return vec4(greaterThanEqual(a, b));\n`;\n\nexport const LOGICAL_AND = `\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n`;\n\nexport const LOGICAL_OR = `\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n`;\n\nexport const MAX = `\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const MIN = `\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const MOD = `\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport class BinaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  supportsBroadcasting = true;\n  usesPackedTextures = true;\n\n  constructor(\n      op: string, aShape: number[], bShape: number[],\n      checkOutOfBounds = false) {\n    this.outputShape =\n        broadcast_util.assertAndGetBroadcastShape(aShape, bShape);\n    const rank = this.outputShape.length;\n    let checkOutOfBoundsString = '';\n    if (checkOutOfBounds) {\n      if (rank === 0 || sizeFromShape(this.outputShape) === 1) {\n        checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n      } else {\n        const dtype = getCoordsDataType(rank);\n        checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n        if (rank === 1) {\n          checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n        } else {\n          const channels = getChannels('coords', rank);\n          checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n        }\n      }\n    }\n\n    this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ClipProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  // Caching uniform locations for speed.\n  minLoc: WebGLUniformLocation;\n  maxLoc: WebGLUniformLocation;\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(min: number, max: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.minLoc == null) {\n        this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');\n        this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');\n      }\n      gpgpu.gl.uniform1f(this.minLoc, min);\n      gpgpu.gl.uniform1f(this.maxLoc, max);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ClipPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  usesPackedTextures = true;\n  userCode: string;\n  outputShape: number[];\n\n  // Caching uniform locations for speed.\n  minLoc: WebGLUniformLocation;\n  maxLoc: WebGLUniformLocation;\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(min: number, max: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.minLoc == null) {\n        this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');\n        this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');\n      }\n      gpgpu.gl.uniform1f(this.minLoc, min);\n      gpgpu.gl.uniform1f(this.maxLoc, max);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ComplexAbsProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as concat_util from '../../ops/concat_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ConcatProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n  constructor(shapes: Array<[number, number]>) {\n    this.outputShape = concat_util.computeOutShape(shapes, 1 /* axis */);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][1];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n    }\n\n    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      snippets.push(\n          `else if (yC < ${offsets[i]}) ` +\n          `setOutput(getT${i}(yR, yC-${shift}));`);\n    }\n    const lastIndex = offsets.length;\n    const lastShift = offsets[offsets.length - 1];\n    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as concat_util from '../../ops/concat_util';\nimport {getChannels} from '../packing_util';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ConcatPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  usesPackedTextures = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(shapes: number[][], axis: number) {\n    this.outputShape = concat_util.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n\n    const channel = channels[axis];\n    const lastChannels = 'vec2(' + channels.slice(-2).join() + ')';\n    const allChannels = channels.join();\n\n    let getValueSnippet = `if (${channel} < ${offsets[0]})\n          return getChannel(getT0(${allChannels}), ${lastChannels});`;\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      getValueSnippet += `\n        else if (${channel} < ${offsets[i]}) {\n          ${channel} -= ${shift};\n          return getChannel(getT${i}(${allChannels}), ${lastChannels});\n        }`;\n    }\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n        else {\n          ${channel} -= ${shift};\n          return getChannel(getT${lastIndex}(${allChannels}), ${lastChannels});\n        }`;\n\n    this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n        if (++${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n        if (++${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            --${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Conv2DInfo, Conv3DInfo} from '../../ops/conv_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              if (${isChannelsLast}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv3DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padFront = filterDepth - 1 - convInfo.padInfo.front;\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Conv2DInfo} from '../../ops/conv_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class DepthwiseConv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Conv2DInfo, Conv3DInfo} from '../../ops/conv_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: Conv2DInfo, addBias = false, activation: string = null,\n      hasPreluActivationWeights = false) {\n    this.outputShape = convInfo.outShape;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivationWeights) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nexport class Conv3DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv3DInfo) {\n    this.outputShape = convInfo.outShape;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n\n    this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${\n        strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Conv2DInfo} from '../../ops/conv_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv2DInfo) {\n    this.outputShape = convInfo.outShape;\n\n    const xNumRows = convInfo.inHeight;\n    const xNumCols = convInfo.inWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${xNumRows}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${xNumCols}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Conv2DInfo} from '../../ops/conv_util';\nimport * as util from '../../util';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConvPacked2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  usesPackedTextures = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv2DInfo) {\n    this.outputShape = convInfo.outShape;\n\n    const xNumRows = convInfo.inHeight;\n    const xNumCols = convInfo.inWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n\n    let mainLoop = `int xR; int xC; int xCOffset;`;\n\n    for (let r = 0; r < filterHeight; r++) {\n      for (let c = 0; c < filterWidth; c++) {\n        mainLoop += `\n          vec4 xTexelR${r}C${c * 2} = vec4(0.);\n          vec4 wR${r}C${c} = vec4(0.);\n          vec4 xR${r}C${c} = vec4(0.);`;\n      }\n    }\n\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    for (let r = 0; r < filterHeight; r++) {\n      for (let texelC = 0; texelC < texelsAcross; texelC++) {\n        const c = texelC * 2;\n\n        mainLoop += `\n          xR = xRCorner + ${r * dilationHeight};\n          xC = xCCorner + ${c * dilationWidth};\n        `;\n\n        if (strideWidth === 1) {\n          if (c < filterWidth) {\n            // If padding is odd, the outer texels have to be composed.\n            if (padLeft % 2 === 1) {\n              // TODO: Ensure vec4 previous does not result in redundant sample,\n              // and avoid setting xTexelRC's that exceed the boundary in the\n              // first place rather than resetting them to vec4(0)).\n\n              // To compute xCOffset:\n              // - If padding is odd, we must add 1 to ensure we ask for an\n              // even-numbered row.\n              // - We subtract 2 to access the previous texel.\n\n              mainLoop += `\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${\n                  xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${\n                  xNumCols}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n                  xR${r}C${c} = vec4(previous.zw, xTexelR${r}C${c}.xy);\n                } else {\n                  xR${r}C${c} = vec4(0, 0, xTexelR${r}C${c}.xy);\n                }\n              `;\n            } else {\n              // Padding is even, so xRC corresponds to a single texel.\n              mainLoop += `\n                if(xR >= 0 && xR < ${xNumRows} && xC >= 0 && xC < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xR${r}C${c} = xTexelR${r}C${c};\n              `;\n            }\n\n            if (c + 1 < filterWidth) {\n              // If dilation is even, the second entry should match the first\n              // (either both are composed or both are single samples). But if\n              // dilation is odd, then the second entry should be the opposite\n              // of the first (if the first is composed, the second is a single\n              // sample, and vice versa.)\n\n              const nextTexelOffset = padLeft % 2 === 0 ?\n                  util.nearestLargerEven(dilationWidth) :\n                  dilationWidth;\n\n              if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                  (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n                mainLoop += `\n                  xCOffset = xC + ${padLeft % 2} + ${nextTexelOffset};\n\n                  if(xR >= 0 && xR < ${xNumRows} &&\n                    xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `;\n\n                // If dilation > 1 then the xRC's will not be able to share any\n                // values, so each xRC will require two unique calls to getX.\n                if (dilationWidth > 1) {\n                  mainLoop += `\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${xNumRows} &&\n                      xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                      xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${r}C${c} = vec4(0.);\n                    }\n                  `;\n                }\n\n                mainLoop += `\n                  xR${r}C${c + 1} = vec4(\n                    xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.xy);\n                `;\n              } else {\n                mainLoop += `\n                  xCOffset = xC + ${nextTexelOffset};\n\n                  if(xR >= 0 && xR < ${xNumRows} &&\n                    xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${r}C${c + 1} = xTexelR${r}C${c + 2};\n                `;\n              }\n            }\n          }\n        } else {  // stride > 1\n          if (c < filterWidth) {\n            mainLoop += `\n              if(xR >= 0 && xR < ${xNumRows}) {\n            `;\n\n            // Depending on whether padLeft is even or odd, we want either the\n            // xy or zw channels from X texels for xR${r}C${c}. If padLeft is\n            // even, xR${r}C${c + 1} is simply the zw channels of texels we've\n            // already sampled. But if padLeft is odd, xR${r}C{$c + 1}.zw will\n            // need to come from the xy channels of a new texel, hence the `vec4\n            // final` initialized below.\n            if (padLeft % 2 === 1) {\n              mainLoop += `\n                xCOffset = xC + 1 - ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${xNumCols}) {\n                  xTexelR${r}C${c + 2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${r}C${c + 2} = vec4(0.);\n                }\n\n                xR${r}C${c} = vec4(\n                  xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.zw);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${strideWidth};\n                  if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${r}C${c + 1} = vec4(xTexelR${r}C${c + 2}.xy, final.xy);\n                `;\n              }\n            } else {\n              mainLoop += `\n                if(xC >= 0 && xC < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xCOffset = xC + ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${r}C${c + 2} = vec4(0.);\n                }\n\n                xR${r}C${c} = vec4(\n                  xTexelR${r}C${c}.xy, xTexelR${r}C${c + 2}.xy);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  xR${r}C${c + 1} = vec4(\n                    xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.zw);\n                `;\n              }\n            }\n\n            mainLoop += `}`;\n          }\n        }\n\n        if (c < filterWidth) {\n          mainLoop += `\n            vec4 wTexelR${r}C${c} = getW(${r}, ${c}, d1, q);\n            wR${r}C${c} = vec4(wTexelR${r}C${c}.xz, wTexelR${r}C${c}.xz);\n          `;\n\n          if (c + 1 < filterWidth) {\n            mainLoop += `\n              vec4 wTexelR${r}C${c + 1} = getW(${r}, ${c + 1}, d1, q);\n              wR${r}C${c + 1} =\n                vec4(wTexelR${r}C${c + 1}.xz, wTexelR${r}C${c + 1}.xz);`;\n          }\n        }\n      }\n    }\n\n    for (let r = 0; r < filterHeight; r++) {\n      for (let c = 0; c < filterWidth; c++) {\n        mainLoop += `result += xR${r}C${c} * wR${r}C${c};`;\n      }\n    }\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 result = vec4(0.);\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class CropAndResizeProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Boxes', 'BoxInd'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      imageShape: [number, number, number, number], boxShape: [number, number],\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number) {\n    const [batch, imageHeight, imageWidth, depth] = imageShape;\n    const [numBoxes, ] = boxShape;\n    const [cropHeight, cropWidth] = cropSize;\n    this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n    const methodId = method === 'bilinear' ? 1 : 0;\n\n    const [inputHeightFloat, inputWidthFloat] =\n        [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n\n    const [heightRatio, heightScale, inY] = cropHeight > 1 ?\n        [\n          `${(imageHeight - 1) / (cropHeight - 1)}`,\n          '(y2-y1) * height_ratio',\n          `y1*${inputHeightFloat} + float(y)*(height_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (y1+y2) * ${inputHeightFloat}`,\n        ];\n    const [widthRatio, widthScale, inX] = cropWidth > 1 ?\n        [\n          `${(imageWidth - 1) / (cropWidth - 1)}`,\n          '(x2-x1) * width_ratio',\n          `x1*${inputWidthFloat} + float(x)*(width_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (x1+x2) * ${inputWidthFloat}`,\n        ];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class CumSumProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(shape: number[], exclusive: boolean, reverse: boolean) {\n    this.outputShape = shape;\n    const rank = shape.length;\n    const finalDim = shape[shape.length - 1];\n    const comparator = reverse ? '<' : '>';\n\n    this.userCode = `\n      int getIndex(int i) {\n        ${reverse ? `return ${finalDim} -i - 1;` : 'return i;'}\n      }\n\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords')};\n        float val = 0.0;\n        for (int i = ${finalDim} - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx ${comparator} end) {\n            continue;\n          }\n          if (idx == end && ${exclusive}) {\n            continue;\n          }\n          ${getFinalCoord(rank, 'coords')} = idx;\n          val += getX(${getCoords(rank, 'coords')});\n        }\n        setOutput(val);\n      }\n    `;\n  }\n}\n\nfunction getCoords(rank: number, name: string): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class DecodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: [number, number, number];\n\n  constructor(outputShape: [number, number, number], texShape: [\n    number, number\n  ]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        shader_util.getLogicalCoordinatesFromFlatIndex(\n            ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class DecodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  usesPackedTextures = true;\n  outputShape: [number, number, number];\n\n  constructor(outputShape: [number, number, number], texShape: [\n    number, number\n  ]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        shader_util.getLogicalCoordinatesFromFlatIndex(\n            ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthToSpaceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  blockSize: number;\n  dataFormat: string;\n\n  constructor(\n      outputShape: number[], blockSize: number, dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): number {\n    if (this.dataFormat === 'NHWC') {\n      return this.outputShape[3];\n    } else {\n      return this.outputShape[1];\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DiagProgram implements GPGPUProgram {\n  variableNames = ['X'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(size: number) {\n    this.outputShape = [size, size];\n    this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\n\nexport class EncodeFloatProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\n\nexport class EncodeFloatPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  usesPackedTextures = true;\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class EncodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(\n      outputShape: [number, number, number], texShape: [number, number],\n      inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    const [height, width] = texShape;\n    this.outputShape = outputShape;\n\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n\n    this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n        \n        int r = flatIndex / ${width};\n        int c = imod(flatIndex, ${width});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n        vec4 values = ${glsl.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\n\nexport class EncodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(\n      outputShape: [number, number, number], texShape: [number, number],\n      inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    const [height, width] = texShape;\n    this.outputShape = outputShape;\n\n    let mainLoop = '';\n    let output = 'result';\n    if (inputIsUnsignedByte) {\n      output = 'floor(result * 255. + 0.5)';\n    }\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n\n        mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${outputShape[2]}) {\n            localCoords[2] += ${col};\n            if(localCoords[1] + ${row} < ${outputShape[1]}) {\n              localCoords[1] += ${row};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n    \n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${width};\n              c = imod(flatIndex, ${width});\n              uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n              values = ${glsl.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${channel}] = values[0];\n              } else if(offset == 1) {\n                result[${channel}] = values[1];\n              } else if(offset == 2) {\n                result[${channel}] = values[2];\n              } else {\n                result[${channel}] = values[3];\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n        \n        ${mainLoop}\n\n        ${glsl.output} = ${output};\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport const COMPLEX_FFT = {\n  REAL: 'return real * expR - imag * expI;',\n  IMAG: 'return real * expI + imag * expR;'\n};\n\nexport class FFTProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(op: string, inputShape: [number, number], inverse: boolean) {\n    const innerDim = inputShape[1];\n    this.outputShape = inputShape;\n\n    const exponentMultiplierSnippet =\n        inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n\n    this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${op}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FillProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  valueLoc: WebGLUniformLocation;\n\n  constructor(shape: number[], value: number) {\n    this.variableNames = ['x'];\n    this.outputShape = shape;\n\n    this.userCode = `\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n  }\n\n  getCustomSetupFunc(value: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.valueLoc == null) {\n        this.valueLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'value');\n      }\n      gpgpu.gl.uniform1f(this.valueLoc, value);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FromPixelsProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FromPixelsPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${\n        height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherProgram implements GPGPUProgram {\n  variableNames = ['A', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], indicesLength: number, axis: number) {\n    const outputShape: number[] = aShape.slice();\n    outputShape[axis] = indicesLength;\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape, axis);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[], axis: number): string {\n  const rank = aShape.length;\n  if (rank > 4) {\n    throw Error(`Gather for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `int(getIndices(resRC))`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === axis) {\n      sourceCoords.push(`int(getIndices(${currentCoords[i]}))`);\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherNDProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  constructor(\n      private sliceDim: number, private strides: number[], shape: number[]) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {PixelData, TypedArray} from '../../types';\n\nimport {getGlslDifferences} from './glsl_version';\nimport * as tex_util from './tex_util';\nimport {TextureConfig} from './tex_util';\nimport * as webgl_util from './webgl_util';\n\nexport function createVertexShader(\n    gl: WebGLRenderingContext, debug: boolean): WebGLShader {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, debug, vertexShaderSource);\n}\n\nexport function createVertexBuffer(\n    gl: WebGLRenderingContext, debug: boolean): WebGLBuffer {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array(\n      [-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, debug, vertexArray);\n}\n\nexport function createIndexBuffer(\n    gl: WebGLRenderingContext, debug: boolean): WebGLBuffer {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, debug, triangleVertexIndices);\n}\n\nfunction createAndConfigureTexture(\n    gl: WebGLRenderingContext, debug: boolean, width: number, height: number,\n    internalFormat: number, textureFormat: number,\n    textureType: number): WebGLTexture {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl, debug);\n\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, debug, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.texImage2D(\n          tex2d, 0, internalFormat, width, height, 0, textureFormat,\n          textureType, null));\n  webgl_util.callAndCheck(gl, debug, () => gl.bindTexture(gl.TEXTURE_2D, null));\n  return texture;\n}\n\nexport function createFloat32MatrixTexture(\n    gl: WebGLRenderingContext, debug: boolean, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, debug, width, height, textureConfig.internalFormatFloat,\n      textureConfig.textureFormatFloat, gl.FLOAT);\n}\n\nexport function createFloat16MatrixTexture(\n    gl: WebGLRenderingContext, debug: boolean, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, debug, width, height, textureConfig.internalFormatHalfFloat,\n      textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\n\nexport function createUnsignedBytesMatrixTexture(\n    gl: WebGLRenderingContext, debug: boolean, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, debug, width, height, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE);\n}\n\nexport function createPackedMatrixTexture(\n    gl: WebGLRenderingContext, debug: boolean, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, debug, width, height, textureConfig.internalFormatPackedFloat,\n      gl.RGBA, gl.FLOAT);\n}\n\nexport function createFloat16PackedMatrixTexture(\n    gl: WebGLRenderingContext, debug: boolean, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, debug, width, height, textureConfig.internalFormatPackedHalfFloat,\n      gl.RGBA, textureConfig.textureTypeHalfFloat);\n}\n\nexport function bindVertexProgramAttributeStreams(\n    gl: WebGLRenderingContext, debug: boolean, program: WebGLProgram,\n    vertexBuffer: WebGLBuffer): boolean {\n  const posOffset = 0;               // x is the first buffer element\n  const uvOffset = 3 * 4;            // uv comes after [x y z]\n  const stride = (3 * 4) + (2 * 4);  // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(\n      gl, debug, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(\n      gl, debug, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success &&\n      webgl_util.bindVertexBufferToProgramAttribute(\n          gl, debug, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\n\nexport function uploadDenseMatrixToTexture(\n    gl: WebGLRenderingContext, debug: boolean, texture: WebGLTexture,\n    width: number, height: number, data: TypedArray,\n    textureConfig: TextureConfig) {\n  webgl_util.callAndCheck(\n      gl, debug, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n\n  let dataForUpload: TypedArray, texelDataType: number, internalFormat: number;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n\n  dataForUpload.set(data);\n\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.texImage2D(\n          gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA,\n          texelDataType, dataForUpload));\n\n  webgl_util.callAndCheck(gl, debug, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function uploadPixelDataToTexture(\n    gl: WebGLRenderingContext, debug: boolean, texture: WebGLTexture,\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement) {\n  webgl_util.callAndCheck(\n      gl, debug, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    webgl_util.callAndCheck(\n        gl, debug,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA,\n            gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n  } else {\n    webgl_util.callAndCheck(\n        gl, debug,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,\n            pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n                HTMLVideoElement));\n  }\n\n  webgl_util.callAndCheck(gl, debug, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function createBufferFromOutputTexture(\n    gl2: WebGL2RenderingContext, debug: boolean, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLBuffer {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(\n      gl2, debug, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n\n  // Initialize the buffer to the size of the texture in bytes.\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n\n  webgl_util.callAndCheck(\n      gl2, debug,\n      () => gl2.bufferData(\n          gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n\n  // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n  webgl_util.callAndCheck(\n      gl2, debug,\n      () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n\n  webgl_util.callAndCheck(\n      gl2, debug, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n\n  return buffer;\n}\n\nexport function downloadFloat32MatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer,\n    size: number): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget = new Float32Array(size);\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(\n    gl: WebGLRenderingContext, debug: boolean, rows: number, columns: number,\n    textureConfig: TextureConfig) {\n  const [w, h] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(\n      tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.readPixels(\n          0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE,\n          downloadTarget));\n\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\n\nexport function downloadPackedMatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer, batch: number, rows: number,\n    cols: number, physicalRows: number, physicalCols: number,\n    textureConfig: TextureConfig): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget =\n      new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(\n          physicalRows, physicalCols));\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadMatrixFromPackedOutputTexture(\n    gl: WebGLRenderingContext, debug: boolean, physicalRows: number,\n    physicalCols: number): Float32Array {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.readPixels(\n          0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n\n  return packedRGBA;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENV} from '../../environment';\nimport {PixelData, TypedArray} from '../../types';\nimport * as util from '../../util';\n\nimport {getWebGLContext, setWebGLContext} from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport {TextureConfig} from './tex_util';\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport interface FenceContext {\n  query: WebGLQuery|WebGLSync;\n  isFencePassed(): boolean;\n}\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: WebGLProgram|null = null;\n  private disposed = false;\n  private disjoint: boolean;\n  private textureConfig: TextureConfig;\n\n  constructor(gl?: WebGLRenderingContext) {\n    const glVersion = ENV.getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    // WebGL 2.0 enables texture floats without an extension.\n    if (ENV.getNumber('WEBGL_VERSION') === 1) {\n      this.textureFloatExtension = webgl_util.getExtensionOrThrow(\n          this.gl, this.debug, 'OES_texture_float');\n      this.colorBufferFloatExtension =\n          this.gl.getExtension('WEBGL_color_buffer_float');\n\n      this.textureHalfFloatExtension = webgl_util.getExtensionOrThrow(\n          this.gl, this.debug, 'OES_texture_half_float');\n      this.colorBufferHalfFloatExtension =\n          this.gl.getExtension('EXT_color_buffer_half_float');\n    } else {\n      const COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl, this.debug);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl, this.debug);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl, this.debug);\n\n    this.textureConfig =\n        tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  private get debug(): boolean {\n    return ENV.getBool('DEBUG');\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, this.debug, () => gl.finish());\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, this.debug, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, this.debug, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, this.debug, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, this.debug, texture, pixels);\n  }\n\n  public uploadDenseMatrixToTexture(\n      texture: WebGLTexture, width: number, height: number, data: TypedArray) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(\n        this.gl, this.debug, texture, width, height, data, this.textureConfig);\n  }\n\n  public createFloat16PackedMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(\n        this.gl, this.debug, rows, columns, this.textureConfig);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, this.debug, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(\n          this.gl, this.debug, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(\n        this.gl, this.debug, () => this.gl.deleteTexture(texture));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, this.debug, rows, columns, this.textureConfig));\n  }\n\n  public downloadPackedMatrixFromBuffer(\n      buffer: WebGLBuffer, batch: number, rows: number, columns: number,\n      physicalRows: number, physicalCols: number): Float32Array {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(\n        this.gl, buffer, batch, rows, columns, physicalRows, physicalCols,\n        this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromBuffer(buffer: WebGLBuffer, size: number):\n      Float32Array {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  public createBufferFromTexture(\n      texture: WebGLTexture, rows: number, columns: number): WebGLBuffer {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(\n        this.gl as WebGL2RenderingContext, this.debug, rows, columns,\n        this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  public createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let query: WebGLQuery|WebGLSync;\n    let isFencePassed: () => boolean;\n\n    if (ENV.getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED ||\n            status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (\n        ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(\n          query, ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {query, isFencePassed};\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, physicalRows: number,\n      physicalCols: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, this.debug, physicalRows, physicalCols));\n  }\n\n  private vertexAttrsAreBound = false;\n\n  public createProgram(fragmentShaderSource: string): WebGLProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    const fragmentShader: WebGLShader =\n        webgl_util.createFragmentShader(gl, this.debug, fragmentShaderSource);\n    const vertexShader: WebGLShader =\n        gpgpu_util.createVertexShader(gl, this.debug);\n    const program: WebGLProgram = webgl_util.createProgram(\n        gl,\n        this.debug,\n    );\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.attachShader(program, vertexShader));\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, this.debug, program);\n    if (this.debug) {\n      webgl_util.validateProgram(gl, this.debug, program);\n    }\n    if (!this.vertexAttrsAreBound) {\n      this.setProgram(program);\n      this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(\n          gl, this.debug, this.program, this.vertexBuffer);\n    }\n    return program;\n  }\n\n  public deleteProgram(program: WebGLProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(\n          this.gl, this.debug, () => this.gl.deleteProgram(program));\n    }\n  }\n\n  public setProgram(program: WebGLProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n    if ((this.program != null) && this.debug) {\n      webgl_util.validateProgram(this.gl, this.debug, this.program);\n    }\n    webgl_util.callAndCheck(\n        this.gl, this.debug, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, this.debug, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, this.debug,\n        () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, this.debug, this.program, inputMatrixTexture, uniformLocation,\n        textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.debug, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, this.debug,\n        () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, this.debug, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl, this.debug,\n              ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') ===\n                      2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  beginQuery(): WebGLQuery {\n    if (ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT() as WebGLQuery;\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  public async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await util.repeatedTry(\n        () => this.disposed ||  // while testing contexts are created / disposed\n                                // in rapid succession, so without this check we\n                                // may poll for the query timer indefinitely\n            this.isQueryAvailable(\n                query,\n                ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(\n        query, ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n\n  private bindTextureToFrameBuffer(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, this.debug, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.debug, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(\n          this.gl, this.debug, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, this.debug, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, this.debug, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean,\n  resolveFn: () => void\n};\n\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENV} from '../../environment';\nimport {Tensor} from '../../tensor';\nimport {TypedArray} from '../../types';\nimport * as util from '../../util';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport * as shader_compiler from './shader_compiler';\nimport {InputInfo, ShapeInfo} from './shader_compiler';\nimport {TextureData} from './tex_util';\n\nexport interface GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  usesPackedTextures?: boolean;\n}\n\nexport interface GPGPUBinary {\n  webGLProgram: WebGLProgram;\n  program: GPGPUProgram;\n  uniformLocations: {[name: string]: WebGLUniformLocation};\n  source: string;\n  inShapeInfos: ShapeInfo[];\n  outShapeInfo: ShapeInfo;\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n}\n\nexport interface TensorData {\n  shape: number[];\n  texData: TextureData;\n  isUniform: boolean;\n  // Available when we decide to upload as uniform instead of texture.\n  uniformValues?: TypedArray;\n}\n\nexport function compileProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, program: GPGPUProgram, inputs: TensorData[],\n    output: TensorData): GPGPUBinary {\n  const userCode = program.userCode;\n  const inputInfos: InputInfo[] = inputs.map((input, i) => {\n    const shapeInfo: ShapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n    if (input.texData != null && input.texData.slice != null &&\n        input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n    return {name: program.variableNames[i], shapeInfo};\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo: ShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(\n      inputInfos, outShapeInfo, userCode, program.usesPackedTextures);\n\n  const webGLProgram = gpgpu.createProgram(source);\n\n  // Add special uniforms (NAN, INFINITY)\n  let infLoc: WebGLUniformLocation = null;\n  const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n  if (ENV.getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  }\n\n  // Add user-defined uniforms\n  const uniformLocations: {[name: string]: WebGLUniformLocation} = {};\n  for (let i = 0; i < program.variableNames.length; i++) {\n    const varName = program.variableNames[i];\n    const shouldThrow = false;\n    uniformLocations[varName] =\n        gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n    uniformLocations[`offset${varName}`] =\n        gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n  }\n\n  return {\n    program,\n    source,\n    webGLProgram,\n    uniformLocations,\n    inShapeInfos,\n    outShapeInfo,\n    infLoc,\n    nanLoc,\n  };\n}\n\nfunction validateBinaryAndProgram(\n    shapeInfos: ShapeInfo[], inputs: TensorData[]) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(\n        `Binary was compiled with ${shapeInfos.length} inputs, but ` +\n        `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(\n          `Binary was compiled with different shapes than ` +\n          `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    // The input is uploaded as uniform.\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(\n          `Binary was compiled with different texture shapes than the` +\n          ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, binary: GPGPUBinary, inputs: TensorData[],\n    output: TensorData,\n    customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) =>\n        void): void {\n  validateBinaryAndProgram(binary.inShapeInfos, inputs);\n  validateBinaryAndProgram([binary.outShapeInfo], [output]);\n\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  }\n  gpgpu.setProgram(binary.webGLProgram);\n\n  // Set special uniforms (NAN, INFINITY)\n  if (ENV.getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n\n  // Set user-defined inputs\n  inputs.forEach((input, i) => {\n    const varName = binary.program.variableNames[i];\n    const varLoc = binary.uniformLocations[varName];\n    const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      return;\n    }\n\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n      return;\n    }\n\n    // If the input was sliced, upload the flat offset index.\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture, varLoc, i);\n  });\n\n  if (customSetup != null) {\n    customSetup(gpgpu, binary.webGLProgram);\n  }\n  gpgpu.executeProgram();\n}\n\nexport function makeShaderKey(\n    program: GPGPUProgram, inputs: TensorData[], output: TensorData): string {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null &&\n        x.texData.slice.flatOffset > 0;\n    const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n    keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name;\n  // Fast string concat. See https://jsperf.com/string-concatenation/14.\n  key += '_' + keyInputs + '_' + keyUserCode;\n  return key;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Conv2DInfo} from '../../ops/conv_util';\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Im2ColPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  usesPackedTextures = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      outputShape: number[], inputShape: number[], convInfo: Conv2DInfo) {\n    this.outputShape = outputShape;\n\n    const {\n      filterWidth,\n      inChannels,\n      strideWidth,\n      strideHeight,\n      padInfo,\n      outWidth,\n      dilationWidth,\n      dilationHeight,\n      dataFormat\n    } = convInfo;\n    const {left, top} = padInfo;\n    const itemsPerBlockRow = inChannels * filterWidth;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 0 : 1;\n    const colDim = isChannelsLast ? 1 : 2;\n\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${row};\n\n          if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {\n            offsetY = int(blockIndex / (${outWidth})) * ${strideHeight} - ${\n            top};\n            d0 = offsetY + ${dilationHeight} * (pos / ${itemsPerBlockRow});\n\n            if(d0 < ${inputShape[rowDim]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${outWidth}.) * ${\n            strideWidth}. - ${left}.);\n              d1 = offsetX + ${dilationWidth} * (int(mod(float(pos), ${\n            itemsPerBlockRow}.) / ${inChannels}.));\n\n              if(d1 < ${inputShape[colDim]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${inChannels}.));\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNGradProgram implements GPGPUProgram {\n  variableNames = ['inputImage', 'outputImage', 'dy'];\n  outputShape: number[] = [];\n  userCode: string;\n  depthRadius: number;\n  bias: number;\n  alpha: number;\n  beta: number;\n  depth: number;\n\n  constructor(\n      inputShape: number[], depthRadius: number, bias: number, alpha: number,\n      beta: number) {\n    this.outputShape = inputShape;\n    this.depth = inputShape[3];\n    this.depthRadius = depthRadius;\n    this.bias = bias;\n    this.alpha = alpha;\n    this.beta = beta;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  usesPackedTextures = true;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Conv2DInfo, Conv3DInfo} from '../../ops/conv_util';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MaxPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class MaxPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex =\n        effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MatMulPackedProgram implements GPGPUProgram {\n  variableNames = ['matrixA', 'matrixB'];\n  usesPackedTextures = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      aShape: [number, number, number], outputShape: [number, number, number],\n      transposeA = false, transposeB = false, addBias = false,\n      activation: string = null, hasPreluActivation = false) {\n    this.outputShape = outputShape;\n\n    const sharedDim = transposeA ? aShape[1] : aShape[2];\n    const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n\n    const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';\n    const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';\n    const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];\n    const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          vec4 a = getMatrixA(rc.x, ${aSample});\n          vec4 b = getMatrixB(rc.x, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MultinomialProgram implements GPGPUProgram {\n  variableNames = ['probs'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(batchSize: number, numOutcomes: number, numSamples: number) {\n    this.outputShape = [batchSize, numSamples];\n\n    this.userCode = `\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(seed: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.seedLoc == null) {\n        this.seedLoc = gpgpu.getUniformLocation(webGLProgram, 'seed');\n      }\n      gpgpu.gl.uniform1f(this.seedLoc, seed);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class OneHotProgram implements GPGPUProgram {\n  variableNames = ['indices'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(\n      numIndices: number, depth: number, onValue: number, offValue: number) {\n    this.outputShape = [numIndices, depth];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getChannels} from '../packing_util';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      outputShape:\n          number[]) {  // TODO(https://github.com/tensorflow/tfjs/issues/893):\n                       // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    const rank = outputShape.length;\n\n    if (rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', rank);\n      const dtype = getCoordsDataType(rank);\n      const outOfBoundsCondition =\n          getOutOfBoundsCondition(rank, outputShape, channels);\n      const setup = getSetup(\n          rank, outputShape[outputShape.length - 1],\n          outputShape[outputShape.length - 2], channels);\n      const output = getOutput(outputShape, channels);\n\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n}\n\nfunction getSourceCoordsArr(rank: number, dims: string[]): string[] {\n  const coords = [];\n\n  for (let row = 0; row <= 1; row++) {\n    for (let col = 0; col <= 1; col++) {\n      let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n      for (let d = 2; d < rank; d++) {\n        coord = `${dims[dims.length - 1 - d]},` + coord;\n      }\n\n      coords.push(coord);\n    }\n  }\n  return coords;\n}\n\nfunction getOutOfBoundsCondition(\n    rank: number, shape: number[], dims: string[]): string {\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\nfunction getSetup(\n    rank: number, cols: number, rows: number, dims: string[]): string {\n  if (rank === 1) {\n    return '';\n  }\n\n  const innerDims = dims.slice(-2);\n\n  return `\n    int r = ${innerDims[0]};\n    int c = ${innerDims[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${cols};\n    bool rEdge = rp1 >= ${rows};\n  `;\n}\n\nfunction getOutput(shape: number[], dims: string[]): string {\n  const rank = shape.length;\n  const sourceCoords = getSourceCoordsArr(rank, dims);\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  return `getA(${sourceCoords[0]}),\n          cEdge ? 0. : getA(${sourceCoords[1]}),\n          rEdge ? 0. : getA(${sourceCoords[2]}),\n          rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n}","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${constantValue}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${constantValue}));\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getChannels} from '../packing_util';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  usesPackedTextures = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n\n    const componentSetup = [\n      `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n      rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n      rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n    ];\n\n    const paddingArea = rank === 1 ?\n        'rc < start || rc >= end' :\n        'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n    let mainLoop = '';\n    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n      mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(${constantValue});\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    }\n    mainLoop += (rank === 1 ? `} ` : `}}`);\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Conv2DInfo} from '../../ops/conv_util';\nimport {Conv3DInfo} from '../../ops/conv_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Pool2DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: Conv2DInfo, poolType: 'max'|'avg', computePositions: boolean) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = wR * ${effectiveFilterWidth} + wC;\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / count`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n\nexport class Pool3DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: Conv3DInfo, poolType: 'max'|'avg', computePositions: boolean) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition =\n                      wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC;;\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / count`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n          setOutput(${returnValue});\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ReduceInfo} from '../../ops/reduce_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ReduceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: ReduceInfo,\n      reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod') {\n    const windowSize = reduceInfo.windowSize;\n    const batchSize = reduceInfo.batchSize;\n    const inSize = reduceInfo.inSize;\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n\n    let initializationValue = '0.0';\n    let compareOp = ``;\n\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    let vecType = `vec4`;\n\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class ReshapePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  usesPackedTextures = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(outputShape: [number, number, number], inputShape: [\n    number, number, number\n  ]) {\n    this.outputShape = outputShape;\n\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape)}\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${outputShape[1]};\n        int cols = ${outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor4D} from '../../tensor';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    this.outputShape = x.shape;\n    const [, xHeight, xWidth, ] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  usesPackedTextures = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n        \n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1}; \n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor4D} from '../../tensor';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeigborBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    this.outputShape = x.shape;\n    const [, xHeight, xWidth, ] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReverseProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n\n    if (rank === 1) {\n      this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n      return;\n    }\n    const getInCoord = (i: number) => {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - coords[${i}] - 1`;\n      }\n      return `coords[${i}]`;\n    };\n    const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n    const type = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getChannels} from '../packing_util';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReversePackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  usesPackedTextures = true;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n    const channels = getChannels('rc', rank);\n    const nextColumn =\n        `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n    const type = getCoordsDataType(rank);\n    if (rank === 1) {\n      this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n    } else {\n      this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n    }\n\n    function getR(channels: string[]): string {\n      return getChannel(channels);\n    }\n\n    function getG(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getB(channels: string[]): string {\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getA(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getChannel(channels: string[]): string {\n      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n      const inCoords = inCoordsArray.join(',');\n      const innerDims = inCoordsArray.slice(-2).join(',');\n      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n    }\n\n    function getInCoord(i: number, channels1: string[]): string {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - ${channels1[i]} - 1`;\n      } else {\n        return `${channels1[i]}`;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {SegOpInfo} from '../../ops/segment_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class SegmentOpProgram implements GPGPUProgram {\n  variableNames = ['x', 'segmentIds'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(segOpInfo: SegOpInfo, segOpType: 'unsortedSegmentSum') {\n    const windowSize = segOpInfo.windowSize;\n    const batchSize = segOpInfo.batchSize;\n    const inSize = segOpInfo.inSize;\n    const numSegments = segOpInfo.numSegments;\n    const outSize = numSegments * Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n\n    const initializationValue = '0.0';\n    const returnValue = `sumValue`;\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n\n    let checkValueOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n\n    let checkSegmentIdOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SelectProgram implements GPGPUProgram {\n  variableNames = ['c', 'a', 'b'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(cRank: number, shape: number[], rank: number) {\n    this.outputShape = shape;\n\n    let cCoords;\n    let abCoords;\n    if (rank > 4) {\n      throw Error(`Where for rank ${rank} is not yet supported`);\n    }\n\n    if (rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < shape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const dtype = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SliceProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  // Caching uniform location for speed.\n  startLoc: WebGLUniformLocation;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    const uniformPart = `uniform int start[${this.rank}];`;\n    const sourceCoords = getCoords(this.rank);\n\n    let body: string;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      ${uniformPart}\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(start: number[]) {\n    if (start.length !== this.rank) {\n      throw Error(\n          `The rank (${this.rank}) of the program must match the ` +\n          `length of start (${start.length})`);\n    }\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.startLoc == null) {\n        this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n        if (this.startLoc == null) {\n          // This means the compiler has optimized and realized it doesn't need\n          // the uniform.\n          return;\n        }\n      }\n      gpgpu.gl.uniform1iv(this.startLoc, start);\n    };\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getChannels} from '../packing_util';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SlicePackedProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  usesPackedTextures = true;\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  // Caching uniform location for speed.\n  startLoc: WebGLUniformLocation;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    const coords = getChannels('coords', this.rank);\n    const sourceLoc = getChannels('sourceLoc', this.rank);\n\n    const innerDims =\n        this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n    const getChannel =\n        `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n    const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n    const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n\n    const sourceLocSetup = this.rank <= 4 ?\n        `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :\n        destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)\n            .join('\\n');\n    this.userCode = `\n      uniform int start[${this.rank}];\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup} \n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n  }\n\n  getCustomSetupFunc(start: number[]) {\n    if (start.length !== this.rank) {\n      throw Error(\n          `The rank (${this.rank}) of the program must match the ` +\n          `length of start (${start.length})`);\n    }\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.startLoc == null) {\n        this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n        if (this.startLoc == null) {\n          // This means the compiler has optimized and realized it doesn't need\n          // the uniform.\n          return;\n        }\n      }\n      gpgpu.gl.uniform1iv(this.startLoc, start);\n    };\n  }\n}","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class StridedSliceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      begin: number[], strides: number[], size: number[]) {\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          size.map((_, i) => {\n                outputAxis++;\n                return size.length === 1 ?\n                    `coords * strides[${i}] + begin[${i}]` :\n                    `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENV} from '../../environment';\nimport {GPGPUContext} from './gpgpu_context';\nimport {PhysicalTextureType, TextureUsage} from './tex_util';\n\nexport class TextureManager {\n  private numUsedTextures = 0;\n  private numFreeTextures = 0;\n  private freeTextures: {[shape: string]: WebGLTexture[]} = {};\n  private logEnabled = false;\n  private usedTextures: {[shape: string]: WebGLTexture[]} = {};\n\n  constructor(private gpgpu: GPGPUContext) {}\n\n  acquireTexture(\n      shapeRC: [number, number], usage: TextureUsage,\n      isPacked: boolean): WebGLTexture {\n    const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n\n    const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    if (!(shapeKey in this.usedTextures)) {\n      this.usedTextures[shapeKey] = [];\n    }\n\n    if (this.freeTextures[shapeKey].length > 0) {\n      this.numFreeTextures--;\n      this.numUsedTextures++;\n      this.log();\n      const newTexture = this.freeTextures[shapeKey].shift();\n      this.usedTextures[shapeKey].push(newTexture);\n      return newTexture;\n    }\n    this.numUsedTextures++;\n    this.log();\n\n    let newTexture: WebGLTexture;\n    if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n      newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n      newTexture =\n          this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n\n    } else if (\n        physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n      newTexture =\n          this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n    }\n    this.usedTextures[shapeKey].push(newTexture);\n\n    return newTexture;\n  }\n\n  releaseTexture(\n      texture: WebGLTexture, shape: [number, number],\n      logicalTexType: TextureUsage, isPacked: boolean): void {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    const physicalTexType =\n        getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n    const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    this.freeTextures[shapeKey].push(texture);\n    this.numFreeTextures++;\n    this.numUsedTextures--;\n    const texList = this.usedTextures[shapeKey];\n    const texIndex = texList.indexOf(texture);\n    if (texIndex < 0) {\n      throw new Error(\n          'Cannot release a texture that was never provided by this ' +\n          'texture manager');\n    }\n    texList.splice(texIndex, 1);\n    this.log();\n  }\n\n  private log() {\n    if (!this.logEnabled) {\n      return;\n    }\n    const total = this.numFreeTextures + this.numUsedTextures;\n    console.log(\n        'Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`,\n        `(${total})`);\n  }\n\n  getNumUsedTextures(): number {\n    return this.numUsedTextures;\n  }\n\n  getNumFreeTextures(): number {\n    return this.numFreeTextures;\n  }\n\n  dispose() {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    for (const texShape in this.freeTextures) {\n      this.freeTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex);\n      });\n    }\n    for (const texShape in this.usedTextures) {\n      this.usedTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex);\n      });\n    }\n    this.freeTextures = null;\n    this.usedTextures = null;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n  }\n}\n\nfunction getPhysicalTextureForRendering(isPacked: boolean):\n    PhysicalTextureType {\n  if (ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n    if (isPacked) {\n      return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT32;\n  }\n\n  if (isPacked) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT16;\n  }\n  return PhysicalTextureType.UNPACKED_FLOAT16;\n}\n\nfunction getPhysicalFromLogicalTextureType(\n    logicalTexType: TextureUsage, isPacked: boolean): PhysicalTextureType {\n  if (logicalTexType === TextureUsage.UPLOAD) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT32;\n  } else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n    return getPhysicalTextureForRendering(isPacked);\n  } else if (\n      logicalTexType === TextureUsage.DOWNLOAD ||\n      logicalTexType === TextureUsage.PIXELS) {\n    return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n  }\n  throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\n\nfunction getKeyFromTextureShape(\n    shapeRowsCol: [number, number], physicalTexType: PhysicalTextureType,\n    isPacked: boolean): string {\n  return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TileProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[]): string {\n  const rank = aShape.length;\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposeProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const switched = getSwitchedCoords(newDim);\n\n    this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n  }\n}\n\nfunction getSwitchedCoords(newDim: number[]): string {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const originalOrder =\n      ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = originalOrder[i];\n  }\n  return switchedCoords.join();\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getVecChannels} from '../packing_util';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  usesPackedTextures = true;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    if (this.rank > 6) {\n      throw Error(\n          `Packed transpose for rank ${this.rank} is not yet supported.`);\n    }\n    const dtype = getCoordsDataType(this.rank);\n\n    const outputOrder = getVecChannels('rc', this.rank);\n    const switchedOrder = new Array(this.rank);\n    for (let i = 0; i < newDim.length; i++) {\n      switchedOrder[newDim[i]] = outputOrder[i];\n    }\n    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n    const nextColumn =\n        `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n\n    this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }  \n      setOutput(result);\n    }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const SELU_SCALEALPHA = 1.7580993408473768599402175208123;\nexport const SELU_SCALE = 1.0507009873554804934193349852946;\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as erf_util from '../../ops/erf_util';\nimport * as selu_util from '../../ops/selu_util';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class UnaryOpProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n\nconst CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\n\nexport const LINEAR = `return x;`;\n\nexport const ABS = `return abs(x);`;\n\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\n\nexport const SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${selu_util.SELU_SCALEALPHA};\n  float scale = ${selu_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\n\nexport function STEP(alpha = 0.0) {\n  return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\n\nexport const NEG = `return -x;`;\n\nexport const CEIL = `return ceil(x);`;\n\nexport const FLOOR = `return floor(x);`;\n\nexport const SIGN = `\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n`;\n\nexport const IS_NAN = `return float(isnan(x));`;\n\nexport const IS_INF = `return float(isinf(x));`;\n\nexport const IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\n\nexport const ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\n\nexport const EXP = `return exp(x);`;\n\nexport const EXPM1 = `return exp(x) - 1.0;`;\n\nexport const LOG = `if (x < 0.0) return NAN;\n  return log(x);`;\n\nexport const LOG1P = `return log(1.0 + x);`;\n\nexport const SQRT = `return sqrt(x);`;\n\nexport const RSQRT = `return inversesqrt(x);`;\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n\n/**\n * mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n *\n * epsilon is the difference between 1.0 and the next representable\n * float. For a single precision 32 bit float this should be 2^-23, see:\n * https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\n *\n * too_large = (x > -threshold) is value above which exp(x) may overflow\n * but softplus(x) == x is within machine epsilon\n *\n * too_small = (x < threshold) is value below which exp(x) may underflow,\n * but softplus(x) == exp(x) is within machine epsilon.\n */\nexport const SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\n\nexport const SIN = CHECK_NAN_SNIPPET + `\n  return sin(x);\n`;\n\nexport const COS = CHECK_NAN_SNIPPET + `\n  return cos(x);\n`;\n\nexport const TAN = `return tan(x);`;\n\nexport const ASIN = `return asin(x);`;\n\nexport const ACOS = `return acos(x);`;\n\nexport const ATAN = CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\n\nexport const SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\n\nexport const COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\n\nexport const TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\n\nexport const ASINH = `return log(x + sqrt(x * x + 1.0));`;\n\nexport const ACOSH = CHECK_NAN_SNIPPET + `\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));`;\n\nexport const ATANH = CHECK_NAN_SNIPPET + `\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\n\nexport const ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${erf_util.ERF_P};\n  float a1 = ${erf_util.ERF_A1};\n  float a2 = ${erf_util.ERF_A2};\n  float a3 = ${erf_util.ERF_A3};\n  float a4 = ${erf_util.ERF_A4};\n  float a5 = ${erf_util.ERF_A5};\n\n  float t = 1.0 / (1.0 + p * x);\n  return 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x);\n`;\n\nexport const SQUARE = `return x * x;`;\n\nexport const RECIPROCAL = `return 1.0 / x;`;\n\nexport const LOGICAL_NOT = `return float(!(x >= 1.0));`;\n\nexport const TO_INT = `return float(int(x));`;\n\nexport const CLONE = 'return x;';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport const LINEAR = `return x;`;\n\nexport const LOG = `\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n`;\n\nexport const RELU = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const ELU = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nexport class UnaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  usesPackedTextures = true;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getChannels, getSourceCoords} from '../packing_util';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class UnpackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  usesPackedTextures = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    const rank = outputShape.length;\n\n    const channels = getChannels('rc', rank);\n    const dtype = getCoordsDataType(rank);\n    const sourceCoords = getSourceCoords(rank, channels);\n    const innerDims = channels.slice(-2);\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n\n    this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n  }\n}","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import webgl flags.\nimport './flags_webgl';\n\nimport * as device_util from '../../device_util';\nimport {ENGINE, MemoryInfo, TimingInfo} from '../../engine';\nimport {ENV} from '../../environment';\nimport {tidy} from '../../globals';\nimport {warn} from '../../log';\nimport {buffer} from '../../ops/array_ops';\nimport * as array_ops_util from '../../ops/array_ops_util';\nimport * as axis_util from '../../ops/axis_util';\nimport {complex, imag, real} from '../../ops/complex_ops';\nimport {computeOutShape} from '../../ops/concat_util';\nimport {Conv2DInfo, Conv3DInfo} from '../../ops/conv_util';\nimport {Activation, FusedBatchMatMulConfig} from '../../ops/fused_util';\nimport * as gather_nd_util from '../../ops/gather_nd_util';\nimport * as reduce_util from '../../ops/reduce_util';\nimport * as scatter_nd_util from '../../ops/scatter_nd_util';\nimport * as segment_util from '../../ops/segment_util';\nimport * as slice_util from '../../ops/slice_util';\nimport {softmax} from '../../ops/softmax';\nimport {range, scalar, tensor} from '../../ops/tensor_ops';\nimport {DataId, Scalar, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Tensor5D} from '../../tensor';\nimport {BackendValues, DataType, DataTypeMap, NumericDataType, PixelData, Rank, RecursiveArray, ShapeMap, sumOutType, TypedArray, upcastType} from '../../types';\nimport * as util from '../../util';\nimport {getArrayFromDType, getTypedArrayFromDType, inferDtype, sizeFromShape} from '../../util';\nimport {DataStorage, EPSILON_FLOAT16, EPSILON_FLOAT32, KernelBackend} from '../backend';\nimport * as backend_util from '../backend_util';\nimport {mergeRealAndImagArrays} from '../complex_util';\nimport {nonMaxSuppressionImpl} from '../non_max_suppression_impl';\nimport {split} from '../split_shared';\nimport {tile} from '../tile_impl';\nimport {topkImpl} from '../topk_impl';\nimport {whereImpl} from '../where_impl';\n\nimport {AddNProgram} from './addn_gpu';\nimport {AddNPackedProgram} from './addn_packed_gpu';\nimport {ArgMinMaxProgram} from './argminmax_gpu';\nimport {ArgMinMaxPackedProgram} from './argminmax_packed_gpu';\nimport {AvgPool2DBackpropProgram, AvgPool3DBackpropProgram} from './avg_pool_backprop_gpu';\nimport {BatchNormProgram} from './batchnorm_gpu';\nimport {BatchNormPackedProgram} from './batchnorm_packed_gpu';\nimport * as binaryop_complex_gpu from './binaryop_complex_gpu';\nimport {BinaryOpComplexProgram} from './binaryop_complex_gpu';\nimport * as binaryop_gpu from './binaryop_gpu';\nimport {BinaryOpProgram} from './binaryop_gpu';\nimport * as binaryop_packed_gpu from './binaryop_packed_gpu';\nimport {BinaryOpPackedProgram} from './binaryop_packed_gpu';\nimport {createCanvas, getWebGLContext} from './canvas_util';\nimport {ClipProgram} from './clip_gpu';\nimport {ClipPackedProgram} from './clip_packed_gpu';\nimport {ComplexAbsProgram} from './complex_abs_gpu';\nimport {ConcatProgram} from './concat_gpu';\nimport {ConcatPackedProgram} from './concat_packed_gpu';\nimport {Conv2DDerFilterProgram, Conv2DDerInputProgram, Conv3DDerFilterProgram, Conv3DDerInputProgram} from './conv_backprop_gpu';\nimport {DepthwiseConv2DDerFilterProgram, DepthwiseConv2DDerInputProgram} from './conv_backprop_gpu_depthwise';\nimport {Conv2DProgram, Conv3DProgram} from './conv_gpu';\nimport {DepthwiseConv2DProgram} from './conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from './conv_packed_gpu_depthwise';\nimport {CropAndResizeProgram} from './crop_and_resize_gpu';\nimport {CumSumProgram} from './cumsum_gpu';\nimport {DecodeMatrixProgram} from './decode_matrix_gpu';\nimport {DecodeMatrixPackedProgram} from './decode_matrix_packed_gpu';\nimport {DepthToSpaceProgram} from './depth_to_space_gpu';\nimport {DiagProgram} from './diag_gpu';\nimport {EncodeFloatProgram} from './encode_float_gpu';\nimport {EncodeFloatPackedProgram} from './encode_float_packed_gpu';\nimport {EncodeMatrixProgram} from './encode_matrix_gpu';\nimport {EncodeMatrixPackedProgram} from './encode_matrix_packed_gpu';\nimport * as fft_gpu from './fft_gpu';\nimport {FFTProgram} from './fft_gpu';\nimport {FillProgram} from './fill_gpu';\nimport {FromPixelsProgram} from './from_pixels_gpu';\nimport {FromPixelsPackedProgram} from './from_pixels_packed_gpu';\nimport {GatherProgram} from './gather_gpu';\nimport {GatherNDProgram} from './gather_nd_gpu';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport {GPGPUBinary, GPGPUProgram, TensorData} from './gpgpu_math';\nimport {Im2ColPackedProgram} from './im2col_packed_gpu';\nimport {LRNProgram} from './lrn_gpu';\nimport {LRNGradProgram} from './lrn_grad_gpu';\nimport {LRNPackedProgram} from './lrn_packed_gpu';\nimport {MaxPool2DBackpropProgram, MaxPool3DBackpropProgram} from './max_pool_backprop_gpu';\nimport {MatMulPackedProgram} from './mulmat_packed_gpu';\nimport {MultinomialProgram} from './multinomial_gpu';\nimport {OneHotProgram} from './onehot_gpu';\nimport {PackProgram} from './pack_gpu';\nimport {PadProgram} from './pad_gpu';\nimport {PadPackedProgram} from './pad_packed_gpu';\nimport {Pool2DProgram, Pool3DProgram} from './pool_gpu';\nimport {ReduceProgram} from './reduce_gpu';\nimport {ReshapePackedProgram} from './reshape_packed_gpu';\nimport {ResizeBilinearBackpropProgram} from './resize_bilinear_backprop_gpu';\nimport {ResizeBilinearProgram} from './resize_bilinear_gpu';\nimport {ResizeBilinearPackedProgram} from './resize_bilinear_packed_gpu';\nimport {ResizeNearestNeigborBackpropProgram} from './resize_nearest_neighbor_backprop_gpu';\nimport {ResizeNearestNeighborProgram} from './resize_nearest_neighbor_gpu';\nimport {ReverseProgram} from './reverse_gpu';\nimport {ReversePackedProgram} from './reverse_packed_gpu';\nimport {ScatterProgram} from './scatter_gpu';\nimport {SegmentOpProgram} from './segment_gpu';\nimport {SelectProgram} from './select_gpu';\nimport {SliceProgram} from './slice_gpu';\nimport {SlicePackedProgram} from './slice_packed_gpu';\nimport {StridedSliceProgram} from './strided_slice_gpu';\nimport * as tex_util from './tex_util';\nimport {TextureData, TextureUsage} from './tex_util';\nimport {TextureManager} from './texture_manager';\nimport {TileProgram} from './tile_gpu';\nimport {TransposeProgram} from './transpose_gpu';\nimport {TransposePackedProgram} from './transpose_packed_gpu';\nimport * as unary_op from './unaryop_gpu';\nimport {UnaryOpProgram} from './unaryop_gpu';\nimport * as unary_packed_op from './unaryop_packed_gpu';\nimport {UnaryOpPackedProgram} from './unaryop_packed_gpu';\nimport {UnpackProgram} from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\n\ntype KernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<KernelInfo>|KernelInfo;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\nconst binaryCaches: {[webGLVersion: string]: {[key: string]: GPGPUBinary}} = {};\n\nfunction getBinaryCache(webGLVersion: number) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\nfunction mapActivationToShaderProgram(\n    activation: Activation, packed = false): string {\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n    return unary_op.ELU;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return binaryop_packed_gpu.PRELU;\n    }\n    return binaryop_gpu.PRELU;\n  }\n  throw new Error(`Activation ${\n      activation} has not been implemented for the WebGL backend.`);\n}\n\n// Combines a dataId, a shape, and a dtype without a Tensor object so that\n// programs can be executed without a full Tensor object.\nexport interface TensorHandle {\n  dataId: DataId;\n  shape: number[];\n  dtype: DataType;\n}\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = 128;\n\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning(): number {\n  if (ENV.global.screen == null) {\n    return 1024;  // 1 GB.\n  }\n  return (ENV.global.screen.height * ENV.global.screen.width *\n          window.devicePixelRatio) *\n      BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\n\nexport class MathBackendWebGL implements KernelBackend {\n  private texData: DataStorage<TextureData>;\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n  // Used to count the number of 'shallow' sliced tensors that point to the\n  // same data id.\n  private dataRefCount = new WeakMap<DataId, number>();\n  private numBytesInGPU = 0;\n\n  private canvas: HTMLCanvasElement;\n  private fromPixels2DContext: CanvasRenderingContext2D|\n      OffscreenCanvasRenderingContext2D;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n  private cpuBackend: KernelBackend;\n\n  // Number of bits of precision of this backend.\n  private floatPrecisionValue: 32|16;\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary};\n  private gpgpuCreatedLocally: boolean;\n  private numMBBeforeWarning: number;\n  private warnedAboutMemory = false;\n\n  constructor(private gpgpu?: GPGPUContext) {\n    if (!ENV.getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    if (gpgpu == null) {\n      const gl = getWebGLContext(ENV.getNumber('WEBGL_VERSION'));\n      this.binaryCache = getBinaryCache(ENV.getNumber('WEBGL_VERSION'));\n      this.gpgpu = new GPGPUContext(gl);\n      this.canvas = gl.canvas;\n      this.gpgpuCreatedLocally = true;\n    } else {\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n      this.canvas = gpgpu.gl.canvas;\n    }\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n\n    this.texData = new DataStorage(this, ENGINE);\n  }\n\n  register(dataId: DataId, shape: number[], dtype: DataType): void {\n    if (this.texData.has(dataId)) {\n      throw new Error('Data buffer is already registered');\n    }\n    this.texData.set(dataId, {shape, dtype});\n  }\n\n  fromPixels(\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      HTMLVideoElement,\n      numChannels: number): Tensor3D {\n    if (pixels == null) {\n      throw new Error(\n          'pixels passed to tf.browser.fromPixels() can not be null');\n    }\n\n    const isCanvas = (typeof (OffscreenCanvas) !== 'undefined' &&\n                      pixels instanceof OffscreenCanvas) ||\n        (typeof (HTMLCanvasElement) !== 'undefined' &&\n         pixels instanceof HTMLCanvasElement);\n    const isPixelData = (pixels as PixelData).data instanceof Uint8Array;\n    const isImageData =\n        typeof (ImageData) !== 'undefined' && pixels instanceof ImageData;\n    const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n        pixels instanceof HTMLVideoElement;\n    const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n        pixels instanceof HTMLImageElement;\n    const [width, height] = isVideo ?\n        [\n          (pixels as HTMLVideoElement).videoWidth,\n          (pixels as HTMLVideoElement).videoHeight\n        ] :\n        [pixels.width, pixels.height];\n\n    const texShape: [number, number] = [height, width];\n    const outShape = [height, width, numChannels];\n\n    if (!isCanvas && !isPixelData && !isImageData && !isVideo && !isImage) {\n      throw new Error(\n          'pixels passed to tf.browser.fromPixels() must be either an ' +\n          `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` +\n          `in browser, or OffscreenCanvas, ImageData in webworker` +\n          ` or {data: Uint32Array, width: number, height: number}, ` +\n          `but was ${(pixels as {}).constructor.name}`);\n    }\n\n    if (isImage || isVideo) {\n      if (this.fromPixels2DContext == null) {\n        //@ts-ignore\n        this.fromPixels2DContext =\n            createCanvas(ENV.getNumber('WEBGL_VERSION')).getContext('2d');\n      }\n\n      this.fromPixels2DContext.canvas.width = width;\n      this.fromPixels2DContext.canvas.height = height;\n      this.fromPixels2DContext.drawImage(\n          pixels as HTMLVideoElement | HTMLImageElement, 0, 0, width, height);\n      //@ts-ignore\n      pixels = this.fromPixels2DContext.canvas;\n    }\n\n    const tempPixelHandle = this.makeTensorHandle(texShape, 'int32');\n    // This is a byte texture with pixels.\n    this.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n    this.gpgpu.uploadPixelDataToTexture(\n        this.getTexture(tempPixelHandle.dataId), pixels as ImageData);\n    let program, res;\n    if (ENV.getBool('WEBGL_PACK')) {\n      program = new FromPixelsPackedProgram(outShape);\n      const packedOutput =\n          this.makePackedTensor(program.outputShape, tempPixelHandle.dtype);\n      res = this.compileAndRun(program, [tempPixelHandle], packedOutput);\n    } else {\n      program = new FromPixelsProgram(outShape);\n      res = this.compileAndRun(program, [tempPixelHandle]);\n    }\n\n    this.disposeData(tempPixelHandle.dataId);\n\n    return res as Tensor3D;\n  }\n\n  private makeTensorHandle(shape: number[], dtype: DataType): TensorHandle {\n    const dataId = {};\n    this.register(dataId, shape, dtype);\n    return {dataId, shape, dtype};\n  }\n\n  write(dataId: DataId, values: BackendValues): void {\n    if (values == null) {\n      throw new Error('MathBackendWebGL.write(): values can not be null');\n    }\n\n    if (ENV.getBool('DEBUG')) {\n      for (let i = 0; i < values.length; i++) {\n        const num = values[i] as number;\n        if (!webgl_util.canBeRepresented(num)) {\n          if (ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n            throw Error(\n                `The value ${num} cannot be represented with your ` +\n                `current settings. Consider enabling float32 rendering: ` +\n                `'tf.ENV.set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n          }\n          throw Error(`The value ${num} cannot be represented on this device.`);\n        }\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n\n    this.releaseGPUData(dataId);\n    texData.usage = TextureUsage.UPLOAD;\n    texData.values = values;\n  }\n\n  readSync(dataId: DataId): BackendValues {\n    const texData = this.texData.get(dataId);\n    const {values, dtype, complexTensors, slice, shape, isPacked} = texData;\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res = this.compileAndRun(program, [{dataId, shape, dtype}]);\n      const data = this.readSync(res.dataId);\n      (res as Tensor).dispose();\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result: Float32Array;\n    if (dtype === 'complex64') {\n      const realValues = complexTensors.real.dataSync() as Float32Array;\n      const imagValues = complexTensors.imag.dataSync() as Float32Array;\n      result = mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  async read(dataId: DataId): Promise<BackendValues> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, complexTensors, isPacked} = texData;\n\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res = this.compileAndRun(program, [{dataId, shape, dtype}]);\n      const data = this.read(res.dataId);\n      (res as Tensor).dispose();\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (!ENV.getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n        ENV.getNumber('WEBGL_VERSION') === 2) {\n      throw new Error(\n          `tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n          `WEBGL_VERSION=2 not yet supported.`);\n    }\n\n    let buffer = null;\n    let tmpDownloadTarget: TensorHandle;\n\n    if (dtype !== 'complex64' && ENV.get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n\n      buffer = this.gpgpu.createBufferFromTexture(\n          tmpData.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n\n    // Download the values from the GPU.\n    let vals: Float32Array;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all(\n          [complexTensors.real.data(), complexTensors.imag.data()]);\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeData(tmpDownloadTarget.dataId);\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      this.disposeData(dataId);\n    }\n    return dTypeVals;\n  }\n\n  private getValuesFromTexture(dataId: DataId): Float32Array {\n    const {shape, dtype, isPacked} = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (ENV.getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals = this.gpgpu\n                       .downloadMatrixFromPackedTexture(\n                           tmpData.texture, ...tex_util.getDenseTexShape(shape))\n                       .subarray(0, size);\n\n      this.disposeData(tmpTarget.dataId);\n\n      return vals;\n    }\n\n    const shouldUsePackedProgram =\n        ENV.getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape =\n        shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const tmpTarget =\n        this.makeTensorHandle(outputShape, 'float32') as TensorHandle &\n        {size: number};\n    tmpTarget.size = sizeFromShape(shape);\n    this.texData.get(tmpTarget.dataId).usage = TextureUsage.DOWNLOAD;\n\n    const output = tidy(() => {\n      const program = shouldUsePackedProgram ?\n          new EncodeFloatPackedProgram(\n              outputShape as [number, number, number]) :\n          new EncodeFloatProgram(outputShape);\n\n      return this.compileAndRun(\n          program, [{shape: outputShape, dtype, dataId}], tmpTarget, null);\n    });\n\n    const tmpData = this.texData.get(output.dataId);\n    const vals =\n        this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(\n                tmpData.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n    this.disposeData(tmpTarget.dataId);\n\n    return vals;\n  }\n\n  async time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: util.sum(kernelMs),\n      getExtraProfileInfo: () =>\n          kernelMs.map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n              .map(d => `${d.name}: ${d.ms}`)\n              .join(', '),\n      wallMs: null  // will be filled by the engine\n    };\n    this.uploadWaitMs = 0;\n    this.downloadWaitMs = 0;\n    return res;\n  }\n  memory(): WebGLMemoryInfo {\n    return {unreliable: false, numBytesInGPU: this.numBytesInGPU} as\n        WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: util.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|CPUTimerQuery {\n    if (ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = util.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query as WebGLQuery);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  disposeData(dataId: DataId): void {\n    if (this.pendingDisposal.has(dataId)) {\n      return;\n    }\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      return;\n    }\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return;\n    }\n\n    this.releaseGPUData(dataId);\n    const {complexTensors} = this.texData.get(dataId);\n    if (complexTensors != null) {\n      complexTensors.real.dispose();\n      complexTensors.imag.dispose();\n    }\n    this.texData.delete(dataId);\n  }\n\n  private releaseGPUData(dataId: DataId): void {\n    const {texture, dtype, texShape, usage, isPacked, slice} =\n        this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture;\n  }\n\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId: DataId): TextureData {\n    return this.texData.get(dataId);\n  }\n\n  private getCPUBackend(): KernelBackend|null {\n    if (!ENV.getBool('WEBGL_CPU_FORWARD')) {\n      return null;\n    }\n\n    if (this.cpuBackend == null) {\n      this.cpuBackend = ENGINE.findBackend('cpu');\n    }\n\n    return this.cpuBackend;\n  }\n\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  private shouldExecuteOnCPU(\n      inputs: Tensor[], sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return this.getCPUBackend() != null &&\n        inputs.every(\n            input => this.texData.get(input.dataId).texture == null &&\n                input.size < sizeThreshold);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n\n  complex<T extends Tensor>(real: T, imag: T): T {\n    const result = this.makeOutputArray(real.shape, 'complex64');\n    const resultData = this.texData.get(result.dataId);\n    // The backend owns the reference to the underlying real and imaginary\n    // clones. These will explicitly get disposed when the complex tensor is\n    // disposed.\n    resultData.complexTensors = {\n      real: ENGINE.keep(real.clone()),\n      imag: ENGINE.keep(imag.clone())\n    };\n\n    return result as T;\n  }\n  real<T extends Tensor>(input: T): T {\n    const resultData = this.texData.get(input.dataId);\n    return resultData.complexTensors.real.clone() as T;\n  }\n  imag<T extends Tensor>(input: T): T {\n    const resultData = this.texData.get(input.dataId);\n    return resultData.complexTensors.imag.clone() as T;\n  }\n\n  slice<T extends Tensor>(x: T, begin: number[], size: number[]): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.slice(x, begin, size);\n    }\n    // Short-circuit computation if the slice is zero-sized.\n    if (util.sizeFromShape(size) === 0) {\n      return tensor([], size, x.dtype) as T;\n    }\n    const {isPacked} = this.texData.get(x.dataId);\n    const isContinous = slice_util.isSliceContinous(x.shape, begin, size);\n    if (isPacked || !isContinous) {\n      const program = ENV.getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n          new SlicePackedProgram(size) :\n          new SliceProgram(size);\n      const customSetup = program.getCustomSetupFunc(begin);\n      return this.compileAndRun(program, [x], null, customSetup);\n    }\n    this.uploadToGPU(x.dataId);\n    return this.shallowSlice(x, begin, size) as T;\n  }\n\n  private shallowSlice(x: Tensor, begin: number[], size: number[]): Tensor {\n    const xTexData = this.texData.get(x.dataId);\n    const t = Tensor.make(size, {}, x.dtype, this);\n    const newTexData = this.texData.get(t.dataId);\n    // Copy texture data from the original tensor.\n    Object.assign(newTexData, xTexData);\n    newTexData.shape = size;\n    newTexData.dtype = x.dtype;\n    let flatOffset = slice_util.computeFlatOffset(begin, x.strides);\n    if (xTexData.slice) {\n      // We are slicing an already sliced tensor, so we have to accumulate\n      // the offset.\n      flatOffset += xTexData.slice.flatOffset;\n    }\n    newTexData.slice = {\n      flatOffset,\n      // Point to the original dataId, which is used to do ref counting.\n      origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n    };\n\n    // Increase the ref count for that data bucket.\n    const refCount = this.dataRefCount.get(newTexData.slice.origDataId) || 1;\n    this.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n\n    return t;\n  }\n\n  stridedSlice<T extends Tensor>(\n      x: T, begin: number[], end: number[], strides: number[]): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.stridedSlice(x, begin, end, strides);\n    }\n\n    const outShape = slice_util.computeOutShape(begin, end, strides);\n\n    if (outShape.some(axis => axis === 0)) {\n      return tensor([], outShape) as T;\n    }\n\n    const program = new StridedSliceProgram(begin, strides, outShape);\n    return this.compileAndRun(program, [x]);\n  }\n\n  reverse<T extends Tensor>(x: T, axis: number[]): T {\n    const program = ENV.getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new ReversePackedProgram(x.shape, axis) :\n        new ReverseProgram(x.shape, axis);\n    return this.compileAndRun(program, [x]);\n  }\n\n  concat(tensors: Tensor[], axis: number): Tensor {\n    if (tensors[0].dtype === 'complex64') {\n      const reals = tensors.map((t) => real(t));\n      const imags = tensors.map((t) => imag(t));\n      return complex(this.concat(reals, axis), this.concat(imags, axis));\n    }\n    if (this.shouldExecuteOnCPU(tensors)) {\n      return this.cpuBackend.concat(tensors, axis);\n    }\n\n    if (tensors.length === 1) {\n      return tensors[0];\n    }\n    if (tensors.length > ENV.getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n      const midIndex = Math.floor(tensors.length / 2);\n      const leftSide = this.concat(tensors.slice(0, midIndex), axis);\n      const rightSide = this.concat(tensors.slice(midIndex), axis);\n      return this.concat([leftSide, rightSide], axis);\n    }\n    if (ENV.getBool('WEBGL_PACK_ARRAY_OPERATIONS') && tensors[0].rank > 1) {\n      const program = new ConcatPackedProgram(tensors.map(t => t.shape), axis);\n      return this.compileAndRun(program, tensors);\n    }\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const outShape = computeOutShape(tensors.map(t => t.shape), axis);\n    const tensors2D =\n        tensors.map(t => t.as2D(-1, sizeFromShape(t.shape.slice(axis))));\n    const program = new ConcatProgram(tensors2D.map(t => t.shape));\n    const res: Tensor = this.compileAndRun(program, tensors2D);\n    return res.reshape(outShape);\n  }\n\n  neg<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.neg(x);\n    }\n\n    if (ENV.getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.NEG, x.dtype) as T;\n    }\n    const program = new UnaryOpProgram(x.shape, unary_op.NEG);\n    return this.compileAndRun(program, [x]);\n  }\n\n  batchMatMul(\n      a: Tensor3D, b: Tensor3D, transposeA: boolean,\n      transposeB: boolean): Tensor3D {\n    const outerShapeA = transposeA ? a.shape[2] : a.shape[1];\n    const outerShapeB = transposeB ? b.shape[1] : b.shape[2];\n    const sharedDim = transposeA ? a.shape[1] : a.shape[2];\n    const [batch, , ] = a.shape;\n\n    // Since the matrices are vectors, it is faster to call mul().sum()\n    // because sum() is O(sqrt(N)) due to divide-and-conquer.\n    if ((outerShapeA === 1 || outerShapeB === 1) &&\n        sharedDim > MATMUL_SHARED_DIM_THRESHOLD) {\n      if (transposeA) {\n        a = a.transpose([0, 2, 1]);\n      }\n      if (transposeB) {\n        b = b.transpose([0, 2, 1]);\n      }\n\n      const a3D = outerShapeB === 1 ? a : a.as3D(batch, sharedDim, 1);\n      const axis = outerShapeB === 1 ? 2 : 1;\n      const b3D = outerShapeB === 1 ? b.as3D(batch, 1, sharedDim) : b;\n      return this.multiply(a3D, b3D).sum(axis, true /* keepDims */);\n    }\n\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const program = new MatMulPackedProgram(\n        a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB);\n    const output: Tensor3D = this.makePackedTensor(program.outputShape, dtype);\n    return this.compileAndRun<Tensor3D>(program, [a, b], output);\n  }\n\n  fusedBatchMatMul(\n      {a, b, transposeA, transposeB, bias, activation, preluActivationWeights}:\n          FusedBatchMatMulConfig): Tensor3D {\n    const outerShapeA = transposeA ? a.shape[2] : a.shape[1];\n    const outerShapeB = transposeB ? b.shape[1] : b.shape[2];\n    const [batch, , ] = a.shape;\n\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, true) : null;\n    const program = new MatMulPackedProgram(\n        a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB,\n        hasBias, fusedActivation, hasPreluActivationWeights);\n    const output: Tensor3D = this.makePackedTensor(program.outputShape, dtype);\n    const inputs: TensorHandle[] = [a, b];\n    if (bias) {\n      inputs.push(bias);\n    }\n    if (preluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    return this.compileAndRun<Tensor3D>(program, inputs, output);\n  }\n\n  multiply(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64') {\n      const aData = this.texData.get(a.dataId);\n      const bData = this.texData.get(b.dataId);\n\n      const realProgram = new BinaryOpComplexProgram(\n          binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n      const imagProgram = new BinaryOpComplexProgram(\n          binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n\n      const inputs = [\n        this.makeComplexComponentTensorHandle(a, aData.complexTensors.real),\n        this.makeComplexComponentTensorHandle(a, aData.complexTensors.imag),\n        this.makeComplexComponentTensorHandle(b, bData.complexTensors.real),\n        this.makeComplexComponentTensorHandle(b, bData.complexTensors.imag)\n      ];\n      const real = this.compileAndRun<Tensor>(realProgram, inputs);\n      const imag = this.compileAndRun<Tensor>(imagProgram, inputs);\n\n      const complex = this.complex(real, imag);\n      real.dispose();\n      imag.dispose();\n      return complex;\n    }\n\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.multiply(a, b);\n    }\n    if (ENV.getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_gpu.MUL, a.dtype);\n    }\n    const program = new BinaryOpProgram(binaryop_gpu.MUL, a.shape, b.shape);\n    const output = this.makeOutputArray(program.outputShape, a.dtype);\n    return this.compileAndRun(program, [a, b], output);\n  }\n\n  batchNormalization(\n      x: Tensor4D, mean: Tensor4D|Tensor1D, variance: Tensor4D|Tensor1D,\n      varianceEpsilon: number, scale?: Tensor4D|Tensor1D,\n      offset?: Tensor4D|Tensor1D): Tensor4D {\n    const inputs = [x, mean, variance];\n\n    let offsetShape = null;\n    if (offset != null) {\n      offsetShape = offset.shape;\n      inputs.push(offset);\n    }\n\n    let scaleShape = null;\n    if (scale != null) {\n      scaleShape = scale.shape;\n      inputs.push(scale);\n    }\n\n    if (ENV.getBool('WEBGL_PACK_NORMALIZATION')) {\n      const batchNormPackedProgram = new BatchNormPackedProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon);\n      return this.compileAndRun<Tensor4D>(batchNormPackedProgram, inputs);\n    }\n\n    const batchNormProgram = new BatchNormProgram(\n        x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n        varianceEpsilon);\n    return this.compileAndRun(batchNormProgram, inputs);\n  }\n\n  localResponseNormalization4D(\n      x: Tensor4D, radius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    const program = ENV.getBool('WEBGL_PACK_NORMALIZATION') ?\n        new LRNPackedProgram(x.shape, radius, bias, alpha, beta) :\n        new LRNProgram(x.shape, radius, bias, alpha, beta);\n    return this.compileAndRun(program, [x]);\n  }\n\n  LRNGrad(\n      dy: Tensor4D, inputImage: Tensor4D, outputImage: Tensor4D,\n      depthRadius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    const program =\n        new LRNGradProgram(inputImage.shape, depthRadius, bias, alpha, beta);\n    return this.compileAndRun(program, [inputImage, outputImage, dy]);\n  }\n\n  tile<T extends Tensor>(x: T, reps: number[]): T {\n    if (x.dtype === 'string') {\n      const data = this.readSync(x.dataId) as Uint8Array[];\n      const decodedData = data.map(d => util.decodeString(d));\n      const buf = buffer(x.shape, x.dtype, decodedData);\n      return tile(buf, reps) as T;\n    }\n    const program = new TileProgram(x.shape, reps);\n    return this.compileAndRun(program, [x]);\n  }\n\n  pad<T extends Tensor>(\n      x: T, paddings: Array<[number, number]>, constantValue: number): T {\n    const program = ENV.getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new PadPackedProgram(x.shape, paddings, constantValue) :\n        new PadProgram(x.shape, paddings, constantValue);\n    return this.compileAndRun(program, [x]);\n  }\n\n  transpose<T extends Tensor>(x: T, perm: number[]): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.transpose(x, perm);\n    }\n    const program = ENV.getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new TransposePackedProgram(x.shape, perm) :\n        new TransposeProgram(x.shape, perm);\n    return this.compileAndRun(program, [x]);\n  }\n\n  gather<T extends Tensor>(x: T, indices: Tensor1D, axis: number): T {\n    if (this.shouldExecuteOnCPU([x, indices])) {\n      return this.cpuBackend.gather(x, indices, axis);\n    }\n    const program = new GatherProgram(x.shape, indices.size, axis);\n    return this.compileAndRun(program, [x, indices]);\n  }\n\n  batchToSpaceND<T extends Tensor>(\n      x: T, blockShape: number[], crops: number[][]): T {\n    util.assert(\n        x.rank <= 4,\n        () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n            'implemented yet');\n    const prod = blockShape.reduce((a, b) => a * b);\n\n    const reshaped = array_ops_util.getReshaped(x.shape, blockShape, prod);\n    const permuted =\n        array_ops_util.getPermuted(reshaped.length, blockShape.length);\n    const reshapedPermuted =\n        array_ops_util.getReshapedPermuted(x.shape, blockShape, prod);\n    const sliceBeginCoords =\n        array_ops_util.getSliceBeginCoords(crops, blockShape.length);\n    const sliceSize =\n        array_ops_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n    return x.reshape(reshaped)\n               .transpose(permuted)\n               .reshape(reshapedPermuted)\n               .slice(sliceBeginCoords, sliceSize) as T;\n  }\n\n  spaceToBatchND<T extends Tensor>(\n      x: T, blockShape: number[], paddings: Array<[number, number]>): T {\n    util.assert(\n        x.rank <= 4,\n        () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n            'implemented yet');\n\n    const prod = blockShape.reduce((a, b) => a * b);\n\n    const completePaddings: Array<[number, number]> = [[0, 0]];\n    completePaddings.push(...paddings);\n    for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n      completePaddings.push([0, 0]);\n    }\n\n    const paddedX = x.pad(completePaddings);\n\n    const reshapedPaddedShape =\n        array_ops_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n    const permutedReshapedPaddedPermutation = array_ops_util.getPermuted(\n        reshapedPaddedShape.length, blockShape.length, false);\n\n    const flattenShape = array_ops_util.getReshapedPermuted(\n        paddedX.shape, blockShape, prod, false);\n\n    return paddedX.reshape(reshapedPaddedShape)\n               .transpose(permutedReshapedPaddedPermutation)\n               .reshape(flattenShape) as T;\n  }\n\n  private reduce(\n      x: Tensor2D, reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod',\n      dtype: DataType): Tensor2D {\n    const batchSize = x.shape[0];\n    const inSize = x.shape[1];\n    const windowSize = reduce_util.computeOptimalWindowSize(inSize);\n    const reduceInfo = {windowSize, inSize, batchSize};\n    const program = new ReduceProgram(reduceInfo, reduceType);\n    const [rows, cols] = program.outputShape;\n    const output = this.makeOutputArray<Tensor2D>([rows, cols], dtype);\n\n    this.compileAndRun(program, [x], output);\n    // No need to run another GPGPU program.\n    if (output.shape[1] === 1) {\n      return output;\n    }\n    return this.reduce(output, reduceType, dtype);\n  }\n\n  private argReduce(\n      x: Tensor2D, reduceType: 'max'|'min',\n      bestIndicesA: Tensor2D = null): Tensor2D {\n    let batchSize = x.shape[0];\n    let inSize = x.shape[1];\n    if (bestIndicesA != null) {\n      batchSize = bestIndicesA.shape[0];\n      inSize = bestIndicesA.shape[1];\n    }\n    const windowSize = reduce_util.computeOptimalWindowSize(inSize);\n    const reduceInfo = {windowSize, inSize, batchSize};\n    const program =\n        new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n    const [rows, cols] = program.outputShape;\n    const output = this.makeOutputArray<Tensor2D>([rows, cols], 'int32');\n    const inputs = [x];\n    if (bestIndicesA != null) {\n      inputs.push(bestIndicesA);\n    }\n    this.compileAndRun(program, inputs, output);\n    // No need to run another GPGPU program.\n    if (output.shape[1] === 1) {\n      return output;\n    }\n    return this.argReduce(x, reduceType, output);\n  }\n\n  private argReducePacked(\n      x: Tensor, reduceType: 'max'|'min', bestIndicesA: Tensor = null): Tensor {\n    const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n    const inSize = inShape[inShape.length - 1];\n    const windowSize = reduce_util.computeOptimalWindowSize(inSize);\n    const program = new ArgMinMaxPackedProgram(\n        inShape, windowSize, reduceType, bestIndicesA == null);\n    const output = this.makePackedTensor(program.outputShape, 'int32');\n    const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n    this.compileAndRun(program, inputs, output);\n    if (output.rank === x.rank) {\n      return this.argReducePacked(x, reduceType, output);\n    }\n    return output;\n  }\n\n  sum(x: Tensor, axes: number[]): Tensor {\n    axis_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    const outputDType = sumOutType(x.dtype);\n    return this.reduce(a2D, 'sum', outputDType).reshape(outShape);\n  }\n\n  prod(x: Tensor, axes: number[]): Tensor {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.prod(x, axes);\n    }\n\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    const outputDType = sumOutType(x.dtype);\n    return this.reduce(a2D, 'prod', outputDType).reshape(outShape);\n  }\n\n  unsortedSegmentSum<T extends Tensor>(\n      x: T, segmentIds: Tensor1D, numSegments: number): Tensor {\n    let axis = 0;\n    const permutation = axis_util.getAxesPermutation([axis], x.rank);\n    let permutedX = x;\n    if (permutation != null) {\n      permutedX = x.transpose(permutation);\n      axis = axis_util.getInnerMostAxes(1, x.rank)[0];\n    }\n\n    const outShape =\n        segment_util.computeOutShape(permutedX.shape, axis, numSegments);\n    const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n    const a2D = permutedX.as2D(-1, inSize);\n    const outputDType = sumOutType(x.dtype);\n    let result =\n        this.segOpCompute(\n                a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments)\n            .reshape(outShape);\n    if (permutation != null) {\n      result = result.transpose(axis_util.getUndoAxesPermutation(permutation));\n    }\n    return result;\n  }\n\n  private segOpCompute(\n      x: Tensor2D, segOpType: 'unsortedSegmentSum', segmentIds: Tensor1D,\n      dtype: DataType, numSegments: number): Tensor2D {\n    const batchSize = x.shape[0];\n    const inSize = x.shape[1];\n    const windowSize =\n        segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);\n    const segOpInfo = {windowSize, inSize, batchSize, numSegments};\n    const program = new SegmentOpProgram(segOpInfo, segOpType);\n    const [rows, cols] = program.outputShape;\n    const output = this.makeOutputArray<Tensor2D>([rows, cols], dtype);\n    this.compileAndRun(program, [x, segmentIds], output);\n    // No need to run another GPGPU program.\n    if (output.shape[1] === numSegments) {\n      return output;\n    }\n    segmentIds = range(0, numSegments).tile([inSize / windowSize]);\n    return this.segOpCompute(output, segOpType, segmentIds, dtype, numSegments);\n  }\n\n  private argMinMaxReduce(x: Tensor, axis: number, reduceType: 'min'|'max'):\n      Tensor {\n    const axes = [axis];\n    axis_util.assertAxesAreInnerMostDims(\n        'arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes,\n        x.rank);\n    if (!ENV.getBool('WEBGL_PACK_REDUCE') || x.rank <= 2) {\n      const [outShape, reduceShape] =\n          axis_util.computeOutAndReduceShapes(x.shape, axes);\n      const inSize = util.sizeFromShape(reduceShape);\n      const a2D = x.as2D(-1, inSize);\n      return this.argReduce(a2D, reduceType).reshape(outShape);\n    }\n    return this.argReducePacked(x, reduceType);\n  }\n\n  argMin(x: Tensor, axis: number): Tensor {\n    return this.argMinMaxReduce(x, axis, 'min');\n  }\n\n  argMax(x: Tensor, axis: number): Tensor {\n    return this.argMinMaxReduce(x, axis, 'max');\n  }\n\n  cumsum(x: Tensor, axis: number, exclusive: boolean, reverse: boolean):\n      Tensor {\n    if (axis !== x.rank - 1) {\n      throw new Error(\n          `WebGL cumsum shader expects an inner-most axis=${x.rank - 1} ` +\n          `but got axis=${axis}`);\n    }\n    const program = new CumSumProgram(x.shape, exclusive, reverse);\n    return this.compileAndRun(program, [x]);\n  }\n\n  equal(a: Tensor, b: Tensor): Tensor {\n    if (ENV.getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.EQUAL, 'bool');\n    }\n    const program = new BinaryOpProgram(binaryop_gpu.EQUAL, a.shape, b.shape);\n    const output = this.makeOutputArray(program.outputShape, 'bool');\n    return this.compileAndRun(program, [a, b], output);\n  }\n\n  notEqual(a: Tensor, b: Tensor): Tensor {\n    if (ENV.getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.NOT_EQUAL, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.NOT_EQUAL, a.shape, b.shape);\n    const output = this.makeOutputArray(program.outputShape, 'bool');\n    return this.compileAndRun(program, [a, b], output);\n  }\n\n  less(a: Tensor, b: Tensor): Tensor {\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.less(a, b);\n    }\n\n    if (ENV.getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LESS, 'bool');\n    }\n\n    const program = new BinaryOpProgram(binaryop_gpu.LESS, a.shape, b.shape);\n    const output = this.makeOutputArray(program.outputShape, 'bool');\n    return this.compileAndRun(program, [a, b], output);\n  }\n\n  lessEqual(a: Tensor, b: Tensor): Tensor {\n    if (ENV.getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LESS_EQUAL, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.LESS_EQUAL, a.shape, b.shape);\n    const output = this.makeOutputArray(program.outputShape, 'bool');\n    return this.compileAndRun(program, [a, b], output);\n  }\n\n  greater(a: Tensor, b: Tensor): Tensor {\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.greater(a, b);\n    }\n\n    if (ENV.getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.GREATER, 'bool');\n    }\n\n    const program = new BinaryOpProgram(binaryop_gpu.GREATER, a.shape, b.shape);\n    const output = this.makeOutputArray(program.outputShape, 'bool');\n    return this.compileAndRun(program, [a, b], output);\n  }\n\n  greaterEqual(a: Tensor, b: Tensor): Tensor {\n    if (ENV.getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(\n          a, b, binaryop_packed_gpu.GREATER_EQUAL, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.GREATER_EQUAL, a.shape, b.shape);\n    const output = this.makeOutputArray(program.outputShape, 'bool');\n    return this.compileAndRun(program, [a, b], output);\n  }\n\n  logicalNot<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.LOGICAL_NOT);\n    return this.compileAndRun(program, [x]);\n  }\n\n  logicalAnd(a: Tensor, b: Tensor): Tensor {\n    if (ENV.getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LOGICAL_AND, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.LOGICAL_AND, a.shape, b.shape);\n    const output = this.makeOutputArray(program.outputShape, 'bool');\n    return this.compileAndRun(program, [a, b], output);\n  }\n\n  logicalOr(a: Tensor, b: Tensor): Tensor {\n    if (ENV.getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LOGICAL_OR, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.LOGICAL_OR, a.shape, b.shape);\n    const output = this.makeOutputArray(program.outputShape, 'bool');\n    return this.compileAndRun(program, [a, b], output);\n  }\n\n  select(condition: Tensor, a: Tensor, b: Tensor): Tensor {\n    const program = new SelectProgram(condition.rank, a.shape, a.rank);\n    const output =\n        this.makeOutputArray(program.outputShape, upcastType(a.dtype, b.dtype));\n    return this.compileAndRun(program, [condition, a, b], output);\n  }\n\n  where(condition: Tensor): Tensor2D {\n    warn(\n        'tf.where() in webgl locks the UI thread. ' +\n        'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  topk<T extends Tensor>(x: T, k: number, sorted: boolean): [T, T] {\n    const xVals = x.dataSync();\n    return topkImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n  }\n\n  min(x: Tensor, axes: number[]): Tensor {\n    axis_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.reduce(a2D, 'min', a2D.dtype).reshape(outShape);\n  }\n\n  minimum(a: Tensor, b: Tensor): Tensor {\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.minimum(a, b);\n    }\n\n    const program = ENV.getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.MIN, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.MIN, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  mod(a: Tensor, b: Tensor): Tensor {\n    const program = ENV.getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.MOD, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.MOD, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  max(x: Tensor, axes: number[]): Tensor {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.max(x, axes);\n    }\n\n    axis_util.assertAxesAreInnerMostDims('max', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.reduce(a2D, 'max', a2D.dtype).reshape(outShape);\n  }\n\n  maximum(a: Tensor, b: Tensor): Tensor {\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.maximum(a, b);\n    }\n\n    const program = ENV.getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.MAX, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.MAX, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  all(x: Tensor, axes: number[]): Tensor {\n    axis_util.assertAxesAreInnerMostDims('all', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.reduce(a2D, 'all', a2D.dtype).reshape(outShape);\n  }\n\n  any(x: Tensor, axes: number[]): Tensor {\n    axis_util.assertAxesAreInnerMostDims('any', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.reduce(a2D, 'any', a2D.dtype).reshape(outShape);\n  }\n\n  squaredDifference(a: Tensor, b: Tensor): Tensor {\n    const program = ENV.getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(\n            binaryop_gpu.SQUARED_DIFFERENCE, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.SQUARED_DIFFERENCE, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  realDivide(a: Tensor, b: Tensor): Tensor {\n    const op = binaryop_gpu.DIV;\n    const outputDtype = 'float32';\n    if (ENV.getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      const checkOutOfBounds = true;\n      return this.packedBinaryOp(\n          a, b, binaryop_packed_gpu.DIV, outputDtype, checkOutOfBounds);\n    }\n    const program = new BinaryOpProgram(op, a.shape, b.shape);\n    const output = this.makeOutputArray(program.outputShape, outputDtype);\n    return this.compileAndRun<Tensor>(program, [a, b], output);\n  }\n\n  floorDiv(a: Tensor, b: Tensor): Tensor {\n    const op = binaryop_gpu.INT_DIV;\n    const outputDtype = 'int32';\n    if (ENV.getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(\n          a, b, binaryop_packed_gpu.INT_DIV, outputDtype);\n    }\n    const program = new BinaryOpProgram(op, a.shape, b.shape);\n    const output = this.makeOutputArray(program.outputShape, outputDtype);\n    return this.compileAndRun<Tensor>(program, [a, b], output);\n  }\n\n  add(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' && b.dtype === 'complex64') {\n      return this.complexSeparableBinaryOp(a, b, binaryop_gpu.ADD);\n    }\n\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.add(a, b);\n    }\n\n    const dtype = upcastType(a.dtype, b.dtype);\n    if (ENV.getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_gpu.ADD, dtype);\n    }\n    const program = new BinaryOpProgram(binaryop_gpu.ADD, a.shape, b.shape);\n    const output = this.makeOutputArray(program.outputShape, dtype);\n    return this.compileAndRun<Tensor>(program, [a, b], output);\n  }\n\n  private packedUnaryOp(x: TensorHandle, op: string, dtype: DataType) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const output = this.makePackedTensor(program.outputShape, dtype);\n    return this.compileAndRun<Tensor>(program, [x], output);\n  }\n\n  private packedBinaryOp(\n      a: TensorHandle, b: TensorHandle, op: string, dtype: DataType,\n      checkOutOfBounds = false) {\n    const program =\n        new BinaryOpPackedProgram(op, a.shape, b.shape, checkOutOfBounds);\n    const output = this.makePackedTensor(program.outputShape, dtype);\n    return this.compileAndRun<Tensor>(program, [a, b], output);\n  }\n\n  /**\n   * Computes a complex binary operation that can be decomposed into a simple\n   * binary operation on both the real and imagary parts.\n   */\n  private complexSeparableBinaryOp(a: Tensor, b: Tensor, op: string): Tensor {\n    const aData = this.texData.get(a.dataId);\n    const bData = this.texData.get(b.dataId);\n\n    const [real, imag] = [\n      [aData.complexTensors.real, bData.complexTensors.real],\n      [aData.complexTensors.imag, bData.complexTensors.imag]\n    ].map(complexParts => {\n      const [aPart, bPart] = complexParts;\n\n      const aHandle = this.makeComplexComponentTensorHandle(a, aPart);\n      const bHandle = this.makeComplexComponentTensorHandle(b, bPart);\n\n      const program = new BinaryOpProgram(op, a.shape, b.shape);\n      const output = this.makeOutputArray(\n          program.outputShape, upcastType(aPart.dtype, bPart.dtype));\n\n      return this.compileAndRun<Tensor>(program, [aHandle, bHandle], output);\n    });\n\n    const complex = this.complex(real, imag);\n    real.dispose();\n    imag.dispose();\n    return complex;\n  }\n\n  // Returns a TensorHandle with the complex shape and the dataId of the\n  // underlying part. We need to do this because a reshaped complex tensor is\n  // not reflected in its parts.\n  private makeComplexComponentTensorHandle(\n      complexTensor: Tensor, complexPart: Tensor): TensorHandle {\n    return {\n      dataId: complexPart.dataId,\n      dtype: complexPart.dtype,\n      shape: complexTensor.shape\n    };\n  }\n\n  addN<T extends Tensor>(tensors: T[]): T {\n    if (tensors.length === 1) {\n      return tensors[0];\n    }\n\n    // Limit the number of uploaded textures for optimization.\n    if (tensors.length > ENV.get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n      const midIndex = Math.floor(tensors.length / 2);\n      const leftSide = this.addN(tensors.slice(0, midIndex));\n      const rightSide = this.addN(tensors.slice(midIndex));\n      return this.addN([leftSide, rightSide]);\n    }\n\n    const dtype =\n        tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n    const shapes = tensors.map(t => t.shape);\n    // We can make sure shapes are identical in op level.\n    const usePackedOp = ENV.getBool('WEBGL_PACK');\n    const program = usePackedOp ?\n        new AddNPackedProgram(tensors[0].shape, shapes) :\n        new AddNProgram(tensors[0].shape, shapes);\n    const output: T = usePackedOp ?\n        this.makePackedTensor(program.outputShape, dtype) :\n        this.makeOutputArray(program.outputShape, dtype);\n    return this.compileAndRun<T>(program, tensors, output);\n  }\n\n  subtract(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' && b.dtype === 'complex64') {\n      return this.complexSeparableBinaryOp(a, b, binaryop_gpu.SUB);\n    }\n\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.subtract(a, b);\n    }\n    const dtype = upcastType(a.dtype, b.dtype);\n    if (ENV.getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_gpu.SUB, a.dtype);\n    }\n    const program = new BinaryOpProgram(binaryop_gpu.SUB, a.shape, b.shape);\n    const output = this.makeOutputArray(program.outputShape, dtype);\n    return this.compileAndRun<Tensor>(program, [a, b], output);\n  }\n\n  pow<T extends Tensor>(a: T, b: Tensor): T {\n    const usePackedOp = ENV.getBool('WEBGL_PACK_BINARY_OPERATIONS');\n    const program = usePackedOp ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.POW, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.POW, a.shape, b.shape);\n    const dtype = upcastType(a.dtype, b.dtype);\n    const output: T = usePackedOp ?\n        this.makePackedTensor(program.outputShape, dtype) :\n        this.makeOutputArray(program.outputShape, dtype);\n    return this.compileAndRun<T>(program, [a, b], output);\n  }\n\n  ceil<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.ceil(x);\n    }\n\n    if (ENV.getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.CEIL, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.CEIL);\n    return this.compileAndRun(program, [x]);\n  }\n\n  floor<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.floor(x);\n    }\n\n    if (ENV.getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.FLOOR, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.FLOOR);\n    return this.compileAndRun(program, [x]);\n  }\n\n  sign<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SIGN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  isNaN<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.IS_NAN);\n    const output = this.makeOutputArray(program.outputShape, 'bool');\n    return this.compileAndRun(program, [x], output) as T;\n  }\n  isInf<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.IS_INF);\n    const output = this.makeOutputArray(program.outputShape, 'bool');\n    return this.compileAndRun(program, [x], output) as T;\n  }\n  isFinite<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.IS_FINITE);\n    const output = this.makeOutputArray(program.outputShape, 'bool');\n    return this.compileAndRun(program, [x], output) as T;\n  }\n\n  round<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ROUND);\n    return this.compileAndRun(program, [x]);\n  }\n\n  exp<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.exp(x);\n    }\n\n    if (ENV.getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.EXP, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.EXP);\n    return this.compileAndRun(program, [x]);\n  }\n\n  expm1<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.expm1(x);\n    }\n\n    if (ENV.getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.EXPM1, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.EXPM1);\n    return this.compileAndRun(program, [x]);\n  }\n\n  log<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.log(x);\n    }\n\n    if (ENV.getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_packed_op.LOG, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.LOG);\n    return this.compileAndRun(program, [x]);\n  }\n\n  log1p<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.LOG1P);\n    return this.compileAndRun(program, [x]);\n  }\n\n  sqrt<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SQRT);\n    return this.compileAndRun(program, [x]);\n  }\n\n  rsqrt<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.rsqrt(x);\n    }\n    const program = new UnaryOpProgram(x.shape, unary_op.RSQRT);\n    return this.compileAndRun(program, [x]);\n  }\n\n  square<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SQUARE);\n    return this.compileAndRun(program, [x]);\n  }\n\n  reciprocal<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.RECIPROCAL);\n    return this.compileAndRun(program, [x]);\n  }\n\n  relu<T extends Tensor>(x: T): T {\n    let program: UnaryOpProgram|UnaryOpPackedProgram;\n    if (ENV.getBool('WEBGL_PACK')) {\n      program = new UnaryOpPackedProgram(x.shape, unary_packed_op.RELU);\n    } else {\n      program = new UnaryOpProgram(x.shape, unary_op.RELU);\n    }\n    return this.compileAndRun(program, [x]);\n  }\n\n  prelu<T extends Tensor>(x: T, alpha: T): T {\n    const program = ENV.getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(\n            binaryop_packed_gpu.PRELU, x.shape, alpha.shape) :\n        new BinaryOpProgram(binaryop_gpu.PRELU, x.shape, alpha.shape);\n    return this.compileAndRun(program, [x, alpha]);\n  }\n\n  elu<T extends Tensor>(x: T): T {\n    if (ENV.getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_packed_op.ELU, x.dtype) as T;\n    }\n    const program = new UnaryOpProgram(x.shape, unary_op.ELU);\n    return this.compileAndRun(program, [x]);\n  }\n\n  eluDer<T extends Tensor>(dy: T, y: T): T {\n    const program = ENV.getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(\n            binaryop_packed_gpu.ELU_DER, dy.shape, y.shape) :\n        new BinaryOpProgram(binaryop_gpu.ELU_DER, dy.shape, y.shape);\n    return this.compileAndRun(program, [dy, y]);\n  }\n\n  selu<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SELU);\n    return this.compileAndRun(program, [x]);\n  }\n\n  int<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.TO_INT);\n    const output: T = this.makeOutputArray(program.outputShape, 'int32');\n    return this.compileAndRun(program, [x], output);\n  }\n\n  clip<T extends Tensor>(x: T, min: number, max: number): T {\n    let program;\n    if (ENV.getBool('WEBGL_PACK_CLIP')) {\n      program = new ClipPackedProgram(x.shape);\n    } else {\n      program = new ClipProgram(x.shape);\n    }\n    const customSetup = program.getCustomSetupFunc(min, max);\n    return this.compileAndRun(program, [x], null, customSetup);\n  }\n\n  abs<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.abs(x);\n    }\n\n    if (ENV.getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  complexAbs<T extends Tensor>(x: T): T {\n    const xData = this.texData.get(x.dataId);\n\n    const program = new ComplexAbsProgram(x.shape);\n    const inputs = [\n      this.makeComplexComponentTensorHandle(x, xData.complexTensors.real),\n      this.makeComplexComponentTensorHandle(x, xData.complexTensors.imag),\n    ];\n\n    return this.compileAndRun<Tensor>(program, inputs) as T;\n  }\n\n  sigmoid<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SIGMOID);\n    return this.compileAndRun(program, [x]);\n  }\n\n  softplus<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SOFTPLUS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  sin<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SIN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  cos<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.COS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  tan<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.TAN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  asin<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ASIN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  acos<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ACOS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  atan<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ATAN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  atan2<T extends Tensor>(a: T, b: T): T {\n    const program = ENV.getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.ATAN2, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.ATAN2, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  sinh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SINH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  cosh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.COSH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  tanh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.TANH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  asinh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ASINH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  acosh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ACOSH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  atanh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ATANH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  erf<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ERF);\n    return this.compileAndRun(program, [x]);\n  }\n\n  step<T extends Tensor>(x: T, alpha: number): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.STEP(alpha));\n    return this.compileAndRun(program, [x]);\n  }\n\n  private conv2dByMatMul(\n      x: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo, bias?: Tensor4D,\n      activation?: Activation, preluActivationWeights?: Tensor): Tensor4D {\n    // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n    // result from 2D to 4D.\n    const xShape = x.shape;\n    const xTexData = this.texData.get(x.dataId);\n    const sharedMatMulDim = convInfo.inChannels;\n    const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n    const outerShapeFilter = convInfo.outChannels;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const transposeA = false;\n    const transposeB = false;\n\n    // TODO: Once reduction ops are packed, batchMatMul will always be packed\n    // and we can remove this condition.\n    const batchMatMulWillBeUnpacked =\n        (outerShapeX === 1 || outerShapeFilter === 1) &&\n        sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n    const reshapeWillBeExpensive = xShape[2] % 2 !== 0 && !!xTexData.isPacked;\n\n    if (batchMatMulWillBeUnpacked || !ENV.getBool('WEBGL_LAZILY_UNPACK') ||\n        !ENV.getBool('WEBGL_PACK_BINARY_OPERATIONS') ||\n        !reshapeWillBeExpensive) {\n      const targetShape = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] :\n                                           xShape[0] * xShape[2] * xShape[3];\n      const xReshaped = this.reshape(x, [1, targetShape, convInfo.inChannels]);\n      const filterReshaped =\n          this.reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);\n\n      return this.reshape<Rank.R4>(\n          this.fusedBatchMatMul({\n            a: xReshaped as Tensor3D,\n            b: filterReshaped as Tensor3D,\n            transposeA,\n            transposeB,\n            bias,\n            activation,\n            preluActivationWeights\n          }),\n          convInfo.outShape);\n    }\n\n    // Following optimization is specific to packed |x| with odd row count\n    // (For example, in channelLast mode, 'row count' refers to x.shape[2]):\n    // we avoid expensive packed 2x2 reshape by padding row count to next,\n    // even number. When x.shape[2] is odd, the result of packed batchMatMul is\n    // the same (has the same texture layout and and values in the texture) as\n    // it is for even x.shape[2] + 1. We make the odd-rows tensor to look like\n    // even-rows tensor before the operation and, after the batchMatMul,\n    // fix the even-rows result to have odd number of rows.\n    const targetShape = isChannelsLast ?\n        xShape[0] * xShape[1] * (xShape[2] + 1) :\n        xShape[0] * xShape[2] * (xShape[3] + 1);\n    const xReshaped = Tensor.make(\n        [1, targetShape, convInfo.inChannels], {dataId: x.dataId}, x.dtype,\n        this);\n\n    // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n    // Decrementing row count, after batchMatMul->...->compileProgram leads to\n    // invalid row count within the reference in GPGPUBinary.inShapeInfos.\n    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n    // in compileProgram method, but that would affect compilation of all\n    // programs - instead, provide a copy here, with even row count, before\n    // calling batchMatMul->...->compileProgram and after that, the original\n    // xTexData.shape is restored.\n    const originalXTexDataShape = xTexData.shape;\n    xTexData.shape = xTexData.shape.slice();\n    xTexData.shape[xTexData.shape.length - 2]++;\n    util.assert(\n        webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape),\n        () => `packed reshape ${xTexData.shape} to ${\n            xReshaped.shape} isn't free`);\n    const filterReshaped =\n        this.reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);\n\n    const pointwiseConv = this.fusedBatchMatMul({\n      a: xReshaped as Tensor3D,\n      b: filterReshaped as Tensor3D,\n      transposeA,\n      transposeB,\n      bias,\n      activation,\n      preluActivationWeights\n    });\n    const pointwiseConvTexData = this.texData.get(pointwiseConv.dataId);\n    util.assert(\n        pointwiseConvTexData.isPacked,\n        () => 'batchMatMul result is expected to be packed');\n    // Restore the input shape to original.\n    xTexData.shape = originalXTexDataShape;\n    // Set the output shape - there is no need for expensive reshape as data\n    // layout is already correct.\n    pointwiseConvTexData.shape = convInfo.outShape;\n    return Tensor.make(\n        convInfo.outShape, {dataId: pointwiseConv.dataId}, pointwiseConv.dtype,\n        this);\n  }\n\n  private conv2dWithIm2Row(\n      x: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo, bias?: Tensor4D,\n      activation?: Activation, preluActivationWeights?: Tensor): Tensor4D {\n    // Rearranges conv2d input so each block to be convolved over forms the\n    // column of a new matrix with shape [filterWidth * filterHeight *\n    // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n    // output channel forms a row of a new matrix with shape [outChannels,\n    // filterWidth * filterHeight * inChannels]. The convolution is then\n    // computed by multiplying these matrices and reshaping the result.\n    const {\n      filterWidth,\n      filterHeight,\n      inChannels,\n      outWidth,\n      outHeight,\n      dataFormat\n    } = convInfo;\n\n    const isChannelsLast = dataFormat === 'channelsLast';\n\n    const sharedDim = filterWidth * filterHeight * inChannels;\n    const numCols = outHeight * outWidth;\n    const x2ColShape = [sharedDim, numCols];\n    const transposeA = true;\n    const transposeB = false;\n\n    const xSqueezed = x.squeeze([0]);\n    const w2Row = filter.reshape([1, sharedDim, -1]);\n\n    const im2ColProgram =\n        new Im2ColPackedProgram(x2ColShape, xSqueezed.shape, convInfo);\n    const im2Col: Tensor3D =\n        this.compileAndRun<Tensor2D>(im2ColProgram, [xSqueezed]).reshape([\n          1, x2ColShape[0], x2ColShape[1]\n        ]);\n\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, true) : null;\n    const matmulProgram = new MatMulPackedProgram(\n        im2Col.shape, [1, numCols, convInfo.outChannels], transposeA,\n        transposeB, hasBias, fusedActivation, hasPreluActivationWeights);\n    const inputs: TensorHandle[] = [im2Col, w2Row];\n    if (bias) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    const product = this.compileAndRun<Tensor4D>(matmulProgram, inputs);\n\n    if (isChannelsLast) {\n      return product.reshape([1, outHeight, outWidth, convInfo.outChannels]);\n    } else {\n      return product.reshape([1, convInfo.outChannels, outHeight, outWidth]);\n    }\n  }\n\n  fusedConv2d(\n      x: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo, bias?: Tensor4D,\n      activation?: Activation, preluActivationWeights?: Tensor): Tensor4D {\n    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' ||\n         convInfo.padInfo.type === 'VALID')) {\n      return this.conv2dByMatMul(\n          x, filter, convInfo, bias, activation, preluActivationWeights);\n    }\n    if (ENV.getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n      return this.conv2dWithIm2Row(\n          x, filter, convInfo, bias, activation, preluActivationWeights);\n    }\n\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n    const inputs: TensorHandle[] = [x, filter];\n    if (bias) {\n      inputs.push(bias);\n    }\n    if (preluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    return this.compileAndRun(program, inputs);\n  }\n\n  conv2d(x: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' ||\n         convInfo.padInfo.type === 'VALID')) {\n      return this.conv2dByMatMul(x, filter, convInfo);\n    }\n    if (ENV.getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n      return this.conv2dWithIm2Row(x, filter, convInfo);\n    }\n    const program = new Conv2DProgram(convInfo);\n    return this.compileAndRun(program, [x, filter]);\n  }\n\n  conv2dDerInput(dy: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    const program = new Conv2DDerInputProgram(convInfo);\n    return this.compileAndRun(program, [dy, filter]);\n  }\n\n  conv2dDerFilter(x: Tensor4D, dy: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    const program = new Conv2DDerFilterProgram(convInfo);\n    return this.compileAndRun(program, [x, dy]);\n  }\n\n  depthwiseConv2D(x: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n    if (ENV.getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 &&\n        convInfo.outChannels / convInfo.inChannels === 1) {\n      program = new DepthwiseConvPacked2DProgram(convInfo);\n      return this.compileAndRun(\n          program, [x, filter],\n          this.makePackedTensor(convInfo.outShape, x.dtype));\n    }\n\n    program = new DepthwiseConv2DProgram(convInfo);\n    return this.compileAndRun(program, [x, filter]);\n  }\n\n  depthwiseConv2DDerInput(dy: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    const program = new DepthwiseConv2DDerInputProgram(convInfo);\n    return this.compileAndRun(program, [dy, filter]);\n  }\n\n  depthwiseConv2DDerFilter(x: Tensor4D, dy: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n    return this.compileAndRun(program, [x, dy]);\n  }\n\n  conv3d(x: Tensor5D, filter: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    const program = new Conv3DProgram(convInfo);\n    return this.compileAndRun(program, [x, filter]);\n  }\n\n  conv3dDerInput(dy: Tensor5D, filter: Tensor5D, convInfo: Conv3DInfo):\n      Tensor5D {\n    const program = new Conv3DDerInputProgram(convInfo);\n    return this.compileAndRun(program, [dy, filter]);\n  }\n\n  conv3dDerFilter(x: Tensor5D, dy: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    const program = new Conv3DDerFilterProgram(convInfo);\n    return this.compileAndRun(program, [x, dy]);\n  }\n\n  maxPool(x: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    const program = new Pool2DProgram(convInfo, 'max', false);\n    const output: Tensor4D = this.makeOutputArray(program.outputShape, x.dtype);\n    return this.compileAndRun(program, [x], output);\n  }\n\n  avgPool(x: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    const program = new Pool2DProgram(convInfo, 'avg', false);\n    const output = this.makeOutputArray(program.outputShape, 'float32');\n    return this.compileAndRun(program, [x], output) as Tensor4D;\n  }\n\n  maxPoolBackprop(dy: Tensor4D, x: Tensor4D, y: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    const getPositions = true;\n    const maxPoolPositionsProgram =\n        new Pool2DProgram(convInfo, 'max', getPositions);\n    const maxPoolPositions: Tensor4D =\n        this.compileAndRun(maxPoolPositionsProgram, [x]);\n\n    const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n    const output =\n        this.makeOutputArray(maxPoolBackPropProgram.outputShape, x.dtype);\n    const result = this.compileAndRun(\n        maxPoolBackPropProgram, [dy, maxPoolPositions], output);\n    maxPoolPositions.dispose();\n    return result as Tensor4D;\n  }\n\n  avgPoolBackprop(dy: Tensor4D, x: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n    const output =\n        this.makeOutputArray(avgPoolBackpropProgram.outputShape, x.dtype);\n    return this.compileAndRun(avgPoolBackpropProgram, [dy], output) as Tensor4D;\n  }\n\n  cast<T extends Tensor>(x: T, dtype: DataType): T {\n    return backend_util.castTensor(x, dtype, this);\n  }\n\n  unstack(x: Tensor, axis: number): Tensor[] {\n    const num = x.shape[axis];\n    const outShape: number[] = new Array(x.rank - 1);\n    let outIndex = 0;\n    for (let i = 0; i < x.rank; i++) {\n      if (i !== axis) {\n        outShape[outIndex++] = x.shape[i];\n      }\n    }\n\n    const begin = new Array(x.rank).fill(0);\n    const size = x.shape.slice();\n    size[axis] = 1;\n    const res = new Array(num);\n    for (let i = 0; i < res.length; i++) {\n      begin[axis] = i;\n      res[i] = this.slice(x, begin, size).reshape(outShape);\n    }\n    return res;\n  }\n\n  avgPool3d(x: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    const program = new Pool3DProgram(convInfo, 'avg', false);\n    const output = this.makeOutputArray(program.outputShape, 'float32');\n    return this.compileAndRun(program, [x], output) as Tensor5D;\n  }\n\n  avgPool3dBackprop(dy: Tensor5D, x: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    const avgPool3dBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n    const output =\n        this.makeOutputArray(avgPool3dBackpropProgram.outputShape, x.dtype);\n    return this.compileAndRun(avgPool3dBackpropProgram, [dy], output) as\n        Tensor5D;\n  }\n\n  maxPool3d(x: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    const program = new Pool3DProgram(convInfo, 'max', false);\n    const output = this.makeOutputArray(program.outputShape, 'float32');\n    return this.compileAndRun(program, [x], output) as Tensor5D;\n  }\n\n  maxPool3dBackprop(\n      dy: Tensor5D, x: Tensor5D, y: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    const getPositions = true;\n    const maxPool3dPositionsProgram =\n        new Pool3DProgram(convInfo, 'max', getPositions);\n    const maxPool3dPositions: Tensor5D =\n        this.compileAndRun(maxPool3dPositionsProgram, [x]);\n    const maxPool3dBackPropProgram = new MaxPool3DBackpropProgram(convInfo);\n    const output =\n        this.makeOutputArray(maxPool3dBackPropProgram.outputShape, x.dtype);\n    const result = this.compileAndRun(\n        maxPool3dBackPropProgram, [dy, maxPool3dPositions], output);\n    maxPool3dPositions.dispose();\n    return result as Tensor5D;\n  }\n\n  reshape<R extends Rank>(x: Tensor, shape: ShapeMap[R]): Tensor<R> {\n    const texData = this.texData.get(x.dataId);\n    if (texData.isPacked && !webgl_util.isReshapeFree(x.shape, shape) &&\n        !(texData.texture !== null &&\n          webgl_util.isReshapeFree(texData.shape, shape))) {\n      return this.packedReshape(x, shape);\n    }\n    return backend_util.reshapeTensor(x, shape);\n  }\n\n  resizeBilinear(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    const program = ENV.getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n        new ResizeBilinearPackedProgram(\n            x.shape, newHeight, newWidth, alignCorners) :\n        new ResizeBilinearProgram(x.shape, newHeight, newWidth, alignCorners);\n    return this.compileAndRun(program, [x]);\n  }\n\n  resizeBilinearBackprop(dy: Tensor4D, x: Tensor4D, alignCorners: boolean):\n      Tensor4D {\n    const program = new ResizeBilinearBackpropProgram(dy, x, alignCorners);\n\n    return this.compileAndRun(program, [dy]);\n  }\n\n  resizeNearestNeighbor(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    const program = new ResizeNearestNeighborProgram(\n        x.shape, newHeight, newWidth, alignCorners);\n    return this.compileAndRun(program, [x]);\n  }\n\n  resizeNearestNeighborBackprop(\n      dy: Tensor4D, x: Tensor4D, alignCorners: boolean): Tensor4D {\n    const program =\n        new ResizeNearestNeigborBackpropProgram(dy, x, alignCorners);\n    return this.compileAndRun(program, [dy]);\n  }\n\n  multinomial(\n      logits: Tensor2D, normalized: boolean, numSamples: number,\n      seed: number): Tensor2D {\n    const probs = normalized ? logits : softmax(logits);\n    const batchSize = probs.shape[0];\n    const numOutcomes = probs.shape[1];\n    const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n    const output: Tensor2D = this.makeOutputArray(program.outputShape, 'int32');\n    const customSetup = program.getCustomSetupFunc(seed);\n    return this.compileAndRun(program, [probs], output, customSetup);\n  }\n\n  oneHot(indices: Tensor1D, depth: number, onValue: number, offValue: number):\n      Tensor2D {\n    const program = new OneHotProgram(indices.size, depth, onValue, offValue);\n    return this.compileAndRun(program, [indices]);\n  }\n\n  diag(x: Tensor): Tensor {\n    const program = new DiagProgram(x.size);\n    return this.compileAndRun(program, [x]);\n  }\n\n  nonMaxSuppression(\n      boxes: Tensor2D, scores: Tensor1D, maxOutputSize: number,\n      iouThreshold: number, scoreThreshold: number): Tensor1D {\n    warn(\n        'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n        'Call tf.nonMaxSuppressionAsync() instead');\n    const boxesVals = boxes.dataSync();\n    const scoresVals = scores.dataSync();\n    return nonMaxSuppressionImpl(\n        boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n  }\n\n  cropAndResize(\n      image: Tensor4D, boxes: Tensor2D, boxIndex: Tensor1D,\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number): Tensor4D {\n    const program = new CropAndResizeProgram(\n        image.shape, boxes.shape, cropSize, method, extrapolationValue);\n    return this.compileAndRun(program, [image, boxes, boxIndex]);\n  }\n\n  depthToSpace(x: Tensor4D, blockSize: number, dataFormat: 'NHWC'|'NCHW'):\n      Tensor4D {\n    util.assert(\n        blockSize > 1,\n        () =>\n            `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n    const batchSize = x.shape[0];\n    const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n    const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n    const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n    const outputHeight = inputHeight * blockSize;\n    const outputWidth = inputWidth * blockSize;\n    const outputDepth = inputDepth / (blockSize * blockSize);\n\n    const outputShape = (dataFormat === 'NHWC') ?\n        [batchSize, outputHeight, outputWidth, outputDepth] :\n        [batchSize, outputDepth, outputHeight, outputWidth];\n\n    const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n    return this.compileAndRun(program, [x]);\n  }\n\n  split<T extends Tensor>(x: T, sizeSplits: number[], axis: number): T[] {\n    return split(x, sizeSplits, axis);\n  }\n\n  scatterND<R extends Rank>(\n      indices: Tensor, updates: Tensor, shape: ShapeMap[R]): Tensor<R> {\n    const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n        scatter_nd_util.calculateShapes(updates, indices, shape);\n\n    const flattenShape = [outputSize / sliceSize, sliceSize];\n    const flattenIndices = indices.reshape([numUpdates, sliceRank]);\n    const flattenX = updates.reshape([numUpdates, sliceSize]);\n\n    if (outputSize === 0) {\n      return backend_util.reshapeTensor(tensor([]), shape);\n    }\n    const defaultValue = scalar(0);\n    const program = new ScatterProgram(\n        numUpdates, sliceRank, flattenIndices.rank, flattenX.rank, strides,\n        flattenShape);\n    const res: Tensor =\n        this.compileAndRun(program, [flattenX, flattenIndices, defaultValue]);\n    return res.reshape(shape);\n  }\n\n  sparseToDense<R extends Rank>(\n      sparseIndices: Tensor, sparseValues: Tensor, outputShape: ShapeMap[R],\n      defaultValue: Scalar): Tensor<R> {\n    const {sliceRank, numUpdates, strides, outputSize} =\n        scatter_nd_util.calculateShapes(\n            sparseValues, sparseIndices, outputShape);\n\n    const sumDupeIndices = false;\n    const program = new ScatterProgram(\n        numUpdates, sliceRank, sparseIndices.rank, sparseValues.rank, strides,\n        [outputSize, 1], sumDupeIndices);\n    const res: Tensor = this.compileAndRun(\n        program, [sparseValues, sparseIndices, defaultValue]);\n    return res.reshape(outputShape);\n  }\n\n  fft(x: Tensor2D): Tensor2D {\n    const inverse = false;\n    return this.fftImpl(x, inverse);\n  }\n\n  ifft(x: Tensor2D): Tensor2D {\n    const inverse = true;\n    return this.fftImpl(x, inverse);\n  }\n\n  private fftImpl(x: Tensor2D, inverse: boolean): Tensor2D {\n    const xData = this.texData.get(x.dataId);\n\n    const realProgram =\n        new FFTProgram(fft_gpu.COMPLEX_FFT.REAL, x.shape, inverse);\n    const imagProgram =\n        new FFTProgram(fft_gpu.COMPLEX_FFT.IMAG, x.shape, inverse);\n    const inputs = [\n      this.makeComplexComponentTensorHandle(x, xData.complexTensors.real),\n      this.makeComplexComponentTensorHandle(x, xData.complexTensors.imag),\n    ];\n\n    const real = this.compileAndRun<Tensor>(realProgram, inputs);\n    const imag = this.compileAndRun<Tensor>(imagProgram, inputs);\n    const complex = this.complex(real, imag).as2D(x.shape[0], x.shape[1]);\n    real.dispose();\n    imag.dispose();\n    return complex;\n  }\n\n  gatherND(x: Tensor, indices: Tensor): Tensor {\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n\n    const [resultShape, numSlices, sliceSize, strides] =\n        gather_nd_util.prepareAndValidate(x, indices);\n\n    const flattenIndices = indices.reshape([numSlices, sliceRank]);\n    const flattenX = x.reshape([x.size / sliceSize, sliceSize]);\n    const program =\n        new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n    const res: Tensor = this.compileAndRun(program, [flattenX, flattenIndices]);\n    return res.reshape(resultShape);\n  }\n\n  fill<R extends Rank>(\n      shape: ShapeMap[R], value: number|string, dtype?: DataType): Tensor<R> {\n    dtype = dtype || inferDtype(value);\n\n    if (dtype === 'string') {\n      // String type should be handled in CPU memory.\n      const values = getArrayFromDType(dtype, sizeFromShape(shape));\n      values.fill(value as string);\n      return Tensor.make(shape, {values}, dtype);\n    } else {\n      const program = new FillProgram(shape, value as number);\n      const customSetup = program.getCustomSetupFunc(value as number);\n      const output = this.makeOutputArray(shape, dtype);\n      return this.compileAndRun(program, [], output, customSetup) as Tensor<R>;\n    }\n  }\n\n  onesLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    if (x.dtype === 'string') {\n      throw new Error('onesLike is not supported under string dtype');\n    } else {\n      // TODO(cais, smilkov): Add WebGL shader for onesLike:\n      //   https://github.com/tensorflow/tfjs/issues/1293\n      return this.fill(x.shape, 1, x.dtype);\n    }\n  }\n\n  zerosLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    return this.fill(x.shape, x.dtype === 'string' ? '' : 0, x.dtype);\n  }\n\n  linspace(start: number, stop: number, num: number): Tensor1D {\n    // TODO: Use CPU implementation due to the precision problem in Safari.\n    return backend_util.linspaceImpl(start, stop, num);\n  }\n\n  private makeOutputArray<T extends Tensor>(shape: number[], dtype: DataType):\n      T {\n    return Tensor.make(shape, {}, dtype, this);\n  }\n\n  private makePackedTensor<T extends Tensor, D extends DataType = 'float32'>(\n      shape: number[], dtype?: D): T {\n    const packedTensor = Tensor.make(shape, {}, dtype, this);\n    this.texData.get(packedTensor.dataId).isPacked = true;\n    return packedTensor as T;\n  }\n\n  private unpackTensor<T extends Tensor>(input: T|TensorHandle): T {\n    const program = new UnpackProgram(input.shape);\n    return this.compileAndRun(\n        program, [input],\n        Tensor.make(program.outputShape, {}, input.dtype, this));\n  }\n\n  private packTensor<T extends Tensor>(input: T|TensorHandle): T {\n    const program = new PackProgram(input.shape);\n    return this.compileAndRun(\n        program, [input], this.makePackedTensor(input.shape, input.dtype), null,\n        true);\n  }\n\n  private packedReshape<R extends Rank>(input: Tensor, afterShape: ShapeMap[R]):\n      Tensor<R> {\n    const inputAs3D = input.reshape([\n      webgl_util.getBatchDim(input.shape),\n      ...webgl_util.getRowsCols(input.shape)\n    ]);\n    const afterShapeAs3D = [\n      webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n    ];\n    const program = new ReshapePackedProgram(\n        afterShapeAs3D as [number, number, number],\n        inputAs3D.shape as [number, number, number]);\n    return this.compileAndRun<Tensor<R>>(program, [inputAs3D])\n        .reshape(afterShape);\n  }\n\n  private decode(dataId: DataId): TensorHandle {\n    const texData = this.texData.get(dataId);\n    const {isPacked, shape, dtype} = texData;\n    const shapeAs3D =\n        webgl_util.getShapeAs3D(shape) as [number, number, number];\n    const denseTexShape = tex_util.getDenseTexShape(shape);\n\n    const tmpTarget = this.makeTensorHandle(shape, 'float32') as TensorHandle &\n        {size: number};\n    this.texData.get(tmpTarget.dataId).isPacked = true;\n    this.texData.get(tmpTarget.dataId).dtype = dtype;\n    this.texData.get(tmpTarget.dataId).texShape =\n        denseTexShape.map(\n            d => d * 2) as [number, number];  // To undo the effect of isPacked\n                                              // being set to true.\n\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D, denseTexShape);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D, denseTexShape);\n    }\n\n    this.compileAndRun(\n        program, [{shape: shapeAs3D, dtype, dataId}], tmpTarget, null, true);\n    return tmpTarget;\n  }\n\n  public compileAndRun<\n      K extends {dtype: DataType, size: number, dataId: {}, shape: number[]}>(\n      program: GPGPUProgram, inputs: TensorHandle[], output?: K,\n      customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => void,\n      preventEagerUnpackingOfOutput = false): K {\n    if (output == null) {\n      if (program.usesPackedTextures) {\n        output = this.makePackedTensor(program.outputShape, inputs[0].dtype) as\n            {} as K;\n      } else {\n        output = this.makeOutputArray(program.outputShape, inputs[0].dtype) as\n            {} as K;\n      }\n    }\n\n    if (output.size === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      this.texData.get(output.dataId).values =\n          getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n\n    const inputsData: TensorData[] = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.usesPackedTextures &&\n            util.sizeFromShape(input.shape) <=\n                ENV.getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values as TypedArray\n          };\n        }\n\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.usesPackedTextures) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      } else if (!!texData.isPacked !== !!program.usesPackedTextures) {\n        input = texData.isPacked ? this.unpackTensor(input) :\n                                   this.packTensor(input);\n        texData = this.texData.get(input.dataId);\n      } else if (\n          texData.isPacked &&\n          !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n\n        const savedInput = input;\n        const targetShape = input.shape;\n\n        input.shape = texData.shape;\n        input = this.packedReshape(input as Tensor, targetShape);\n        texData = this.texData.get(input.dataId);\n\n        savedInput.shape = targetShape;\n      }\n\n      this.uploadToGPU(input.dataId);\n      return {shape: input.shape, texData, isUniform: false};\n    });\n\n    this.uploadToGPU(output.dataId);\n    const outputData: TensorData = {\n      shape: output.shape,\n      texData: this.texData.get(output.dataId),\n      isUniform: false\n    };\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    gpgpu_math.runProgram(\n        this.gpgpu, binary, inputsData, outputData, customSetup);\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(\n          {name: program.constructor.name, query: this.getQueryTime(query)});\n    }\n\n    if (!ENV.getBool('WEBGL_LAZILY_UNPACK') &&\n        this.texData.get(output.dataId).isPacked &&\n        preventEagerUnpackingOfOutput === false) {\n      return this.unpackTensor(output as {} as Tensor) as {} as K;\n    }\n    return output;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null && this.canvas.remove != null) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.fromPixels2DContext != null &&\n        //@ts-ignore\n        this.fromPixels2DContext.canvas.remove) {\n      //@ts-ignore\n      this.fromPixels2DContext.canvas.remove();\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  floatPrecision(): 16|32 {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!ENV.get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = ENV.getBool('DEBUG');\n          ENV.set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          ENV.set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  private uploadToGPU(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    const {shape, dtype, values, texture, usage, isPacked} = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray = values instanceof Uint8Array;\n\n      if (isPacked) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(\n            texShape[0], texShape[1]);\n        program = new EncodeMatrixPackedProgram(\n            shapeAs3D, [height, width], isByteArray);\n      } else {\n        program =\n            new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n      }\n\n      const tempDenseInputHandle =\n          this.makeTensorHandle([height, width], dtype);\n      if (isByteArray) {\n        this.texData.get(tempDenseInputHandle.dataId).usage =\n            TextureUsage.PIXELS;\n      } else {\n        this.texData.get(tempDenseInputHandle.dataId).usage =\n            TextureUsage.UPLOAD;\n      }\n      this.gpgpu.uploadDenseMatrixToTexture(\n          this.getTexture(tempDenseInputHandle.dataId), width, height,\n          values as TypedArray);\n\n      const encodedOutputTarget =\n          this.makeTensorHandle(\n              program.outputShape, tempDenseInputHandle.dtype) as TensorHandle &\n          {size: number};\n      encodedOutputTarget.size = sizeFromShape(program.outputShape);\n      this.texData.get(encodedOutputTarget.dataId).isPacked = isPacked;\n      this.compileAndRun(program, [tempDenseInputHandle], encodedOutputTarget);\n\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texture = outputTexData.texture;\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      this.disposeData(tempDenseInputHandle.dataId);\n      this.texData.delete(encodedOutputTarget.dataId);\n\n      // Once uploaded, don't store the values on cpu.\n      texData.values = null;\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, float32Values?: Float32Array):\n      TypedArray {\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n\n    this.releaseGPUData(dataId);\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype as 'float32');\n    }\n    return texData.values as TypedArray;\n  }\n\n  private acquireTexture(\n      texShape: [number, number], texType: TextureUsage, dtype: DataType,\n      isPacked: boolean): WebGLTexture {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory &&\n        this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\n          `High memory usage in GPU: ${mb} MB, ` +\n          `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  private computeBytes(shape: [number, number], dtype: DataType) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n}\n\nif (device_util.isBrowser()) {\n  ENGINE.registerBackend(\n      'webgl', () => new MathBackendWebGL(), 2 /* priority */);\n}\n\nfunction float32ToTypedArray<D extends NumericDataType>(\n    a: Float32Array, dtype: D): DataTypeMap[D] {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a as DataTypeMap[D];\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result as DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {nearestDivisor} from '../util';\n\nimport {PARALLELIZE_THRESHOLD} from './reduce_util';\n\nexport interface SegOpInfo {\n  windowSize: number;\n  batchSize: number;\n  inSize: number;\n  numSegments: number;\n}\n\nexport function segOpComputeOptimalWindowSize(\n    inSize: number, numSegments: number): number {\n  let done = false;\n  let res;\n\n  if (inSize <= PARALLELIZE_THRESHOLD) {\n    res = inSize;\n    done = true;\n  } else {\n    res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n  }\n\n  while (!done) {\n    if (res > numSegments || res === inSize) {\n      done = true;\n    } else {\n      res = nearestDivisor(inSize, res + 1);\n    }\n  }\n  return res;\n}\n\nexport function computeOutShape(\n    aShape: number[], axis: number, numSegments: number): number[] {\n  const outShape = [];\n  const rank = aShape.length;\n  for (let dim = 0; dim < rank; dim++) {\n    if (dim !== axis) {\n      outShape.push(aShape[dim]);\n    } else {\n      outShape.push(numSegments);\n    }\n  }\n  return outShape;\n}\n\nexport interface GatherOpShapeInfo {\n  batchSize: number;\n  sliceSize: number;\n  dimSize: number;\n  outputShape: number[];\n}\nexport function collectGatherOpShapeInfo(\n    x: Tensor, indices: Tensor, axis: number): GatherOpShapeInfo {\n  const dimSize = x.shape[axis];\n\n  const outputShape: number[] = [];\n  let batchSize = 1;\n  let sliceSize = 1;\n  for (let i = 0; i < axis; i++) {\n    outputShape.push(x.shape[i]);\n    batchSize *= x.shape[i];\n  }\n\n  for (let i = 0; i < indices.rank; i++) {\n    outputShape.push(indices.shape[i]);\n  }\n\n  for (let i = axis + 1; i < x.rank; i++) {\n    outputShape.push(x.shape[i]);\n    sliceSize *= x.shape[i];\n  }\n\n  return {batchSize, sliceSize, dimSize, outputShape};\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\nimport {scalar, zerosLike} from './tensor_ops';\n\n/**\n * Computes `-1 * x` element-wise.\n *\n * ```js\n * const x = tf.tensor2d([1, 2, -2, 0], [2, 2]);\n *\n * x.neg().print();  // or tf.neg(x)\n * ```\n *\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction neg_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'neg');\n\n  const grad = (dy: T) => {\n    return {$x: () => dy.neg()};\n  };\n  return ENGINE.runKernel(backend => backend.neg($x), {$x}, grad);\n}\n\n/**\n * Computes ceiling of input `tf.Tensor` element-wise: `ceil(x)`\n *\n * ```js\n * const x = tf.tensor1d([.6, 1.1, -3.3]);\n *\n * x.ceil().print();  // or tf.ceil(x)\n * ```\n * @param x The input Tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction ceil_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'ceil');\n\n  // TODO(manrajgrover): Return null for gradients when backprop supports it.\n  const grad = (dy: T) => {\n    return {$x: () => zerosLike(dy)};\n  };\n  return ENGINE.runKernel(backend => backend.ceil($x), {$x}, grad);\n}\n\n/**\n * Computes floor of input `tf.Tensor` element-wise: `floor(x)`.\n *\n * ```js\n * const x = tf.tensor1d([.6, 1.1, -3.3]);\n *\n * x.floor().print();  // or tf.floor(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction floor_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'floor');\n\n  // TODO(nsthorat): Let gradients be null for cases where we want to stop\n  // backpropgation.\n  const grad = (dy: T) => {\n    return {$x: () => zerosLike(dy)};\n  };\n  return ENGINE.runKernel(backend => backend.floor($x), {$x}, grad);\n}\n\n/**\n * Returns an element-wise indication of the sign of a number.\n *\n * ```js\n * const x = tf.tensor1d([.6, 1.1, -3.3, NaN, 0]);\n *\n * x.sign().print();  // or tf.sign(x)\n * ```\n * @param x The input Tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction sign_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'sign');\n\n  const grad = (dy: T) => {\n    return {$x: () => zerosLike(dy)};\n  };\n  return ENGINE.runKernel(backend => backend.sign($x), {$x}, grad);\n}\n\n/**\n * RReturns which elements of x are NaN.\n *\n * ```js\n * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);\n *\n * x.isNaN().print();  // or tf.isNaN(x)\n * ```\n * @param x The input Tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction isNaN_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'isNaN');\n\n  // TODO(nsthorat): Let gradients be null for cases where we want to stop\n  // backpropgation.\n  const grad = (dy: T) => {\n    return {$x: () => zerosLike(dy)};\n  };\n  return ENGINE.runKernel(backend => backend.isNaN($x), {$x}, grad);\n}\n\n/**\n * Returns which elements of x are Infinity or -Infinity.\n *\n * ```js\n * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);\n *\n * x.isInf().print();  // or tf.isNaN(x)\n * ```\n * @param x The input Tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction isInf_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'isInf');\n\n  // TODO(nsthorat): Let gradients be null for cases where we want to stop\n  // backpropgation.\n  const grad = (dy: T) => {\n    return {$x: () => zerosLike(dy)};\n  };\n  return ENGINE.runKernel(backend => backend.isInf($x), {$x}, grad);\n}\n\n/**\n * Returns which elements of x are finite.\n *\n * ```js\n * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);\n *\n * x.isFinite().print();  // or tf.isNaN(x)\n * ```\n * @param x The input Tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction isFinite_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'isFinite');\n\n  // TODO(nsthorat): Let gradients be null for cases where we want to stop\n  // backpropgation.\n  const grad = (dy: T) => {\n    return {$x: () => zerosLike(dy)};\n  };\n  return ENGINE.runKernel(backend => backend.isFinite($x), {$x}, grad);\n}\n\n/**\n * Computes round of input `tf.Tensor` element-wise: `round(x)`.\n * It implements banker's rounding.\n *\n * ```js\n * const x = tf.tensor1d([.6, 1.1, -3.3]);\n *\n * x.round().print();  // or tf.round(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction round_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'round');\n\n  // TODO(nsthorat): Let gradients be null for cases where we want to stop\n  // backpropgation.\n  const grad = (dy: T) => {\n    return {$x: () => zerosLike(dy)};\n  };\n  return ENGINE.runKernel(backend => backend.round($x), {$x}, grad);\n}\n\n/**\n * Computes exponential of the input `tf.Tensor` element-wise. `e ^ x`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, -3]);\n *\n * x.exp().print();  // or tf.exp(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction exp_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'exp');\n\n  const bck = (dy: T, saved: Tensor[]) => {\n    return {$x: () => dy.mulStrict(saved[0] as T)};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const y = backend.exp($x);\n    save([y]);\n    return y;\n  }, {$x}, bck);\n}\n\n/**\n * Computes exponential of the input `tf.Tensor` minus one element-wise.\n * `e ^ x - 1`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, -3]);\n *\n * x.expm1().print();  // or tf.expm1(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction expm1_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'expm1');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.mul($x.exp())} as {$x: () => T};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.expm1($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes natural logarithm of the input `tf.Tensor` element-wise: `ln(x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, Math.E]);\n *\n * x.log().print();  // or tf.log(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction log_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'log');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.div($x.toFloat())} as {$x: () => T};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.log($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes natural logarithm of the input `tf.Tensor` plus one\n * element-wise: `ln(1 + x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, Math.E - 1]);\n *\n * x.log1p().print();  // or tf.log1p(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction log1p_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'log1p');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.div($x.add(1))} as {$x: () => T};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.log1p($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes square root of the input `tf.Tensor` element-wise: `y = sqrt(x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 4, -1]);\n *\n * x.sqrt().print();  // or tf.sqrt(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction sqrt_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'sqrt');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.div($x.toFloat().sqrt().mul(2))} as {$x: () => T};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.sqrt($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes reciprocal of square root of the input `tf.Tensor` element-wise:\n * `y = 1 / sqrt(x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 4, -1]);\n *\n * x.rsqrt().print();  // or tf.rsqrt(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction rsqrt_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'rsqrt');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.div($x.pow(1.5).mul(2)).neg() as T};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.rsqrt($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes square of `x` element-wise: `x ^ 2`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, Math.sqrt(2), -1]);\n *\n * x.square().print();  // or tf.square(x)\n * ```\n * @param x The input Tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction square_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'square');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.mul($x.toFloat().mul(2))} as {$x: () => T};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    save([$x]);\n    return backend.square($x);\n  }, {$x}, grad);\n}\n\n/**\n * Computes reciprocal of x element-wise: `1 / x`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, 2]);\n *\n * x.reciprocal().print();  // or tf.reciprocal(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction reciprocal_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'reciprocal');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.div($x.square().neg())} as {$x: () => T};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.reciprocal($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes absolute value element-wise: `abs(x)`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.abs().print();  // or tf.abs(x)\n * ```\n * @param x The input `tf.Tensor`.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction abs_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'abs');\n\n  if ($x.dtype === 'complex64') {\n    return ENGINE.runKernel(backend => backend.complexAbs($x), {$x});\n  }\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.mul($x.toFloat().step(-1))} as {$x: () => T};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.abs($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Clips values element-wise. `max(min(x, clipValueMax), clipValueMin)`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.clipByValue(-2, 3).print();  // or tf.clipByValue(x, -2, 3)\n * ```\n * @param x The input tensor.\n * @param clipValueMin Lower-bound of range to be clipped to.\n * @param clipValueMax Upper-bound of range to be clipped to.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction clipByValue_<T extends Tensor>(\n    x: T|TensorLike, clipValueMin: number, clipValueMax: number): T {\n  const $x = convertToTensor(x, 'x', 'clipByValue');\n  util.assert(\n      (clipValueMin <= clipValueMax),\n      () => `Error in clip: min (${clipValueMin}) must be ` +\n          `less than or equal to max (${clipValueMax}).`);\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {\n      $x: () => dy.where(\n                    $x.greaterEqual(clipValueMin)\n                        .logicalAnd($x.lessEqual(clipValueMax)),\n                    zerosLike(dy)) as T,\n    };\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.clip($x, clipValueMin, clipValueMax);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes sigmoid element-wise, `1 / (1 + exp(-x))`\n *\n * ```js\n * const x = tf.tensor1d([0, -1, 2, -3]);\n *\n * x.sigmoid().print();  // or tf.sigmoid(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction sigmoid_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'sigmoid');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [y] = saved;\n    return {$x: () => dy.mul(y.mul(scalar(1).sub(y)))} as {$x: () => T};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const y = backend.sigmoid($x);\n    save([y]);\n    return y;\n  }, {$x}, grad);\n}\n\n/**\n * Computes log sigmoid of the input `tf.Tensor` element-wise:\n * `logSigmoid(x)`. For numerical stability, we use `-tf.softplus(-x)`.\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.logSigmoid().print();  // or tf.logSigmoid(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction logSigmoid_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'logSigmoid');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.mul($x.neg().sigmoid())} as {$x: () => T};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.softplus($x.neg()).neg();\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes softplus of the input `tf.Tensor` element-wise: `log(exp(x) + 1)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.softplus().print();  // or tf.softplus(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction softplus_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'softplus');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.mul($x.sigmoid())} as {$x: () => T};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.softplus($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes sin of the input Tensor element-wise: `sin(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n *\n * x.sin().print();  // or tf.sin(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction sin_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'sin');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => $x.toFloat().cos().mul(dy)} as {$x: () => T};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.sin($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes cos of the input `tf.Tensor` element-wise: `cos(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n *\n * x.cos().print();  // or tf.cos(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction cos_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'cos');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => $x.toFloat().sin().neg().mul(dy)} as {$x: () => T};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.cos($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes tan of the input `tf.Tensor` element-wise, `tan(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n *\n * x.tan().print();  // or tf.tan(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction tan_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'tan');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.div($x.cos().square())} as {$x: () => T};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.tan($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes asin of the input `tf.Tensor` element-wise: `asin(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.asin().print();  // or tf.asin(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction asin_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'asin');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {\n      $x: () => dy.divStrict(scalar(1).sub($x.toFloat().square()).sqrt() as T)\n    };\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.asin($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes acos of the input `tf.Tensor` element-wise: `acos(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.acos().print();  // or tf.acos(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction acos_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'acos');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {\n      $x: () =>\n          dy.divStrict(scalar(1).sub($x.toFloat().square()).sqrt() as T).neg()\n    };\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.acos($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes atan of the input `tf.Tensor` element-wise: `atan(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.atan().print();  // or tf.atan(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction atan_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'atan');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.div($x.toFloat().square().add(1))} as {$x: () => T};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.atan($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes hyperbolic sin of the input `tf.Tensor` element-wise: `sinh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.sinh().print();  // or tf.sinh(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction sinh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'sinh');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => $x.toFloat().cosh().mulStrict(dy) as T};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.sinh($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes hyperbolic cos of the input `tf.Tensor` element-wise: `cosh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.cosh().print();  // or tf.cosh(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction cosh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'cosh');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => $x.toFloat().sinh().mulStrict(dy) as T};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.cosh($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes hyperbolic tangent of the input `tf.Tensor` element-wise: `tanh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, 70]);\n *\n * x.tanh().print();  // or tf.tanh(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction tanh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'tanh');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [y] = saved;\n    return {$x: () => scalar(1).sub(y.square()).mulStrict(dy) as T};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const y = backend.tanh($x);\n    save([y]);\n    return y;\n  }, {$x}, grad);\n}\n\n/**\n * Computes inverse hyperbolic sin of the input `tf.Tensor` element-wise:\n * `asinh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.asinh().print();  // or tf.asinh(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction asinh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'asinh');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {\n      $x: () => dy.divStrict(scalar(1).add($x.toFloat().square()).sqrt() as T)\n    };\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.asinh($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes the inverse hyperbolic cos of the input `tf.Tensor` element-wise:\n * `acosh(x)`\n *\n * ```js\n * const x = tf.tensor1d([10, 1, 3, 5.7]);\n *\n * x.acosh().print();  // or tf.acosh(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction acosh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'acosh');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.divStrict($x.toFloat().square().sub(1).sqrt() as T)};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.acosh($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes inverse hyperbolic tan of the input `tf.Tensor` element-wise:\n * `atanh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, .1, -.1, .7]);\n *\n * x.atanh().print();  // or tf.atanh(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction atanh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'atanh');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.div(scalar(1).sub($x.toFloat().square()))} as\n        {$x: () => T};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.atanh($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes gause error function of the input `tf.Tensor` element-wise:\n * `erf(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, .1, -.1, .7]);\n *\n * x.erf().print(); // or tf.erf(x);\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction erf_<T extends Tensor>(x: T|TensorLike): T {\n  let $x = convertToTensor(x, 'x', 'erf');\n  util.assert(\n      $x.dtype === 'int32' || $x.dtype === 'float32',\n      () => 'Input dtype must be `int32` or `float32`.');\n\n  if ($x.dtype === 'int32') {\n    $x = $x.toFloat();\n  }\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {\n      $x: () => dy.mul($x.square().neg().exp().mul(2 / Math.sqrt(Math.PI)))\n    } as {$x: () => T};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.erf($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes step of the input `tf.Tensor` element-wise: `x > 0 ? 1 : alpha * x`\n *\n * ```js\n * const x = tf.tensor1d([0, 2, -1, -3]);\n *\n * x.step(.5).print();  // or tf.step(x, .5)\n * ```\n * @param x The input tensor.\n * @param alpha The gradient when input is negative.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction step_<T extends Tensor>(x: T|TensorLike, alpha = 0.0): T {\n  const $x = convertToTensor(x, 'x', 'step');\n\n  // TODO(manrajgrover): Return null for gradients when backprop supports\n  // it.\n  const grad = (dy: T) => {\n    return {$x: () => zerosLike(dy)};\n  };\n  return ENGINE.runKernel(backend => backend.step($x, alpha), {$x}, grad);\n}\n\nexport const abs = op({abs_});\nexport const acos = op({acos_});\nexport const acosh = op({acosh_});\nexport const asin = op({asin_});\nexport const asinh = op({asinh_});\nexport const atan = op({atan_});\nexport const atanh = op({atanh_});\nexport const ceil = op({ceil_});\nexport const clipByValue = op({clipByValue_});\nexport const cos = op({cos_});\nexport const cosh = op({cosh_});\nexport const erf = op({erf_});\nexport const exp = op({exp_});\nexport const expm1 = op({expm1_});\nexport const floor = op({floor_});\nexport const log = op({log_});\nexport const log1p = op({log1p_});\nexport const logSigmoid = op({logSigmoid_});\nexport const neg = op({neg_});\nexport const reciprocal = op({reciprocal_});\nexport const round = op({round_});\nexport const rsqrt = op({rsqrt_});\nexport const sigmoid = op({sigmoid_});\nexport const sign = op({sign_});\nexport const isNaN = op({isNaN_});\nexport const isInf = op({isInf_});\nexport const isFinite = op({isFinite_});\nexport const sin = op({sin_});\nexport const sinh = op({sinh_});\nexport const softplus = op({softplus_});\nexport const sqrt = op({sqrt_});\nexport const square = op({square_});\nexport const step = op({step_});\nexport const tan = op({tan_});\nexport const tanh = op({tanh_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {deprecationWarn} from '../globals';\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank, ShapeMap, TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {tile} from './array_ops';\nimport {getReductionAxes} from './broadcast_util';\nimport {op} from './operation';\nimport {scalar} from './tensor_ops';\nimport {rsqrt} from './unary_ops';\n\n/**\n * Batch normalization, strictly for 2D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\nfunction batchNorm2d_(\n    x: Tensor2D|TensorLike, mean: Tensor2D|Tensor1D|TensorLike,\n    variance: Tensor2D|Tensor1D|TensorLike,\n    offset?: Tensor2D|Tensor1D|TensorLike, scale?: Tensor2D|Tensor1D|TensorLike,\n    varianceEpsilon?: number): Tensor2D {\n  const $x = convertToTensor(x, 'x', 'batchNorm');\n  const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  let $scale: Tensor2D|Tensor1D;\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n  let $offset: Tensor2D|Tensor1D;\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n  util.assert(\n      $x.rank === 2,\n      () => `Error in batchNorm3D: x must be rank 3 but got rank ` +\n          `${$x.rank}.`);\n  util.assert(\n      $mean.rank === 2 || $mean.rank === 1,\n      () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but ` +\n          `got rank ${$mean.rank}.`);\n  util.assert(\n      $variance.rank === 2 || $variance.rank === 1,\n      () => `Error in batchNorm2D: variance must be rank 2 or rank 1 ` +\n          `but got rank ${$variance.rank}.`);\n  if ($scale != null) {\n    util.assert(\n        $scale.rank === 2 || $scale.rank === 1,\n        () => `Error in batchNorm2D: scale must be rank 2 or rank 1 ` +\n            `but got rank ${$scale.rank}.`);\n  }\n  if ($offset != null) {\n    util.assert(\n        $offset.rank === 2 || $offset.rank === 1,\n        () => `Error in batchNorm2D: offset must be rank 2 or rank 1 ` +\n            `but got rank ${$offset.rank}.`);\n  }\n\n  return batchNorm_($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\n\n/**\n * Batch normalization, strictly for 3D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\nfunction batchNorm3d_(\n    x: Tensor3D|TensorLike, mean: Tensor3D|Tensor1D|TensorLike,\n    variance: Tensor3D|Tensor1D|TensorLike,\n    offset?: Tensor3D|Tensor1D|TensorLike, scale?: Tensor3D|Tensor1D|TensorLike,\n    varianceEpsilon?: number): Tensor3D {\n  const $x = convertToTensor(x, 'x', 'batchNorm');\n  const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  let $scale: Tensor3D|Tensor1D;\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n  let $offset: Tensor3D|Tensor1D;\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n  util.assert(\n      $x.rank === 3,\n      () => `Error in batchNorm3D: x must be rank 3 but got rank ` +\n          `${$x.rank}.`);\n  util.assert(\n      $mean.rank === 3 || $mean.rank === 1,\n      () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but ` +\n          `got rank ${$mean.rank}.`);\n  util.assert(\n      $variance.rank === 3 || $variance.rank === 1,\n      () => `Error in batchNorm3D: variance must be rank 3 or rank 1 ` +\n          `but got rank ${$variance.rank}.`);\n  if ($scale != null) {\n    util.assert(\n        $scale.rank === 3 || $scale.rank === 1,\n        () => `Error in batchNorm3D: scale must be rank 3 or rank 1 ` +\n            `but got rank ${$scale.rank}.`);\n  }\n  if ($offset != null) {\n    util.assert(\n        $offset.rank === 3 || $offset.rank === 1,\n        () => `Error in batchNorm3D: offset must be rank 3 or rank 1 ` +\n            `but got rank ${$offset.rank}.`);\n  }\n\n  return batchNorm_($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\n\n/**\n * Batch normalization, strictly for 4D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\nfunction batchNorm4d_(\n    x: Tensor4D|TensorLike, mean: Tensor4D|Tensor1D|TensorLike,\n    variance: Tensor4D|Tensor1D|TensorLike,\n    offset?: Tensor4D|Tensor1D|TensorLike, scale?: Tensor4D|Tensor1D|TensorLike,\n    varianceEpsilon?: number): Tensor4D {\n  const $x = convertToTensor(x, 'x', 'batchNorm');\n  const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  let $scale: Tensor4D|Tensor1D;\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n  let $offset: Tensor4D|Tensor1D;\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n  util.assert(\n      $x.rank === 4,\n      () => `Error in batchNorm4D: x must be rank 4 but got rank ` +\n          `${$x.rank}.`);\n  util.assert(\n      $mean.rank === 4 || $mean.rank === 1,\n      () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but ` +\n          `got rank ${$mean.rank}.`);\n  util.assert(\n      $variance.rank === 4 || $variance.rank === 1,\n      () => `Error in batchNorm4D: variance must be rank 4 or rank 1 ` +\n          `but got rank ${$variance.rank}.`);\n  if ($scale != null) {\n    util.assert(\n        $scale.rank === 4 || $scale.rank === 1,\n        () => `Error in batchNorm4D: scale must be rank 4 or rank 1 ` +\n            `but got rank ${$scale.rank}.`);\n  }\n  if ($offset != null) {\n    util.assert(\n        $offset.rank === 4 || $offset.rank === 1,\n        () => `Error in batchNorm4D: offset must be rank 4 or rank 1 ` +\n            `but got rank ${$offset.rank}.`);\n  }\n  return batchNorm_($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\n\n/**\n * @deprecated Please use `tf.batchNorm` instead and note the positional\n *     argument change of scale, offset, and varianceEpsilon.\n */\nfunction batchNormalization_<R extends Rank>(\n    x: Tensor<R>|TensorLike, mean: Tensor<R>|Tensor1D|TensorLike,\n    variance: Tensor<R>|Tensor1D|TensorLike, varianceEpsilon = .001,\n    scale?: Tensor<R>|Tensor1D|TensorLike,\n    offset?: Tensor<R>|Tensor1D|TensorLike): Tensor<R> {\n  warnDeprecation();\n  return batchNorm_(x, mean, variance, offset, scale, varianceEpsilon);\n}\n\n/**\n * Batch normalization.\n *\n * As described in\n * [http://arxiv.org/abs/1502.03167](http://arxiv.org/abs/1502.03167).\n *\n * Mean, variance, scale, and offset can be of two shapes:\n *   - The same shape as the input.\n *   - In the common case, the depth dimension is the last dimension of x, so\n *     the values would be an `tf.Tensor1D` of shape [depth].\n *\n * Also available are stricter rank-specific methods with the same signature\n * as this method that assert that parameters passed are of given rank\n *   - `tf.batchNorm2d`\n *   - `tf.batchNorm3d`\n *   - `tf.batchNorm4d`\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\n/** @doc {heading: 'Operations', subheading: 'Normalization'} */\nfunction batchNorm_<R extends Rank>(\n    x: Tensor<R>|TensorLike, mean: Tensor<R>|Tensor1D|TensorLike,\n    variance: Tensor<R>|Tensor1D|TensorLike,\n    offset?: Tensor<R>|Tensor1D|TensorLike,\n    scale?: Tensor<R>|Tensor1D|TensorLike,\n    varianceEpsilon?: number): Tensor<R> {\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n  const $x = convertToTensor(x, 'x', 'batchNorm');\n  const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  let $scale: Tensor<R>|Tensor1D;\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n  let $offset: Tensor<R>|Tensor1D;\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n\n  util.assert(\n      $mean.rank === $variance.rank,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      $offset == null || $mean.rank === $offset.rank,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      $scale == null || $mean.rank === $scale.rank,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  let x4D: Tensor4D;\n  if ($x.rank === 0 || $x.rank === 1) {\n    x4D = $x.as4D(1, 1, 1, $x.size);\n  } else if ($x.rank === 2) {\n    x4D = $x.as4D(1, 1, $x.shape[0], $x.shape[1]);\n  } else if ($x.rank === 3) {\n    x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);\n  } else {\n    x4D = $x as Tensor4D;\n  }\n\n  const der = (dy: Tensor, saved: Tensor[]) => {\n    type Saved = [\n      Tensor<R>, Tensor<R>| Tensor1D, Tensor<R>| Tensor1D, Tensor<R>| Tensor1D\n    ];\n    const [$x, $mean, $variance, $scale] = saved as Saved;\n    const scaleValue = $scale == null ? scalar(1) : $scale;\n    const reductionAxes = getReductionAxes($mean.shape, x4D.shape);\n    const tileShape: number[] = [];\n    if ($mean.rank === 1) {\n      for (let i = 0; i < x4D.shape.length - 1; ++i) {\n        tileShape.push(x4D.shape[i]);\n      }\n      tileShape.push(1);\n    }\n\n    const xMinusMean = $x.sub($mean);\n    const dyTimesScaleValue = dy.mul(scaleValue);\n    const oneOverSqrtVariance = rsqrt($variance.add(scalar(varianceEpsilon)));\n    const minusHalfRCube = oneOverSqrtVariance.mul(oneOverSqrtVariance)\n                               .mul(oneOverSqrtVariance)\n                               .mul(scalar(-0.5));\n\n    const derX = () => {\n      if ($mean.rank === 1) {\n        return dy\n            .mul(tile(\n                oneOverSqrtVariance.as4D(1, 1, 1, $mean.shape[0]), tileShape))\n            .mul(scaleValue)\n            .reshape($x.shape);\n      } else {\n        return dy.mul(oneOverSqrtVariance).mul(scaleValue).reshape($x.shape);\n      }\n    };\n    const derMean = () => {\n      let meanDer = oneOverSqrtVariance.mul(scalar(-1)).mul(dyTimesScaleValue);\n      if ($mean.rank === 1) {\n        meanDer = meanDer.sum(reductionAxes);\n      }\n      return meanDer.reshape($mean.shape as ShapeMap[R]);\n    };\n    const derVariance = () => {\n      let varianceDer = minusHalfRCube.mul(xMinusMean).mul(dyTimesScaleValue);\n      if ($mean.rank === 1) {\n        varianceDer = varianceDer.sum(reductionAxes);\n      }\n      return varianceDer.reshape($mean.shape as ShapeMap[R]);\n    };\n    const derScale = () => {\n      const xMinusMean2TimesRsqrt = xMinusMean.mul(oneOverSqrtVariance);\n      let scaleDer = dy.mul(xMinusMean2TimesRsqrt);\n      if ($mean.rank === 1) {\n        scaleDer = scaleDer.sum(reductionAxes);\n      }\n      return scaleDer.reshape($mean.shape as ShapeMap[R]);\n    };\n    const derOffset = () => {\n      let offsetDer = dy;\n      if ($mean.rank === 1) {\n        offsetDer = offsetDer.sum(reductionAxes);\n      }\n      return offsetDer.reshape($mean.shape as ShapeMap[R]);\n    };\n    return {\n      $x: derX,\n      $mean: derMean,\n      $variance: derVariance,\n      $scale: derScale,\n      $offset: derOffset\n    };\n  };\n\n  const res = ENGINE.runKernel((backend, save) => {\n    const res = backend.batchNormalization(\n        x4D, batchnormReshape4D($mean), batchnormReshape4D($variance),\n        varianceEpsilon, batchnormReshape4D($scale),\n        batchnormReshape4D($offset));\n    save([$x, $mean, $variance, $scale]);\n    return res;\n  }, {$x, $mean, $variance, $scale, $offset}, der);\n  return res.reshape($x.shape);\n}\n\nfunction batchnormReshape4D(x: Tensor): Tensor4D|Tensor1D {\n  if (x == null) {\n    return null;\n  }\n  if (x.rank === 0) {\n    return x.as1D();\n  } else if (x.rank === 1) {\n    return x as Tensor1D;\n  } else if (x.rank === 2) {\n    return x.as4D(1, 1, x.shape[0], x.shape[1]);\n  } else if (x.rank === 3) {\n    return x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n  }\n  return x as Tensor4D;\n}\n\n/**\n * @deprecated Please use `tf.batchNorm2d` instead and note the positional\n *     argument change of scale, offset, and varianceEpsilon.\n */\nfunction batchNormalization2d_(\n    x: Tensor2D|TensorLike, mean: Tensor2D|Tensor1D|TensorLike,\n    variance: Tensor2D|Tensor1D|TensorLike, varianceEpsilon = .001,\n    scale?: Tensor2D|Tensor1D|TensorLike,\n    offset?: Tensor2D|Tensor1D|TensorLike): Tensor2D {\n  warnDeprecation();\n  return batchNorm2d_(x, mean, variance, offset, scale, varianceEpsilon);\n}\n\n/**\n * @deprecated Please use `tf.batchNorm3d` instead and note the positional\n *     argument change of scale, offset, and varianceEpsilon.\n */\nfunction batchNormalization3d_(\n    x: Tensor3D|TensorLike, mean: Tensor3D|Tensor1D|TensorLike,\n    variance: Tensor3D|Tensor1D|TensorLike, varianceEpsilon = .001,\n    scale?: Tensor3D|Tensor1D|TensorLike,\n    offset?: Tensor3D|Tensor1D|TensorLike): Tensor3D {\n  warnDeprecation();\n  return batchNorm3d_(x, mean, variance, offset, scale, varianceEpsilon);\n}\n\n/**\n * @deprecated Please use `tf.batchNorm4d` instead and note the positional\n *     argument change of scale, offset, and varianceEpsilon.\n */\nfunction batchNormalization4d_(\n    x: Tensor4D|TensorLike, mean: Tensor4D|Tensor1D|TensorLike,\n    variance: Tensor4D|Tensor1D|TensorLike, varianceEpsilon = .001,\n    scale?: Tensor4D|Tensor1D|TensorLike,\n    offset?: Tensor4D|Tensor1D|TensorLike): Tensor4D {\n  warnDeprecation();\n  return batchNorm4d_(x, mean, variance, offset, scale, varianceEpsilon);\n}\n\nfunction warnDeprecation() {\n  deprecationWarn(\n      'tf.batchNormalization() is going away. ' +\n      'Use tf.batchNorm() instead, and note the positional argument change ' +\n      'of scale, offset, and varianceEpsilon');\n}\n\nexport const batchNormalization2d = op({batchNormalization2d_});\nexport const batchNormalization3d = op({batchNormalization3d_});\nexport const batchNormalization4d = op({batchNormalization4d_});\nexport const batchNormalization = op({batchNormalization_});\n\nexport const batchNorm = op({batchNorm_});\nexport const batchNorm2d = op({batchNorm2d_});\nexport const batchNorm3d = op({batchNorm3d_});\nexport const batchNorm4d = op({batchNorm4d_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {whereImpl} from '../backends/where_impl';\nimport {ENGINE} from '../engine';\nimport {Tensor, Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assert, assertShapesMatch} from '../util';\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\nimport {zerosLike} from './tensor_ops';\n\n/**\n * Returns the truth value of `NOT x` element-wise.\n *\n * ```js\n * const a = tf.tensor1d([false, true], 'bool');\n *\n * a.logicalNot().print();\n * ```\n *\n * @param x The input tensor. Must be of dtype 'bool'.\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nfunction logicalNot_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'logicalNot', 'bool');\n  return ENGINE.runKernel(backend => backend.logicalNot($x), {$x});\n}\n\n/**\n * Returns the truth value of `a AND b` element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([false, false, true, true], 'bool');\n * const b = tf.tensor1d([false, true, false, true], 'bool');\n *\n * a.logicalAnd(b).print();\n * ```\n *\n * @param a The first input tensor. Must be of dtype bool.\n * @param b The second input tensor. Must be of dtype bool.\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nfunction logicalAnd_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'logicalAnd', 'bool');\n  const $b = convertToTensor(b, 'b', 'logicalAnd', 'bool');\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  return ENGINE.runKernel(backend => backend.logicalAnd($a, $b), {$a, $b}) as T;\n}\n\n/**\n * Returns the truth value of `a OR b` element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([false, false, true, true], 'bool');\n * const b = tf.tensor1d([false, true, false, true], 'bool');\n *\n * a.logicalOr(b).print();\n * ```\n * @param a The first input tensor. Must be of dtype bool.\n * @param b The second input tensor. Must be of dtype bool.\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nfunction logicalOr_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'logicalOr', 'bool');\n  const $b = convertToTensor(b, 'b', 'logicalOr', 'bool');\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  return ENGINE.runKernel(backend => backend.logicalOr($a, $b), {$a, $b}) as T;\n}\n\n/**\n * Returns the truth value of `a XOR b` element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([false, false, true, true], 'bool');\n * const b = tf.tensor1d([false, true, false, true], 'bool');\n *\n * a.logicalXor(b).print();\n * ```\n *\n * @param a The first input tensor. Must be of dtype bool.\n * @param b The second input tensor. Must be of dtype bool.\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nfunction logicalXor_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'logicalXor', 'bool');\n  const $b = convertToTensor(b, 'b', 'logicalXor', 'bool');\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  // x ^ y = (x | y) & ~(x & y)\n  return logicalOr(a, b).logicalAnd(logicalAnd(a, b).logicalNot()) as T;\n}\n\n/**\n * Returns the elements, either `a` or `b` depending on the `condition`.\n *\n * If the condition is true, select from `a`, otherwise select from `b`.\n *\n * ```js\n * const cond = tf.tensor1d([false, false, true], 'bool');\n * const a = tf.tensor1d([1 , 2, 3]);\n * const b = tf.tensor1d([-1, -2, -3]);\n *\n * a.where(cond, b).print();\n * ```\n *\n * @param condition The input condition. Must be of dtype bool.\n * @param a If `condition` is rank 1, `a` may have a higher rank but\n *     its first dimension must match the size of `condition`.\n * @param b A tensor with the same shape and type as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nfunction where_<T extends Tensor>(\n    condition: Tensor|TensorLike, a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'where');\n  const $b = convertToTensor(b, 'b', 'where');\n  const $condition = convertToTensor(condition, 'condition', 'where', 'bool');\n\n  assertShapesMatch($a.shape, $b.shape, 'Error in where: ');\n\n  if ($condition.rank === 1) {\n    // If condition rank is 1, then the first dimension must match the size of\n    // condition.\n    assert(\n        $condition.shape[0] === $a.shape[0],\n        () => 'The first dimension of `a` must match the size of `condition`.');\n  } else {\n    // A must have the same shape as condition.\n    assertShapesMatch($condition.shape, $b.shape, 'Error in where: ');\n  }\n\n  // TODO(julianoks): Return null for condition gradient\n  // when backprop supports it.\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$condition] = saved;\n    return {\n      $condition: () => zerosLike($condition).toFloat(),\n      $a: () => dy.mul($condition.cast(dy.dtype)),\n      $b: () => dy.mul($condition.logicalNot().cast(dy.dtype))\n    } as {$a: () => T, $b: () => T, $condition: () => T};\n  };\n\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.select($condition, $a, $b);\n    save([$condition]);\n    return res;\n  }, {$condition, $a, $b}, grad) as T;\n}\n\n/**\n * Returns the coordinates of true elements of condition.\n *\n * The coordinates are returned in a 2-D tensor where the first dimension (rows)\n * represents the number of true elements, and the second dimension (columns)\n * represents the coordinates of the true elements. Keep in mind, the shape of\n * the output tensor can vary depending on how many true values there are in\n * input. Indices are output in row-major order. The resulting tensor has the\n * shape `[numTrueElems, condition.rank]`.\n *\n * This is analogous to calling the python `tf.where(cond)` without an x or y.\n *\n * ```js\n * const cond = tf.tensor1d([false, false, true], 'bool');\n * const result = await tf.whereAsync(cond);\n * result.print();\n * ```\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nasync function whereAsync_(condition: Tensor|TensorLike): Promise<Tensor2D> {\n  const $condition =\n      convertToTensor(condition, 'condition', 'whereAsync', 'bool');\n  const vals = await $condition.data();\n  const res = whereImpl($condition.shape, vals);\n  if (condition !== $condition) {\n    $condition.dispose();\n  }\n  return res;\n}\n\nexport const logicalAnd = op({logicalAnd_});\nexport const logicalNot = op({logicalNot_});\nexport const logicalOr = op({logicalOr_});\nexport const logicalXor = op({logicalXor_});\nexport const where = op({where_});\nexport const whereAsync = whereAsync_;\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike, upcastType} from '../types';\nimport * as util from '../util';\nimport * as broadcast_util from './broadcast_util';\nimport {op} from './operation';\nimport {scalar, zerosLike} from './tensor_ops';\nimport {neg} from './unary_ops';\n\n/**\n * Adds two `tf.Tensor`s element-wise, A + B. Supports broadcasting.\n *\n * We also expose `tf.addStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3, 4]);\n * const b = tf.tensor1d([10, 20, 30, 40]);\n *\n * a.add(b).print();  // or tf.add(a, b)\n * ```\n *\n * ```js\n * // Broadcast add a with b.\n * const a = tf.scalar(5);\n * const b = tf.tensor1d([10, 20, 30, 40]);\n *\n * a.add(b).print();  // or tf.add(a, b)\n * ```\n * @param a The first `tf.Tensor` to add.\n * @param b The second `tf.Tensor` to add. Must have the same type as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Arithmetic'} */\nfunction add_<T extends Tensor>(a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'add');\n  let $b = convertToTensor(b, 'b', 'add');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const outShape =\n      broadcast_util.assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const der = (dy: Tensor) => {\n    const derA = () => {\n      let res = dy;\n      const reduceAxes = broadcast_util.getReductionAxes($a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = res.sum(reduceAxes);\n      }\n      return res.reshape($a.shape);\n    };\n    const derB = () => {\n      let res = dy;\n      const reduceAxes = broadcast_util.getReductionAxes($b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = res.sum(reduceAxes);\n      }\n      return res.reshape($b.shape);\n    };\n    return {$a: derA, $b: derB};\n  };\n  return ENGINE.runKernel(backend => backend.add($a, $b), {$a, $b}, der) as T;\n}\n\n/**\n * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n *\n * tf.addN([a, b, c]).print();\n * ```\n * @param tensors A list of tensors with the same shape and dtype.\n */\n/** @doc {heading: 'Operations', subheading: 'Arithmetic'} */\nfunction addN_<T extends Tensor>(tensors: Array<T|TensorLike>): T {\n  util.assert(\n      Array.isArray(tensors),\n      () => 'The argument passed to tf.addN() must be a list of tensors');\n  util.assert(\n      tensors.length >= 1,\n      () => `Must pass at least one tensor to tf.addN(), but got ` +\n          `${tensors.length}`);\n  const $tensors =\n      tensors.map((t, i) => convertToTensor(t, `tensors${i}`, 'addN'));\n  const firstTensor = $tensors[0];\n  $tensors.forEach(t => {\n    if (t.dtype !== firstTensor.dtype) {\n      throw new Error(\n          'All tensors passed to tf.addN() must have the same dtype');\n    }\n  });\n  $tensors.forEach(t => {\n    if (!util.arraysEqual(t.shape, firstTensor.shape)) {\n      throw new Error(\n          'All tensors passed to tf.addN() must have the same shape');\n    }\n  });\n\n  const der = (dy: T) => {\n    const ders: {[key: string]: () => Tensor} = {};\n    $tensors.forEach((t, i) => {\n      ders[i] = () => dy.clone();\n    });\n    return ders;\n  };\n  const inputs: NamedTensorMap = $tensors as {} as NamedTensorMap;\n  return ENGINE.runKernel(backend => backend.addN($tensors), inputs, der);\n}\n\n/**\n * Adds two `tf.Tensor`s element-wise, A + B.\n *\n * Inputs must be the same shape. For broadcasting support, use add() instead.\n *\n * @param a The first Tensor to add element-wise.\n * @param b The second Tensor to add element-wise.\n */\nfunction addStrict_<T extends Tensor>(a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'addStrict');\n  const $b = convertToTensor(b, 'b', 'addStrict');\n  util.assertShapesMatch($a.shape, $b.shape, 'Error in addStrict: ');\n  return $a.add($b);\n}\n\n/**\n * Subtracts two `tf.Tensor`s element-wise, A - B. Supports broadcasting.\n *\n * We also expose `tf.subStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([10, 20, 30, 40]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n *\n * a.sub(b).print();  // or tf.sub(a, b)\n * ```\n *\n * ```js\n * // Broadcast subtract a with b.\n * const a = tf.tensor1d([10, 20, 30, 40]);\n * const b = tf.scalar(5);\n *\n * a.sub(b).print();  // or tf.sub(a, b)\n * ```\n * @param a The first `tf.Tensor` to subtract from.\n * @param b The second `tf.Tensor` to be subtracted. Must have the same dtype as\n * `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Arithmetic'} */\nfunction sub_<T extends Tensor>(a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'sub');\n  let $b = convertToTensor(b, 'b', 'sub');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const outShape =\n      broadcast_util.assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const der = (dy: Tensor) => {\n    const derA = () => {\n      let res = dy;\n      const reduceAxes = broadcast_util.getReductionAxes($a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = res.sum(reduceAxes);\n      }\n      return res.reshape($a.shape);\n    };\n    const derB = () => {\n      let res = dy;\n      const reduceAxes = broadcast_util.getReductionAxes($b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = res.sum(reduceAxes);\n      }\n      return res.neg().reshape($b.shape);\n    };\n    return {$a: derA, $b: derB};\n  };\n  return ENGINE.runKernel(backend => backend.subtract($a, $b), {$a, $b}, der) as\n      T;\n}\n\n/**\n * Subtracts two `tf.Tensor`s element-wise, A - B. Inputs must\n * be the same shape.\n *\n * For broadcasting support, use `tf.sub` instead.\n *\n * @param a The first Tensor to subtract element-wise.\n * @param b The second Tensor to subtract element-wise.\n */\nfunction subStrict_<T extends Tensor>(a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'subStrict');\n  const $b = convertToTensor(b, 'b', 'subStrict');\n  util.assertShapesMatch($a.shape, $b.shape, 'Error in subStrict: ');\n  return $a.sub($b);\n}\n\n/**\n * Computes the power of one `tf.Tensor` to another. Supports broadcasting.\n *\n * Given a `tf.Tensor` x and a `tf.Tensor` y, this operation computes x^y for\n * corresponding elements in x and y. The result's dtype will be the upcasted\n * type of the `base` and `exp` dtypes.\n *\n * ```js\n * const a = tf.tensor([[2, 3], [4, 5]])\n * const b = tf.tensor([[1, 2], [3, 0]]).toInt();\n *\n * a.pow(b).print();  // or tf.pow(a, b)\n * ```\n *\n * ```js\n * const a = tf.tensor([[1, 2], [3, 4]])\n * const b = tf.tensor(2).toInt();\n *\n * a.pow(b).print();  // or tf.pow(a, b)\n * ```\n * We also expose `powStrict` which has the same signature as this op and\n * asserts that `base` and `exp` are the same shape (does not broadcast).\n *\n * @param base The base `tf.Tensor` to pow element-wise.\n * @param exp The exponent `tf.Tensor` to pow element-wise.\n */\n/** @doc {heading: 'Operations', subheading: 'Arithmetic'} */\nfunction pow_<T extends Tensor>(base: T|TensorLike, exp: Tensor|TensorLike): T {\n  const $base = convertToTensor(base, 'base', 'pow');\n  const $exp = convertToTensor(exp, 'exp', 'pow');\n\n  const outShape =\n      broadcast_util.assertAndGetBroadcastShape($base.shape, $exp.shape);\n  base = $base.cast(upcastType($base.dtype, $exp.dtype));\n  exp = $exp.cast(upcastType($base.dtype, $exp.dtype));\n  const grad = (dy: Tensor, saved: Tensor[]) => {\n    const [$base, $exp, y] = saved;\n    const derBase = () => {\n      const expFloat = $exp.toFloat();\n      let res = dy.mul(expFloat.mul($base.pow(expFloat.sub(scalar(1)))));\n      const reduceAxes = broadcast_util.getReductionAxes($base.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = res.sum(reduceAxes);\n      }\n      return res.reshape($base.shape) as T;\n    };\n    const derExp = () => {\n      const condition = $base.greater(0);\n      const logBase = $base.log().where(condition, zerosLike($base));\n      let res = dy.mul(y.mul(logBase));\n      const reduceAxes = broadcast_util.getReductionAxes($exp.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = res.sum(reduceAxes);\n      }\n      return res.reshape($exp.shape);\n    };\n    return {$base: derBase, $exp: derExp};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const y = backend.pow($base, $exp);\n    save([$base, $exp, y]);\n    return y;\n  }, {$base, $exp}, grad) as T;\n}\n\n/**\n * Computes the power of one `tf.Tensor` to another. Inputs must\n * be the same shape.\n *\n * For broadcasting support, use `tf.pow` instead.\n *\n * @param base The base tensor to pow element-wise.\n * @param exp The exponent tensor to pow element-wise.\n */\nfunction powStrict_<T extends Tensor>(base: T, exp: Tensor): T {\n  util.assertShapesMatch(base.shape, exp.shape, 'Error in powStrict: ');\n  return base.pow(exp);\n}\n\n/**\n * Multiplies two `tf.Tensor`s element-wise, A * B. Supports broadcasting.\n *\n * We also expose `tf.mulStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3, 4]);\n * const b = tf.tensor1d([2, 3, 4, 5]);\n *\n * a.mul(b).print();  // or tf.mul(a, b)\n * ```\n *\n * ```js\n * // Broadcast mul a with b.\n * const a = tf.tensor1d([1, 2, 3, 4]);\n * const b = tf.scalar(5);\n *\n * a.mul(b).print();  // or tf.mul(a, b)\n * ```\n * @param a The first tensor to multiply.\n * @param b The second tensor to multiply. Must have the same dtype as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Arithmetic'} */\nfunction mul_<T extends Tensor>(a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'mul');\n  let $b = convertToTensor(b, 'b', 'mul');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const outShape =\n      broadcast_util.assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const der = (dy: Tensor, saved: Tensor[]) => {\n    const [$a, $b] = saved;\n    const derA = () => {\n      const res = dy.mul($b.toFloat());\n      const reduceAxes = broadcast_util.getReductionAxes($a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return res.sum(reduceAxes).reshape($a.shape);\n      }\n      return res;\n    };\n    const derB = () => {\n      const res = dy.mul($a.toFloat());\n      const reduceAxes = broadcast_util.getReductionAxes($b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return res.sum(reduceAxes).reshape($b.shape);\n      }\n      return res;\n    };\n    return {$a: derA, $b: derB};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.multiply($a, $b);\n    save([$a, $b]);\n    return res;\n  }, {$a, $b}, der) as T;\n}\n\n/**\n * Multiplies two `tf.Tensor`s element-wise, A * B.\n *\n * Inputs must be the same shape. For broadcasting support, use `tf.mul`.\n *\n * @param a The first tensor to multiply.\n * @param b The first tensor to multiply. Must have the same\n *    dtype as `a`.\n */\nfunction mulStrict_<T extends Tensor>(a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'mul');\n  const $b = convertToTensor(b, 'b', 'mul');\n  util.assertShapesMatch($a.shape, $b.shape, 'Error in multiplyStrict: ');\n  return $a.mul($b);\n}\n\n/**\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.\n *\n * We also expose `tf.divStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 9, 16]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n *\n * a.div(b).print();  // or tf.div(a, b)\n * ```\n *\n * ```js\n * // Broadcast div a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(2);\n *\n * a.div(b).print();  // or tf.div(a, b)\n * ```\n *\n * @param a The first tensor as the numerator.\n * @param b The second tensor as the denominator. Must have the same dtype as\n * `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Arithmetic'} */\nfunction div_<T extends Tensor>(a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'div');\n  let $b = convertToTensor(b, 'b', 'div');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  if ($a.dtype === 'int32' && $b.dtype === 'int32') {\n    return floorDiv($a, $b);\n  }\n\n  const outShape =\n      broadcast_util.assertAndGetBroadcastShape($a.shape, $b.shape);\n  const der = (dy: Tensor, saved: Tensor[]) => {\n    const [$a, $b] = saved;\n    const derA = () => {\n      const res = dy.div($b.toFloat());\n      const reduceAxes = broadcast_util.getReductionAxes($a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return res.sum(reduceAxes).reshape($a.shape);\n      }\n      return res;\n    };\n    const derB = () => {\n      let res = dy.mul($a.toFloat());\n      const reduceAxes = broadcast_util.getReductionAxes($b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = res.sum(reduceAxes).reshape($b.shape);\n      }\n      const tmp = $b.square();\n      return res.div(tmp.toFloat()).neg();\n    };\n    return {$a: derA, $b: derB};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.realDivide($a, $b);\n    save([$a, $b]);\n    return res;\n  }, {$a, $b}, der) as T;\n}\n\n/**\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.\n * The result is rounded with floor function.\n *\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 9, 16]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n *\n * a.floorDiv(b).print();  // or tf.div(a, b)\n * ```\n *\n * ```js\n * // Broadcast div a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(2);\n *\n * a.floorDiv(b).print();  // or tf.floorDiv(a, b)\n * ```\n *\n * @param a The first tensor as the numerator.\n * @param b The second tensor as the denominator. Must have the same dtype as\n * `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Arithmetic'} */\nfunction floorDiv_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'floorDiv');\n  let $b = convertToTensor(b, 'b', 'floorDiv');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const outShape =\n      broadcast_util.assertAndGetBroadcastShape($a.shape, $b.shape);\n  const der = (dy: Tensor, saved: Tensor[]) => {\n    const [$a, $b] = saved;\n    const derA = () => {\n      const res = dy.div($b.toFloat());\n      const reduceAxes = broadcast_util.getReductionAxes($a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return res.sum(reduceAxes).reshape($a.shape);\n      }\n      return res;\n    };\n    const derB = () => {\n      let res = dy.mul($a.toFloat());\n      const reduceAxes = broadcast_util.getReductionAxes($b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = res.sum(reduceAxes).reshape($b.shape);\n      }\n      const tmp = $b.square();\n      return res.div(tmp.toFloat()).neg();\n    };\n    return {$a: derA, $b: derB};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.floorDiv($a, $b);\n    save([$a, $b]);\n    return res;\n  }, {$a, $b}, der) as T;\n}\n\n/**\n * Divides two `tf.Tensor`s element-wise, A / B. Inputs must\n * be the same shape.\n *\n * @param a The first tensor as the numerator for element-wise division.\n * @param b The second tensor as the denominator for element-wise division.\n */\nfunction divStrict_<T extends Tensor>(a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'div');\n  const $b = convertToTensor(b, 'b', 'div');\n  util.assertShapesMatch($a.shape, $b.shape, 'Error in divideStrict: ');\n  return $a.div($b);\n}\n\n/**\n * Returns the mod of a and b element-wise.\n * `floor(x / y) * y + mod(x, y) = x`\n * Supports broadcasting.\n *\n * We also expose `tf.modStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.mod(b).print();  // or tf.mod(a, b)\n * ```\n *\n * ```js\n * // Broadcast a mod b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.mod(b).print();  // or tf.mod(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Arithmetic'} */\nfunction mod_<T extends Tensor>(a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'mod');\n  let $b = convertToTensor(b, 'b', 'mod');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const outShape =\n      broadcast_util.assertAndGetBroadcastShape($a.shape, $b.shape);\n  const der = (dy: Tensor, saved: Tensor[]) => {\n    const [$a, $b] = saved;\n    const derA = () => {\n      const reduceAxes = broadcast_util.getReductionAxes($a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return dy.sum(reduceAxes).reshape($a.shape);\n      }\n      return dy;\n    };\n    const derB = () => {\n      const res = dy.mul($a.div($b).floor().neg());\n      const reduceAxes = broadcast_util.getReductionAxes($b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return res.sum(reduceAxes).reshape($b.shape);\n      }\n      return res;\n    };\n    return {$a: derA, $b: derB};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.mod($a, $b);\n    save([$a, $b]);\n    return res;\n  }, {$a, $b}, der) as T;\n}\n\n/**\n * Returns the mod of a and b (`a < b ? a : b`) element-wise. Inputs must\n * be the same shape. For broadcasting support, use mod().\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same dtype as `a`.\n */\nfunction modStrict_<T extends Tensor>(a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'modStrict');\n  const $b = convertToTensor(b, 'b', 'modStrict');\n  util.assertShapesMatch($a.shape, $b.shape, 'Error in modStrict: ');\n  return $a.mod($b);\n}\n\n/**\n * Returns the min of a and b (`a < b ? a : b`) element-wise.\n * Supports broadcasting.\n *\n * We also expose `minimumStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.minimum(b).print();  // or tf.minimum(a, b)\n * ```\n *\n * ```js\n * // Broadcast minimum a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.minimum(b).print();  // or tf.minimum(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Arithmetic'} */\nfunction minimum_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'minimum');\n  let $b = convertToTensor(b, 'b', 'minimum');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  if ($a.dtype === 'bool') {\n    $a = $a.toInt();\n    $b = $b.toInt();\n  }\n\n  broadcast_util.assertAndGetBroadcastShape($a.shape, $b.shape);\n  const der = (dy: Tensor, saved: Tensor[]) => {\n    const [$a, $b] = saved;\n    const derA = () => dy.mul($a.lessEqual($b).toFloat());\n    const derB = () => dy.mul($a.greater($b).toFloat());\n    return {$a: derA, $b: derB};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.minimum($a, $b);\n    save([$a, $b]);\n    return res;\n  }, {$a, $b}, der) as T;\n}\n\n/**\n * Returns the min of a and b (`a < b ? a : b`) element-wise. Inputs must\n * be the same shape. For broadcasting support, use minimum().\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same dtype as `a`.\n */\nfunction minimumStrict_<T extends Tensor>(a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'minimumStrict');\n  const $b = convertToTensor(b, 'b', 'minimumStrict');\n  util.assertShapesMatch($a.shape, $b.shape, 'Error in minimumStrict: ');\n  return $a.minimum($b);\n}\n\n/**\n * Returns the max of a and b (`a > b ? a : b`) element-wise.\n * Supports broadcasting.\n *\n * We also expose `tf.maximumStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.maximum(b).print();  // or tf.maximum(a, b)\n * ```\n *\n * ```js\n * // Broadcast maximum a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.maximum(b).print();  // or tf.maximum(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Arithmetic'} */\nfunction maximum_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'maximum');\n  let $b = convertToTensor(b, 'b', 'maximum');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  if ($a.dtype === 'bool') {\n    $a = $a.toInt();\n    $b = $b.toInt();\n  }\n\n  broadcast_util.assertAndGetBroadcastShape($a.shape, $b.shape);\n  const der = (dy: Tensor, saved: Tensor[]) => {\n    const [$a, $b] = saved;\n    const derA = () => dy.mul($a.greaterEqual($b).toFloat());\n    const derB = () => dy.mul($a.less($b).toFloat());\n    return {$a: derA, $b: derB};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.maximum($a, $b);\n    save([$a, $b]);\n    return res;\n  }, {$a, $b}, der) as T;\n}\n\n/**\n * Returns the max of a and b (`a > b ? a : b`) element-wise. Inputs must\n * be the same shape. For broadcasting support, use maximum().\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same dtype as `a`.\n */\nfunction maximumStrict_<T extends Tensor>(a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'maximumStrict');\n  const $b = convertToTensor(b, 'b', 'maximumStrict');\n  util.assertShapesMatch($a.shape, $b.shape, 'Error in maximumStrict: ');\n  return $a.maximum($b);\n}\n\n/**\n * Returns (a - b) * (a - b) element-wise.\n * Supports broadcasting.\n *\n * We also expose `tf.squaredDifferenceStrict` which has the same signature as\n * this op and asserts that `a` and `b` are the same shape (does not\n * broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)\n * ```\n *\n * ```js\n * // Broadcast squared difference  a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Arithmetic'} */\nfunction squaredDifference_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'squaredDifference');\n  let $b = convertToTensor(b, 'b', 'squaredDifference');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  broadcast_util.assertAndGetBroadcastShape($a.shape, $b.shape);\n  const der = (dy: Tensor, saved: Tensor[]) => {\n    const [$a, $b] = saved;\n    const two = scalar(2);\n    const derA = () => dy.mul($a.sub($b).mul(two));\n    const derB = () => dy.mul($b.sub($a).mul(two));\n    return {$a: derA, $b: derB};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.squaredDifference($a, $b);\n    save([$a, $b]);\n    return res;\n  }, {$a, $b}, der) as T;\n}\n\n/**\n * Returns (a - b) * (a - b) element-wise.\n *\n * Inputs must be the same shape. For broadcasting support, use\n * `tf.squaredDifference` instead.\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n */\nfunction squaredDifferenceStrict_<T extends Tensor>(\n    a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'squaredDifferenceStrict');\n  const $b = convertToTensor(b, 'b', 'squaredDifferenceStrict');\n  util.assertShapesMatch(\n      $a.shape, $b.shape, 'Error in squaredDifferenceStrict: ');\n  return $a.squaredDifference($b);\n}\n\n/**\n * Computes arctangent of `tf.Tensor`s a / b element-wise: `atan2(a, b)`.\n * Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1.0, 1.0, -1.0, .7]);\n * const b = tf.tensor1d([2.0, 13.0, 3.5, .21]);\n *\n * tf.atan2(a, b).print()\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same dtype as `a`.\n *\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction atan2_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'atan2');\n  let $b = convertToTensor(b, 'b', 'atan2');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const outShape =\n      broadcast_util.assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const der = (dy: Tensor, saved: Tensor[]) => {\n    const [$a, $b] = saved;\n    const derA = () => {\n      const d = add($a.square(), $b.square());\n      let res = dy.mul($b.div(d));\n      const reduceAxes = broadcast_util.getReductionAxes($a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = res.sum(reduceAxes);\n      }\n      return res.reshape($a.shape);\n    };\n    const derB = () => {\n      const d = add($a.square(), $b.square());\n      let res = neg(dy.mul($a.div(d)));\n      const reduceAxes = broadcast_util.getReductionAxes($b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = res.sum(reduceAxes);\n      }\n      return res.reshape($b.shape);\n    };\n    return {$a: derA, $b: derB};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.atan2($a, $b);\n    save([$a, $b]);\n    return res;\n  }, {$a, $b}, der) as T;\n}\n\nexport const add = op({add_});\nexport const addN = op({addN_});\nexport const addStrict = op({addStrict_});\nexport const atan2 = op({atan2_});\nexport const div = op({div_});\nexport const divStrict = op({divStrict_});\nexport const floorDiv = op({floorDiv_});\nexport const maximum = op({maximum_});\nexport const maximumStrict = op({maximumStrict_});\nexport const minimum = op({minimum_});\nexport const minimumStrict = op({minimumStrict_});\nexport const mod = op({mod_});\nexport const modStrict = op({modStrict_});\nexport const mul = op({mul_});\nexport const mulStrict = op({mulStrict_});\nexport const pow = op({pow_});\nexport const powStrict = op({powStrict_});\nexport const squaredDifference = op({squaredDifference_});\nexport const squaredDifferenceStrict = op({squaredDifferenceStrict_});\nexport const sub = op({sub_});\nexport const subStrict = op({subStrict_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assertShapesMatch} from '../util';\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\nimport {zerosLike} from './tensor_ops';\n\n/**\n * Returns the truth value of (a != b) element-wise. Supports broadcasting.\n *\n * We also expose `tf.notEqualStrict` which has the same signature as this op\n * and asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([0, 2, 3]);\n *\n * a.notEqual(b).print();\n * ```\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nfunction notEqual_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'notEqual');\n  let $b = convertToTensor(b, 'b', 'notEqual');\n  [$a, $b] = makeTypesMatch($a, $b);\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n  return ENGINE.runKernel(backend => backend.notEqual($a, $b), {$a, $b}) as T;\n}\n\n/**\n * Strict version of `tf.notEqual` that forces `a` and `b` to be of the same\n * shape.\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same shape and dtype as\n *     `a`.\n */\nfunction notEqualStrict_<T extends Tensor>(\n    a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'notEqualStrict');\n  const $b = convertToTensor(b, 'b', 'notEqualStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in notEqualStrict: ');\n  return $a.notEqual($b);\n}\n\n/**\n * Returns the truth value of (a < b) element-wise. Supports broadcasting.\n *\n * We also expose `tf.lessStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.less(b).print();\n * ```\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nfunction less_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'less');\n  let $b = convertToTensor(b, 'b', 'less');\n  [$a, $b] = makeTypesMatch($a, $b);\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  return ENGINE.runKernel(backend => backend.less($a, $b), {$a, $b}) as T;\n}\n\n/**\n * Strict version of `tf.less` that forces `a` and `b` to be of the same\n * shape.\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same shape and dtype as\n *     `a`.\n */\nfunction lessStrict_<T extends Tensor>(a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'lessStrict');\n  const $b = convertToTensor(b, 'b', 'lessStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in lessStrict: ');\n  return $a.less($b);\n}\n\n/**\n * Returns the truth value of (a == b) element-wise. Supports broadcasting.\n *\n * We also expose `tf.equalStrict` which has the same signature as this op\n * and asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.equal(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nfunction equal_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'equal');\n  let $b = convertToTensor(b, 'b', 'equal');\n  [$a, $b] = makeTypesMatch($a, $b);\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  return ENGINE.runKernel(backend => backend.equal($a, $b), {$a, $b}) as T;\n}\n\nfunction equalStrict_<T extends Tensor>(a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'equalStrict');\n  const $b = convertToTensor(b, 'b', 'equalStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in equalStrict: ');\n  return $a.equal($b);\n}\n\n/**\n * Returns the truth value of (a <= b) element-wise. Supports broadcasting.\n *\n * We also expose `tf.lessEqualStrict` which has the same signature as this op\n * and asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.lessEqual(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nfunction lessEqual_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'lessEqual');\n  let $b = convertToTensor(b, 'b', 'lessEqual');\n  [$a, $b] = makeTypesMatch($a, $b);\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  return ENGINE.runKernel(backend => backend.lessEqual($a, $b), {$a, $b}) as T;\n}\n\nfunction lessEqualStrict_<T extends Tensor>(\n    a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'lessEqualStrict');\n  const $b = convertToTensor(b, 'b', 'lessEqualStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in lessEqualStrict: ');\n  return $a.lessEqual($b);\n}\n\n/**\n * Returns the truth value of (a > b) element-wise. Supports broadcasting.\n *\n * We also expose `tf.greaterStrict` which has the same signature as this\n * op and asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.greater(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nfunction greater_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'greater');\n  let $b = convertToTensor(b, 'b', 'greater');\n  [$a, $b] = makeTypesMatch($a, $b);\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  return ENGINE.runKernel(backend => backend.greater($a, $b), {$a, $b}) as T;\n}\n\nfunction greaterStrict_<T extends Tensor>(a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'greaterStrict');\n  const $b = convertToTensor(b, 'b', 'greaterStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in greaterStrict: ');\n  return $a.greater($b);\n}\n\n/**\n * Returns the truth value of (a >= b) element-wise. Supports broadcasting.\n *\n * We also expose `tf.greaterEqualStrict` which has the same signature as this\n * op and asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.greaterEqual(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nfunction greaterEqual_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'greaterEqual');\n  let $b = convertToTensor(b, 'b', 'greaterEqual');\n  [$a, $b] = makeTypesMatch($a, $b);\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$a, $b] = saved;\n    return {$a: () => zerosLike($a), $b: () => zerosLike($b)};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.greaterEqual($a, $b);\n    save([$a, $b]);\n    return res;\n  }, {$a, $b}, grad) as T;\n}\n\nfunction greaterEqualStrict_<T extends Tensor>(\n    a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'greaterEqualStrict');\n  const $b = convertToTensor(b, 'b', 'greaterEqualStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in greaterEqualStrict: ');\n  return $a.greaterEqual($b);\n}\n\nexport const equal = op({equal_});\nexport const equalStrict = op({equalStrict_});\nexport const greater = op({greater_});\nexport const greaterEqual = op({greaterEqual_});\nexport const greaterEqualStrict = op({greaterEqualStrict_});\nexport const greaterStrict = op({greaterStrict_});\nexport const less = op({less_});\nexport const lessEqual = op({lessEqual_});\nexport const lessEqualStrict = op({lessEqualStrict_});\nexport const lessStrict = op({lessStrict_});\nexport const notEqual = op({notEqual_});\nexport const notEqualStrict = op({notEqualStrict_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor, Tensor1D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assert, isInt, parseAxisParam} from '../util';\nimport {expandDims} from './array_ops';\nimport {getUndoAxesPermutation} from './axis_util';\nimport {maximum} from './binary_ops';\nimport {greaterEqual} from './compare';\nimport {logicalAnd, where} from './logical_ops';\nimport {op} from './operation';\nimport {collectGatherOpShapeInfo} from './segment_util';\nimport {ones, scalar, zerosLike} from './tensor_ops';\n\n/**\n * Computes the sum along segments of a `tf.Tensor`.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const segmentIds = tf.tensor1d([1, 2, 0, 1], 'int32');\n * const numSegments = 3;\n *\n * x.unsortedSegmentSum(segmentIds, numSegments).print()\n * //or tf.unsortedSegmentSum(x, segmentIds, numSegments)\n * ```\n * @param x The `tf.Tensor` that will be summed along its segments.\n * @param segmentIds A `tf.Tensor1D` whose rank is equal to the rank of `x`'s\n * dimension along the `axis`.  Maps each element of `x` to a segment.\n * @param numSegments The number of distinct `segmentIds`.\n */\n/** @doc {heading: 'Operations', subheading: 'Segment'} */\nfunction unsortedSegmentSum_<T extends Tensor>(\n    x: T|TensorLike, segmentIds: Tensor1D|TensorLike, numSegments: number): T {\n  const $x = convertToTensor(x, 'x', 'unsortedSegmentSum');\n  const $segmentIds =\n      convertToTensor(segmentIds, 'segmentIds', 'unsortedSegmentSum', 'int32');\n  assert(isInt(numSegments), () => 'numSegments must be of dtype int');\n\n  const gradFunc = (dy: T, saved: Tensor[]) => {\n    const [$segmentIds] = saved;\n    const derX = () => {\n      return gatherDropNegatives(dy, $segmentIds as Tensor1D);\n    };\n    return {$x: derX};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.unsortedSegmentSum($x, $segmentIds, numSegments);\n    save([$segmentIds]);\n    return res;\n  }, {$x}, gradFunc) as T;\n}\n\n/**\n * Gather slices from tensor `x`'s axis `axis` according to `indices`.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const indices = tf.tensor1d([1, 3, 3], 'int32');\n *\n * x.gather(indices).print();\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const indices = tf.tensor1d([1, 1, 0], 'int32');\n *\n * x.gather(indices).print();\n * ```\n * @param x The input tensor whose slices to be gathered.\n * @param indices The indices of the values to extract.\n * @param axis The axis over which to select values. Defaults to 0.\n */\n/** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */\nfunction gather_<T extends Tensor>(\n    x: T|TensorLike, indices: Tensor|TensorLike, axis = 0): T {\n  const $x = convertToTensor(x, 'x', 'gather');\n  const $indices = convertToTensor(indices, 'indices', 'gather', 'int32');\n  axis = parseAxisParam(axis, $x.shape)[0];\n  const shapeInfo = collectGatherOpShapeInfo($x, $indices, axis);\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$indices] = saved;\n    const derX = () => {\n      const paramsShape = $x.shape;\n      const indicesSize = $indices.size;\n\n      const outerShape = paramsShape.slice(0, axis);\n      const outerDims = outerShape.length;\n      const innerShape = paramsShape.slice(axis, paramsShape.length).slice(1);\n      const innerDims = innerShape.length;\n\n      const outerAxesIndices = arrayRange(0, outerDims);\n      const innerAxesIndices =\n          arrayRange(outerDims + 1, outerDims + 1 + innerDims);\n\n      const valuesShape = arrayConcat([outerShape, [indicesSize], innerShape]);\n\n      const values = dy.reshape(valuesShape);\n      const reshapedIndices = $indices.reshape([indicesSize]);\n\n      const transposeDims =\n          arrayConcat([[outerDims], outerAxesIndices, innerAxesIndices]);\n      const valuesTranspose = values.transpose(transposeDims);\n      let paramsGrad = unsortedSegmentSum(\n          valuesTranspose, reshapedIndices as Tensor1D, $x.shape[axis]);\n\n      const invertTransposeDims = getUndoAxesPermutation(transposeDims);\n      paramsGrad = paramsGrad.transpose(invertTransposeDims);\n\n      return paramsGrad as T;\n    };\n    return {$x: derX};\n  };\n  return (ENGINE.runKernel((backend, save) => {\n           const res = backend.gather($x, $indices.flatten(), axis);\n           save([$indices]);\n           return res;\n         }, {$x}, grad)).reshape(shapeInfo.outputShape) as T;\n}\n\nfunction arrayRange(start: number, stop: number): number[] {\n  const result = [];\n  for (let i = start; i < stop; ++i) {\n    result.push(i);\n  }\n  return result;\n}\n\nfunction arrayConcat(arrays: number[][]): number[] {\n  const result = [];\n  for (let i = 0; i < arrays.length; ++i) {\n    for (let j = 0; j < arrays[i].length; ++j) {\n      result.push(arrays[i][j]);\n    }\n  }\n  return result;\n}\n\nfunction gatherDropNegatives<T extends Tensor>(x: T, indices: Tensor1D) {\n  // Helper function for unsorted segment ops. Gathers params for\n  // positive segment ids and gathers 0 for inputs with negative segment id.\n  // Mirrors _GatherDropNegatives from tensorflow/python/ops/math_grad.py\n  const zeroClippedIndices = maximum(indices, zerosLike(indices));\n  const gathered = gather(x, zeroClippedIndices as Tensor1D);\n  let isPositive = greaterEqual(indices, scalar(0, 'int32'));\n  const numIters = gathered.rank - isPositive.rank;\n  for (let i = 0; i < numIters; ++i) {\n    isPositive = expandDims(isPositive, i + 1);\n  }\n  isPositive = logicalAnd(isPositive, ones(gathered.shape, 'bool'));\n  const zeroSlice = zerosLike(gathered);\n  return where(isPositive, gathered, zeroSlice);\n}\n\nexport const gather = op({gather_});\nexport const unsortedSegmentSum = op({unsortedSegmentSum_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {whereAsync} from './logical_ops';\nimport {gather} from './segment_ops';\n\n/**\n * Apply boolean mask to tensor.\n *\n * ```js\n * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\n * const mask = tf.tensor1d([1, 0, 1], 'bool');\n * const result = await tf.booleanMaskAsync(tensor, mask);\n * result.print();\n * ```\n *\n * @param N-D tensor.\n * @param mask K-D boolean tensor, K <= N and K must be known statically.\n * @param axis A 0-D int Tensor representing the axis in tensor to mask from.\n *     By default, axis is 0 which will mask from the first dimension.\n *     Otherwise K + axis <= N.\n */\n/** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */\nasync function booleanMaskAsync_(\n    tensor: Tensor|TensorLike, mask: Tensor|TensorLike,\n    axis?: number): Promise<Tensor> {\n  const $tensor = convertToTensor(tensor, 'tensor', 'boolMask');\n  const $mask = convertToTensor(mask, 'mask', 'boolMask', 'bool');\n\n  const axisFrom = axis == null ? 0 : axis;\n  const maskDim = $mask.rank;\n  const tensorShape = $tensor.shape;\n\n  util.assert(maskDim > 0, () => 'mask cannot be scalar');\n  util.assertShapesMatch(\n      tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape,\n      `mask's shape must match the first K dimensions of tensor's shape,`);\n\n  let leadingSize = 1;\n  for (let i = axisFrom; i < axisFrom + maskDim; i++) {\n    leadingSize *= tensorShape[i];\n  }\n  const targetTensorShape =\n      tensorShape.slice(0, axisFrom)\n          .concat([leadingSize], tensorShape.slice(axisFrom + maskDim));\n  const reshapedTensor = $tensor.reshape(targetTensorShape);\n  const reshapedMask = $mask.reshape([-1]);\n  const positivePositions = await whereAsync(reshapedMask);\n  const indices = positivePositions.squeeze([1]);\n\n  const res = gather(reshapedTensor, indices, axisFrom);\n\n  // Ensure no memory leak.\n  if (tensor !== $tensor) {\n    $tensor.dispose();\n  }\n  if (mask !== $mask) {\n    $mask.dispose();\n  }\n  indices.dispose();\n  reshapedTensor.dispose();\n  reshapedMask.dispose();\n  positivePositions.dispose();\n\n  return res;\n}\n\nexport const booleanMaskAsync = booleanMaskAsync_;\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor, Tensor2D, Tensor3D, Tensor4D, Tensor5D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\n\n/**\n * Computes a 1D convolution over the input x.\n *\n * @param x The input tensor, of rank 3 or rank 2, of shape\n *     `[batch, width, inChannels]`. If rank 2, batch of 1 is assumed.\n * @param filter The filter, rank 3, of shape\n *     `[filterWidth, inDepth, outDepth]`.\n * @param stride The number of entries by which the filter is moved right at\n *     each step.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dataFormat An optional string from \"NWC\", \"NCW\". Defaults to \"NWC\",\n *     the data is stored in the order of [batch, in_width, in_channels]. Only\n *     \"NWC\" is currently supported.\n * @param dilation The dilation rate in which we sample input values in\n *     atrous convolution. Defaults to `1`. If it is greater than 1, then\n *     stride must be `1`.\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n */\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction conv1d_<T extends Tensor2D|Tensor3D>(\n    x: T|TensorLike, filter: Tensor3D|TensorLike, stride: number,\n    pad: 'valid'|'same'|number, dataFormat: 'NWC'|'NCW' = 'NWC', dilation = 1,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'conv1d');\n  const $filter = convertToTensor(filter, 'filter', 'conv1d');\n\n  let x3D = $x as Tensor3D;\n  let reshapedTo3D = false;\n  if ($x.rank === 2) {\n    reshapedTo3D = true;\n    x3D = $x.as3D(1, $x.shape[0], $x.shape[1]);\n  }\n\n  util.assert(\n      x3D.rank === 3,\n      () => `Error in conv1d: input must be rank 3, but got rank ${x3D.rank}.`);\n  util.assert(\n      $filter.rank === 3,\n      () => `Error in conv1d: filter must be rank 3, but got rank ` +\n          `${$filter.rank}.`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in conv1d: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  util.assert(\n      x3D.shape[2] === $filter.shape[1],\n      () => `Error in conv1d: depth of input (${x3D.shape[2]}) must match ` +\n          `input depth for filter ${$filter.shape[1]}.`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(stride, dilation),\n      () => 'Error in conv1D: Either stride or dilation must be 1. ' +\n          `Got stride ${stride} and dilation '${dilation}'`);\n  util.assert(\n      dataFormat === 'NWC',\n      () => `Error in conv1d: got dataFormat of ${\n          dataFormat} but only NWC is currently supported.`);\n\n  const filter4D =\n      $filter.as4D(1, $filter.shape[0], $filter.shape[1], $filter.shape[2]);\n  const input4D = x3D.as4D(x3D.shape[0], 1, x3D.shape[1], x3D.shape[2]);\n  const strides: [number, number] = [1, stride];\n  const dilations: [number, number] = [1, dilation];\n\n  const conv2dDataFormat = 'NHWC';\n\n  const res = conv2d(\n      input4D, filter4D, strides, pad, conv2dDataFormat, dilations,\n      dimRoundingMode);\n\n  if (reshapedTo3D) {\n    return res.as2D(res.shape[2], res.shape[3]) as T;\n  }\n  return res.as3D(res.shape[0], res.shape[2], res.shape[3]) as T;\n}\n\n/**\n * Computes a 2D convolution over the input x.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n */\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction conv2d_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filter: Tensor4D|TensorLike,\n    strides: [number, number]|number, pad: 'valid'|'same'|number,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n    dilations: [number, number]|number = [1, 1],\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'conv2d');\n  const $filter = convertToTensor(filter, 'filter', 'conv2d');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in conv2d: input must be rank 4, but got rank ${x4D.rank}.`);\n  util.assert(\n      $filter.rank === 4,\n      () => `Error in conv2d: filter must be rank 4, but got rank ` +\n          `${$filter.rank}.`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in conv2d: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n  const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];\n  util.assert(\n      inDepth === $filter.shape[2],\n      () => `Error in conv2d: depth of input (${inDepth}) must match ` +\n          `input depth for filter ${$filter.shape[2]}.`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in conv2D: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const $dataFormat = conv_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = conv_util.computeConv2DInfo(\n      x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, false,\n      $dataFormat);\n\n  const grad = (dy: Tensor4D, saved: Tensor[]) => {\n    const [$filter, x4D] = saved as [Tensor4D, Tensor4D];\n    util.assert(\n        conv_util.tupleValuesAreOne(dilations),\n        () => 'Error in gradient of conv2D: dilation rates greater than 1 ' +\n            `are not yet supported in gradients. Got dilations '${dilations}'`);\n\n    return {\n      x: () =>\n          conv2dDerInput_(x4D.shape, dy, $filter, strides, pad, dataFormat),\n      $filter: () =>\n          conv2dDerFilter_(x4D, dy, $filter.shape, strides, pad, dataFormat)\n    };\n  };\n\n  const res = ENGINE.runKernel((backend, save) => {\n    const res = backend.conv2d(x4D, $filter, convInfo);\n    save([$filter, x4D]);\n\n    return res;\n  }, {x: x4D, $filter}, grad);\n\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\n/**\n * Computes the derivative of the input of a 2D convolution.\n *\n * @param xShape The shape of the input: [batch, height, width, inDepth].\n * If length of 3, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 4 or rank 3 of shape\n *   `[batch, outHeight, outWidth, outDepth]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n */\nfunction conv2dDerInput_<T extends Tensor3D|Tensor4D>(\n    xShape: [number, number, number, number]|[number, number, number], dy: T,\n    filter: Tensor4D, strides: [number, number]|number,\n    pad: 'valid'|'same'|number, dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  util.assert(\n      xShape.length === dy.rank,\n      () => `Length of inShape ` +\n          `(${xShape.length}) and rank of dy (${dy.rank}) must match`);\n\n  let xShape4D = xShape as [number, number, number, number];\n  let dy4D = dy as Tensor4D;\n  let reshapedTo4D = false;\n  if (dy.rank === 3) {\n    reshapedTo4D = true;\n    dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);\n    xShape4D = [1, xShape[0], xShape[1], xShape[2]];\n  }\n\n  util.assert(\n      xShape4D.length === 4,\n      () =>\n          `Error in conv2dDerInput: inShape must be length 4, but got length ` +\n          `${xShape4D.length}.`);\n  util.assert(\n      dy4D.rank === 4,\n      () => `Error in conv2dDerInput: dy must be rank 4, but got ` +\n          `rank ${dy4D.rank}`);\n  util.assert(\n      filter.rank === 4,\n      () => `Error in conv2dDerInput: filter must be rank 4, but got ` +\n          `rank ${filter.rank}`);\n  const inDepth = dataFormat === 'NHWC' ? xShape4D[3] : xShape4D[1];\n  const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n  util.assert(\n      inDepth === filter.shape[2],\n      () => `Error in conv2dDerInput: depth of input (${inDepth}) must ` +\n          `match input depth for filter ${filter.shape[2]}.`);\n  util.assert(\n      outDepth === filter.shape[3],\n      () => `Error in conv2dDerInput: depth of output (${outDepth}) must ` +\n          `match output depth for filter ${filter.shape[3]}.`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in conv2dDerInput: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  const dilations = 1;\n\n  const grad = (ddx: Tensor4D, saved: Tensor[]) => {\n    const [filter, dy4D] = saved;\n    return {\n      dy4D: () => conv2d(\n          ddx, filter as Tensor4D, strides, pad, dataFormat, dilations,\n          dimRoundingMode),\n      filter: () => conv2dDerFilter(\n          ddx, dy4D as Tensor4D, (filter as Tensor4D).shape, strides, pad,\n          dataFormat, dimRoundingMode)\n    };\n  };\n\n  const $dataFormat = conv_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = conv_util.computeConv2DInfo(\n      xShape4D, filter.shape, strides, dilations, pad, dimRoundingMode, false,\n      $dataFormat);\n  const res = ENGINE.runKernel((backend, save) => {\n    const res = backend.conv2dDerInput(dy4D, filter, convInfo);\n    save([filter, dy4D]);\n    return res;\n  }, {dy4D, filter}, grad);\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\n/**\n * Computes the derivative of the filter of a 2D convolution.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     [batch, height, width, inChannels]. If rank 3, batch of 1 is assumed.\n * @param dy The dy image, of rank 4 or rank 3, of shape\n *     [batch, height, width, outDepth]. If rank 3, batch of 1 is assumed.\n * @param filterShape The shape of the filter, length 4,\n *     [filterHeight, filterWidth, inDepth, outDepth].\n * @param strides The strides of the convolution: [strideHeight,\n * strideWidth].\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The\n *     rounding mode used when computing output dimensions if pad is a\n *     number. If none is provided, it will not round and error if the output\n *     is of fractional size.\n */\nfunction conv2dDerFilter_<T extends Tensor3D|Tensor4D>(\n    x: T, dy: T, filterShape: [number, number, number, number],\n    strides: [number, number]|number, pad: 'valid'|'same'|number,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n    dimRoundingMode?: 'floor'|'round'|'ceil'): Tensor4D {\n  let x4D = x as Tensor4D;\n  if (x.rank === 3) {\n    x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n  }\n  let dy4D = dy as Tensor4D;\n  if (dy4D.rank === 3) {\n    dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in conv2dDerFilter: input must be rank 4, but got shape ` +\n          `${x4D.shape}.`);\n  util.assert(\n      dy4D.rank === 4,\n      () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ` +\n          `${dy4D.shape}.`);\n  util.assert(\n      filterShape.length === 4,\n      () => `Error in conv2dDerFilter: filterShape must be length 4, but got ` +\n          `${filterShape}.`);\n  const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];\n  const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n  util.assert(\n      inDepth === filterShape[2],\n      () => `Error in conv2dDerFilter: depth of input ${inDepth}) must ` +\n          `match input depth in filter (${filterShape[2]}.`);\n  util.assert(\n      outDepth === filterShape[3],\n      () => `Error in conv2dDerFilter: depth of dy (${outDepth}) must ` +\n          `match output depth for filter (${filterShape[3]}).`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in conv2dDerFilter: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  const dilations = 1;\n  const $dataFormat = conv_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = conv_util.computeConv2DInfo(\n      x4D.shape, filterShape, strides, dilations, pad, dimRoundingMode, false,\n      $dataFormat);\n  return ENGINE.runKernel(\n      backend => backend.conv2dDerFilter(x4D, dy4D, convInfo), {x4D, dy4D});\n}\n\n/**\n * Computes the transposed 2D convolution of an image, also known as a\n * deconvolution.\n *\n * @param x The input image, of rank 4 or rank 3, of shape\n *   `[batch, height, width, inDepth]`. If rank 3, batch of 1 is assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, outDepth, inDepth]`.\n *     `inDepth` must match `inDepth` in `x`.\n * @param outputShape Output shape, of rank 4 or rank 3:\n *     `[batch, height, width, outDepth]`. If rank 3, batch of 1 is assumed.\n * @param strides The strides of the original convolution:\n *     `[strideHeight, strideWidth]`.\n * @param pad  The type of padding algorithm used in the non-transpose version\n *    of the op.\n * @param dimRoundingMode The rounding mode used when computing output\n *    dimensions if pad is a number. If none is provided, it will not round\n *    and error if the output is of fractional size.\n */\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction conv2dTranspose_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filter: Tensor4D|TensorLike,\n    outputShape: [number, number, number, number]|[number, number, number],\n    strides: [number, number]|number, pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'conv2dTranspose');\n  const $filter = convertToTensor(filter, 'filter', 'conv2dTranspose');\n\n  return conv2dDerInput_(\n      outputShape, $x, $filter, strides, pad, 'NHWC', dimRoundingMode);\n}\n\n/**\n * Depthwise 2D convolution.\n *\n * Given a 4D `input` array and a `filter` array of shape\n * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing\n * `inChannels` convolutional filters of depth 1, this op applies a\n * different filter to each input channel (expanding from 1 channel to\n * `channelMultiplier` channels for each), then concatenates the results\n * together. The output has `inChannels * channelMultiplier` channels.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)\n * for more details.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n */\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction depthwiseConv2d_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filter: Tensor4D|TensorLike,\n    strides: [number, number]|number, pad: 'valid'|'same'|number,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n    dilations: [number, number]|number = [1, 1],\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'depthwiseConv2d');\n  const $filter = convertToTensor(filter, 'filter', 'depthwiseConv2d');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in depthwiseConv2d: input must be rank 4, but got ` +\n          `rank ${x4D.rank}.`);\n  util.assert(\n      $filter.rank === 4,\n      () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ` +\n          `${$filter.rank}.`);\n  util.assert(\n      x4D.shape[3] === $filter.shape[2],\n      () => `Error in depthwiseConv2d: number of input channels ` +\n          `(${x4D.shape[3]}) must match the inChannels dimension in ` +\n          `filter ${$filter.shape[2]}.`);\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () =>\n          'Error in depthwiseConv2d: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in depthwiseConv2d: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  const convInfo = conv_util.computeConv2DInfo(\n      x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode,\n      true /* depthwise */);\n\n  const grad = (dy: Tensor4D, saved: Tensor[]) => {\n    util.assert(\n        conv_util.tupleValuesAreOne(dilations),\n        () => 'Error in gradient of depthwiseConv2d: dilation rates ' +\n            `greater than 1 are not yet supported. Got dilations ` +\n            `'${dilations}'`);\n    const [x4D, $filter] = saved;\n    return {\n      x: () => depthwiseConv2dDerInput(\n          (x4D as Tensor4D).shape, dy, $filter as Tensor4D, convInfo),\n      $filter: () => depthwiseConv2dDerFilter(\n          x4D as Tensor4D, dy, ($filter as Tensor4D).shape, convInfo),\n    };\n  };\n\n  const res = ENGINE.runKernel((backend, save) => {\n    const res = backend.depthwiseConv2D(x4D, $filter, convInfo);\n    save([x4D, $filter]);\n    return res;\n  }, {x: x4D, $filter}, grad);\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\n/**\n * 2-D convolution with separable filters.\n *\n * Performs a depthwise convolution that acts separately on channels followed\n * by a pointwise convolution that mixes channels. Note that this is\n * separability between dimensions [1, 2] and 3, not spatial separability\n * between dimensions 1 and 2.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)\n * for more details.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param depthwiseFilter The depthwise filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is\n *     the filter used in the first step.\n * @param pointwiseFilter The pointwise filter tensor, rank 4, of shape\n *     `[1, 1, inChannels * channelMultiplier, outChannels]`. This is\n *     the filter used in the second step.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n */\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction separableConv2d_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, depthwiseFilter: Tensor4D|TensorLike,\n    pointwiseFilter: Tensor4D|TensorLike, strides: [number, number]|number,\n    pad: 'valid'|'same', dilation: [number, number]|number = [1, 1],\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC'): T {\n  const $x = convertToTensor(x, 'x', 'separableConv2d');\n  const $depthwiseFilter =\n      convertToTensor(depthwiseFilter, 'depthwiseFilter', 'separableConv2d');\n  const $pointwiseFilter =\n      convertToTensor(pointwiseFilter, 'pointwiseFilter', 'separableConv2d');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);\n  }\n\n  if (dataFormat === 'NCHW') {\n    throw new Error(\n        'separableConv2d currently does not support dataFormat NCHW; only ' +\n        'NHWC is supported');\n  }\n\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in separableConv2d: input must be rank 4, but got ` +\n          `rank ${x4D.rank}.`);\n  util.assert(\n      $depthwiseFilter.rank === 4,\n      () => `Error in separableConv2d: depthwise filter must be rank 4, but ` +\n          `got rank ${$depthwiseFilter.rank}.`);\n  util.assert(\n      $pointwiseFilter.rank === 4,\n      () => `Error in separableConv2d: pointwise filter must be rank 4, but ` +\n          `got rank ${$depthwiseFilter.rank}.`);\n  util.assert(\n      $pointwiseFilter.shape[0] === 1,\n      () =>\n          `Error in separableConv2d: the first dimension of pointwise filter ` +\n          ` must be 1, but got ${$pointwiseFilter.shape[0]}.`);\n  util.assert(\n      $pointwiseFilter.shape[1] === 1,\n      () => `Error in separableConv2d: the second dimension of pointwise ` +\n          `filter must be 1, but got ${$pointwiseFilter.shape[1]}.`);\n\n  const inChannels = $depthwiseFilter.shape[2];\n  const channelMultiplier = $depthwiseFilter.shape[3];\n  util.assert(\n      $pointwiseFilter.shape[2] === inChannels * channelMultiplier,\n      () =>\n          `Error in separableConv2d: the third dimension of pointwise filter ` +\n          `must be ${inChannels * channelMultiplier}, ` +\n          `but got ${$pointwiseFilter.shape[2]}.`);\n\n  const depthwise = depthwiseConv2d(\n      x4D, $depthwiseFilter, strides, pad, dataFormat, dilation);\n  const pointwiseStride = 1;\n  const res =\n      conv2d(depthwise, $pointwiseFilter, pointwiseStride, 'valid', dataFormat);\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\nfunction parseTupleParam(\n    param: number|[number, number]|[number, number, number]):\n    [number, number, number] {\n  if (typeof param === 'number') {\n    return [param, param, param];\n  }\n  if (param.length === 2) {\n    return [param[0], param[1], 1];\n  }\n  return param;\n}\n\nfunction tupleValuesAreOne(\n    param: number|[number, number]|[number, number, number]): boolean {\n  const [dimA, dimB, dimC] = parseTupleParam(param);\n  return dimA === 1 && dimB === 1 && dimC === 1;\n}\n\nfunction eitherStridesOrDilationsAreOne(\n    strides: number|[number, number]|[number, number, number],\n    dilations: number|[number, number]|[number, number, number]): boolean {\n  return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);\n}\n\nfunction depthwiseConv2dDerInput<T extends Tensor3D|Tensor4D>(\n    xShape: [number, number, number, number]|[number, number, number], dy: T,\n    filter: Tensor4D, convInfo: conv_util.Conv2DInfo): T {\n  let dy4D = dy as Tensor4D;\n  let reshapedTo4D = false;\n  if (dy.rank === 3) {\n    reshapedTo4D = true;\n    dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);\n  }\n  const res = ENGINE.runKernel(\n      backend => backend.depthwiseConv2DDerInput(dy4D, filter, convInfo),\n      {dy4D});\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\nfunction depthwiseConv2dDerFilter<T extends Tensor3D|Tensor4D>(\n    x: T, dy: T, filterShape: [number, number, number, number],\n    convInfo: conv_util.Conv2DInfo): Tensor4D {\n  let x4D = x as Tensor4D;\n  if (x.rank === 3) {\n    x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n  }\n  let dy4D = dy as Tensor4D;\n  if (dy4D.rank === 3) {\n    dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);\n  }\n  return ENGINE.runKernel(\n      backend => backend.depthwiseConv2DDerFilter(x4D, dy4D, convInfo),\n      {x4D, dy4D});\n}\n\n/**\n * Computes a 3D convolution over the input x.\n *\n * @param x The input tensor, of rank 5 or rank 4, of shape\n *     `[batch, depth, height, width, channels]`. If rank 4,\n * batch of 1 is assumed.\n * @param filter The filter, rank 5, of shape\n *     `[filterDepth, filterHeight, filterWidth, inChannels, outChannels]`.\n *      inChannels must match between input and filter.\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dataFormat: An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n * @param dilations The dilation rates: `[dilationDepth, dilationHeight,\n *     dilationWidth]` in which we sample input values across the height\n *     and width dimensions in atrous convolution. Defaults to `[1, 1, 1]`.\n *     If `dilations` is a single number, then\n *     `dilationDepth == dilationHeight == dilationWidth`. If it is greater\n *     than 1, then all values of `strides` must be 1.\n */\n\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction conv3d_<T extends Tensor4D|Tensor5D>(\n    x: T|TensorLike, filter: Tensor5D|TensorLike,\n    strides: [number, number, number]|number, pad: 'valid'|'same',\n    dataFormat: 'NDHWC'|'NCDHW' = 'NDHWC',\n    dilations: [number, number, number]|number = [1, 1, 1]): T {\n  const $x = convertToTensor(x, 'x', 'conv3d');\n  const $filter = convertToTensor(filter, 'filter', 'conv3d');\n\n  let x5D = $x as Tensor5D;\n  let reshapedTo5D = false;\n\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = $x.as5D(1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]);\n  }\n  util.assert(\n      x5D.rank === 5,\n      () => `Error in conv3d: input must be rank 5, but got rank ${x5D.rank}.`);\n  util.assert(\n      $filter.rank === 5,\n      () => `Error in conv3d: filter must be rank 5, but got rank ` +\n          `${$filter.rank}.`);\n  util.assert(\n      x5D.shape[4] === $filter.shape[3],\n      () => `Error in conv3d: depth of input (${x5D.shape[4]}) must match ` +\n          `input depth for filter ${$filter.shape[3]}.`);\n  util.assert(\n      eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in conv3D: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n  util.assert(\n      dataFormat === 'NDHWC',\n      () => `Error in conv3d: got dataFormat of ${\n          dataFormat} but only NDHWC is currently supported.`);\n\n  const convInfo = conv_util.computeConv3DInfo(\n      x5D.shape, $filter.shape, strides, dilations, pad);\n\n  const grad = (dy: Tensor5D, saved: Tensor[]) => {\n    util.assert(\n        tupleValuesAreOne(dilations),\n        () =>\n            'Error in gradient of conv3D: dilation rates greater than 1 are ' +\n            `not yet supported in gradients. Got dilations '${dilations}'`);\n    const [x5D, $filter] = saved;\n    return {\n      x: () => conv3dDerInput_(\n          (x5D as Tensor5D).shape, dy, $filter as Tensor5D, strides, pad),\n      $filter: () => conv3dDerFilter_(\n          x5D as Tensor5D, dy, ($filter as Tensor5D).shape, strides, pad)\n    };\n  };\n\n  const res = ENGINE.runKernel((backend, save) => {\n    const res = backend.conv3d(x5D, $filter, convInfo);\n    save([x5D, $filter]);\n    return res;\n  }, {x: x5D, $filter}, grad);\n  if (reshapedTo5D) {\n    return res.as4D(res.shape[1], res.shape[2], res.shape[3], res.shape[4]) as\n        T;\n  }\n  return res as T;\n}\n\n/**\n * Computes the derivative of the input of a 3D convolution.\n *\n * @param xShape The shape of the input: [batch, depth, height, width,\n * in_channels]. If length of 4, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 5 or rank 4 of shape\n *   `[batch, outDepth, outHeight, outWidth, in_channels]`.\n * If rank 4, batch of 1 is assumed.\n * @param filter The filter, rank 5, of shape\n *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n */\nfunction conv3dDerInput_<T extends Tensor4D|Tensor5D>(\n    xShape:\n        [number, number, number, number,\n         number]|[number, number, number, number],\n    dy: T, filter: Tensor5D, strides: [number, number, number]|number,\n    pad: 'valid'|'same'): T {\n  util.assert(\n      xShape.length === dy.rank,\n      () => `Length of inShape ` +\n          `(${xShape.length}) and rank of dy (${dy.rank}) must match`);\n\n  let xShape5D = xShape as [number, number, number, number, number];\n  let dy5D = dy as Tensor5D;\n  let reshapedTo5D = false;\n  if (dy.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = dy.as5D(1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]);\n    xShape5D = [1, xShape[0], xShape[1], xShape[2], xShape[3]];\n  }\n\n  const inDepth = xShape5D[4];\n  const outDepth = dy5D.shape[4];\n  util.assert(\n      xShape5D.length === 5,\n      () =>\n          `Error in conv3dDerInput: inShape must be length 5, but got length ` +\n          `${xShape5D.length}.`);\n  util.assert(\n      dy5D.rank === 5,\n      () => `Error in conv3dDerInput: dy must be rank 5, but got ` +\n          `rank ${dy5D.rank}`);\n  util.assert(\n      filter.rank === 5,\n      () => `Error in conv3dDerInput: filter must be rank 5, but got ` +\n          `rank ${filter.rank}`);\n  util.assert(\n      inDepth === filter.shape[3],\n      () => `Error in conv3dDerInput: depth of input (${inDepth}) must ` +\n          `match input depth for filter ${filter.shape[3]}.`);\n  util.assert(\n      outDepth === filter.shape[4],\n      () => `Error in conv3dDerInput: depth of output (${outDepth}) must ` +\n          `match output depth for filter ${filter.shape[4]}.`);\n\n  const dilations = 1;\n\n  const convInfo = conv_util.computeConv3DInfo(\n      xShape5D, filter.shape, strides, dilations, pad);\n  const res = ENGINE.runKernel(\n      backend => backend.conv3dDerInput(dy5D, filter, convInfo), {dy5D});\n  if (reshapedTo5D) {\n    return res.as4D(res.shape[1], res.shape[2], res.shape[3], res.shape[4]) as\n        T;\n  }\n  return res as T;\n}\n\n/**\n * Computes the derivative of the filter of a 3D convolution.\n *\n * @param x The input tensor, of rank 5 or rank 4 of shape\n *     [batch, depth, height, width, inChannels]. If rank 4, batch of 1 is\n *     assumed.\n * @param dy The dy image, of rank 5 or rank 4, of shape\n *     [batch, depth, height, width, outDepth]. If rank 4, batch of 1 is\n *     assumed.\n * @param filterShape The shape of the filter, length 5,\n *     [filterDepth, filterHeight, filterWidth, inDepth, outDepth].\n * @param strides The strides of the convolution: [strideDepth, strideHeight,\n * strideWidth].\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n */\nfunction conv3dDerFilter_<T extends Tensor4D|Tensor5D>(\n    x: T, dy: T, filterShape: [number, number, number, number, number],\n    strides: [number, number, number]|number, pad: 'valid'|'same'): Tensor5D {\n  let x5D = x as Tensor5D;\n  if (x.rank === 4) {\n    x5D = x.as5D(1, x.shape[0], x.shape[1], x.shape[2], x.shape[3]);\n  }\n  let dy5D = dy as Tensor5D;\n  if (dy5D.rank === 4) {\n    dy5D = dy.as5D(1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]);\n  }\n  util.assert(\n      x5D.rank === 5,\n      () => `Error in conv3dDerFilter: input must be rank 5, but got shape ` +\n          `${x5D.shape}.`);\n  util.assert(\n      dy5D.rank === 5,\n      () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ` +\n          `${dy5D.shape}.`);\n  util.assert(\n      filterShape.length === 5,\n      () => `Error in conv3dDerFilter: filterShape must be length 5, but got ` +\n          `${filterShape}.`);\n  util.assert(\n      x5D.shape[4] === filterShape[3],\n      () => `Error in conv3dDerFilter: depth of input ${x5D.shape[4]}) must ` +\n          `match input depth in filter (${filterShape[3]}.`);\n  util.assert(\n      dy5D.shape[4] === filterShape[4],\n      () => `Error in conv3dDerFilter: depth of dy (${dy5D.shape[4]}) must ` +\n          `match output depth for filter (${filterShape[4]}).`);\n\n  const dilations = 1;\n\n  const convInfo = conv_util.computeConv3DInfo(\n      x5D.shape, filterShape, strides, dilations, pad);\n  return ENGINE.runKernel(\n      backend => backend.conv3dDerFilter(x5D, dy5D, convInfo), {x5D, dy5D});\n}\n\n/**\n * Computes the transposed 3D convolution of a volume, also known as a\n * deconvolution.\n *\n * @param x The input image, of rank 5 or rank 4, of shape\n *   `[batch, depth, height, width, inDepth]`. If rank 4, batch of 1 is assumed.\n * @param filter The filter, rank 4, of shape\n *     `[depth, filterHeight, filterWidth, outDepth, inDepth]`.\n *     `inDepth` must match `inDepth` in `x`.\n * @param outputShape Output shape, of rank 5 or rank 4:\n *     `[batch, depth, height, width, outDepth]`. If rank 3, batch of 1 is\n *    assumed.\n * @param strides The strides of the original convolution:\n *     `[strideDepth, strideHeight, strideWidth]`.\n * @param pad  The type of padding algorithm used in the non-transpose version\n *    of the op.\n */\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction conv3dTranspose_<T extends Tensor4D|Tensor5D>(\n    x: T|TensorLike, filter: Tensor5D|TensorLike,\n    outputShape:\n        [number, number, number, number,\n         number]|[number, number, number, number],\n    strides: [number, number, number]|number, pad: 'valid'|'same'): T {\n  const $x = convertToTensor(x, 'x', 'conv3dTranspose');\n  const $filter = convertToTensor(filter, 'filter', 'conv3dTranspose');\n\n  return conv3dDerInput_(outputShape, $x, $filter, strides, pad);\n}\n\nexport const conv1d = op({conv1d_});\nexport const conv2d = op({conv2d_});\nexport const conv3d = op({conv3d_});\nexport const conv2dDerFilter = op({conv2dDerFilter_});\nexport const conv2dDerInput = op({conv2dDerInput_});\nexport const depthwiseConv2d = op({depthwiseConv2d_});\nexport const separableConv2d = op({separableConv2d_});\nexport const conv2dTranspose = op({conv2dTranspose_});\nexport const conv3dTranspose = op({conv3dTranspose_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D} from '../tensor';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {op} from './operation';\n\n/**\n * Computes the dot product of two matrices, A * B. These must be matrices.\n *\n * ```js\n * const a = tf.tensor2d([1, 2], [1, 2]);\n * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * a.matMul(b).print();  // or tf.matMul(a, b)\n * ```\n * @param a First matrix in dot product operation.\n * @param b Second matrix in dot product operation.\n * @param transposeA If true, `a` is transposed before multiplication.\n * @param transposeB If true, `b` is transposed before multiplication.\n */\n/** @doc {heading: 'Operations', subheading: 'Matrices'} */\nfunction matMul_<T extends Tensor>(\n    a: T|TensorLike, b: T|TensorLike, transposeA = false,\n    transposeB = false): T {\n  let $a = convertToTensor(a, 'a', 'matMul');\n  let $b = convertToTensor(b, 'b', 'matMul');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const innerShapeA =\n      transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];\n  const innerShapeB =\n      transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];\n\n  const outerShapeA =\n      transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];\n  const outerShapeB =\n      transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];\n\n  const outerDimsA = $a.shape.slice(0, -2);\n  const outerDimsB = $b.shape.slice(0, -2);\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  util.assert(\n      $a.rank >= 2 && $b.rank >= 2 && $a.rank === $b.rank,\n      () => `Error in matMul: inputs must have the same rank of at least 2, ` +\n          `got ranks ${$a.rank} and ${$b.rank}.`);\n\n  util.assert(\n      util.arraysEqual(outerDimsA, outerDimsB),\n      () => `Error in matMul: outer dimensions (${outerDimsA}) and (` +\n          `${outerDimsB}) of Tensors with shapes ${$a.shape} and ` +\n          `${$b.shape} must match.`);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${$a.shape} and ` +\n          `${$b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const outShape = $a.shape.slice(0, -2).concat([outerShapeA, outerShapeB]);\n\n  const a3D = transposeA ? $a.as3D(batchDimA, innerShapeA, outerShapeA) :\n                           $a.as3D(batchDimA, outerShapeA, innerShapeA);\n  const b3D = transposeB ? $b.as3D(batchDimB, outerShapeB, innerShapeB) :\n                           $b.as3D(batchDimB, innerShapeB, outerShapeB);\n\n  const grad = (dy: Tensor3D, saved: Tensor[]) => {\n    const [a3D, b3D] = saved as Tensor3D[];\n    if (!transposeA && !transposeB) {\n      return {\n        $a: () => dy.matMul(b3D, false, true),\n        $b: () => a3D.matMul(dy, true, false)\n      };\n    } else if (!transposeA && transposeB) {\n      return {\n        $a: () => dy.matMul(b3D, false, false),\n        $b: () => dy.matMul(a3D, true, false)\n      };\n    } else if (transposeA && !transposeB) {\n      return {\n        $a: () => b3D.matMul(dy, false, true),\n        $b: () => a3D.matMul(dy, false, false)\n      };\n    } else {\n      return {\n        $a: () => b3D.matMul(dy, true, true),\n        $b: () => dy.matMul(a3D, true, true)\n      };\n    }\n  };\n\n  const res = ENGINE.runKernel((backend, save) => {\n    const res = backend.batchMatMul(a3D, b3D, transposeA, transposeB);\n    save([a3D, b3D]);\n    return res;\n  }, {$a: a3D, $b: b3D}, grad);\n  return res.reshape(outShape) as T;\n}\n\n/**\n * Computes the outer product of two vectors, `v1` and `v2`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([3, 4, 5]);\n *\n * tf.outerProduct(a, b).print();\n * ```\n * @param v1 The first vector in the outer product operation.\n * @param v2 The second vector in the outer product operation.\n */\n/** @doc {heading: 'Operations', subheading: 'Matrices'} */\nfunction outerProduct_(\n    v1: Tensor1D|TensorLike, v2: Tensor1D|TensorLike): Tensor2D {\n  const $v1 = convertToTensor(v1, 'v1', 'outerProduct');\n  const $v2 = convertToTensor(v2, 'v2', 'outerProduct');\n\n  util.assert(\n      $v1.rank === 1 && $v2.rank === 1,\n      () => `Error in outerProduct: inputs must be rank 1, but got ranks ` +\n          `${$v1.rank} and ${$v2.rank}.`);\n\n  return $v1.as2D(-1, 1).matMul($v2.as2D(1, -1));\n}\n\n/**\n * Computes the dot product of two matrices and/or vectors, `t1` and `t2`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor2d([[1, 2], [3, 4]]);\n * const c = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);\n *\n * a.dot(b).print();  // or tf.dot(a, b)\n * b.dot(a).print();\n * b.dot(c).print();\n * ```\n * @param t1 The first tensor in the dot operation.\n * @param t2 The second tensor in the dot operation.\n */\n/** @doc {heading: 'Operations', subheading: 'Matrices'} */\nfunction dot_(t1: Tensor|TensorLike, t2: Tensor|TensorLike): Tensor {\n  const $t1 = convertToTensor(t1, 't1', 'dot');\n  const $t2 = convertToTensor(t2, 't2', 'dot');\n  util.assert(\n      ($t1.rank === 1 || $t1.rank === 2) && ($t2.rank === 1 || $t2.rank === 2),\n      () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ` +\n          `${$t1.rank} and ${$t2.rank}.`);\n\n  const t1Inner = ($t1.rank === 1 ? $t1.size : $t1.shape[1]);\n  const t2Inner = ($t2.rank === 1 ? $t2.size : $t2.shape[0]);\n\n  util.assert(\n      t1Inner === t2Inner,\n      () => `Error in dot: inner dimensions of inputs must match, but got ` +\n          `${t1Inner} and ${t2Inner}.`);\n\n  if ($t1.rank === 1 && $t2.rank === 1) {\n    return $t1.as2D(1, -1).matMul($t2.as2D(-1, 1)).asScalar();\n  } else if ($t1.rank === 1 && $t2.rank === 2) {\n    return $t1.as2D(1, -1).matMul($t2.as2D($t2.shape[0], $t2.shape[1])).as1D();\n  } else if ($t1.rank === 2 && $t2.rank === 1) {\n    return $t1.matMul($t2.as2D(-1, 1)).as1D();\n  } else {\n    return $t1.matMul($t2.as2D($t2.shape[0], $t2.shape[1]));\n  }\n}\n\nexport const matMul = op({matMul_});\nexport const dot = op({dot_});\nexport const outerProduct = op({outerProduct_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {op} from './operation';\n\n/**\n * Reverses a `tf.Tensor1D`.\n *\n * @param x The input tensor.\n */\nfunction reverse1d_(x: Tensor1D|TensorLike): Tensor1D {\n  const $x = convertToTensor(x, 'x', 'reverse');\n  util.assert(\n      $x.rank === 1,\n      () => `Error in reverse1D: x must be rank 1 but got rank ${$x.rank}.`);\n  return reverse($x, 0);\n}\n\n/**\n * Reverses a `tf.Tensor2D` along a specified axis.\n *\n * @param x The input tensor.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n */\nfunction reverse2d_(x: Tensor2D|TensorLike, axis?: number|number[]): Tensor2D {\n  const $x = convertToTensor(x, 'x', 'reverse');\n  util.assert(\n      $x.rank === 2,\n      () => `Error in reverse2D: x must be rank 2 but got rank ${$x.rank}.`);\n  return reverse($x, axis);\n}\n\n/**\n * Reverses a `tf.Tensor3D` along a specified axis.\n *\n * @param x The input tensor.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n */\nfunction reverse3d_(x: Tensor3D|TensorLike, axis?: number|number[]): Tensor3D {\n  const $x = convertToTensor(x, 'x', 'reverse');\n  util.assert(\n      $x.rank === 3,\n      () => `Error in reverse3D: x must be rank 3 but got rank ${$x.rank}.`);\n  return reverse($x, axis);\n}\n\n/**\n * Reverses a `tf.Tensor4D` along a specified axis.\n *\n * @param x The input tensor.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n */\nfunction reverse4d_(x: Tensor4D|TensorLike, axis?: number|number[]): Tensor4D {\n  const $x = convertToTensor(x, 'x', 'reverse');\n  util.assert(\n      $x.rank === 4,\n      () => `Error in reverse4D: x must be rank 4 but got rank ${$x.rank}.`);\n  return reverse($x, axis);\n}\n\n/**\n * Reverses a `tf.Tensor` along a specified axis.\n *\n * Also available are stricter rank-specific methods that assert that `x` is\n * of the given rank:\n *   - `tf.reverse1d`\n *   - `tf.reverse2d`\n *   - `tf.reverse3d`\n *   - `tf.reverse4d`\n *\n * Except `tf.reverse1d` (which does not have axis param), all methods have\n * same signature as this method.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.reverse().print();\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.reverse(axis).print();\n * ```\n * @param x The input tensor to be reversed.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n */\n/** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */\nfunction reverse_<T extends Tensor>(\n    x: T|TensorLike, axis?: number|number[]): T {\n  const $x = convertToTensor(x, 'x', 'reverse');\n\n  if ($x.rank === 0) {\n    return $x.clone();\n  }\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const grad = (dy: T) => {\n    return {$x: () => dy.reverse(axes)};\n  };\n  const res =\n      ENGINE.runKernel(backend => backend.reverse($x, axes), {$x}, grad);\n  return res.reshapeAs($x);\n}\n\nexport const reverse = op({reverse_});\nexport const reverse1d = op({reverse1d_});\nexport const reverse2d = op({reverse2d_});\nexport const reverse3d = op({reverse3d_});\nexport const reverse4d = op({reverse4d_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor, Tensor3D, Tensor4D, Tensor5D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {batchToSpaceND, spaceToBatchND} from './array_ops';\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\n\n/**\n * Computes the 2D max pooling of an image.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in dilated pooling. Defaults to `[1, 1]`. If `dilations` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n */\nfunction maxPoolImpl_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filterSize: [number, number]|number,\n    strides: [number, number]|number, dilations: [number, number]|number,\n    pad: 'valid'|'same'|number, dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'maxPool');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);\n  }\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in maxPool: input must be rank 4 but got rank ${x4D.rank}.`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in maxPool: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n  const convInfo = conv_util.computePool2DInfo(\n      x4D.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n\n  const grad = (dy: Tensor4D, saved: Tensor[]) => {\n    const [x4D, y] = saved;\n    return {\n      x: () => maxPoolBackprop(\n          dy, x4D as Tensor4D, y as Tensor4D, filterSize, strides, dilations,\n          pad)\n    };\n  };\n\n  const res = ENGINE.runKernel((backend, save) => {\n    const y = backend.maxPool(x4D, convInfo);\n    save([x4D, y]);\n    return y;\n  }, {x: x4D}, grad);\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\n/**\n * Computes the 2D max pooling of an image.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n */\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction maxPool_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filterSize: [number, number]|number,\n    strides: [number, number]|number, pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  return maxPoolImpl_(x, filterSize, strides, 1, pad, dimRoundingMode);\n}\n\n/**\n * Computes the 2D average pooling of an image.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in dilated pooling. Defaults to `[1, 1]`. If `dilations` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param pad The type of padding algorithm:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *         https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n */\nfunction avgPoolImpl_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filterSize: [number, number]|number,\n    strides: [number, number]|number, dilations: [number, number]|number,\n    pad: 'valid'|'same'|number, dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'avgPool', 'float32');\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in avgPool: x must be rank 4 but got rank ${x4D.rank}.`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in avgPool: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  const convInfo = conv_util.computePool2DInfo(\n      x4D.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n\n  const grad = (dy: Tensor4D) => {\n    return {\n      x: () => avgPoolBackprop(dy, x4D, filterSize, strides, dilations, pad)\n    };\n  };\n  let res = ENGINE.runKernel(\n      backend => backend.avgPool(x4D, convInfo), {x: x4D}, grad);\n  res = res.cast($x.dtype);\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\n/**\n * Computes the 2D average pooling of an image.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *         https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n */\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction avgPool_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filterSize: [number, number]|number,\n    strides: [number, number]|number, pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  return avgPoolImpl_(x, filterSize, strides, 1, pad, dimRoundingMode);\n}\n\n/**\n * Performs an N-D pooling operation\n *\n * @param input The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param windowShape The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param poolingType The type of pooling, either 'max' or 'avg'.\n * @param pad The type of padding algorithm:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *         https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in dilated pooling. Defaults to `[1, 1]`. If `dilationRate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n */\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction pool_<T extends Tensor3D|Tensor4D>(\n    input: T|TensorLike, windowShape: [number, number]|number,\n    poolingType: 'avg'|'max', pad: 'valid'|'same'|number,\n    dilations?: [number, number]|number, strides?: [number, number]|number) {\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n  if (strides == null) {\n    strides = 1;\n  }\n  if (pad === 0) {\n    pad = 'valid';\n  }\n  const $x = convertToTensor(input, 'x', 'maxPool');\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);\n  }\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in pool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n  const convInfo = conv_util.computePool2DInfo(\n      x4D.shape, windowShape, strides, dilations, pad);\n  const dilation: [number, number] =\n      [convInfo.dilationHeight, convInfo.dilationWidth];\n\n  // The following implementation does batchToSpace(pool(spaceToBatch(x)))\n  // whenever dilation > 1 since the TF kernels do not support dilation > 1.\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L1037\n\n  let basePadding: number[][];\n  if (pad === 'same') {\n    basePadding = withSpaceToBatchBasePaddings(\n        [convInfo.filterHeight, convInfo.filterWidth], dilation);\n  } else {\n    basePadding = [[0, 0], [0, 0]];\n  }\n  const isDilationOne = dilation[0] === 1 && dilation[1] === 1;\n  const [adjustedPadding, adjustedCrops] = requiredSpaceToBatchPaddings(\n      [convInfo.inHeight, convInfo.inWidth], dilation, basePadding);\n  const convertedPad = isDilationOne ? pad : 'valid';\n  const convertedX =\n      isDilationOne ? x4D : spaceToBatchND(x4D, dilation, adjustedPadding);\n  const forwardOp = poolingType === 'avg' ?\n      () => avgPoolImpl_(\n          convertedX, windowShape, strides, 1 /* dilation */, convertedPad) :\n      () => maxPoolImpl_(\n          convertedX, windowShape, strides, 1 /* dilation */, convertedPad);\n  const y = forwardOp();\n  const res = isDilationOne ? y : batchToSpaceND(y, dilation, adjustedCrops);\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\n/**\n * Computes the backprop of a 2D max pool.\n *\n * @param dy The dy error, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param input The original input image, of rank 4, of shape\n *     [batchSize, height, width, channels].\n * @param output The original output image, of rank 4, of shape\n *     [batchSize, outHeight, outWidth, channels].\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The\n *     rounding mode used when computing output dimensions if pad is a\n *     number. If none is provided, it will not round and error if the output\n *     is of fractional size.\n */\nfunction maxPoolBackprop(\n    dy: Tensor4D|TensorLike, input: Tensor4D|TensorLike,\n    output: Tensor4D|TensorLike, filterSize: [number, number]|number,\n    strides: [number, number]|number, dilations: [number, number]|number,\n    pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): Tensor4D {\n  const $dy = convertToTensor(dy, 'dy', 'maxPoolBackprop');\n  const $input = convertToTensor(input, 'input', 'maxPoolBackprop');\n  const $output = convertToTensor(output, 'output', 'maxPoolBackprop');\n  util.assert(\n      $input.rank === $dy.rank,\n      () => `Rank of input (${$input.rank}) does not match rank of dy ` +\n          `(${$dy.rank})`);\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () =>\n          'Error in maxPoolBackProp: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  util.assert(\n      $dy.rank === 4,\n      () => `Error in maxPoolBackprop: dy must be rank 4 but got rank ` +\n          `${$dy.rank}.`);\n  util.assert(\n      $input.rank === 4,\n      () => `Error in maxPoolBackprop: input must be rank 4 but got rank ` +\n          `${$input.rank}.`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in maxPoolBackprop: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  const convInfo = conv_util.computePool2DInfo(\n      $input.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  const res = ENGINE.runKernel(\n      backend => backend.maxPoolBackprop($dy, $input, $output, convInfo),\n      {$dy, $input});\n  return res;\n}\n\n/**\n * Computes the backprop of an 2D avg pool.\n *\n * @param dy The dy error, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param input The input image, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n */\nfunction avgPoolBackprop<T extends Tensor3D|Tensor4D>(\n    dy: T|TensorLike, input: T|TensorLike, filterSize: [number, number]|number,\n    strides: [number, number]|number, dilations: [number, number]|number,\n    pad: 'valid'|'same'|number): T {\n  const $dy = convertToTensor(dy, 'dy', 'avgPoolBackprop');\n  const $input = convertToTensor(input, 'input', 'avgPoolBackprop');\n  util.assert(\n      $input.rank === $dy.rank,\n      () => `Rank of input (${$input.rank}) does not match rank of dy (${\n          $dy.rank})`);\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () =>\n          'Error in avgPoolBackprop: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  let input4D = $input as Tensor4D;\n  let dy4D = $dy as Tensor4D;\n  let reshapedTo4D = false;\n  if ($input.rank === 3) {\n    reshapedTo4D = true;\n    input4D = $input.as4D(1, $input.shape[0], $input.shape[1], $input.shape[2]);\n    dy4D = $dy.as4D(1, $dy.shape[0], $dy.shape[1], $dy.shape[2]);\n  }\n\n  util.assert(\n      dy4D.rank === 4,\n      () => `Error in avgPoolBackprop: dy must be rank 4 but got rank ` +\n          `${dy4D.rank}.`);\n  util.assert(\n      input4D.rank === 4,\n      () => `Error in avgPoolBackprop: input must be rank 4 but got rank ` +\n          `${input4D.rank}.`);\n\n  const convInfo = conv_util.computePool2DInfo(\n      input4D.shape, filterSize, strides, dilations, pad);\n  const res = ENGINE.runKernel(\n      backend => backend.avgPoolBackprop(dy4D, input4D, convInfo),\n      {dy4D, input4D});\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\n// Helper function to compute crops and paddings for pool with dilation > 1.\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/array_ops.py#L2184\nfunction requiredSpaceToBatchPaddings(\n    inputShape: [number, number], blockShape: [number, number],\n    basePadding: number[][]) {\n  const padStart = basePadding.map(b => b[0]);\n  const origPadEnd = basePadding.map(b => b[1]);\n  const fullInputShape = inputShape.concat(padStart, origPadEnd);\n  const padEndExtra = blockShape.map((b, i) => (b - fullInputShape[i] % b) % b);\n  const padEnd = origPadEnd.map((s, i) => s + padEndExtra[i]);\n  const paddings = blockShape.map((_, i) => [padStart[i], padEnd[i]]);\n  const crops = blockShape.map((_, i) => [0, padEndExtra[i]]);\n  return [paddings, crops];\n}\n\n// Helper function to compute base paddings for pool with dilation > 1.\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L524\nfunction withSpaceToBatchBasePaddings(\n    filterShape: [number, number], dilation: [number, number]) {\n  // Spatial dimensions of the filters and the upsampled filters in which we\n  // introduce (rate - 1) zeros between consecutive filter values.\n  const dilatedFilterShape = filterShape.map((s, i) => {\n    return s + (s - 1) * (dilation[i] - 1);\n  });\n  const padExtraShape = dilatedFilterShape.map(s => s - 1);\n\n  // When padding is odd, we pad more at end, following the same\n  // convention as conv2d.\n  const padExtraStart = padExtraShape.map(s => Math.floor(s / 2));\n  const padExtraEnd = padExtraShape.map((s, i) => s - padExtraStart[i]);\n  return padExtraShape.map((_, i) => {\n    return [padExtraStart[i], padExtraEnd[i]];\n  });\n}\n\n/**\n * Computes the 3D average pooling.\n *\n * ```js\n * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);\n * const result = tf.avgPool3d(x, 2, 1, 'valid');\n * result.print();\n * ```\n *\n * @param x The input tensor, of rank 5 or rank 4 of shape\n *     `[batch, depth, height, width, inChannels]`.\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     If `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideDepth == strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n * @param dilations The dilation rates:\n *     `[dilationDepth, dilationHeight, dilationWidth]`\n *     in which we sample input values across the depth, height and width\n *     dimensions in dilated pooling.\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\n *     then `dilationDepth == dilationHeight == dilationWidth`.\n *     If it is greater than 1, then all values of `strides` must be 1.\n */\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction avgPool3d_<T extends Tensor4D|Tensor5D>(\n    x: T|TensorLike,\n    filterSize: [number, number, number]|number,\n    strides: [number, number, number]|number,\n    pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil',\n    dataFormat: 'NDHWC'|'NCDHW' = 'NDHWC',\n    dilations?: [number, number, number]|number,\n    ): T {\n  const $x = convertToTensor(x, 'x', 'avgPool3d', 'float32');\n\n  let x5D = $x as Tensor5D;\n  let reshapedTo5D = false;\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = $x.as5D(1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]);\n  }\n\n  if (dilations == null) {\n    dilations = [1, 1, 1];\n  }\n  util.assert(\n      x5D.rank === 5,\n      () => `Error in avgPool3d: x must be rank 5 but got rank ${x5D.rank}.`);\n  util.assert(\n      dataFormat === 'NDHWC',\n      () => `Error in avgPool3d: Only NDHWC is currently supported, ` +\n          `but got dataFormat of ${dataFormat}`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool3d: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in avgPool3d: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  const convInfo = conv_util.computePool3DInfo(\n      x5D.shape, filterSize, strides, dilations, pad, dimRoundingMode,\n      dataFormat);\n\n  const grad = (dy: Tensor5D) => {\n    return {\n      x: () => avgPool3dBackprop(\n          dy, x5D, filterSize, strides, dilations, pad, dimRoundingMode)\n    };\n  };\n\n  let res = ENGINE.runKernel(\n      backend => backend.avgPool3d(x5D, convInfo), {x: x5D}, grad);\n  res = res.cast(x5D.dtype);\n  if (reshapedTo5D) {\n    return res.as4D(res.shape[1], res.shape[2], res.shape[3], res.shape[4]) as\n        T;\n  }\n\n  return res as T;\n}\n\n/**\n * Computes the backprop of a 3d avg pool.\n *\n * @param dy The dy error, of rank 5 of shape\n *     [batchSize, depth, height, width, channels].\n * assumed.\n * @param input The original input image, of rank 5 or rank4 of shape\n *     [batchSize, depth, height, width, channels].\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dilations The dilation rates:\n *     `[dilationDepth, dilationHeight, dilationWidth]`\n *     in which we sample input values across the depth, height and width\n *     dimensions in dilated pooling.\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\n *     then `dilationDepth == dilationHeight == dilationWidth`.\n *     If it is greater than 1, then all values of `strides` must be 1.\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The\n *     rounding mode used when computing output dimensions if pad is a\n *     number. If none is provided, it will not round and error if the output\n *     is of fractional size.\n */\nfunction avgPool3dBackprop<T extends Tensor4D|Tensor5D>(\n    dy: T|TensorLike, input: T|TensorLike,\n    filterSize: [number, number, number]|number,\n    strides: [number, number, number]|number,\n    dilations: [number, number, number]|number, pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $dy = convertToTensor(dy, 'dy', 'avgPool3dBackprop');\n  const $input = convertToTensor(input, 'input', 'avgPool3dBackprop');\n\n  let dy5D = $dy as Tensor5D;\n  let input5D = $input as Tensor5D;\n  let reshapedTo5D = false;\n  if ($input.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = $dy.as5D(1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]);\n    input5D = $input.as5D(\n        1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]);\n  }\n\n  util.assert(\n      dy5D.rank === 5,\n      () => `Error in avgPool3dBackprop: dy must be rank 5 but got rank ` +\n          `${dy5D.rank}.`);\n  util.assert(\n      input5D.rank === 5,\n      () => `Error in avgPool3dBackprop: input must be rank 5 but got rank ` +\n          `${input5D.rank}.`);\n  if (dilations == null) {\n    dilations = [1, 1, 1];\n  }\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool3dBackprop: Either strides or dilations ' +\n          `must be 1. Got strides ${strides} and dilations '${dilations}'`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in maxPool3dBackprop: pad must be an integer when ` +\n            `using, dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  const convInfo = conv_util.computePool3DInfo(\n      input5D.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  const res = ENGINE.runKernel(\n      backend => backend.avgPool3dBackprop(dy5D, input5D, convInfo),\n      {dy5D, input5D});\n  if (reshapedTo5D) {\n    return res.as4D(res.shape[1], res.shape[2], res.shape[3], res.shape[4]) as\n        T;\n  }\n\n  return res as T;\n}\n\n/**\n * Computes the 3D max pooling.\n *\n * ```js\n * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);\n * const result = tf.maxPool3d(x, 2, 1, 'valid');\n * result.print();\n * ```\n *\n * @param x The input tensor, of rank 5 or rank 4 of shape\n *     `[batch, depth, height, width, inChannels]`.\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     If `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideDepth == strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n * @param dilations The dilation rates:\n *     `[dilationDepth, dilationHeight, dilationWidth]`\n *     in which we sample input values across the depth, height and width\n *     dimensions in dilated pooling.\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\n *     then `dilationDepth == dilationHeight == dilationWidth`.\n *     If it is greater than 1, then all values of `strides` must be 1.\n */\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction maxPool3d_<T extends Tensor4D|Tensor5D>(\n    x: T|TensorLike, filterSize: [number, number, number]|number,\n    strides: [number, number, number]|number, pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil',\n    dataFormat: 'NDHWC'|'NCDHW' = 'NDHWC',\n    dilations?: [number, number, number]|number): T {\n  const $x = convertToTensor(x, 'x', 'maxPool3d');\n\n  let x5D = $x as Tensor5D;\n  let reshapedTo5D = false;\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = $x.as5D(1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]);\n  }\n\n  if (dilations == null) {\n    dilations = [1, 1, 1];\n  }\n  util.assert(\n      x5D.rank === 5,\n      () => `Error in maxPool3d: x must be rank 5 but got rank ${x5D.rank}.`);\n  util.assert(\n      dataFormat === 'NDHWC',\n      () => `Error in maxPool3d: Only NDHWC is currently supported, ` +\n          `but got dataFormat of ${dataFormat}`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool3d: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in maxPool3d: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  const convInfo = conv_util.computePool3DInfo(\n      x5D.shape, filterSize, strides, dilations, pad, dimRoundingMode,\n      dataFormat);\n\n  const grad = (dy: Tensor5D, saved: Tensor[]) => {\n    const [x5D, y] = saved;\n    return {\n      x: () => maxPool3dBackprop(\n          dy, x5D as Tensor5D, y as Tensor5D, filterSize, strides, dilations,\n          pad, dimRoundingMode)\n    };\n  };\n\n  const res = ENGINE.runKernel((backend, save) => {\n    const y = backend.maxPool3d(x5D, convInfo);\n    save([x5D, y]);\n    return y;\n  }, {x: x5D}, grad);\n  if (reshapedTo5D) {\n    return res.as4D(res.shape[1], res.shape[2], res.shape[3], res.shape[4]) as\n        T;\n  }\n\n  return res as T;\n}\n\n/**\n * Computes the backprop of a 3d max pool.\n *\n * @param dy The dy error, of rank 5 of shape\n *     [batchSize, depth, height, width, channels].\n * assumed.\n * @param input The original input image, of rank 5 or rank 4 of shape\n *     [batchSize, depth, height, width, channels].\n * @param output The original output image, of rank 5 of shape\n *     [batchSize, outDepth, outHeight, outWidth, channels].\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dilations The dilation rates:\n *     `[dilationDepth, dilationHeight, dilationWidth]`\n *     in which we sample input values across the depth, height and width\n *     dimensions in dilated pooling.\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\n *     then `dilationDepth == dilationHeight == dilationWidth`.\n *     If it is greater than 1, then all values of `strides` must be 1.\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The\n *     rounding mode used when computing output dimensions if pad is a\n *     number. If none is provided, it will not round and error if the output\n *     is of fractional size.\n */\nfunction maxPool3dBackprop<T extends Tensor4D|Tensor5D>(\n    dy: T|TensorLike, input: T|TensorLike, output: T|TensorLike,\n    filterSize: [number, number, number]|number,\n    strides: [number, number, number]|number,\n    dilations: [number, number, number]|number, pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $dy = convertToTensor(dy, 'dy', 'maxPool3dBackprop');\n  const $input = convertToTensor(input, 'input', 'maxPool3dBackprop');\n  const $output = convertToTensor(output, 'output', 'maxPool3dBackprop');\n\n  let dy5D = $dy as Tensor5D;\n  let input5D = $input as Tensor5D;\n  let output5D = $output as Tensor5D;\n  let reshapedTo5D = false;\n  if ($input.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = $dy.as5D(1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]);\n    input5D = $input.as5D(\n        1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]);\n    output5D = $output.as5D(\n        1, $output.shape[0], $output.shape[1], $output.shape[2],\n        $output.shape[3]);\n  }\n\n  util.assert(\n      dy5D.rank === 5,\n      () => `Error in maxPool3dBackprop: dy must be rank 5 but got rank ` +\n          `${dy5D.rank}.`);\n  util.assert(\n      input5D.rank === 5,\n      () => `Error in maxPool3dBackprop: input must be rank 5 but got rank ` +\n          `${input5D.rank}.`);\n  util.assert(\n      output5D.rank === 5,\n      () => `Error in maxPool3dBackprop: output must be rank 5 but got rank ` +\n          `${output5D.rank}.`);\n  if (dilations == null) {\n    dilations = [1, 1, 1];\n  }\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool3dBackprop: Either strides or dilations ' +\n          `must be 1. Got strides ${strides} and dilations '${dilations}'`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in maxPool3dBackprop: pad must be an integer when ` +\n            `using, dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  const convInfo = conv_util.computePool3DInfo(\n      input5D.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  const res = ENGINE.runKernel(\n      backend => backend.maxPool3dBackprop(dy5D, input5D, output5D, convInfo),\n      {dy5D, input5D});\n  \n  if (reshapedTo5D) {\n    return res.as4D(res.shape[1], res.shape[2], res.shape[3], res.shape[4]) as\n        T;\n  }\n\n  return res as T;\n}\n\nexport const maxPool = op({maxPool_});\nexport const avgPool = op({avgPool_});\nexport const pool = op({pool_});\nexport const maxPool3d = op({maxPool3d_});\nexport const avgPool3d = op({avgPool3d_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank, TensorLike} from '../types';\nimport * as util from '../util';\nimport {op} from './operation';\nimport * as slice_util from './slice_util';\n\n/**\n * Extracts a 1D slice from 1D array starting at coordinates `begin` and is\n * of length `size`. See `slice` for details.\n */\nfunction slice1d_(\n    x: Tensor1D|TensorLike, begin: number, size: number): Tensor1D {\n  const $x = convertToTensor(x, 'x', 'slice1d');\n  util.assert(\n      $x.rank === 1,\n      () =>\n          `slice1d expects a rank-1 tensor, but got a rank-${$x.rank} tensor`);\n  return slice($x, [begin], [size]);\n}\n\n/**\n * Extracts a 2D slice from a 2D array starting at coordinates `begin` and\n * is of size `size`. See `slice` for details.\n */\nfunction slice2d_(\n    x: Tensor2D|TensorLike, begin: [number, number],\n    size: [number, number]): Tensor2D {\n  const $x = convertToTensor(x, 'x', 'slice2d');\n  util.assert(\n      $x.rank === 2,\n      () =>\n          `slice2d expects a rank-2 tensor, but got a rank-${$x.rank} tensor`);\n  return slice($x, begin, size);\n}\n\n/**\n * Extracts a 3D slice from a 3D array starting at coordinates `begin` and\n * is of size `size`. See `slice` for details.\n */\nfunction slice3d_(\n    x: Tensor3D|TensorLike, begin: [number, number, number],\n    size: [number, number, number]): Tensor3D {\n  const $x = convertToTensor(x, 'x', 'slice3d');\n  util.assert(\n      $x.rank === 3,\n      () =>\n          `slice3d expects a rank-3 tensor, but got a rank-${$x.rank} tensor`);\n  return slice($x, begin, size);\n}\n\n/**\n * Extracts a 4D slice from a 4D array starting at coordinates `begin` and\n * is of size `size`. See `slice` for details.\n */\nfunction slice4d_(\n    x: Tensor4D|TensorLike, begin: [number, number, number, number],\n    size: [number, number, number, number]): Tensor4D {\n  const $x = convertToTensor(x, 'x', 'slice4d');\n  util.assert(\n      $x.rank === 4,\n      () =>\n          `slice4d expects a rank-4 tensor, but got a rank-${$x.rank} tensor`);\n  return slice($x, begin, size);\n}\n\n/**\n * Extracts a slice from a `tf.Tensor` starting at coordinates `begin`\n * and is of size `size`.\n *\n * Also available are stricter rank-specific methods with the same signature\n * as this method that assert that `x` is of the given rank:\n *   - `tf.slice1d`\n *   - `tf.slice2d`\n *   - `tf.slice3d`\n *   - `tf.slice4d`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.slice([1], [2]).print();\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * x.slice([1, 0], [1, 2]).print();\n * ```\n * @param x The input `tf.Tensor` to slice from.\n * @param begin The coordinates to start the slice from. The length can be\n *     less than the rank of x - the rest of the axes will have implicit 0 as\n *     start. Can also be a single number, in which case it specifies the\n *     first axis.\n * @param size The size of the slice. The length can be less than the rank of\n *     x - the rest of the axes will have implicit -1. A value of -1 requests\n *     the rest of the dimensions in the axis. Can also be a single number,\n *     in which case it specifies the size of the first axis.\n */\n/** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */\nfunction slice_<R extends Rank, T extends Tensor<R>>(\n    x: T|TensorLike, begin: number|number[], size?: number|number[]): T {\n  const $x = convertToTensor(x, 'x', 'slice');\n\n  if ($x.rank === 0) {\n    throw new Error('Slicing scalar is not possible');\n  }\n  // The following logic allows for more ergonomic calls.\n  let begin_: number[];\n  if (typeof begin === 'number') {\n    begin_ = [begin, ...new Array($x.rank - 1).fill(0)];\n  } else if (begin.length < $x.rank) {\n    begin_ = begin.concat(new Array($x.rank - begin.length).fill(0));\n  } else {\n    begin_ = begin.slice();\n  }\n  begin_.forEach(d => {\n    util.assert(\n        d !== -1, () => 'slice() does not support negative begin indexing.');\n  });\n  let size_: number[];\n  if (size == null) {\n    size_ = new Array($x.rank).fill(-1);\n  } else if (typeof size === 'number') {\n    size_ = [size, ...new Array($x.rank - 1).fill(-1)];\n  } else if (size.length < $x.rank) {\n    size_ = size.concat(new Array($x.rank - size.length).fill(-1));\n  } else {\n    size_ = size;\n  }\n  size_ = size_.map((d, i) => {\n    if (d >= 0) {\n      return d;\n    } else {\n      util.assert(\n          d === -1,\n          () => `Negative size values should be exactly -1 but got ` +\n              `${d} for the slice() size at index ${i}.`);\n      return $x.shape[i] - begin_[i];\n    }\n  });\n  slice_util.assertParamsValid($x, begin_, size_);\n  const inputShape = $x.shape;\n  const grad = (dy: T) => {\n    // Create an Nx2 padding where the first column represents how many\n    // zeros are prepended (at start) for each dimension, and the second\n    // column indicates how many zeros are appended (at end).\n\n    // The number of zeros to append is the shape of the input\n    // elementwise-subtracted by both the begin vector and sizes vector.\n    const paddings: Array<[number, number]> = [];\n    for (let i = 0; i < dy.rank; i++) {\n      paddings.push([begin_[i], inputShape[i] - begin_[i] - size_[i]]);\n    }\n    return {$x: () => dy.pad(paddings)};\n  };\n  return ENGINE.runKernel(\n      backend => backend.slice($x, begin_, size_), {$x}, grad);\n}\n\nexport const slice = op({slice_});\nexport const slice1d = op({slice1d_});\nexport const slice2d = op({slice2d_});\nexport const slice3d = op({slice3d_});\nexport const slice4d = op({slice4d_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {customGrad} from '../gradients';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport * as axis_util from './axis_util';\nimport {op} from './operation';\nimport {ones, scalar, zerosLike} from './tensor_ops';\n\n/**\n * Computes the log(sum(exp(elements across the reduction dimensions)).\n *\n * Reduces the input along the dimensions given in `axis`. Unless `keepDims`\n * is true, the rank of the array is reduced by 1 for each entry in `axis`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axis` has no entries, all dimensions are reduced, and an array with a\n * single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.logSumExp().print();  // or tf.logSumExp(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.logSumExp(axis).print();  // or tf.logSumExp(a, axis)\n * ```\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. If null (the default),\n *     reduces all dimensions.\n * @param keepDims If true, retains reduced dimensions with length\n *     of 1. Defaults to false.\n */\n/** @doc {heading: 'Operations', subheading: 'Reduction'} */\nfunction logSumExp_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  const $x = convertToTensor(x, 'x', 'logSumExp');\n\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const xMax = $x.max(axes, true /* keepDims */);\n  const a = $x.sub(xMax);\n  const b = a.exp();\n  const c = b.sum(axes);\n  const d = c.log();\n  const res = xMax.reshape(d.shape).add(d);\n\n  if (keepDims) {\n    const newShape = axis_util.expandShapeToKeepDim(res.shape, axes);\n    return res.reshape(newShape) as T;\n  }\n  return res as T;\n}\n\n/**\n * Computes the sum of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If axes has no entries, all dimensions are reduced, and a\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.sum().print();  // or tf.sum(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.sum(axis).print();  // or tf.sum(x, axis)\n * ```\n *\n * @param x The input tensor to compute the sum over. If the dtype is `bool`\n *   it will be converted to `int32` and the output dtype will be `int32`.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n */\n/** @doc {heading: 'Operations', subheading: 'Reduction'} */\nfunction sum_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  let $x = convertToTensor(x, 'x', 'sum');\n\n  if ($x.dtype === 'bool') {\n    $x = $x.toInt();\n  }\n  const axes = util.parseAxisParam(axis, $x.shape);\n\n  // Use a custom gradient to bypass 2 gradient backprops since sum is used\n  // extremely often.\n  const customOp = customGrad((x: Tensor) => {\n    const permutation = axis_util.getAxesPermutation(axes, x.rank);\n    let reductionAxes = axes;\n    let permutedX = x;\n    if (permutation != null) {\n      permutedX = x.transpose(permutation);\n      reductionAxes = axis_util.getInnerMostAxes(reductionAxes.length, x.rank);\n    }\n    let value = ENGINE.runKernel(\n        backend => backend.sum(permutedX, reductionAxes), {permutedX});\n    if (keepDims) {\n      const newShape = axis_util.expandShapeToKeepDim(value.shape, axes);\n      value = value.reshape(newShape);\n    }\n\n    const gradFunc = (dy: Tensor) => {\n      const expandedDyShape = x.shape.slice();\n      axes.forEach(axis => {\n        expandedDyShape[axis] = 1;\n      });\n      const expandedDy = dy.reshape(expandedDyShape);\n      const derX = expandedDy.mul(ones(x.shape, 'float32'));\n      return derX;\n    };\n    return {value, gradFunc};\n  });\n\n  return customOp($x) as T;\n}\n\n/**\n * Computes the product of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and a\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.prod().print();  // or tf.prod(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.prod(axis).print();  // or tf.prod(x, axis)\n * ```\n *\n * @param x The input tensor to compute the product over. If the dtype is `bool`\n *   it will be converted to `int32` and the output dtype will be `int32`.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n */\n/** @doc {heading: 'Operations', subheading: 'Reduction'} */\nfunction prod_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  let $x = convertToTensor(x, 'x', 'prod');\n\n  if ($x.dtype === 'bool') {\n    $x = $x.toInt();\n  }\n  const axes = util.parseAxisParam(axis, $x.shape);\n\n  const permutation = axis_util.getAxesPermutation(axes, $x.rank);\n  let reductionAxes = axes;\n  let permutedX = $x;\n  if (permutation != null) {\n    permutedX = $x.transpose(permutation);\n    reductionAxes = axis_util.getInnerMostAxes(reductionAxes.length, $x.rank);\n  }\n  let value = ENGINE.runKernel(\n      backend => backend.prod(permutedX, reductionAxes), {permutedX});\n  if (keepDims) {\n    const newShape = axis_util.expandShapeToKeepDim(value.shape, axes);\n    value = value.reshape(newShape);\n  }\n\n  return value as T;\n}\n/**\n * Computes the mean of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces `x` along the dimensions given in `axis`. Unless `keepDims` is\n * true, the rank of the `tf.Tensor` is reduced by 1 for each entry in `axis`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axis` has no entries, all dimensions are reduced, and a `tf.Tensor` with\n * a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.mean().print();  // or tf.mean(a)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.mean(axis).print();  // or tf.mean(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n */\n/** @doc {heading: 'Operations', subheading: 'Reduction'} */\nfunction mean_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  const $x = convertToTensor(x, 'x', 'mean');\n\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const shapes = axis_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  // Use a custom gradient to bypass 2 gradient backprops since mean is used\n  // extremely often.\n  const customOp = customGrad((x: Tensor) => {\n    const reduceSizeScalar = scalar(reduceSize);\n    // Cast if needed.\n    const xReduce =\n        reduceSizeScalar.dtype === x.dtype ? x : x.cast(reduceSizeScalar.dtype);\n    const res = xReduce.div(reduceSizeScalar);\n    const value = res.sum(axis, keepDims);\n\n    const gradFunc = (dy: Tensor) => {\n      const expandedDyShape = x.shape.slice();\n      axes.forEach(axis => {\n        expandedDyShape[axis] = 1;\n      });\n      const expandedDy = dy.reshape(expandedDyShape);\n      const derX = expandedDy.mul(ones(x.shape, 'float32')).div(reduceSize);\n      return derX;\n    };\n    return {value, gradFunc};\n  });\n\n  return customOp($x) as T;\n}\n\n/**\n * Gradient helper function for the min and max operations.\n */\nfunction gradForMinAndMax<T extends Tensor>(\n    dy: T, y: T, xOrig: Tensor, origAxes: number[], permutedAxes: number[]) {\n  if (y.rank < xOrig.rank) {\n    y = y.reshape(axis_util.expandShapeToKeepDim(y.shape, origAxes)) as T;\n  }\n  if (dy.rank < xOrig.rank) {\n    dy = dy.reshape(axis_util.expandShapeToKeepDim(dy.shape, origAxes)) as T;\n  }\n  return {\n    $x: () => {\n      const dx = dy.mul(xOrig.equal(y).cast(dy.dtype));\n      return permutedAxes == null ? dx : dx.transpose(permutedAxes);\n    }\n  };\n}\n\n/**\n * Computes the minimum value from the input.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the array is reduced by 1 for each entry in `axes`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axes` has no entries, all dimensions are reduced, and an array with a\n * single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.min().print();  // or tf.min(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.min(axis).print();  // or tf.min(x, axis)\n * ```\n *\n * @param x The input Tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n */\n/** @doc {heading: 'Operations', subheading: 'Reduction'} */\nfunction min_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  let $x = convertToTensor(x, 'x', 'min');\n  const xOrig = $x;\n\n  const origAxes = util.parseAxisParam(axis, $x.shape);\n  let axes = origAxes;\n  const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n  if (permutedAxes != null) {\n    $x = $x.transpose(permutedAxes);\n    axes = axis_util.getInnerMostAxes(axes.length, $x.rank);\n  }\n\n  const grad = (dy: T, saved: Tensor[]) =>\n      gradForMinAndMax(dy, saved[1], saved[0], origAxes, permutedAxes);\n  let res = ENGINE.runKernel((backend, save) => {\n    const y = backend.min($x, axes);\n    save([xOrig, y]);\n    return y as T;\n  }, {$x}, grad);\n  if (keepDims) {\n    const newShape = axis_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = res.reshape(newShape) as T;\n  }\n  return res;\n}\n\n/**\n * Computes the maximum of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.max().print();  // or tf.max(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.max(axis).print();  // or tf.max(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n */\n/** @doc {heading: 'Operations', subheading: 'Reduction'} */\nfunction max_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  let $x = convertToTensor(x, 'x', 'max');\n  const xOrig = $x;\n\n  const origAxes = util.parseAxisParam(axis, $x.shape);\n  let axes = origAxes;\n  const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n  if (permutedAxes != null) {\n    $x = $x.transpose(permutedAxes);\n    axes = axis_util.getInnerMostAxes(axes.length, $x.rank);\n  }\n\n  const grad = (dy: T, saved: Tensor[]) =>\n      gradForMinAndMax(dy, saved[1], saved[0], origAxes, permutedAxes);\n  let res = ENGINE.runKernel((backend, save) => {\n    const y = backend.max($x, axes);\n    save([xOrig, y]);\n    return y;\n  }, {$x}, grad);\n  if (keepDims) {\n    const newShape = axis_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = res.reshape(newShape) as T;\n  }\n  return res as T;\n}\n\n/**\n * Returns the indices of the minimum values along an `axis`.\n *\n * The result has the same shape as `input` with the dimension along `axis`\n * removed.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.argMin().print();  // or tf.argMin(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);\n *\n * const axis = 1;\n * x.argMin(axis).print();  // or tf.argMin(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).\n *\n */\n/** @doc {heading: 'Operations', subheading: 'Reduction'} */\nfunction argMin_<T extends Tensor>(x: Tensor|TensorLike, axis = 0): T {\n  let $x = convertToTensor(x, 'x', 'argMin');\n\n  if (axis == null) {\n    axis = 0;\n  }\n  let axes = util.parseAxisParam(axis, $x.shape);\n  const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n  if (permutedAxes != null) {\n    $x = $x.transpose(permutedAxes);\n    axes = axis_util.getInnerMostAxes(axes.length, $x.rank);\n  }\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => zerosLike($x)};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.argMin($x, axes[0]);\n    save([$x]);\n    return res;\n  }, {$x}, grad) as T;\n}\n\n/**\n * Returns the indices of the maximum values along an `axis`.\n *\n * The result has the same shape as `input` with the dimension along `axis`\n * removed.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.argMax().print();  // or tf.argMax(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);\n *\n * const axis = 1;\n * x.argMax(axis).print();  // or tf.argMax(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).\n */\n/** @doc {heading: 'Operations', subheading: 'Reduction'} */\nfunction argMax_<T extends Tensor>(x: Tensor|TensorLike, axis = 0): T {\n  let $x = convertToTensor(x, 'x', 'argMax');\n\n  if (axis == null) {\n    axis = 0;\n  }\n  let axes = util.parseAxisParam(axis, $x.shape);\n  const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n  if (permutedAxes != null) {\n    $x = $x.transpose(permutedAxes);\n    axes = axis_util.getInnerMostAxes(axes.length, $x.rank);\n  }\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => zerosLike($x)};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.argMax($x, axes[0]);\n    save([$x]);\n    return res;\n  }, {$x}, grad) as T;\n}\n\n/**\n * Computes the logical and of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 1, 1], 'bool');\n *\n * x.all().print();  // or tf.all(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');\n *\n * const axis = 1;\n * x.all(axis).print();  // or tf.all(x, axis)\n * ```\n *\n * @param x The input tensor. Must be of dtype bool.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n */\n/** @doc {heading: 'Operations', subheading: 'Reduction'} */\nfunction all_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  let $x = convertToTensor(x, 'x', 'all', 'bool');\n\n  const origAxes = util.parseAxisParam(axis, $x.shape);\n  let axes = origAxes;\n  const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n  if (permutedAxes != null) {\n    $x = $x.transpose(permutedAxes);\n    axes = axis_util.getInnerMostAxes(axes.length, $x.rank);\n  }\n  const res = ENGINE.runKernel(backend => backend.all($x, axes), {$x});\n  if (keepDims) {\n    const newShape = axis_util.expandShapeToKeepDim(res.shape, origAxes);\n    return res.reshape(newShape) as T;\n  }\n  return res as T;\n}\n\n/**\n * Computes the logical or of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 1, 1], 'bool');\n *\n * x.any().print();  // or tf.any(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');\n *\n * const axis = 1;\n * x.any(axis).print();  // or tf.any(x, axis)\n * ```\n *\n * @param x The input tensor. Must be of dtype bool.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n */\n/** @doc {heading: 'Operations', subheading: 'Reduction'} */\nfunction any_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  let $x = convertToTensor(x, 'x', 'any', 'bool');\n\n  const origAxes = util.parseAxisParam(axis, $x.shape);\n  let axes = origAxes;\n  const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n  if (permutedAxes != null) {\n    $x = $x.transpose(permutedAxes);\n    axes = axis_util.getInnerMostAxes(axes.length, $x.rank);\n  }\n  const res = ENGINE.runKernel(backend => backend.any($x, axes), {$x});\n  if (keepDims) {\n    const newShape = axis_util.expandShapeToKeepDim(res.shape, origAxes);\n    return res.reshape(newShape) as T;\n  }\n  return res as T;\n}\n\n/**\n * Calculates the mean and variance of `x`. The mean and variance are\n * calculated by aggregating the contents of `x` across `axes`. If `x` is\n * 1-D and `axes = [0]` this is just the mean and variance of a vector.\n *\n * @param x The input tensor.\n * @param axis The dimension(s) along with to compute mean and\n *     variance. By default it reduces all dimensions.\n * @param keepDims If true, the moments have the same dimensionality as the\n *     input.\n * @return An object with two keys: `mean` and `variance`.\n */\n/** @doc {heading: 'Operations', subheading: 'Normalization'} */\nfunction moments_(\n    x: Tensor|TensorLike, axis: number|number[] = null,\n    keepDims = false): {mean: Tensor, variance: Tensor} {\n  x = convertToTensor(x, 'x', 'moments');\n  const axes = util.parseAxisParam(axis, x.shape);\n  const mean = x.mean(axes, keepDims);\n  let keepDimsShape = mean.shape;\n  if (!keepDims) {\n    keepDimsShape = axis_util.expandShapeToKeepDim(mean.shape, axes);\n  }\n  const devSquared = x.toFloat().sub(mean.reshape(keepDimsShape)).square();\n  const variance = devSquared.mean(axes, keepDims);\n  return {mean, variance};\n}\n\nexport const all = op({all_});\n// tslint:disable-next-line:variable-name\nexport const any = op({any_});\nexport const argMax = op({argMax_});\nexport const argMin = op({argMin_});\nexport const logSumExp = op({logSumExp_});\nexport const max = op({max_});\nexport const mean = op({mean_});\nexport const min = op({min_});\nexport const moments = op({moments_});\nexport const sum = op({sum_});\nexport const prod = op({prod_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {maximum} from './binary_ops';\nimport {getReductionAxes} from './broadcast_util';\nimport {where} from './logical_ops';\nimport {op} from './operation';\nimport {SELU_SCALE, SELU_SCALEALPHA} from './selu_util';\nimport {scalar, zerosLike} from './tensor_ops';\n\n/**\n * Computes rectified linear element-wise: `max(x, 0)`.\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.relu().print();  // or tf.relu(x)\n * ```\n * @param x The input tensor. If the dtype is `bool`, the output dtype will be\n *     `int32'.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction relu_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'relu');\n\n  if ($x.dtype === 'bool') {\n    return $x.toInt();\n  }\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.mulStrict($x.step().toFloat() as T)};\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.relu($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes exponential linear element-wise: `x > 0 ? e ^ x - 1 : 0`.\n *\n * ```js\n * const x = tf.tensor1d([-1, 1, -3, 2]);\n *\n * x.elu().print();  // or tf.elu(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction elu_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'elu');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [y] = saved;\n    return {\n      $x: () => ENGINE.runKernel(backend => backend.eluDer(dy, y), {dy, y}) as T\n    };\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const y = backend.elu($x);\n    save([y]);\n    return y;\n  }, {$x}, grad);\n}\n\n/**\n * Computes scaled exponential linear element-wise.\n *\n * `x < 0 ? scale * alpha * (exp(x) - 1) : x`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.selu().print();  // or tf.selu(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction selu_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'selu');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {\n      $x: () => {\n        const mask = $x.greater(scalar(0));\n\n        const scaleAlpha = scalar(SELU_SCALEALPHA);\n        const scale = scalar(SELU_SCALE);\n\n        const greaterThanZeroDer = dy.mul(scale);\n        const lessEqualZeroDer = dy.mul(scaleAlpha).mul($x.toFloat().exp());\n\n        return where(mask, greaterThanZeroDer, lessEqualZeroDer) as T;\n      }\n    };\n  };\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.selu($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes leaky rectified linear element-wise.\n *\n * See\n * [http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf](\n *     http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf)\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.leakyRelu(0.1).print();  // or tf.leakyRelu(x, 0.1)\n * ```\n * @param x The input tensor.\n * @param alpha The scaling factor for negative values, defaults to 0.2.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction leakyRelu_<T extends Tensor>(x: T|TensorLike, alpha = 0.2): T {\n  const $x = convertToTensor(x, 'x', 'leakyRelu');\n  return maximum(scalar(alpha).mul($x), $x);\n}\n\n/**\n * Computes leaky rectified linear element-wise with parametric alphas.\n *\n * `x < 0 ? alpha * x : f(x) = x`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n * const alpha = tf.scalar(0.1);\n *\n * x.prelu(alpha).print();  // or tf.prelu(x, alpha)\n * ```\n * @param x The input tensor.\n * @param alpha Scaling factor for negative values.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction prelu_<T extends Tensor>(x: T|TensorLike, alpha: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'prelu');\n  const $alpha = convertToTensor(alpha, 'alpha', 'prelu');\n\n  const grad = (dy: Tensor, saved: Tensor[]) => {\n    const [$x, $alpha] = saved;\n    const mask = $x.greater(0);\n\n    return {\n      $x: () => where(mask, dy, dy.mul($alpha)) as T,\n      $alpha: () => {\n        let res = where(mask, zerosLike(dy), dy.mul($x));\n        const reduceAxes = getReductionAxes($alpha.shape, dy.shape);\n        if (reduceAxes.length > 0) {\n          res = res.sum(reduceAxes);\n        }\n        return res.reshape($alpha.shape) as T;\n      }\n    };\n  };\n\n  return ENGINE.runKernel((backend, save) => {\n    const res = backend.prelu($x, $alpha);\n    save([$x, $alpha]);\n    return res;\n  }, {$x, $alpha}, grad) as T;\n}\n\nexport const elu = op({elu_});\nexport const leakyRelu = op({leakyRelu_});\nexport const prelu = op({prelu_});\nexport const relu = op({relu_});\nexport const selu = op({selu_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport * as axis_util from './axis_util';\nimport {op} from './operation';\n\n/**\n * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.\n *\n * The returned `tf.Tensor`'s dimension `i` will correspond to the input\n * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,\n * where `n` is the rank of the input `tf.Tensor`. Hence by default, this\n * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\n *\n * a.transpose().print();  // or tf.transpose(a)\n * ```\n *\n * @param x The tensor to transpose.\n * @param perm The permutation of the dimensions of a.\n */\n/** @doc {heading: 'Operations', subheading: 'Matrices'} */\nfunction transpose_<T extends Tensor>(x: T|TensorLike, perm?: number[]): T {\n  const $x = convertToTensor(x, 'x', 'transpose');\n\n  if (perm == null) {\n    perm = $x.shape.map((s, i) => i).reverse();\n  }\n  util.assert(\n      $x.rank === perm.length,\n      () => `Error in transpose: rank of input ${$x.rank} ` +\n          `must match length of perm ${perm}.`);\n  perm.forEach(axis => {\n    util.assert(\n        axis >= 0 && axis < $x.rank,\n        () => `All entries in 'perm' must be between 0 and ${$x.rank - 1}` +\n            ` but got ${perm}`);\n  });\n\n  if ($x.rank <= 1) {\n    return $x.clone();\n  }\n\n  const der = (dy: T) => {\n    const undoPerm = axis_util.getUndoAxesPermutation(perm);\n    return {$x: () => dy.transpose(undoPerm)};\n  };\n  return ENGINE.runKernel(backend => backend.transpose($x, perm), {$x}, der);\n}\n\nexport const transpose = op({transpose_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor, Tensor3D, Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {op} from './operation';\n\n/**\n * Normalizes the activation of a local neighborhood across or within\n * channels.\n *\n * @param x The input tensor. The 4-D input tensor is treated as a 3-D array\n *     of 1D vectors (along the last dimension), and each vector is\n *     normalized independently.\n * @param depthRadius The number of adjacent channels in the 1D normalization\n *     window.\n * @param bias A constant bias term for the basis.\n * @param alpha A scale factor, usually positive.\n * @param beta An exponent.\n */\n/** @doc {heading: 'Operations', subheading: 'Normalization'} */\nfunction localResponseNormalization_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5): T {\n  const $x = convertToTensor(x, 'x', 'localResponseNormalization');\n  util.assert(\n      $x.rank === 4 || $x.rank === 3,\n      () => `Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${$x.rank}.`);\n  util.assert(\n      util.isInt(depthRadius),\n      () => `Error in localResponseNormalization: depthRadius must be an ` +\n          `integer but got depthRadius ${depthRadius}.`);\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);\n  }\n  const backward = (dy: Tensor4D, saved: Tensor[]) => {\n    const [x4D, y] = saved;\n    return {\n      x4D: () => ENGINE.runKernel(\n          backend => backend.LRNGrad(\n              dy, x4D as Tensor4D, y as Tensor4D, depthRadius, bias, alpha,\n              beta),\n          {})\n    };\n  };\n  const res = ENGINE.runKernel((backend, save) => {\n    const y = backend.localResponseNormalization4D(\n        x4D, depthRadius, bias, alpha, beta);\n    save([x4D, y]);\n    return y;\n  }, {x4D}, backward);\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  } else {\n    return res as T;\n  }\n}\n\nexport const localResponseNormalization = op({localResponseNormalization_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {parseAxisParam} from '../util';\n\nimport * as axis_util from './axis_util';\nimport {op} from './operation';\nimport {scalar} from './tensor_ops';\n\n/**\n * Computes the norm of scalar, vectors, and matrices.\n * This function can compute several different vector norms (the 1-norm, the\n * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)\n * and matrix norms (Frobenius, 1-norm, and inf-norm).\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.norm().print();  // or tf.norm(x)\n * ```\n *\n * @param x The input array.\n * @param ord Optional. Order of the norm. Supported norm types are\n * following:\n *\n *  | ord        | norm for matrices         | norm for vectors\n *  |------------|---------------------------|---------------------\n *  |'euclidean' |Frobenius norm             |2-norm\n *  |'fro'       |Frobenius norm\t           |\n *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))\n *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))\n *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))\n *  |2           |                           |sum(abs(x)^2)^1/2*\n *\n * @param axis Optional. If axis is null (the default), the input is\n * considered a vector and a single vector norm is computed over the entire\n * set of values in the Tensor, i.e. norm(x, ord) is equivalent\n * to norm(x.reshape([-1]), ord). If axis is a integer, the input\n * is considered a batch of vectors, and axis determines the axis in x\n * over which to compute vector norms. If axis is a 2-tuple of integer it is\n * considered a batch of matrices and axis determines the axes in NDArray\n * over which to compute a matrix norm.\n * @param keepDims Optional. If true, the norm have the same dimensionality\n * as the input.\n */\n/** @doc {heading: 'Operations', subheading: 'Matrices'} */\nfunction norm_(\n    x: Tensor|TensorLike, ord: number|'euclidean'|'fro' = 'euclidean',\n    axis: number|number[] = null, keepDims = false): Tensor {\n  x = convertToTensor(x, 'x', 'norm');\n\n  const norm = normImpl(x, ord, axis);\n  let keepDimsShape = norm.shape;\n  if (keepDims) {\n    const axes = parseAxisParam(axis, x.shape);\n    keepDimsShape = axis_util.expandShapeToKeepDim(norm.shape, axes);\n  }\n  return norm.reshape(keepDimsShape);\n}\n\nfunction normImpl(\n    x: Tensor, p: number|string, axis: number|number[] = null): Tensor {\n  if (x.rank === 0) {\n    return x.abs();\n  }\n\n  // consider vector when no axis is specified\n  if (x.rank !== 1 && axis === null) {\n    return normImpl(x.reshape([-1]), p, axis);\n  }\n\n  // vector\n  if (x.rank === 1 || typeof axis === 'number' ||\n      Array.isArray(axis) && axis.length === 1) {\n    if (p === 1) {\n      return x.abs().sum(axis);\n    }\n    if (p === Infinity) {\n      return x.abs().max(axis);\n    }\n    if (p === -Infinity) {\n      return x.abs().min(axis);\n    }\n    if (p === 'euclidean' || p === 2) {\n      // norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2\n      return x.abs().pow(scalar(2, 'int32')).sum(axis).sqrt();\n    }\n\n    throw new Error(`Error in norm: invalid ord value: ${p}`);\n  }\n\n  // matrix (assumption axis[0] < axis[1])\n  if (Array.isArray(axis) && axis.length === 2) {\n    if (p === 1) {\n      return x.abs().sum(axis[0]).max(axis[1] - 1);\n    }\n    if (p === Infinity) {\n      return x.abs().sum(axis[1]).max(axis[0]);\n    }\n    if (p === -Infinity) {\n      return x.abs().sum(axis[1]).min(axis[0]);\n    }\n    if (p === 'fro' || p === 'euclidean') {\n      // norm(x) = sqrt(sum(pow(x, 2)))\n      return x.square().sum(axis).sqrt();\n    }\n\n    throw new Error(`Error in norm: invalid ord value: ${p}`);\n  }\n\n  throw new Error(`Error in norm: invalid axis: ${axis}`);\n}\n\nexport const norm = op({norm_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor1D, Tensor2D} from '../tensor';\nimport {convertToTensor, convertToTensorArray} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * @docalias (data: Tensor2D, c: Tensor2D, h: Tensor2D): [Tensor2D, Tensor2D]\n */\nexport type LSTMCellFunc = {\n  (data: Tensor2D, c: Tensor2D, h: Tensor2D): [Tensor2D, Tensor2D];\n};\n\n/**\n * Computes the next states and outputs of a stack of LSTMCells.\n *\n * Each cell output is used as input to the next cell.\n *\n * Returns `[cellState, cellOutput]`.\n *\n * Derived from tf.contrib.rn.MultiRNNCell.\n *\n * @param lstmCells Array of LSTMCell functions.\n * @param data The input to the cell.\n * @param c Array of previous cell states.\n * @param h Array of previous cell outputs.\n */\n/** @doc {heading: 'Operations', subheading: 'RNN'} */\nfunction multiRNNCell_(\n    lstmCells: LSTMCellFunc[], data: Tensor2D|TensorLike,\n    c: Array<Tensor2D|TensorLike>,\n    h: Array<Tensor2D|TensorLike>): [Tensor2D[], Tensor2D[]] {\n  const $data = convertToTensor(data, 'data', 'multiRNNCell');\n  const $c = convertToTensorArray(c, 'c', 'multiRNNCell');\n  const $h = convertToTensorArray(h, 'h', 'multiRNNCell');\n\n  let input = $data;\n  const newStates = [];\n  for (let i = 0; i < lstmCells.length; i++) {\n    const output = lstmCells[i](input, $c[i], $h[i]);\n    newStates.push(output[0]);\n    newStates.push(output[1]);\n    input = output[1];\n  }\n  const newC: Tensor2D[] = [];\n  const newH: Tensor2D[] = [];\n  for (let i = 0; i < newStates.length; i += 2) {\n    newC.push(newStates[i]);\n    newH.push(newStates[i + 1]);\n  }\n  return [newC, newH];\n}\n\n/**\n * Computes the next state and output of a BasicLSTMCell.\n *\n * Returns `[newC, newH]`.\n *\n * Derived from tf.contrib.rnn.BasicLSTMCell.\n *\n * @param forgetBias Forget bias for the cell.\n * @param lstmKernel The weights for the cell.\n * @param lstmBias The bias for the cell.\n * @param data The input to the cell.\n * @param c Previous cell state.\n * @param h Previous cell output.\n */\n/** @doc {heading: 'Operations', subheading: 'RNN'} */\nfunction basicLSTMCell_(\n    forgetBias: Scalar|TensorLike, lstmKernel: Tensor2D|TensorLike,\n    lstmBias: Tensor1D|TensorLike, data: Tensor2D|TensorLike,\n    c: Tensor2D|TensorLike, h: Tensor2D|TensorLike): [Tensor2D, Tensor2D] {\n  const $forgetBias =\n      convertToTensor(forgetBias, 'forgetBias', 'basicLSTMCell');\n  const $lstmKernel =\n      convertToTensor(lstmKernel, 'lstmKernel', 'basicLSTMCell');\n  const $lstmBias = convertToTensor(lstmBias, 'lstmBias', 'basicLSTMCell');\n  const $data = convertToTensor(data, 'data', 'basicLSTMCell');\n  const $c = convertToTensor(c, 'c', 'basicLSTMCell');\n  const $h = convertToTensor(h, 'h', 'basicLSTMCell');\n\n  const combined = $data.concat($h, 1);\n  const weighted = combined.matMul($lstmKernel);\n  const res: Tensor2D = weighted.add($lstmBias);\n\n  // i = input_gate, j = new_input, f = forget_gate, o = output_gate\n  const batchSize = res.shape[0];\n  const sliceCols = res.shape[1] / 4;\n  const sliceSize: [number, number] = [batchSize, sliceCols];\n  const i = res.slice([0, 0], sliceSize);\n  const j = res.slice([0, sliceCols], sliceSize);\n  const f = res.slice([0, sliceCols * 2], sliceSize);\n  const o = res.slice([0, sliceCols * 3], sliceSize);\n\n  const newC = i.sigmoid().mulStrict(j.tanh()).addStrict(\n      $c.mulStrict($forgetBias.add(f).sigmoid() as Tensor2D));\n  const newH = newC.tanh().mulStrict(o.sigmoid());\n  return [newC, newH];\n}\n\nexport const basicLSTMCell = op({basicLSTMCell_});\nexport const multiRNNCell = op({multiRNNCell_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor} from '../tensor';\nimport {assertTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {pow} from './binary_ops';\nimport {op} from './operation';\nimport {scalar} from './tensor_ops';\n\n/**\n * Compute the moving average of a variable.\n *\n * Without zeroDebias, the moving average operation is defined by:\n *   `v += delta`\n * where\n *   `delta = (1 - decay) * (x - v)`\n *\n * With zeroDebias (default), the `delta` term is scaled to debias the\n * effect of the (assumed) zero-initialization of `v`.\n *   `delta /= (1 - decay ^ step)`\n *\n * For more details on the zero-debiasing algorithm, see:\n *   https://arxiv.org/abs/1412.6980\n *\n * Note that this function is completely stateless and does not keep track of\n * step count. The step count needs to be maintained by the caller and passed\n * in as `step`.\n *\n * @param v The current moving average value.\n * @param x New input value, must have the same shape and dtype as `v`.\n * @param decay The decay factor. Typical values are 0.95 and 0.99.\n * @param step Step count.\n * @param zeroDebias: Whether zeroDebias is to be performed (default: `true`).\n * @returns The new moving average value.\n */\n/** @doc {heading: 'Operations', subheading: 'Moving Average'} */\nfunction movingAverage_<T extends Tensor>(\n    v: T|TensorLike, x: T|TensorLike, decay: number|Scalar,\n    step?: number|Scalar, zeroDebias = true): T {\n  const $v = convertToTensor(v, 'v', 'movingAverage');\n  const $x = convertToTensor(x, 'x', 'movingAverage');\n  const $decay = convertToTensor(decay, 'decay', 'movingAverage');\n\n  assertTypesMatch($v, $x);\n  util.assert(\n      util.arraysEqual($v.shape, $x.shape), () => 'Shape mismatch in v and x');\n\n  const one = scalar(1);\n  const oneMinusDecay = one.sub($decay);\n\n  let update = $x.sub($v).mul(oneMinusDecay);\n  if (zeroDebias) {\n    util.assert(\n        step != null, () => 'When using zeroDebias: true, step is required.');\n    const $step = convertToTensor(step, 'step', 'movingAverage');\n    update = update.div(one.sub(pow($decay, $step)));\n  }\n  return $v.add(update);\n}\n\nexport const movingAverage = op({movingAverage_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\nimport {slice} from './slice';\nimport {computeOutShape, maskToAxes, startForAxis, stopForAxis} from './slice_util';\n\n/**\n * Extracts a strided slice of a tensor.\n *\n * Roughly speaking, this op extracts a slice of size (end-begin)/stride from\n * the given input tensor (x). Starting at the location specified by begin the\n * slice continues by adding stride to the index until all dimensions are not\n * less than end. Note that a stride can be negative, which causes a reverse\n * slice.\n *\n * ```js\n * const t = tf.tensor3d([1, 1, 1 ,2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6],\n *    [3, 2, 3]);\n * t.stridedSlice([1, 0, 0], [2, 1, 3], [1, 1, 1]).print()  // [[[3, 3, 3]]]\n * t.stridedSlice([1, 0, 0], [2, 2, 3], [1, 1, 1]).print()  // [[[3, 3, 3],\n *                                                     // [4, 4, 4]]]\n * t.stridedSlice([1, -1, 0], [2, -3, 3], [1, -1, 1]).print() // [[[4, 4, 4],\n *                                                     // [3, 3, 3]]]\n * ```\n *\n * @param x The tensor to stride slice.\n * @param begin The coordinates to start the slice from.\n * @param end: The coordinates to end the slice at.\n * @param strides: The size of the slice.\n * @param beginMask: If the ith bit of beginMask is set, begin[i] is ignored\n *      and the fullest possible range in that dimension is used instead.\n * @param endMask: If the ith bit of endMask is set, end[i] is ignored\n *      and the fullest possible range in that dimension is used instead.\n * @param shrinkAxisMask: a bitmask where bit i implies that\n * the ith specification should shrink the dimensionality. begin and end must\n * imply a slice of size 1 in the dimension.\n */\n/** @doc {heading: 'Operations', subheading: 'Slicing and Joining'} */\nfunction stridedSlice_(\n    x: Tensor|TensorLike, begin: number[], end: number[], strides?: number[],\n    beginMask = 0, endMask = 0, ellipsisMask = 0, newAxisMask = 0,\n    shrinkAxisMask = 0): Tensor {\n  if (strides == null) {\n    strides = new Array(begin.length);\n  }\n  if (ellipsisMask !== 0) {\n    throw new Error('ellipsis mask is not yet supported');\n  }\n  let $x = convertToTensor(x, 'x', 'stridedSlice');\n\n  // Expand the dims of x based on the newAxisMask.\n  const expandAxes = maskToAxes(newAxisMask);\n  const newShape = $x.shape.slice();\n  expandAxes.forEach(axis => {\n    begin[axis] = 0;\n    end[axis] = 1;\n    newShape.splice(axis, 0, 1);\n  });\n  $x = $x.reshape(newShape);\n\n  // Normalize the start, end and strides.\n  for (let axis = 0; axis < $x.rank; axis++) {\n    begin[axis] = startForAxis(beginMask, begin, strides, $x.shape, axis);\n    end[axis] = stopForAxis(endMask, end, strides, $x.shape, axis);\n    strides[axis] = strides[axis] || 1;\n  }\n\n  const shrinkAxes = maskToAxes(shrinkAxisMask);\n  // Adjust the ends based on the shrink mask.\n  shrinkAxes.forEach(axis => {\n    end[axis] = begin[axis] + 1;\n    strides[axis] = 1;\n  });\n\n  // Figure out the output shape.\n  const size = computeOutShape(begin, end, strides);\n  // Remove the axes based on shrinkMask.\n  const outShape = size.filter((_, axis) => shrinkAxes.indexOf(axis) === -1);\n\n  const nonStrided = strides.every(v => v === 1);\n  if (nonStrided) {\n    return slice($x, begin, size).reshape(outShape);\n  }\n  const res = ENGINE.runKernel(\n      backend => backend.stridedSlice($x, begin, end, strides), {$x});\n  return res.reshape(outShape);\n}\n\nexport const stridedSlice = op({stridedSlice_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {NumericTensor, Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Finds the values and indices of the `k` largest entries along the last\n * dimension.\n *\n * If the input is a vector (rank=1), finds the k largest entries in the vector\n * and outputs their values and indices as vectors. Thus values[j] is the j-th\n * largest entry in input, and its index is indices[j].\n * For higher rank inputs, computes the top k entries along the last dimension.\n *\n * If two elements are equal, the lower-index element appears first.\n *\n * ```js\n * const a = tf.tensor2d([[1, 5], [4, 3]]);\n * const {values, indices} = tf.topk(a);\n * values.print();\n * indices.print();\n * ```\n * @param x 1-D or higher `tf.Tensor` with last dimension being at least `k`.\n * @param k Number of top elements to look for along the last dimension.\n * @param sorted If true, the resulting `k` elements will be sorted by the\n *     values in descending order.\n */\n/** @doc {heading: 'Operations', subheading: 'Evaluation'} */\nfunction topk_<T extends Tensor>(\n    x: T|TensorLike, k = 1, sorted = true): {values: T, indices: T} {\n  const $x = convertToTensor(x, 'x', 'topk');\n  if ($x.rank === 0) {\n    throw new Error('topk() expects the input to be of rank 1 or higher');\n  }\n  const lastDim = $x.shape[$x.shape.length - 1];\n  if (k > lastDim) {\n    throw new Error(\n        `'k' passed to topk() must be <= the last dimension (${lastDim}) ` +\n        `but got ${k}`);\n  }\n\n  const [values, indices] =\n      ENGINE.runKernel(b => b.topk($x as NumericTensor, k, sorted), {$x});\n  return {values, indices} as {values: T, indices: T};\n}\n\nexport const topk = op({topk_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank, ShapeMap, TensorLike} from '../types';\nimport {op} from './operation';\nimport * as scatter_nd_util from './scatter_nd_util';\n\n/**\n * Creates a new tensor by applying sparse updates to individual\n * values or slices within a zero tensor of the given shape tensor according to\n * indices. This operator is the inverse of the `tf.gatherND` operator which\n * extracts values or slices from a given tensor.\n *\n * ```js\n * const indices = tf.tensor2d([4, 3, 1, 7], [4, 1], 'int32');\n * const updates = tf.tensor1d([9, 10, 11, 12]);\n * const shape = [8];\n * tf.scatterND(indices, updates, shape).print() //[0, 11, 0, 10, 9, 0, 0, 12]\n * ```\n *\n * @param indices The tensor contains the indices into the output tensor.\n * @param updates The tensor contains the value for the indices.\n * @param shape: The shape of the output tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Slicing and Joining'} */\nfunction scatterND_<R extends Rank>(\n    indices: Tensor|TensorLike, updates: Tensor|TensorLike,\n    shape: ShapeMap[R]): Tensor<R> {\n  const $indices = convertToTensor(indices, 'indices', 'scatterND', 'int32');\n  const $updates = convertToTensor(updates, 'updates', 'scatterND');\n  scatter_nd_util.validateInput($updates, $indices, shape);\n\n  return ENGINE.runKernel(\n      backend => backend.scatterND($indices, $updates, shape),\n      {$indices, $updates});\n}\n\nexport const scatterND = op({scatterND_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {complex, imag, real} from '../ops/complex_ops';\nimport {op} from '../ops/operation';\nimport {Tensor, Tensor2D} from '../tensor';\nimport {assert} from '../util';\nimport {scalar, zeros} from './tensor_ops';\n\n/**\n * Fast Fourier transform.\n *\n * Computes the 1-dimensional discrete Fourier transform over the inner-most\n * dimension of input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([1, 2, 3]);\n * const x = tf.complex(real, imag);\n *\n * x.fft().print();  // tf.spectral.fft(x).print();\n * ```\n * @param input The complex input to compute an fft over.\n */\n/**\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction fft_(input: Tensor): Tensor {\n  assert(\n      input.dtype === 'complex64',\n      () => `The dtype for tf.spectral.fft() must be complex64 ` +\n          `but got ${input.dtype}.`);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = input.size / innerDimensionSize;\n  const input2D = input.as2D(batch, innerDimensionSize);\n\n  const ret = ENGINE.runKernel(backend => backend.fft(input2D), {input});\n\n  return ret.reshape(input.shape);\n}\n\n/**\n * Inverse fast Fourier transform.\n *\n * Computes the inverse 1-dimensional discrete Fourier transform over the\n * inner-most dimension of input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([1, 2, 3]);\n * const x = tf.complex(real, imag);\n *\n * x.ifft().print();  // tf.spectral.ifft(x).print();\n * ```\n * @param input The complex input to compute an ifft over.\n */\n/**\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction ifft_(input: Tensor): Tensor {\n  assert(\n      input.dtype === 'complex64',\n      () => `The dtype for tf.spectral.ifft() must be complex64 ` +\n          `but got ${input.dtype}.`);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = input.size / innerDimensionSize;\n  const input2D = input.as2D(batch, innerDimensionSize);\n\n  const ret = ENGINE.runKernel(backend => backend.ifft(input2D), {input});\n\n  return ret.reshape(input.shape);\n}\n\n/**\n * Real value input fast Fourier transform.\n *\n * Computes the 1-dimensional discrete Fourier transform over the\n * inner-most dimension of the real input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n *\n * real.rfft().print();\n * ```\n * @param input The real value input to compute an rfft over.\n */\n/**\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction rfft_(input: Tensor, fftLength?: number): Tensor {\n  assert(\n      input.dtype === 'float32',\n      () => `The dtype for rfft() must be real value but got ${input.dtype}`);\n\n  let innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = input.size / innerDimensionSize;\n\n  let adjustedInput: Tensor;\n  if (fftLength != null && fftLength < innerDimensionSize) {\n    // Need to crop\n    const begin = input.shape.map(v => 0);\n    const size = input.shape.map(v => v);\n    size[input.shape.length - 1] = fftLength;\n    adjustedInput = input.slice(begin, size);\n    innerDimensionSize = fftLength;\n  } else if (fftLength != null && fftLength > innerDimensionSize) {\n    // Need to pad with zeros\n    const zerosShape = input.shape.map(v => v);\n    zerosShape[input.shape.length - 1] = fftLength - innerDimensionSize;\n    adjustedInput = input.concat(zeros(zerosShape), input.shape.length - 1);\n    innerDimensionSize = fftLength;\n  } else {\n    adjustedInput = input;\n  }\n\n  // Complement the input with zero imaginary numbers.\n  const zerosInput = adjustedInput.zerosLike();\n  const complexInput =\n      complex(adjustedInput, zerosInput).as2D(batch, innerDimensionSize);\n\n  const ret = fft(complexInput);\n\n  // Exclude complex conjugations. These conjugations are put symmetrically.\n  const half = Math.floor(innerDimensionSize / 2) + 1;\n  const realValues = real(ret);\n  const imagValues = imag(ret);\n  const realComplexConjugate = realValues.split(\n      [half, innerDimensionSize - half], realValues.shape.length - 1);\n  const imagComplexConjugate = imagValues.split(\n      [half, innerDimensionSize - half], imagValues.shape.length - 1);\n\n  const outputShape = adjustedInput.shape.slice();\n  outputShape[adjustedInput.shape.length - 1] = half;\n\n  return complex(realComplexConjugate[0], imagComplexConjugate[0])\n      .reshape(outputShape);\n}\n\n/**\n * Inversed real value input fast Fourier transform.\n *\n * Computes the 1-dimensional inversed discrete Fourier transform over the\n * inner-most dimension of the real input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([0, 0, 0]);\n * const x = tf.complex(real, imag);\n *\n * x.irfft().print();\n * ```\n * @param input The real value input to compute an irfft over.\n */\n/**\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction irfft_(input: Tensor): Tensor {\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = input.size / innerDimensionSize;\n\n  if (innerDimensionSize <= 2) {\n    const complexInput = input.as2D(batch, innerDimensionSize);\n    const ret = ifft(complexInput);\n    return real(ret);\n  } else {\n    // The length of unique components of the DFT of a real-valued signal\n    // is 2 * (input_len - 1)\n    const outputShape = [batch, 2 * (innerDimensionSize - 1)];\n    const realInput = real(input).as2D(batch, innerDimensionSize);\n    const imagInput = imag(input).as2D(batch, innerDimensionSize);\n\n    const realConjugate =\n        realInput.slice([0, 1], [batch, innerDimensionSize - 2]).reverse(1);\n    const imagConjugate: Tensor2D =\n        imagInput.slice([0, 1], [batch, innerDimensionSize - 2])\n            .reverse(1)\n            .mul(scalar(-1));\n\n    const r = realInput.concat(realConjugate, 1);\n    const i = imagInput.concat(imagConjugate, 1);\n    const complexInput = complex(r, i).as2D(outputShape[0], outputShape[1]);\n    const ret = ifft(complexInput);\n    return real(ret);\n  }\n}\n\nexport const fft = op({fft_});\nexport const ifft = op({ifft_});\nexport const rfft = op({rfft_});\nexport const irfft = op({irfft_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport * as sparse_to_dense from '../ops/sparse_to_dense_util';\nimport {Scalar, Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank, ScalarLike, ShapeMap, TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Converts a sparse representation into a dense tensor.\n *\n * Builds an array dense with shape outputShape such that:\n *\n * // If sparseIndices is scalar\n * dense[i] = (i == sparseIndices ? sparseValues : defaultValue)\n *\n * // If sparseIndices is a vector, then for each i\n * dense[sparseIndices[i]] = sparseValues[i]\n *\n * // If sparseIndices is an n by d matrix, then for each i in [0, n)\n * dense[sparseIndices[i][0], ..., sparseIndices[i][d-1]] = sparseValues[i]\n * All other values in dense are set to defaultValue. If sparseValues is a\n * scalar, all sparse indices are set to this single value.\n *\n * If indices are repeated the final value is summed over all values for those\n * indices.\n *\n * ```js\n * const indices = tf.tensor1d([4, 5, 6, 1, 2, 3], 'int32');\n * const values = tf.tensor1d([10, 11, 12, 13, 14, 15], 'float32');\n * const shape = [8];\n * tf.sparseToDense(indices, values, shape).print();\n * ```\n *\n * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.\n * sparseIndices[i] contains the complete index where sparseValues[i] will be\n * placed.\n * @param sparseValues A 0-D or 1-D Tensor. Values\n * corresponding to each row of sparseIndices, or a scalar value to be used for\n * all sparse indices.\n * @param outputShape Shape of the dense output tensor. the type is inferred.\n * @param defaultValue Scalar. Value to set for indices not specified in\n * sparseIndices. Defaults to zero.\n */\n/** @doc {heading: 'Operations', subheading: 'Normalization'} */\nfunction sparseToDense_<R extends Rank>(\n    sparseIndices: Tensor|TensorLike, sparseValues: Tensor|TensorLike,\n    outputShape: ShapeMap[R], defaultValue: Scalar|ScalarLike = 0): Tensor<R> {\n  const $sparseIndices =\n      convertToTensor(sparseIndices, 'sparseIndices', 'sparseToDense', 'int32');\n  const $sparseValues =\n      convertToTensor(sparseValues, 'sparseValues', 'sparseToDense');\n  const $defaultValue = convertToTensor(\n      defaultValue, 'defaultValue', 'sparseToDense', $sparseValues.dtype);\n\n  sparse_to_dense.validateInput(\n      $sparseIndices, $sparseValues, outputShape, $defaultValue);\n\n  return ENGINE.runKernel(\n      backend => backend.sparseToDense(\n          $sparseIndices, $sparseValues, outputShape, $defaultValue),\n      {$sparseIndices, $sparseValues, $defaultValue});\n}\n\nexport const sparseToDense = op({sparseToDense_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '../tensor';\n\n/**\n * Validate sparseToDense inputs.\n *\n * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.\n * sparseIndices[i] contains the complete index where sparseValues[i] will be\n * placed.\n * @param sparseValues A 0-D or 1-D Tensor. Values\n * corresponding to each row of sparseIndices, or a scalar value to be used for\n * all sparse indices.\n * @param outputShape number[]. Shape of the dense output tensor.\n * @param validateIndices boolean. indice validation is not supported, error\n * will be thrown if it is set.\n */\nexport function validateInput(\n    sparseIndices: Tensor, sparseValues: Tensor, outputShape: number[],\n    defaultValues: Tensor) {\n  if (sparseIndices.dtype !== 'int32') {\n    throw new Error(\n        'tf.sparseToDense() expects the indices to be int32 type,' +\n        ` but the dtype was ${sparseIndices.dtype}.`);\n  }\n  if (sparseIndices.rank > 2) {\n    throw new Error(\n        'sparseIndices should be a scalar, vector, or matrix,' +\n        ` but got shape ${sparseIndices.shape}.`);\n  }\n\n  const numElems = sparseIndices.rank > 0 ? sparseIndices.shape[0] : 1;\n  const numDims = sparseIndices.rank > 1 ? sparseIndices.shape[1] : 1;\n\n  if (outputShape.length !== numDims) {\n    throw new Error(\n        'outputShape has incorrect number of elements:,' +\n        ` ${outputShape.length}, should be: ${numDims}.`);\n  }\n\n  const numValues = sparseValues.size;\n  if (!(sparseValues.rank === 0 ||\n        sparseValues.rank === 1 && numValues === numElems)) {\n    throw new Error(\n        'sparseValues has incorrect shape ' +\n        `${sparseValues.shape}, should be [] or [${numElems}]`);\n  }\n\n  if (sparseValues.dtype !== defaultValues.dtype) {\n    throw new Error('sparseValues.dtype must match defaultValues.dtype');\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Gather slices from input tensor into a Tensor with shape specified by\n * `indices`.\n *\n * `indices` is an K-dimensional integer tensor, best thought of as a\n * (K-1)-dimensional tensor of indices into input, where each element defines a\n * slice of input:\n * output[\\\\(i_0, ..., i_{K-2}\\\\)] = input[indices[\\\\(i_0, ..., i_{K-2}\\\\)]]\n *\n * Whereas in `tf.gather`, `indices` defines slices into the first dimension of\n * input, in `tf.gatherND`, `indices` defines slices into the first N dimensions\n * of input, where N = indices.shape[-1].\n *\n * The last dimension of indices can be at most the rank of input:\n * indices.shape[-1] <= input.rank\n *\n * The last dimension of `indices` corresponds to elements\n * (if indices.shape[-1] == input.rank) or slices\n * (if indices.shape[-1] < input.rank) along dimension indices.shape[-1] of\n * input.\n * The output tensor has shape\n * indices.shape[:-1] + input.shape[indices.shape[-1]:]\n *\n * Note that on CPU, if an out of bound index is found, an error is returned. On\n * GPU, if an out of bound index is found, a 0 is stored in the corresponding\n * output value.\n *\n * ```js\n * const indices = tf.tensor2d([0, 1, 1, 0], [2,2], 'int32');\n * const input = tf.tensor2d([9, 10, 11, 12], [2, 2]);\n * tf.gatherND(input, indices).print() // [10, 11]\n * ```\n *\n * @param x The tensor from which to gather values.\n * @param indices Index tensor, must be of type int32.\n */\n/** @doc {heading: 'Operations', subheading: 'Slicing and Joining'} */\nfunction gatherND_(x: Tensor|TensorLike, indices: Tensor|TensorLike): Tensor {\n  const $indices = convertToTensor(indices, 'indices', 'gatherND', 'int32');\n  const $x = convertToTensor(x, 'x', 'gatherND');\n  return ENGINE.runKernel(\n      backend => backend.gatherND($x, $indices), {$x, $indices});\n}\nexport const gatherND = op({gatherND_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {op} from './operation';\n\n/**\n * Returns a diagonal tensor with a given diagonal values.\n *\n * Given a diagonal, this operation returns a tensor with the diagonal and\n * everything else padded with zeros.\n *\n * Assume the input has dimensions `[D1,..., Dk]`, then the output is a tensor\n * of rank 2k with dimensions `[D1,..., Dk, D1,..., Dk]`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * tf.diag(x).print()\n * ```\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4, 5, 6, 6, 8], [4, 2])\n *\n * tf.diag(x).print()\n * ```\n * @param x The input tensor.\n */\nfunction diag_(x: Tensor): Tensor {\n  const $x = convertToTensor(x, 'x', 'diag').flatten();\n  const outShape = [...x.shape, ...x.shape];\n  return ENGINE.runKernel(backend => backend.diag($x), {$x}).reshape(outShape);\n}\n\nexport const diag = op({diag_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {randomUniform} from './array_ops';\nimport {getNoiseShape} from './dropout_util';\nimport {op} from './operation';\n\n/**\n * Computes dropout.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 2, 1]);\n * const rate = 0.75;\n * const output = tf.dropout(x, rate);\n * output.print();\n * ```\n *\n * @param x A floating point Tensor or TensorLike.\n * @param rate A float in the range [0, 1). The probability that each element\n *   of x is discarded.\n * @param noiseShape An array of numbers of type int32, representing the\n * shape for randomly generated keep/drop flags. If the noiseShape has null\n * value, it will be automatically replaced with the x's relative dimension\n * size. Optional.\n * @param seed Used to create random seeds. Optional.\n * @returns A Tensor of the same shape of x.\n */\n/** @doc {heading: 'Operations', subheading: 'Dropout'} */\nfunction dropout_(\n    x: Tensor|TensorLike, rate: number, noiseShape?: number[],\n    seed?: number|string): Tensor {\n  const $x = convertToTensor(x, 'x', 'dropout');\n\n  util.assert(\n      $x.dtype === 'float32',\n      () => `x has to be a floating point tensor since it's going to be ` +\n          `scaled, but got a ${$x.dtype} tensor instead.`);\n  util.assert(\n      rate >= 0 && rate < 1,\n      () => `rate must be a float in the range [0, 1), but got ${rate}.`);\n\n  if (rate === 0) {\n    return x instanceof Tensor ? $x.clone() : $x;\n  }\n\n  const $noiseShape = getNoiseShape($x, noiseShape);\n  const keepProb = 1 - rate;\n  const multiplier = randomUniform($noiseShape, 0, 1, 'float32', seed)\n                         .add(keepProb)\n                         .floor()\n                         .div(keepProb);\n\n  return $x.mul(multiplier);\n}\n\nexport const dropout = op({dropout_});\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport * as util from '../util';\n\n/**\n * Normalize noise shape based on provided tensor and noise shape.\n *\n * @param x Tensor.\n * @param noiseShape The shape for the randomly generated keep/drop flags, as\n *   an array of numbers. Optional.\n * @returns Normalized noise shape.\n */\nexport function getNoiseShape(x: Tensor, noiseShape?: number[]): number[] {\n  if (noiseShape == null) {\n    return x.shape.slice();\n  }\n  if (util.arraysEqual(x.shape, noiseShape)) {\n    return noiseShape;\n  }\n  if (x.shape.length === noiseShape.length) {\n    const newDimension: number[] = [];\n    for (let i = 0; i < x.shape.length; i++) {\n      if (noiseShape[i] == null && x.shape[i] != null) {\n        newDimension.push(x.shape[i]);\n      } else {\n        newDimension.push(noiseShape[i]);\n      }\n    }\n    return newDimension;\n  }\n\n  return noiseShape;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {op} from '../ops/operation';\nimport {Tensor, Tensor1D} from '../tensor';\n\nimport {mul} from './binary_ops';\nimport {concat} from './concat_split';\nimport {slice} from './slice';\nimport {rfft} from './spectral_ops';\nimport {fill, tensor1d, tensor2d} from './tensor_ops';\n\n/**\n * Generate a Hann window.\n *\n * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows\n *\n * ```js\n * tf.signal.hannWindow(10).print();\n * ```\n * @param The length of window\n */\n/**\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction hannWindow_(windowLength: number): Tensor1D {\n  return cosineWindow(windowLength, 0.5, 0.5);\n}\n\n/**\n * Generate a hamming window.\n *\n * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows\n *\n * ```js\n * tf.signal.hammingWindow(10).print();\n * ```\n * @param The length of window\n */\n/**\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction hammingWindow_(windowLength: number): Tensor1D {\n  return cosineWindow(windowLength, 0.54, 0.46);\n}\n\n/**\n * Expands input into frames of frameLength.\n * Slides a window size with frameStep.\n *\n * ```js\n * tf.signal.frame([1, 2, 3], 2, 1).print();\n * ```\n * @param signal The input tensor to be expanded\n * @param frameLength Length of each frame\n * @param frameStep The frame hop size in samples.\n * @param padEnd Whether to pad the end of signal with padValue.\n * @param padValue An number to use where the input signal does\n *     not exist when padEnd is True.\n */\n/**\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction frame_(\n    signal: Tensor1D, frameLength: number, frameStep: number, padEnd = false,\n    padValue = 0): Tensor {\n  let start = 0;\n  const output: Tensor[] = [];\n  while (start + frameLength <= signal.size) {\n    output.push(slice(signal, start, frameLength));\n    start += frameStep;\n  }\n\n  if (padEnd) {\n    while (start < signal.size) {\n      const padLen = (start + frameLength) - signal.size;\n      const pad = concat(\n          [slice(signal, start, frameLength - padLen),\n           fill([padLen], padValue)]);\n      output.push(pad);\n      start += frameStep;\n    }\n  }\n\n  if (output.length === 0) {\n    return tensor2d([], [0, frameLength]);\n  }\n\n  return concat(output).as2D(output.length, frameLength);\n}\n\n/**\n * Computes the Short-time Fourier Transform of signals\n * See: https://en.wikipedia.org/wiki/Short-time_Fourier_transform\n *\n * ```js\n * const input = tf.tensor1d([1, 1, 1, 1, 1])\n * tf.signal.stft(input, 3, 1).print();\n * ```\n * @param signal 1-dimensional real value tensor.\n * @param frameLength The window length of samples.\n * @param frameStep The number of samples to step.\n * @param fftLength The size of the FFT to apply.\n * @param windowFn A callable that takes a window length and returns 1-d tensor.\n */\n/**\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction stft_(\n    signal: Tensor1D, frameLength: number, frameStep: number,\n    fftLength?: number,\n    windowFn: (length: number) => Tensor1D = hannWindow): Tensor {\n  if (fftLength == null) {\n    fftLength = enclosingPowerOfTwo(frameLength);\n  }\n  const framedSignal = frame(signal, frameLength, frameStep);\n  const windowedSignal = mul(framedSignal, windowFn(frameLength));\n  const output: Tensor[] = [];\n  for (let i = 0; i < framedSignal.shape[0]; i++) {\n    output.push(rfft(windowedSignal.slice([i, 0], [1, frameLength]),\n      fftLength));\n  }\n  return concat(output);\n}\n\nfunction enclosingPowerOfTwo(value: number) {\n  // Return 2**N for integer N such that 2**N >= value.\n  return Math.floor(Math.pow(2, Math.ceil(Math.log(value) / Math.log(2.0))));\n}\n\nfunction cosineWindow(windowLength: number, a: number, b: number): Tensor1D {\n  const even = 1 - windowLength % 2;\n  const newValues = new Float32Array(windowLength);\n  for (let i = 0; i < windowLength; ++i) {\n    const cosArg = (2.0 * Math.PI * i) / (windowLength + even - 1);\n    newValues[i] = a - b * Math.cos(cosArg);\n  }\n  return tensor1d(newValues, 'float32');\n}\n\nexport const hannWindow = op({hannWindow_});\nexport const hammingWindow = op({hammingWindow_});\nexport const frame = op({frame_});\nexport const stft = op({stft_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assert, assertShapesMatch, getTypedArrayFromDType} from '../util';\nimport {tensor} from './tensor_ops';\n\n/**\n * Returns whether the targets are in the top K predictions.\n *\n * ```js\n * const predictions = tf.tensor2d([[20, 10, 40, 30], [30, 50, -20, 10]]);\n * const targets = tf.tensor1d([2, 0]);\n * const precision = await tf.inTopKAsync(predictions, targets);\n * precision.print();\n * ```\n * @param predictions 2-D or higher `tf.Tensor` with last dimension being\n *     at least `k`.\n * @param targets 1-D or higher `tf.Tensor`.\n * @param k Optional Number of top elements to look at for computing precision,\n *     default to 1.\n */\n/** @doc {heading: 'Operations', subheading: 'Evaluation'} */\nasync function inTopKAsync_<T extends Tensor, U extends Tensor>(\n    predictions: T|TensorLike, targets: U|TensorLike, k = 1): Promise<U> {\n  const $predictions = convertToTensor(predictions, 'predictions', 'inTopK');\n  const $targets = convertToTensor(targets, 'targets', 'inTopK');\n\n  assert(\n      $predictions.rank > 1,\n      () => 'inTopK() expects the predictions to be of rank 2 or higher, ' +\n          `but got ${$predictions.rank}`);\n  assert(\n      $predictions.rank - 1 === $targets.rank,\n      () => `predictions rank should be 1 larger than ` +\n          `targets rank, but got predictions rank ` +\n          `${$predictions.rank} and targets rank ${$targets.rank}`);\n  assertShapesMatch(\n      $predictions.shape.slice(0, $predictions.shape.length - 1),\n      $targets.shape,\n      `predictions's shape should be align with the targets' shape, ` +\n          'except the last dimension.');\n  const lastDim = $predictions.shape[$predictions.shape.length - 1];\n  assert(\n      k > 0 && k <= lastDim,\n      () => `'k' passed to inTopK() must be > 0 && <= the predictions last ` +\n          `dimension (${lastDim}), but got ${k}`);\n\n  const predictionsVals = await $predictions.data();\n  const targetsVals = await $targets.data();\n\n  // Reshape predictionsVals into a 2d tensor [batch, lastDim]\n  // and look up topK along lastDim.\n  const [batch, size] = [predictionsVals.length / lastDim, lastDim];\n  const precision = getTypedArrayFromDType('bool', batch);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = predictionsVals.subarray(offset, offset + size);\n    const valAndInd: Array<{value: number, index: number}> = [];\n    for (let i = 0; i < vals.length; i++) {\n      valAndInd.push({value: vals[i], index: i});\n    }\n    valAndInd.sort((a, b) => b.value - a.value);\n\n    precision[b] = 0;\n    for (let i = 0; i < k; i++) {\n      if (valAndInd[i].index === targetsVals[b]) {\n        precision[b] = 1;\n        break;\n      }\n    }\n  }\n\n  if (predictions !== $predictions) {\n    $predictions.dispose();\n  }\n  if (targets !== $targets) {\n    $targets.dispose();\n  }\n\n  // Output precision has the same shape as targets.\n  return tensor(precision, $targets.shape, 'bool') as U;\n}\n\nexport const inTopKAsync = inTopKAsync_;\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {customGrad} from '../gradients';\nimport {Tensor} from '../tensor';\nimport {GradSaveFunc} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assertShapesMatch} from '../util';\nimport {expandShapeToKeepDim} from './axis_util';\nimport {minimum} from './binary_ops';\nimport {op} from './operation';\nimport {ones, scalar} from './tensor_ops';\n\nexport enum Reduction {\n  NONE,\n  MEAN,\n  SUM,\n  SUM_BY_NONZERO_WEIGHTS\n}\n\n/**\n * Computes the weighted loss between two tensors.\n *\n * @param losses Tensor of shape `[batch_size, d1, ... dN]`.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `losses`, and must be broadcastable to `losses` (i.e., all\n *    dimensions must be either `1`, or the same as the corresponding\n *    `losses` dimension).\n */\n/** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */\nfunction computeWeightedLoss_<T extends Tensor, O extends Tensor>(\n    losses: T|TensorLike, weights?: Tensor|TensorLike,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $losses = convertToTensor(losses, 'losses', 'computeWeightedLoss');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'computeWeightedLoss');\n  }\n\n  const weightedLoss = ($weights == null) ? $losses : $losses.mul($weights);\n\n  if (reduction === Reduction.NONE) {\n    return weightedLoss as O;\n  }\n  if (reduction === Reduction.SUM) {\n    return weightedLoss.sum();\n  }\n  if (reduction === Reduction.MEAN) {\n    if ($weights == null) {\n      return weightedLoss.mean();\n    } else {\n      const broadcastFactor = $losses.size / $weights.size;\n      const result = weightedLoss.sum().div($weights.sum());\n      return broadcastFactor > 1 ? result.div(scalar(broadcastFactor)) :\n                                   result as O;\n    }\n  }\n  if (reduction === Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    if ($weights == null) {\n      return weightedLoss.sum().div(scalar($losses.size));\n    } else {\n      const broadcastedWeights = $weights.mul(ones($losses.shape));\n\n      const numNonZeros =\n          broadcastedWeights.notEqual(scalar(0)).sum().toFloat();\n      return weightedLoss.sum().div(numNonZeros);\n    }\n  }\n\n  throw Error(`Unknown reduction: ${reduction}`);\n}\n\n/**\n * Computes the absolute difference loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n */\n/** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */\nfunction absoluteDifference_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike,\n    weights?: Tensor|TensorLike,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $labels = convertToTensor(labels, 'labels', 'absoluteDifference');\n  const $predictions =\n      convertToTensor(predictions, 'predictions', 'absoluteDifference');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'absoluteDifference');\n  }\n  assertShapesMatch(\n      $labels.shape, $predictions.shape, 'Error in absoluteDifference: ');\n\n  const losses = $labels.sub($predictions).abs();\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\n/**\n * Computes the mean squared error between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n */\n/** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */\nfunction meanSquaredError_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike,\n    weights?: Tensor|TensorLike,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $labels = convertToTensor(labels, 'labels', 'meanSquaredError');\n  const $predictions =\n      convertToTensor(predictions, 'predictions', 'meanSquaredError');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'meanSquaredError');\n  }\n  assertShapesMatch(\n      $labels.shape, $predictions.shape, 'Error in meanSquaredError: ');\n\n  const losses = $labels.squaredDifference($predictions);\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\n/**\n * Computes the cosine distance loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param axis The dimension along which the cosine distance is computed.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n */\n/** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */\nfunction cosineDistance_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike, axis: number,\n    weights?: Tensor|TensorLike,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $labels = convertToTensor(labels, 'labels', 'cosineDistance');\n  const $predictions =\n      convertToTensor(predictions, 'predictions', 'cosineDistance');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'cosineDistance');\n  }\n  assertShapesMatch(\n      $labels.shape, $predictions.shape, 'Error in cosineDistance: ');\n\n  const one = scalar(1);\n  const losses = one.sub($labels.mul($predictions).sum(axis, true));\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\n/**\n * Computes the Hinge loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n */\n/** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */\nfunction hingeLoss_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike,\n    weights?: Tensor|TensorLike,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  let $labels = convertToTensor(labels, 'labels', 'hingeLoss');\n  const $predictions = convertToTensor(predictions, 'predictions', 'hingeLoss');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'hingeLoss');\n  }\n  assertShapesMatch($labels.shape, $predictions.shape, 'Error in hingeLoss: ');\n\n  const one = scalar(1);\n  // Convert binary labels to (-1, 1)\n  $labels = scalar(2).mul($labels).sub(one);\n  const losses = one.sub($labels.mul($predictions)).relu();\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\n/**\n * Computes the log loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param epsilon A small increment to avoid taking log of zero\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n */\n/** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */\nfunction logLoss_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike,\n    weights?: Tensor|TensorLike, epsilon = 1e-7,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $labels = convertToTensor(labels, 'labels', 'logLoss');\n  const $predictions = convertToTensor(predictions, 'predictions', 'logLoss');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'logLoss');\n  }\n  assertShapesMatch($labels.shape, $predictions.shape, 'Error in logLoss: ');\n\n  const one = scalar(1);\n  const epsilonScalar = scalar(epsilon);\n  const losses = $labels.mul($predictions.add(epsilonScalar).log())\n                     .neg()\n                     .sub(one.sub($labels).mul(\n                         one.sub($predictions).add(epsilonScalar).log()));\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\nfunction sigmoidCrossEntropyWithLogits_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, logits: T|TensorLike): O {\n  const $labels =\n      convertToTensor(labels, 'labels', 'sigmoidCrossEntropyWithLogits');\n  const $logits =\n      convertToTensor(logits, 'logits', 'sigmoidCrossEntropyWithLogits');\n  assertShapesMatch(\n      $labels.shape, $logits.shape, 'Error in sigmoidCrossEntropyWithLogits: ');\n\n  /**\n   * Implementation Details:\n   *\n   * For brevity, let `x = logits`, `z = labels`.  The logistic loss is\n   *     z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))\n   *   = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))\n   *   = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))\n   *   = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))\n   *   = (1 - z) * x + log(1 + exp(-x))\n   *   = x - x * z + log(1 + exp(-x))\n   *\n   *   For x < 0, to avoid overflow in exp(-x), we reformulate the above\n   *     x - x * z + log(1 + exp(-x))\n   *   = log(exp(x)) - x * z + log(1 + exp(-x))\n   *   = - x * z + log(1 + exp(x))\n   *\n   * Hence, to ensure stability and avoid overflow, the implementation uses\n   * this equivalent formulation:\n   *     max(x, 0) - x * z + log(1 + exp(-abs(x)))\n   */\n  const maxOutput = $logits.relu();\n  const outputXTarget = $logits.mul($labels);\n  const sigmoidOutput = $logits.abs().neg().exp().log1p();\n\n  return maxOutput.sub(outputXTarget).add(sigmoidOutput);\n}\n\n/**\n * Computes the sigmoid cross entropy loss between two tensors.\n *\n * If labelSmoothing is nonzero, smooth the labels towards 1/2:\n *\n *   newMulticlassLabels = multiclassLabels * (1 - labelSmoothing)\n *                         + 0.5 * labelSmoothing\n *\n * @param multiClassLabels The ground truth output tensor of shape\n * [batch_size, num_classes], same dimensions as 'predictions'.\n * @param logits The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param labelSmoothing If greater than 0, then smooth the labels.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n */\n/** @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' } */\nfunction sigmoidCrossEntropy_<T extends Tensor, O extends Tensor>(\n    multiClassLabels: T|TensorLike, logits: T|TensorLike,\n    weights?: Tensor|TensorLike, labelSmoothing = 0,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  let $multiClassLabels = convertToTensor(\n      multiClassLabels, 'multiClassLabels', 'sigmoidCrossEntropy');\n  const $logits = convertToTensor(logits, 'logits', 'sigmoidCrossEntropy');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'sigmoidCrossEntropy');\n  }\n  assertShapesMatch(\n      $multiClassLabels.shape, $logits.shape, 'Error in sigmoidCrossEntropy: ');\n\n  if (labelSmoothing > 0) {\n    const labelSmoothingScalar = scalar(labelSmoothing);\n    const one = scalar(1);\n    const half = scalar(0.5);\n\n    $multiClassLabels = $multiClassLabels.mul(one.sub(labelSmoothingScalar))\n                            .add(half.mul(labelSmoothingScalar));\n  }\n  const losses = sigmoidCrossEntropyWithLogits_($multiClassLabels, $logits);\n\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\n/**\n * Computes the huber loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param delta Point where huber loss changes from quadratic to linear.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`.\n */\n/** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */\nfunction huberLoss_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike,\n    weights?: Tensor|TensorLike, delta = 1.0,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $labels = convertToTensor(labels, 'labels', 'huberLoss');\n  const $predictions = convertToTensor(predictions, 'predictions', 'huberLoss');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'huberLoss');\n  }\n  assertShapesMatch($labels.shape, $predictions.shape, 'Error in huberLoss: ');\n\n  const deltaScalar = scalar(delta);\n  const error = $predictions.sub($labels).abs();\n  const quadratic = minimum(error, deltaScalar);\n  const linear = error.sub(quadratic);\n\n  const losses =\n      scalar(0.5).mul(quadratic.square()).add(deltaScalar.mul(linear));\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\n/**\n * Computes softmax cross entropy between logits and labels.\n *\n * Measures the probability error in discrete classification tasks in which\n * the classes are mutually exclusive (each entry is in exactly one class).\n * For example, each CIFAR-10 image is labeled with one and only one label: an\n * image can be a dog or a truck, but not both.\n *\n * `NOTE`: While the classes are mutually exclusive, their probabilities need\n * not be. All that is required is that each row of labels is a valid\n * probability distribution. If they are not, the computation of the gradient\n * will be incorrect.\n *\n * `WARNING`: This op expects unscaled logits, since it performs a softmax on\n * logits internally for efficiency. Do not call this op with the output of\n * softmax, as it will produce incorrect results.\n *\n * logits and labels must have the same shape, e.g. [batch_size, num_classes]\n * and the same dtype.\n * @param labels The labels array.\n * @param logits The logits array.\n * @param dim The dimension softmax would be performed on. Defaults to `-1`\n *     which indicates the last dimension.\n */\nfunction softmaxCrossEntropyWithLogits_<T extends Tensor, O extends Tensor>(\n    labels: T, logits: T, dim = -1): O {\n  if (dim === -1) {\n    dim = logits.rank - 1;\n  }\n\n  if (dim !== logits.rank - 1) {\n    throw Error(\n        `Softmax cross entropy along a non-last dimension is not yet ` +\n        `supported. Labels / logits was rank ${logits.rank} ` +\n        `and dim was ${dim}`);\n  }\n  // Use a custom gradient for numerical stability.\n  const customOp =\n      customGrad((labels: Tensor, logits: Tensor, save: GradSaveFunc) => {\n        // Reference:\n        //   1. http://cs231n.github.io/linear-classify/#softmax\n        //   2. https://blog.feedly.com/tricks-of-the-trade-logsumexp/\n        const keepDims = true;\n        const lse = logits.logSumExp([dim], keepDims);\n        const logResult = logits.toFloat().sub(lse);\n        save([labels, logResult]);\n\n        const costVector = logResult.mul(labels).neg();\n        const value: O = costVector.sum([dim]);\n\n        const gradFunc = (dy: O, saved: Tensor[]) => {\n          const [labels, logResult] = saved;\n          const dyShape = expandShapeToKeepDim(dy.shape, [dim]);\n          return [\n            dy.reshape(dyShape).mul(labels.toFloat().sub(logResult.exp())),\n            dy.reshape(dyShape).mul(logResult.exp().sub(labels.toFloat())),\n          ];\n        };\n        return {value, gradFunc};\n      });\n\n  return customOp(labels, logits);\n}\n\n/**\n * Computes the softmax cross entropy loss between two tensors.\n *\n * If labelSmoothing is nonzero, smooth the labels towards 1/2:\n *\n *   newOnehotLabels = onehotLabels * (1 - labelSmoothing)\n *                         + labelSmoothing / numClasses\n *\n * @param onehotLabels One hot encoded labels\n *    [batch_size, num_classes], same dimensions as 'predictions'.\n * @param logits The predicted outputs.\n * @param weights Tensor whose rank is either 0, or 1, and must be\n *    broadcastable to `loss`  of shape [batch_size]\n * @param labelSmoothing If greater than 0, then smooth the labels.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n */\n/** @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' } */\nfunction softmaxCrossEntropy_<T extends Tensor, O extends Tensor>(\n    onehotLabels: T|TensorLike, logits: T|TensorLike,\n    weights?: Tensor|TensorLike, labelSmoothing = 0,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  let $onehotLabels =\n      convertToTensor(onehotLabels, 'onehotLabels', 'softmaxCrossEntropy');\n  const $logits = convertToTensor(logits, 'logits', 'softmaxCrossEntropy');\n  let $weights: Tensor = null;\n\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'softmaxCrossEntropy');\n  }\n\n  assertShapesMatch(\n      $onehotLabels.shape, $logits.shape, 'Error in softmaxCrossEntropy: ');\n\n  if (labelSmoothing > 0) {\n    const labelSmoothingScalar = scalar(labelSmoothing);\n    const one = scalar(1);\n    const numClasses = scalar($onehotLabels.shape[1]);\n\n    $onehotLabels = $onehotLabels.mul(one.sub(labelSmoothingScalar))\n                        .add(labelSmoothingScalar.div(numClasses));\n  }\n\n  const losses = softmaxCrossEntropyWithLogits_($onehotLabels, $logits);\n\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\nexport const absoluteDifference = op({absoluteDifference_});\nexport const computeWeightedLoss = op({computeWeightedLoss_});\nexport const cosineDistance = op({cosineDistance_});\nexport const hingeLoss = op({hingeLoss_});\nexport const huberLoss = op({huberLoss_});\nexport const logLoss = op({logLoss_});\nexport const meanSquaredError = op({meanSquaredError_});\nexport const sigmoidCrossEntropy = op({sigmoidCrossEntropy_});\nexport const softmaxCrossEntropy = op({softmaxCrossEntropy_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Linear algebra ops.\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose} from '../globals';\nimport {Tensor, Tensor1D, Tensor2D} from '../tensor';\nimport {assert} from '../util';\nimport {eye, squeeze, stack, unstack} from './array_ops';\nimport {split} from './concat_split';\nimport {norm} from './norm';\nimport {op} from './operation';\nimport {sum} from './reduction_ops';\nimport {tensor2d} from './tensor_ops';\n\n/**\n * Gram-Schmidt orthogonalization.\n *\n * ```js\n * const x = tf.tensor2d([[1, 2], [3, 4]]);\n * let y = tf.linalg.gramSchmidt(x);\n * y.print();\n * console.log('Othogonalized:');\n * y.dot(y.transpose()).print();  // should be nearly the identity matrix.\n * console.log('First row direction maintained:');\n * const data = await y.array();\n * console.log(data[0][1] / data[0][0]);  // should be nearly 2.\n * ```\n *\n * @param xs The vectors to be orthogonalized, in one of the two following\n *   formats:\n *   - An Array of `tf.Tensor1D`.\n *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows\n *     of `xs`.\n *   In each case, all the vectors must have the same length and the length\n *   must be greater than or equal to the number of vectors.\n * @returns The orthogonalized and normalized vectors or matrix.\n *   Orthogonalization means that the vectors or the rows of the matrix\n *   are orthogonal (zero inner products). Normalization means that each\n *   vector or each row of the matrix has an L2 norm that equals `1`.\n */\n/**\n * @doc {heading:'Operations',\n *       subheading:'Linear Algebra',\n *       namespace:'linalg'}\n */\nfunction gramSchmidt_(xs: Tensor1D[]|Tensor2D): Tensor1D[]|Tensor2D {\n  let inputIsTensor2D: boolean;\n  if (Array.isArray(xs)) {\n    inputIsTensor2D = false;\n    assert(\n        xs != null && xs.length > 0,\n        () => 'Gram-Schmidt process: input must not be null, undefined, or ' +\n            'empty');\n    const dim = xs[0].shape[0];\n    for (let i = 1; i < xs.length; ++i) {\n      assert(\n          xs[i].shape[0] === dim,\n          () =>\n              'Gram-Schmidt: Non-unique lengths found in the input vectors: ' +\n              `(${(xs as Tensor1D[])[i].shape[0]} vs. ${dim})`);\n    }\n  } else {\n    inputIsTensor2D = true;\n    xs = split(xs, xs.shape[0], 0).map(x => squeeze(x, [0]));\n  }\n\n  assert(\n      xs.length <= xs[0].shape[0],\n      () => `Gram-Schmidt: Number of vectors (${\n                (xs as Tensor1D[]).length}) exceeds ` +\n          `number of dimensions (${(xs as Tensor1D[])[0].shape[0]}).`);\n\n  const ys: Tensor1D[] = [];\n  const xs1d = xs;\n  for (let i = 0; i < xs.length; ++i) {\n    ys.push(ENGINE.tidy(() => {\n      let x = xs1d[i];\n      if (i > 0) {\n        for (let j = 0; j < i; ++j) {\n          const proj = sum(ys[j].mulStrict(x)).mul(ys[j]);\n          x = x.sub(proj);\n        }\n      }\n      return x.div(norm(x, 'euclidean'));\n    }));\n  }\n\n  if (inputIsTensor2D) {\n    return stack(ys, 0) as Tensor2D;\n  } else {\n    return ys;\n  }\n}\n\n/**\n * Compute QR decomposition of m-by-n matrix using Householder transformation.\n *\n * Implementation based on\n *   [http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf]\n * (http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf)\n *\n * ```js\n * const a = tf.tensor2d([[1, 2], [3, 4]]);\n * let [q, r] = tf.linalg.qr(a);\n * console.log('Q');\n * q.print();\n * console.log('R');\n * r.print();\n * console.log('Orthogonalized');\n * q.dot(q.transpose()).print()  // should be nearly the identity matrix.\n * console.log('Reconstructed');\n * q.dot(r).print(); // should be nearly [[1, 2], [3, 4]];\n * ```\n *\n * @param x The `tf.Tensor` to be QR-decomposed. Must have rank >= 2. Suppose\n *   it has the shape `[..., M, N]`.\n * @param fullMatrices An optional boolean parameter. Defaults to `false`.\n *   If `true`, compute full-sized `Q`. If `false` (the default),\n *   compute only the leading N columns of `Q` and `R`.\n * @returns An `Array` of two `tf.Tensor`s: `[Q, R]`. `Q` is a unitary matrix,\n *   i.e., its columns all have unit norm and are mutually orthogonal.\n *   If `M >= N`,\n *     If `fullMatrices` is `false` (default),\n *       - `Q` has a shape of `[..., M, N]`,\n *       - `R` has a shape of `[..., N, N]`.\n *     If `fullMatrices` is `true` (default),\n *       - `Q` has a shape of `[..., M, M]`,\n *       - `R` has a shape of `[..., M, N]`.\n *   If `M < N`,\n *     - `Q` has a shape of `[..., M, M]`,\n *     - `R` has a shape of `[..., M, N]`.\n * @throws If the rank of `x` is less than 2.\n */\n/**\n * @doc {heading:'Operations',\n *       subheading:'Linear Algebra',\n *       namespace:'linalg'}\n */\nfunction qr_(x: Tensor, fullMatrices = false): [Tensor, Tensor] {\n  if (x.rank < 2) {\n    throw new Error(\n        `qr() requires input tensor to have a rank >= 2, but got rank ${\n            x.rank}`);\n  } else if (x.rank === 2) {\n    return qr2d(x as Tensor2D, fullMatrices);\n  } else {\n    // Rank > 2.\n    // TODO(cais): Below we split the input into individual 2D tensors,\n    //   perform QR decomposition on them and then stack the results back\n    //   together. We should explore whether this can be parallelized.\n    const outerDimsProd = x.shape.slice(0, x.shape.length - 2)\n                              .reduce((value, prev) => value * prev);\n    const x2ds = unstack(\n        x.reshape([\n          outerDimsProd, x.shape[x.shape.length - 2],\n          x.shape[x.shape.length - 1]\n        ]),\n        0);\n    const q2ds: Tensor2D[] = [];\n    const r2ds: Tensor2D[] = [];\n    x2ds.forEach(x2d => {\n      const [q2d, r2d] = qr2d(x2d as Tensor2D, fullMatrices);\n      q2ds.push(q2d);\n      r2ds.push(r2d);\n    });\n    const q = stack(q2ds, 0).reshape(x.shape);\n    const r = stack(r2ds, 0).reshape(x.shape);\n    return [q, r];\n  }\n}\n\nfunction qr2d(x: Tensor2D, fullMatrices = false): [Tensor2D, Tensor2D] {\n  return ENGINE.tidy(() => {\n    if (x.shape.length !== 2) {\n      throw new Error(\n          `qr2d() requires a 2D Tensor, but got a ${x.shape.length}D Tensor.`);\n    }\n\n    const m = x.shape[0];\n    const n = x.shape[1];\n\n    let q = eye(m);     // Orthogonal transform so far.\n    let r = x.clone();  // Transformed matrix so far.\n\n    const one2D = tensor2d([[1]], [1, 1]);\n    let w: Tensor2D = one2D.clone();\n\n    const iters = m >= n ? n : m;\n    for (let j = 0; j < iters; ++j) {\n      // This tidy within the for-loop ensures we clean up temporary\n      // tensors as soon as they are no longer needed.\n      const rTemp = r;\n      const wTemp = w;\n      const qTemp = q;\n      [w, r, q] = ENGINE.tidy((): [Tensor2D, Tensor2D, Tensor2D] => {\n        // Find H = I - tau * w * w', to put zeros below R(j, j).\n        const rjEnd1 = r.slice([j, j], [m - j, 1]);\n        const normX = rjEnd1.norm();\n        const rjj = r.slice([j, j], [1, 1]);\n\n        // The sign() function returns 0 on 0, which causes division by zero.\n        const s = tensor2d([[-1]]).where(rjj.greater(0), tensor2d([[1]]));\n\n        const u1 = rjj.sub(s.mul(normX));\n        const wPre = rjEnd1.div(u1);\n        if (wPre.shape[0] === 1) {\n          w = one2D.clone();\n        } else {\n          w = one2D.concat(\n              wPre.slice([1, 0], [wPre.shape[0] - 1, wPre.shape[1]]) as\n                  Tensor2D,\n              0);\n        }\n        const tau = s.matMul(u1).div(normX).neg() as Tensor2D;\n\n        // -- R := HR, Q := QH.\n        const rjEndAll = r.slice([j, 0], [m - j, n]);\n        const tauTimesW: Tensor2D = tau.mul(w);\n        if (j === 0) {\n          r = rjEndAll.sub(tauTimesW.matMul(w.transpose().matMul(rjEndAll)));\n        } else {\n          const rTimesTau: Tensor2D =\n              rjEndAll.sub(tauTimesW.matMul(w.transpose().matMul(rjEndAll)));\n          r = r.slice([0, 0], [j, n]).concat(rTimesTau, 0);\n        }\n        const qAllJEnd = q.slice([0, j], [m, q.shape[1] - j]);\n        if (j === 0) {\n          q = qAllJEnd.sub(qAllJEnd.matMul(w).matMul(tauTimesW.transpose()));\n        } else {\n          const qTimesTau: Tensor2D =\n              qAllJEnd.sub(qAllJEnd.matMul(w).matMul(tauTimesW.transpose()));\n          q = q.slice([0, 0], [m, j]).concat(qTimesTau, 1);\n        }\n        return [w, r, q];\n      });\n      dispose([rTemp, wTemp, qTemp]);\n    }\n\n    if (!fullMatrices && m > n) {\n      q = q.slice([0, 0], [m, n]);\n      r = r.slice([0, 0], [n, n]);\n    }\n\n    return [q, r];\n  }) as [Tensor2D, Tensor2D];\n}\n\nexport const gramSchmidt = op({gramSchmidt_});\nexport const qr = op({qr_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {nonMaxSuppressionImpl} from '../backends/non_max_suppression_impl';\nimport {ENGINE, ForwardFunc} from '../engine';\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Bilinear resize a batch of 3D images to a new shape.\n *\n * @param images The images, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param size The new shape `[newHeight, newWidth]` to resize the\n *     images to. Each channel is resized individually.\n * @param alignCorners Defaults to False. If true, rescale\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n *     corners of images and resized images. If false, rescale by\n *     `new_height / height`. Treat similarly the width dimension.\n */\n/** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */\nfunction resizeBilinear_<T extends Tensor3D|Tensor4D>(\n    images: T|TensorLike, size: [number, number], alignCorners = false): T {\n  const $images = convertToTensor(images, 'images', 'resizeBilinear');\n  util.assert(\n      $images.rank === 3 || $images.rank === 4,\n      () => `Error in resizeBilinear: x must be rank 3 or 4, but got ` +\n          `rank ${$images.rank}.`);\n  util.assert(\n      size.length === 2,\n      () => `Error in resizeBilinear: new shape must 2D, but got shape ` +\n          `${size}.`);\n\n  let batchImages = $images as Tensor4D;\n  let reshapedTo4D = false;\n  if ($images.rank === 3) {\n    reshapedTo4D = true;\n    batchImages =\n        $images.as4D(1, $images.shape[0], $images.shape[1], $images.shape[2]);\n  }\n\n  const [newHeight, newWidth] = size;\n  const forward: ForwardFunc<Tensor4D> = (backend, save) => {\n    save([batchImages]);\n    return backend.resizeBilinear(\n        batchImages, newHeight, newWidth, alignCorners);\n  };\n\n  const backward = (dy: Tensor4D, saved: Tensor[]) => {\n    return {\n      batchImages: () => ENGINE.runKernel(\n          backend => backend.resizeBilinearBackprop(\n              dy, saved[0] as Tensor4D, alignCorners),\n          {})\n    };\n  };\n\n  const res = ENGINE.runKernel(forward, {batchImages}, backward);\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\n/**\n * NearestNeighbor resize a batch of 3D images to a new shape.\n *\n * @param images The images, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param size The new shape `[newHeight, newWidth]` to resize the\n *     images to. Each channel is resized individually.\n * @param alignCorners Defaults to False. If true, rescale\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n *     corners of images and resized images. If false, rescale by\n *     `new_height / height`. Treat similarly the width dimension.\n */\n/** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */\nfunction resizeNearestNeighbor_<T extends Tensor3D|Tensor4D>(\n    images: T|TensorLike, size: [number, number], alignCorners = false): T {\n  const $images = convertToTensor(images, 'images', 'resizeNearestNeighbor');\n  util.assert(\n      $images.rank === 3 || $images.rank === 4,\n      () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got ` +\n          `rank ${$images.rank}.`);\n  util.assert(\n      size.length === 2,\n      () =>\n          `Error in resizeNearestNeighbor: new shape must 2D, but got shape ` +\n          `${size}.`);\n  util.assert(\n      $images.dtype === 'float32' || $images.dtype === 'int32',\n      () => '`images` must have `int32` or `float32` as dtype');\n\n  let batchImages = $images as Tensor4D;\n  let reshapedTo4D = false;\n  if ($images.rank === 3) {\n    reshapedTo4D = true;\n    batchImages =\n        $images.as4D(1, $images.shape[0], $images.shape[1], $images.shape[2]);\n  }\n  const [newHeight, newWidth] = size;\n\n  const forward: ForwardFunc<Tensor4D> = (backend, save) => {\n    save([batchImages]);\n    return backend.resizeNearestNeighbor(\n        batchImages, newHeight, newWidth, alignCorners);\n  };\n\n  const backward = (dy: Tensor4D, saved: Tensor[]) => {\n    return {\n      batchImages: () => ENGINE.runKernel(\n          backend => backend.resizeNearestNeighborBackprop(\n              dy, saved[0] as Tensor4D, alignCorners),\n          {})\n    };\n  };\n\n  const res = ENGINE.runKernel(forward, {batchImages}, backward);\n\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\n/**\n * Performs non maximum suppression of bounding boxes based on\n * iou (intersection over union)\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @return A 1D tensor with the selected box indices.\n */\n/** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */\nfunction nonMaxSuppression_(\n    boxes: Tensor2D|TensorLike, scores: Tensor1D|TensorLike,\n    maxOutputSize: number, iouThreshold = 0.5,\n    scoreThreshold = Number.NEGATIVE_INFINITY): Tensor1D {\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression');\n\n  const inputs = nonMaxSuppSanityCheck(\n      $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\n  maxOutputSize = inputs.maxOutputSize;\n  iouThreshold = inputs.iouThreshold;\n  scoreThreshold = inputs.scoreThreshold;\n\n  return ENGINE.runKernel(\n      b => b.nonMaxSuppression(\n          $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold),\n      {$boxes});\n}\n\n/** This is the async version of `nonMaxSuppression` */\nasync function nonMaxSuppressionAsync_(\n    boxes: Tensor2D|TensorLike, scores: Tensor1D|TensorLike,\n    maxOutputSize: number, iouThreshold = 0.5,\n    scoreThreshold = Number.NEGATIVE_INFINITY): Promise<Tensor1D> {\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n\n  const inputs = nonMaxSuppSanityCheck(\n      $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\n  maxOutputSize = inputs.maxOutputSize;\n  iouThreshold = inputs.iouThreshold;\n  scoreThreshold = inputs.scoreThreshold;\n\n  const [boxesVals, scoresVals] =\n      await Promise.all([$boxes.data(), $scores.data()]);\n  const res = nonMaxSuppressionImpl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n  if ($boxes !== boxes) {\n    $boxes.dispose();\n  }\n  if ($scores !== scores) {\n    $scores.dispose();\n  }\n  return res;\n}\n\nfunction nonMaxSuppSanityCheck(\n    boxes: Tensor2D, scores: Tensor1D, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number):\n    {maxOutputSize: number, iouThreshold: number, scoreThreshold: number} {\n  if (iouThreshold == null) {\n    iouThreshold = 0.5;\n  }\n  if (scoreThreshold == null) {\n    scoreThreshold = Number.NEGATIVE_INFINITY;\n  }\n  const numBoxes = boxes.shape[0];\n  maxOutputSize = Math.min(maxOutputSize, numBoxes);\n\n  util.assert(\n      0 <= iouThreshold && iouThreshold <= 1,\n      () => `iouThreshold must be in [0, 1], but was '${iouThreshold}'`);\n  util.assert(\n      boxes.rank === 2,\n      () => `boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);\n  util.assert(\n      boxes.shape[1] === 4,\n      () =>\n          `boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);\n  util.assert(scores.rank === 1, () => 'scores must be a 1D tensor');\n  util.assert(\n      scores.shape[0] === numBoxes,\n      () => `scores has incompatible shape with boxes. Expected ${numBoxes}, ` +\n          `but was ${scores.shape[0]}`);\n  return {maxOutputSize, iouThreshold, scoreThreshold};\n}\n\n/**\n * Extracts crops from the input image tensor and resizes them using bilinear\n * sampling or nearest neighbor sampling (possibly with aspect ratio change)\n * to a common output size specified by crop_size.\n *\n * @param image 4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,\n *     where imageHeight and imageWidth must be positive, specifying the\n *     batch of images from which to take crops\n * @param boxes 2d float32 tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized\n *     coordinates of the box in the boxInd[i]'th image in the batch\n * @param boxInd 1d int32 tensor of shape `[numBoxes]` with values in range\n *     `[0, batch)` that specifies the image that the `i`-th box refers to.\n * @param cropSize 1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`\n *     specifying the size to which all crops are resized to.\n * @param method Optional string from `'bilinear' | 'nearest'`,\n *     defaults to bilinear, which specifies the sampling method for resizing\n * @param extrapolationValue A threshold for deciding when to remove boxes based\n *     on score. Defaults to 0.\n * @return A 4D tensor of the shape `[numBoxes,cropHeight,cropWidth,depth]`\n */\n/** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */\nfunction cropAndResize_(\n    image: Tensor4D|TensorLike,\n    boxes: Tensor2D|TensorLike,\n    boxInd: Tensor1D|TensorLike,\n    cropSize: [number, number],\n    method?: 'bilinear'|'nearest',\n    extrapolationValue?: number,\n    ): Tensor4D {\n  const $image = convertToTensor(image, 'image', 'cropAndResize', 'float32');\n  const $boxes = convertToTensor(boxes, 'boxes', 'cropAndResize', 'float32');\n  const $boxInd = convertToTensor(boxInd, 'boxInd', 'cropAndResize', 'int32');\n  method = method || 'bilinear';\n  extrapolationValue = extrapolationValue || 0;\n\n  const numBoxes = $boxes.shape[0];\n\n  util.assert(\n      $image.rank === 4,\n      () => 'Error in cropAndResize: image must be rank 4,' +\n          `but got rank ${$image.rank}.`);\n  util.assert(\n      $boxes.rank === 2 && $boxes.shape[1] === 4,\n      () => `Error in cropAndResize: boxes must be have size [${numBoxes},4] ` +\n          `but had shape ${$boxes.shape}.`);\n  util.assert(\n      $boxInd.rank === 1 && $boxInd.shape[0] === numBoxes,\n      () => `Error in cropAndResize: boxInd must be have size [${numBoxes}] ` +\n          `but had shape ${$boxes.shape}.`);\n  util.assert(\n      cropSize.length === 2,\n      () => `Error in cropAndResize: cropSize must be of length 2, but got ` +\n          `length ${cropSize.length}.`);\n  util.assert(\n      cropSize[0] >= 1 && cropSize[1] >= 1,\n      () => `cropSize must be atleast [1,1], but was ${cropSize}`);\n  util.assert(\n      method === 'bilinear' || method === 'nearest',\n      () => `method must be bilinear or nearest, but was ${method}`);\n\n  const forward: ForwardFunc<Tensor4D> = (backend, save) =>\n      backend.cropAndResize(\n          $image, $boxes, $boxInd, cropSize, method, extrapolationValue);\n\n  const res = ENGINE.runKernel(forward, {$image, $boxes});\n  return res;\n}\n\nexport const resizeBilinear = op({resizeBilinear_});\nexport const resizeNearestNeighbor = op({resizeNearestNeighbor_});\nexport const nonMaxSuppression = op({nonMaxSuppression_});\nexport const nonMaxSuppressionAsync = nonMaxSuppressionAsync_;\nexport const cropAndResize = op({cropAndResize_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {conv2dDerFilter, conv2dDerInput} from '../ops/conv';\nimport * as conv_util from '../ops/conv_util';\nimport {op} from '../ops/operation';\nimport {Tensor, Tensor3D, Tensor4D} from '../tensor';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport * as broadcast_util from './broadcast_util';\nimport {Activation} from './fused_util';\n\n/**\n * Computes the dot product of two matrices with optional activation and bias.\n *\n * ```js\n * const a = tf.tensor2d([-1, -2], [1, 2]);\n * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const bias = tf.tensor2d([1, 2], [1, 2]);\n *\n * tf.fused.matMul({a, b, bias, activation: 'relu'}).print();\n * ```\n *\n * @param obj An object with the following properties:\n * - `a` First matrix in dot product operation.\n * - `b` Second matrix in dot product operation.\n * - `transposeA` If true, `a` is transposed before multiplication.\n * - `transposeB` If true, `b` is transposed before multiplication.\n * - `bias` Matrix to be added to the result.\n * - `activation` Name of activation kernel (defaults to `linear`).\n * - `preluActivationWeights` Tensor of prelu weights.\n */\n/** @doc {heading: 'Operations', subheading: 'Matrices', namespace: 'fused'} */\nfunction matMul_<T extends Tensor>({\n  a,\n  b,\n  transposeA = false,\n  transposeB = false,\n  bias,\n  activation = 'linear',\n  preluActivationWeights\n}: {\n  a: T|TensorLike,\n  b: T|TensorLike,\n  transposeA?: boolean,\n  transposeB?: boolean,\n  bias?: Tensor|TensorLike,\n  activation?: Activation,\n  preluActivationWeights?: Tensor\n}): T {\n  let $a = convertToTensor(a, 'a', 'fused matMul');\n  let $b = convertToTensor(b, 'b', 'fused matMul');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const innerShapeA =\n      transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];\n  const innerShapeB =\n      transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];\n\n  const outerShapeA =\n      transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];\n  const outerShapeB =\n      transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];\n\n  const outerDimsA = $a.shape.slice(0, -2);\n  const outerDimsB = $b.shape.slice(0, -2);\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  util.assert(\n      $a.rank >= 2 && $b.rank >= 2 && $a.rank === $b.rank,\n      () =>\n          `Error in fused matMul: inputs must have the same rank of at least ` +\n          `2, got ranks ${$a.rank} and ${$b.rank}.`);\n\n  util.assert(\n      util.arraysEqual(outerDimsA, outerDimsB),\n      () => `Error in fused matMul: outer dimensions (${outerDimsA}) and (` +\n          `${outerDimsB}) of Tensors with shapes ${$a.shape} and ` +\n          `${$b.shape} must match.`);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in fused matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${$a.shape} and ` +\n          `${$b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const outShape = $a.shape.slice(0, -2).concat([outerShapeA, outerShapeB]);\n\n  const a3D = transposeA ? $a.as3D(batchDimA, innerShapeA, outerShapeA) :\n                           $a.as3D(batchDimA, outerShapeA, innerShapeA);\n  const b3D = transposeB ? $b.as3D(batchDimB, outerShapeB, innerShapeB) :\n                           $b.as3D(batchDimB, innerShapeB, outerShapeB);\n\n  let $bias: Tensor;\n  if (bias != null) {\n    $bias = convertToTensor(bias, 'bias', 'fused matMul');\n    [$bias] = makeTypesMatch($bias, $a);\n\n    broadcast_util.assertAndGetBroadcastShape(outShape, $bias.shape);\n  }\n\n  let $preluActivationWeights: Tensor;\n  if (preluActivationWeights != null) {\n    $preluActivationWeights = convertToTensor(\n        preluActivationWeights, 'prelu weights', 'fused matMul');\n  }\n\n  const grad = (dy: Tensor3D, saved: Tensor[]) => {\n    const [a3D, b3D, y] = saved;\n\n    let dyActivation: Tensor3D;\n    if (activation == null || activation === 'linear') {\n      dyActivation = dy;\n    } else if (activation === 'relu') {\n      dyActivation = dy.mul(y.step());\n    } else {\n      throw new Error(\n          `Gradient for activation ${activation} has not been ` +\n          `implemented yet.`);\n    }\n\n    let biasGradient = {};\n    if (bias != null) {\n      biasGradient = {\n        $bias: () => {\n          let res = dyActivation;\n          // Using dyActivation as reference shape because outputShape does not\n          // account for the fact that we temporarily reshape inputs to 3D as\n          // part of batched matMul.\n          const reduceAxes =\n              broadcast_util.getReductionAxes($bias.shape, dyActivation.shape);\n          if (reduceAxes.length > 0) {\n            res = res.sum(reduceAxes);\n          }\n          return res.reshape($bias.shape);\n        }\n      };\n    }\n\n    if (!transposeA && !transposeB) {\n      return Object.assign(\n          {\n            $a: () => dyActivation.matMul(b3D as Tensor3D, false, true),\n            $b: () => a3D.matMul(dyActivation, true, false)\n          },\n          biasGradient);\n    } else if (!transposeA && transposeB) {\n      return Object.assign(\n          {\n            $a: () => dyActivation.matMul(b3D as Tensor3D, false, false),\n            $b: () => dyActivation.matMul(a3D as Tensor3D, true, false)\n          },\n          biasGradient);\n    } else if (transposeA && !transposeB) {\n      return Object.assign(\n          {\n            $a: () => b3D.matMul(dyActivation, false, true),\n            $b: () => a3D.matMul(dyActivation, false, false)\n          },\n          biasGradient);\n    } else {\n      return Object.assign(\n          {\n            $a: () => b3D.matMul(dyActivation, true, true),\n            $b: () => dyActivation.matMul(a3D as Tensor3D, true, true)\n          },\n          biasGradient);\n    }\n  };\n\n  const inputs: {\n    $a: Tensor,\n    $b: Tensor,\n    $bias?: Tensor,\n    $preluActivationWeights?: Tensor\n  } = {$a: a3D, $b: b3D};\n  if (bias != null) {\n    inputs.$bias = $bias;\n  }\n  if (preluActivationWeights != null) {\n    inputs.$preluActivationWeights = $preluActivationWeights;\n  }\n\n  const res = ENGINE.runKernel((backend, save) => {\n    const y = backend.fusedBatchMatMul({\n      a: a3D,\n      b: b3D,\n      transposeA,\n      transposeB,\n      bias: $bias,\n      activation,\n      preluActivationWeights: $preluActivationWeights\n    });\n    save([a3D, b3D, y]);\n    return y;\n  }, inputs, grad);\n  return res.reshape(outShape) as T;\n}\n\n/**\n * Computes a 2D convolution over the input x, optionally fused with adding a\n * bias and applying an activation.\n *\n * ```js\n * const inputDepth = 2;\n * const inShape = [2, 2, 2, inputDepth];\n * const outputDepth = 2;\n * const fSize = 1;\n * const pad = 0;\n * const strides = 1;\n *\n * const x = tf.tensor4d( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n * 16], inShape);\n * const w = tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth,\n * outputDepth]);\n *\n * tf.fused.conv2d({ x, filter: w, strides, pad, dataFormat: 'NHWC',\n * dilations: [1, 1], bias: tf.scalar(5), activation: 'relu' }).print();\n * ```\n *\n * @param obj An object with the following properties:\n * - `x` The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * - `filter` The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * - `strides` The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * - `pad` The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * - `dataFormat` An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * - `dilations` The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * - `dimRoundingMode` The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n * - `bias` Tensor to be added to the result.\n * - `activation` Name of activation kernel (defaults to `linear`) to be applied\n *      after biasAdd.\n * - `preluActivationWeights` Tensor of prelu weights to be applied as part of a\n *     `prelu` activation, typically the same shape as `x`.\n */\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction conv2d_<T extends Tensor3D|Tensor4D>({\n  x,\n  filter,\n  strides,\n  pad,\n  dataFormat = 'NHWC',\n  dilations = [1, 1],\n  dimRoundingMode,\n  bias,\n  activation = 'linear',\n  preluActivationWeights\n}: {\n  x: T|TensorLike,\n  filter: Tensor4D|TensorLike,\n  strides: [number, number]|number,\n  pad: 'valid'|'same'|number,\n  dataFormat?: 'NHWC'|'NCHW',\n  dilations?: [number, number]|number,\n  dimRoundingMode?: 'floor'|'round'|'ceil',\n  bias?: Tensor|TensorLike,\n  activation?: Activation,\n  preluActivationWeights?: Tensor\n}): T {\n  const $x = convertToTensor(x, 'x', 'conv2d');\n  const $filter = convertToTensor(filter, 'filter', 'conv2d');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in fused conv2d: input must be rank 4, but got rank ` +\n          `${x4D.rank}.`);\n  util.assert(\n      $filter.rank === 4,\n      () => `Error in fused conv2d: filter must be rank 4, but got rank ` +\n          `${$filter.rank}.`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in fused conv2d: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  util.assert(\n      x4D.shape[3] === $filter.shape[2],\n      () => `Error in conv2d: depth of input (${x4D.shape[3]}) must match ` +\n          `input depth for filter ${$filter.shape[2]}.`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in conv2D: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n  util.assert(\n      dataFormat === 'NHWC',\n      () => `Error in conv2d: got dataFormat of ${\n          dataFormat} but only NHWC is currently supported.`);\n\n  const convInfo = conv_util.computeConv2DInfo(\n      x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode);\n\n  let $bias: Tensor;\n  if (bias != null) {\n    $bias = convertToTensor(bias, 'bias', 'fused conv2d');\n    [$bias] = makeTypesMatch($bias, $x);\n\n    broadcast_util.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);\n  }\n\n  let $preluActivationWeights: Tensor;\n  if (preluActivationWeights != null) {\n    $preluActivationWeights = convertToTensor(\n        preluActivationWeights, 'prelu weights', 'fused conv2d');\n  }\n\n  const grad = (dy: Tensor4D, saved: Tensor[]) => {\n    const [$filter, x4D, y] = saved as [Tensor4D, Tensor4D, Tensor4D];\n\n    let dyActivation: Tensor4D;\n    if (activation == null || activation === 'linear') {\n      dyActivation = dy;\n    } else if (activation === 'relu') {\n      dyActivation = dy.mul(y.step());\n    } else {\n      throw new Error(\n          `Gradient for activation ${activation} has not been ` +\n          `implemented yet.`);\n    }\n\n    util.assert(\n        conv_util.tupleValuesAreOne(dilations),\n        () => 'Error in gradient of fused conv2D: ' +\n            `dilation rates greater than 1 ` +\n            `are not yet supported in gradients. Got dilations '${dilations}'`);\n\n    let biasGradient = {};\n    if (bias != null) {\n      biasGradient = {\n        $bias: () => {\n          let res = dyActivation;\n          const reduceAxes =\n              broadcast_util.getReductionAxes($bias.shape, dyActivation.shape);\n          if (reduceAxes.length > 0) {\n            res = res.sum(reduceAxes);\n          }\n          return res.reshape($bias.shape);\n        }\n      };\n    }\n\n    return Object.assign(\n        {\n          x: () =>\n              conv2dDerInput(x4D.shape, dyActivation, $filter, strides, pad),\n          $filter: () =>\n              conv2dDerFilter(x4D, dyActivation, $filter.shape, strides, pad)\n        },\n        biasGradient);\n  };\n\n  const inputs: {\n    x: Tensor,\n    $filter: Tensor,\n    $bias?: Tensor,\n    $preluActivationWeights?: Tensor\n  } = {x: x4D, $filter};\n  if (bias != null) {\n    inputs.$bias = $bias;\n  }\n  if (preluActivationWeights != null) {\n    inputs.$preluActivationWeights = $preluActivationWeights;\n  }\n\n  const res = ENGINE.runKernel((backend, save) => {\n    const res = backend.fusedConv2d(\n        x4D, $filter, convInfo, $bias as Tensor4D, activation,\n        $preluActivationWeights);\n    save([$filter, x4D, res]);\n\n    return res;\n  }, inputs, grad);\n\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\nexport const matMul = op({matMul_});\nexport const conv2d = op({conv2d_});\n\nexport {Activation};\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as seedrandom from 'seedrandom';\n\nimport {ENGINE} from '../../engine';\nimport {ENV} from '../../environment';\nimport {warn} from '../../log';\nimport * as array_ops_util from '../../ops/array_ops_util';\nimport * as axis_util from '../../ops/axis_util';\nimport * as broadcast_util from '../../ops/broadcast_util';\nimport {complex, imag, real} from '../../ops/complex_ops';\nimport * as concat_util from '../../ops/concat_util';\nimport {Conv2DInfo, Conv3DInfo} from '../../ops/conv_util';\nimport * as erf_util from '../../ops/erf_util';\nimport {Activation, FusedBatchMatMulConfig} from '../../ops/fused_util';\nimport * as gather_nd_util from '../../ops/gather_nd_util';\nimport * as ops from '../../ops/ops';\nimport {buffer, scalar, tensor, tensor3d, tensor4d} from '../../ops/ops';\nimport * as scatter_nd_util from '../../ops/scatter_nd_util';\nimport * as selu_util from '../../ops/selu_util';\nimport {computeFlatOffset, computeOutShape, isSliceContinous} from '../../ops/slice_util';\nimport {DataId, Scalar, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Tensor5D, TensorBuffer} from '../../tensor';\nimport {BackendValues, DataType, DataValues, NumericDataType, PixelData, Rank, ShapeMap, TypedArray, upcastType} from '../../types';\nimport * as util from '../../util';\nimport {getArrayFromDType, inferDtype, now, sizeFromShape} from '../../util';\nimport {BackendTimingInfo, DataStorage, EPSILON_FLOAT32, KernelBackend} from '../backend';\nimport * as backend_util from '../backend_util';\nimport * as complex_util from '../complex_util';\nimport {nonMaxSuppressionImpl} from '../non_max_suppression_impl';\nimport {split} from '../split_shared';\nimport {tile} from '../tile_impl';\nimport {topkImpl} from '../topk_impl';\nimport {whereImpl} from '../where_impl';\n\nfunction mapActivation(\n    backend: MathBackendCPU, x: Tensor, activation: Activation,\n    preluActivationWeights?: Tensor): Tensor {\n  if (activation === 'linear') {\n    return backend.linear(x);\n  } else if (activation === 'relu') {\n    return backend.relu(x);\n  } else if (activation === 'elu') {\n    return backend.elu(x);\n  } else if (activation === 'prelu') {\n    return backend.prelu(x, preluActivationWeights);\n  }\n  throw new Error(\n      `Activation ${activation} has not been implemented for the CPU backend.`);\n}\n\ninterface TensorData<D extends DataType> {\n  values?: BackendValues;\n  dtype: D;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensors field. When this is defined, texture will be null.\n  complexTensors?: {real: Tensor, imag: Tensor};\n}\n\nfunction createCanvas() {\n  if (typeof OffscreenCanvas !== 'undefined') {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  }\n  return null;\n}\n\nexport class MathBackendCPU implements KernelBackend {\n  public blockSize = 48;\n\n  private data: DataStorage<TensorData<DataType>>;\n  private fromPixels2DContext: CanvasRenderingContext2D|\n      OffscreenCanvasRenderingContext2D;\n  private firstUse = true;\n\n  constructor() {\n    if (ENV.get('IS_BROWSER')) {\n      const canvas = createCanvas();\n      if (canvas !== null) {\n        this.fromPixels2DContext =\n            canvas.getContext('2d') as CanvasRenderingContext2D;\n      }\n    }\n    this.data = new DataStorage(this, ENGINE);\n  }\n\n  register(dataId: DataId, shape: number[], dtype: DataType): void {\n    if (this.firstUse) {\n      this.firstUse = false;\n      if (ENV.get('IS_NODE')) {\n        warn(\n            '\\n============================\\n' +\n            'Hi there 👋. Looks like you are running TensorFlow.js in ' +\n            'Node.js. To speed things up dramatically, install our node ' +\n            'backend, which binds to TensorFlow C++, by running ' +\n            'npm i @tensorflow/tfjs-node, ' +\n            'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. ' +\n            'Then call require(\\'@tensorflow/tfjs-node\\'); (-gpu ' +\n            'suffix for CUDA) at the start of your program. ' +\n            'Visit https://github.com/tensorflow/tfjs-node for more details.' +\n            '\\n============================\\n');\n      }\n    }\n    if (this.data.has(dataId)) {\n      throw new Error(`Data buffer is already registered`);\n    }\n    this.data.set(dataId, {dtype});\n  }\n  write(dataId: DataId, values: BackendValues): void {\n    if (values == null) {\n      throw new Error('MathBackendCPU.write(): values can not be null');\n    }\n    this.data.get(dataId).values = values;\n  }\n  fromPixels(\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      HTMLVideoElement,\n      numChannels: number): Tensor3D {\n    if (pixels == null) {\n      throw new Error(\n          'pixels passed to tf.browser.fromPixels() can not be null');\n    }\n\n    const isPixelData = (pixels as PixelData).data instanceof Uint8Array;\n    const isImageData =\n        typeof (ImageData) !== 'undefined' && pixels instanceof ImageData;\n    const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n        pixels instanceof HTMLVideoElement;\n    const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n        pixels instanceof HTMLImageElement;\n    const [width, height] = isVideo ?\n        [\n          (pixels as HTMLVideoElement).videoWidth,\n          (pixels as HTMLVideoElement).videoHeight\n        ] :\n        [pixels.width, pixels.height];\n    let vals: Uint8ClampedArray|Uint8Array;\n    // tslint:disable-next-line:no-any\n    if (ENV.get('IS_NODE') && (pixels as any).getContext == null) {\n      throw new Error(\n          'When running in node, pixels must be an HTMLCanvasElement ' +\n          'like the one returned by the `canvas` npm package');\n    }\n    // tslint:disable-next-line:no-any\n    if ((pixels as any).getContext != null) {\n      // tslint:disable-next-line:no-any\n      vals = (pixels as any)\n                 .getContext('2d')\n                 .getImageData(0, 0, width, height)\n                 .data;\n    } else if (isImageData || isPixelData) {\n      vals = (pixels as PixelData | ImageData).data;\n    } else if (isImage || isVideo) {\n      if (this.fromPixels2DContext == null) {\n        throw new Error(\n            'Can\\'t read pixels from HTMLImageElement outside ' +\n            'the browser.');\n      }\n      this.fromPixels2DContext.canvas.width = width;\n      this.fromPixels2DContext.canvas.height = height;\n      this.fromPixels2DContext.drawImage(\n          pixels as HTMLVideoElement, 0, 0, width, height);\n      vals = this.fromPixels2DContext.getImageData(0, 0, width, height).data;\n    } else {\n      throw new Error(\n          'pixels passed to tf.browser.fromPixels() must be either an ' +\n          `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` +\n          `or {data: Uint32Array, width: number, height: number}, ` +\n          `but was ${(pixels as {}).constructor.name}`);\n    }\n    let values: Int32Array;\n    if (numChannels === 4) {\n      values = new Int32Array(vals);\n    } else {\n      const numPixels = width * height;\n      values = new Int32Array(numPixels * numChannels);\n      for (let i = 0; i < numPixels; i++) {\n        for (let channel = 0; channel < numChannels; ++channel) {\n          values[i * numChannels + channel] = vals[i * 4 + channel];\n        }\n      }\n    }\n    const outShape: [number, number, number] = [height, width, numChannels];\n    return tensor3d(values, outShape, 'int32');\n  }\n  async read(dataId: DataId): Promise<BackendValues> {\n    return this.readSync(dataId);\n  }\n  readSync(dataId: DataId): BackendValues {\n    const {dtype, complexTensors} = this.data.get(dataId);\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensors.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensors.imag.dataId) as Float32Array;\n      return complex_util.mergeRealAndImagArrays(realValues, imagValues);\n    }\n    return this.data.get(dataId).values;\n  }\n\n  private bufferSync<R extends Rank>(t: Tensor<R>): TensorBuffer<R> {\n    const data = this.readSync(t.dataId);\n    let decodedData = data as DataValues;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = (data as Uint8Array[]).map(d => util.decodeString(d));\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape, t.dtype, decodedData) as TensorBuffer<R>;\n  }\n\n  disposeData(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const {complexTensors} = this.data.get(dataId);\n      if (complexTensors != null) {\n        complexTensors.real.dispose();\n        complexTensors.imag.dispose();\n      }\n      this.data.delete(dataId);\n    }\n  }\n\n  async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = now();\n    f();\n    const kernelMs = now() - start;\n    return {kernelMs};\n  }\n\n  memory() {\n    return {\n      // Unreliable due to automatic gc. The numbers above are cumulative.\n      unreliable: true,\n      reasons:\n          ['The reported memory is an upper bound. Due to automatic garbage ' +\n           'collection, the true allocated memory may be less.']\n    };\n  }\n\n  complex<T extends Tensor>(real: T, imag: T): T {\n    const result = Tensor.make(real.shape, {}, 'complex64');\n\n    const resultData = this.data.get(result.dataId);\n    // The backend owns the reference to the underlying real and imaginary\n    // clones. These will explicitly get disposed when the complex tensor is\n    // disposed.\n    resultData.complexTensors = {\n      real: ENGINE.keep(real.clone()),\n      imag: ENGINE.keep(imag.clone())\n    };\n\n    return result as T;\n  }\n  real<T extends Tensor>(input: T): T {\n    const resultData = this.data.get(input.dataId);\n    return resultData.complexTensors.real.clone() as T;\n  }\n  imag<T extends Tensor>(input: T): T {\n    const resultData = this.data.get(input.dataId);\n    return resultData.complexTensors.imag.clone() as T;\n  }\n\n  private assertNotComplex(tensor: Tensor|Tensor[], opName: string) {\n    if (!Array.isArray(tensor)) {\n      tensor = [tensor];\n    }\n    tensor.forEach(t => {\n      if (t != null) {\n        util.assert(\n            t.dtype !== 'complex64',\n            () => `${opName} does not support complex64 tensors.`);\n      }\n    });\n  }\n\n  slice<T extends Tensor>(x: T, begin: number[], size: number[]): T {\n    this.assertNotComplex(x, 'slice');\n\n    const isContinous = isSliceContinous(x.shape, begin, size);\n    if (isContinous) {\n      const flatOffset = computeFlatOffset(begin, x.strides);\n      const length = util.sizeFromShape(size);\n      const vals = this.readSync(x.dataId) as TypedArray;\n      return tensor(\n                 vals.subarray(flatOffset, flatOffset + length), size,\n                 x.dtype) as T;\n    }\n\n    const buffer = ops.buffer(size, x.dtype);\n    const xBuf = this.bufferSync(x);\n    for (let i = 0; i < buffer.size; ++i) {\n      const loc = buffer.indexToLoc(i);\n      const xLoc = loc.map((idx, j) => idx + begin[j]);\n      buffer.values[i] = xBuf.get(...xLoc);\n    }\n    return buffer.toTensor() as T;\n  }\n\n  stridedSlice<T extends Tensor>(\n      x: T, begin: number[], end: number[], strides: number[]): T {\n    this.assertNotComplex(x, 'stridedSlice');\n\n    const outShape = computeOutShape(begin, end, strides);\n\n    if (outShape.some(axis => axis === 0)) {\n      return ops.tensor([], outShape) as T;\n    }\n\n    const buffer = ops.buffer(outShape, x.dtype);\n    const xBuf = this.bufferSync(x);\n    for (let i = 0; i < buffer.size; i++) {\n      const loc = buffer.indexToLoc(i);\n\n      const newLoc: number[] = new Array(loc.length);\n      for (let j = 0; j < newLoc.length; j++) {\n        newLoc[j] = loc[j] * strides[j] + begin[j];\n      }\n      buffer.set(xBuf.get(...newLoc), ...loc);\n    }\n\n    return buffer.toTensor() as T;\n  }\n\n  diag(x: Tensor): Tensor {\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const buffer = ops.buffer([x.size, x.size], x.dtype);\n    const vals = buffer.values;\n    for (let i = 0; i < xVals.length; i++) {\n      vals[i * x.size + i] = xVals[i];\n    }\n    return buffer.toTensor();\n  }\n\n  unstack(x: Tensor, axis: number): Tensor[] {\n    const num = x.shape[axis];\n    const outShape: number[] = new Array(x.rank - 1);\n    let outIndex = 0;\n    for (let i = 0; i < x.rank; i++) {\n      if (i !== axis) {\n        outShape[outIndex++] = x.shape[i];\n      }\n    }\n\n    const begin = new Array(x.rank).fill(0);\n    const size = x.shape.slice();\n    size[axis] = 1;\n    const res = new Array(num);\n    for (let i = 0; i < res.length; i++) {\n      begin[axis] = i;\n      res[i] = this.slice(x, begin, size).reshape(outShape);\n    }\n    return res;\n  }\n\n  reverse<T extends Tensor>(x: T, axis: number[]): T {\n    this.assertNotComplex(x, 'reverse');\n\n    const buffer = ops.buffer(x.shape, x.dtype);\n    const xBuf = this.bufferSync(x);\n\n    for (let i = 0; i < buffer.size; i++) {\n      const outLoc = buffer.indexToLoc(i);\n      const inLoc = outLoc.slice();\n      axis.forEach(ax => inLoc[ax] = x.shape[ax] - 1 - inLoc[ax]);\n      buffer.set(xBuf.get(...inLoc), ...outLoc);\n    }\n\n    return buffer.toTensor() as T;\n  }\n\n  concat(tensors: Tensor[], axis: number): Tensor {\n    if (tensors[0].dtype === 'complex64') {\n      const reals = tensors.map((t) => real(t));\n      const imags = tensors.map((t) => imag(t));\n      return complex(this.concat(reals, axis), this.concat(imags, axis));\n    }\n    const tensors2D = tensors.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      return t.as2D(-1, innerSize);\n    });\n    const outShape =\n        concat_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n    const values =\n        ops.buffer(outShape as [number, number], tensors[0].dtype as 'float32')\n            .values;\n    if (tensors2D[0].shape[0] === 1) {\n      // Use built-in TypedArray.set() method for speed.\n      let offset = 0;\n      tensors2D.forEach(t => {\n        values.set(this.readSync(t.dataId) as TypedArray, offset);\n        offset += t.size;\n      });\n    } else {\n      let colOffset = 0;\n      tensors2D.forEach(t => {\n        const tVals = this.readSync(t.dataId) as TypedArray;\n        let tIdx = 0;\n        for (let row = 0; row < t.shape[0]; ++row) {\n          const resIdx = row * outShape[1] + colOffset;\n          for (let col = 0; col < t.shape[1]; ++col) {\n            values[resIdx + col] = tVals[tIdx++];\n          }\n        }\n        colOffset += t.shape[1];\n      });\n    }\n    const finalOutShape =\n        concat_util.computeOutShape(tensors.map(t => t.shape), axis);\n    return tensor(values, finalOutShape, tensors[0].dtype);\n  }\n\n  neg<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'neg');\n\n    return this.multiply(ops.scalar(-1), x) as T;\n  }\n\n  add(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      return this.broadcastedBinaryComplexOp(\n          a.cast('complex64'), b.cast('complex64'),\n          (aReal, aImag, bReal, bImag) => {\n            return {real: aReal + bReal, imag: aImag + bImag};\n          });\n    }\n\n    return this.broadcastedBinaryOp(\n        a, b, upcastType(a.dtype, b.dtype),\n        (aValue, bValue) => aValue + bValue);\n  }\n\n  addN<T extends Tensor>(tensors: T[]): T {\n    this.assertNotComplex(tensors, 'addN');\n\n    const vals = tensors.map(t => this.readSync(t.dataId) as TypedArray);\n    const result = ops.buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n    const resultVals = result.values;\n    for (let i = 0; i < tensors.length; i++) {\n      const currVals = vals[i];\n      for (let j = 0; j < resultVals.length; j++) {\n        resultVals[j] += currVals[j];\n      }\n    }\n    return result.toTensor() as T;\n  }\n\n  subtract(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      return this.broadcastedBinaryComplexOp(\n          a.cast('complex64'), b.cast('complex64'),\n          (aReal, aImag, bReal, bImag) => {\n            return {real: aReal - bReal, imag: aImag - bImag};\n          });\n    }\n\n    return this.broadcastedBinaryOp(\n        a, b, upcastType(a.dtype, b.dtype),\n        (aValue, bValue) => aValue - bValue);\n  }\n\n  pow<T extends Tensor>(a: T, b: Tensor): T {\n    this.assertNotComplex([a, b], 'pow');\n\n    return this.broadcastedBinaryOp(\n               a, b, a.dtype, (aValue, bValue) => Math.pow(aValue, bValue)) as\n        T;\n  }\n\n  batchMatMul(\n      a: Tensor3D, b: Tensor3D, transposeA: boolean,\n      transposeB: boolean): Tensor3D {\n    this.assertNotComplex([a, b], 'matMul');\n\n    const sharedDim = transposeA ? a.shape[1] : a.shape[2];\n    const leftDim = transposeA ? a.shape[2] : a.shape[1];\n    const rightDim = transposeB ? b.shape[1] : b.shape[2];\n    const batchDim = a.shape[0];\n\n    const aValues = this.readSync(a.dataId) as TypedArray;\n    const bValues = this.readSync(b.dataId) as TypedArray;\n    const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n        [a.strides[0], 1, a.strides[1]] :\n        [a.strides[0], a.strides[1], 1];\n    const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n        [1, b.strides[1], b.strides[0]] :\n        [b.strides[1], 1, b.strides[0]];\n\n    const size = leftDim * rightDim;\n    const result = buffer([batchDim, leftDim, rightDim], a.dtype);\n    const resVals = result.values as TypedArray;\n    const blockSize = this.blockSize;\n\n    for (let b = 0; b < batchDim; b++) {\n      for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n        for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n          for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n            // for when blockSize doesn't evenly divide the input\n            const iBlock = Math.min(i0 + blockSize, leftDim);\n            const jBlock = Math.min(j0 + blockSize, rightDim);\n            const kBlock = Math.min(k0 + blockSize, sharedDim);\n\n            for (let i = i0; i < iBlock; i++) {\n              for (let j = j0; j < jBlock; j++) {\n                let sum = 0.0;\n\n                for (let k = k0; k < kBlock; k++) {\n                  sum += aValues[b * aBatch + i * aOuterStep + k * aInnerStep] *\n                      bValues[k * bInnerStep + j * bOuterStep + b * bBatch];\n                }\n                resVals[b * size + (i * rightDim + j)] += sum;\n              }\n            }\n          }\n        }\n      }\n    }\n    return result.toTensor() as Tensor3D;\n  }\n\n  fusedBatchMatMul(\n      {a, b, transposeA, transposeB, bias, activation, preluActivationWeights}:\n          FusedBatchMatMulConfig): Tensor3D {\n    let result = this.batchMatMul(a, b, transposeA, transposeB);\n    if (bias) {\n      result = this.add(result, bias) as Tensor3D;\n    }\n    if (activation) {\n      result =\n          mapActivation(this, result, activation, preluActivationWeights) as\n          Tensor3D;\n    }\n    return result;\n  }\n\n  multiply(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      return this.broadcastedBinaryComplexOp(\n          a.cast('complex64'), b.cast('complex64'),\n          (aReal, aImag, bReal, bImag) => {\n            return {\n              real: aReal * bReal - aImag * bImag,\n              imag: aReal * bImag + aImag * bReal\n            };\n          });\n    }\n\n    return this.broadcastedBinaryOp(\n        a, b, upcastType(a.dtype, b.dtype),\n        (aValue, bValue) => aValue * bValue);\n  }\n\n  realDivide(a: Tensor, b: Tensor): Tensor {\n    this.assertNotComplex([a, b], 'realDivide');\n\n    const op = (a: number, b: number) => a / b;\n    const outputDtype = 'float32';\n    return this.broadcastedBinaryOp(a, b, outputDtype, op);\n  }\n\n  floorDiv(a: Tensor, b: Tensor): Tensor {\n    this.assertNotComplex([a, b], 'floorDiv');\n\n    const op = (a: number, b: number) => Math.floor(a / b);\n    const outputDtype = 'int32';\n    return this.broadcastedBinaryOp(a, b, outputDtype, op);\n  }\n\n  sum(x: Tensor, axes: number[]): Tensor {\n    this.assertNotComplex(x, 'sum');\n\n    axis_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const resultDtype = upcastType(x.dtype, 'int32');\n    const result = ops.zeros(outShape, resultDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let sum = 0;\n      for (let j = 0; j < reduceSize; ++j) {\n        sum += aVals[offset + j];\n      }\n      vals[i] = sum;\n    }\n    return result;\n  }\n\n  prod(x: Tensor, axes: number[]): Tensor {\n    this.assertNotComplex(x, 'sum');\n\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const resultDtype = upcastType(x.dtype, 'int32');\n    const result = ops.zeros(outShape, resultDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let prod = 1;\n      for (let j = 0; j < reduceSize; ++j) {\n        prod *= aVals[offset + j];\n      }\n      vals[i] = prod;\n    }\n    return result;\n  }\n\n  unsortedSegmentSum<T extends Tensor>(\n      x: T, segmentIds: Tensor1D, numSegments: number): Tensor {\n    this.assertNotComplex(x, 'unsortedSegmentSum');\n\n    const res = [];\n\n    // Reshape the segment id's so that they can be broadcast with\n    // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n    const numIters = x.rank - segmentIds.rank;\n    for (let i = 0; i < numIters; ++i) {\n      segmentIds = segmentIds.expandDims(i + 1);\n    }\n\n    for (let i = 0; i < numSegments; ++i) {\n      const segmentId = ops.scalar(i, 'int32');\n      const mask = ops.equal(segmentId, segmentIds).asType('float32');\n      const sum = mask.mul(x).sum(0);\n      res.push(sum);\n    }\n\n    return ops.stack(res);\n  }\n\n  argMin(x: Tensor, axis: number): Tensor {\n    this.assertNotComplex(x, 'argMin');\n\n    const axes = [axis];\n    axis_util.assertAxesAreInnerMostDims('argMin', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = ops.zeros(outShape, 'int32');\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let min = aVals[offset];\n      let minIndex = 0;\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        if (value < min) {\n          min = value;\n          minIndex = j;\n        }\n      }\n      vals[i] = minIndex;\n    }\n    return result;\n  }\n\n  argMax(x: Tensor, axis: number): Tensor {\n    this.assertNotComplex(x, 'argMax');\n\n    const axes = [axis];\n    axis_util.assertAxesAreInnerMostDims('argMax', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = ops.zeros(outShape, 'int32');\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let max = aVals[offset];\n      let maxIndex = 0;\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        if (value > max) {\n          max = value;\n          maxIndex = j;\n        }\n      }\n      vals[i] = maxIndex;\n    }\n    return result;\n  }\n\n  cumsum(x: Tensor, axis: number, exclusive: boolean, reverse: boolean):\n      Tensor {\n    this.assertNotComplex(x, 'cumsum');\n\n    if (axis !== x.rank - 1) {\n      throw new Error(\n          `backend.cumsum in CPU expects an inner-most axis=${x.rank - 1} ` +\n          `but got axis=${axis}`);\n    }\n    const resultDtype = upcastType(x.dtype, 'int32');\n    const result = ops.zeros(x.shape, resultDtype);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    const finalDim = x.shape[x.rank - 1];\n    const indexAdjuster = reverse ?\n        (i: number, j: number) => i + finalDim - j - 1 :\n        (i: number, j: number) => i + j;\n    for (let i = 0; i < aVals.length; i += finalDim) {\n      for (let j = 0; j < finalDim; j++) {\n        const idx = indexAdjuster(i, j);\n        if (j === 0) {\n          vals[idx] = exclusive ? 0 : aVals[idx];\n        } else {\n          const prevIdx = indexAdjuster(i, j - 1);\n          vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                                  aVals[idx] + vals[prevIdx];\n        }\n      }\n    }\n    return result;\n  }\n\n  equal(a: Tensor, b: Tensor): Tensor {\n    this.assertNotComplex([a, b], 'equal');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal === bVal) ? 1 : 0;\n    });\n  }\n\n  notEqual(a: Tensor, b: Tensor): Tensor {\n    this.assertNotComplex([a, b], 'notEqual');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal !== bVal) ? 1 : 0;\n    });\n  }\n\n  less(a: Tensor, b: Tensor): Tensor {\n    this.assertNotComplex([a, b], 'less');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal < bVal) ? 1 : 0;\n    });\n  }\n\n  lessEqual(a: Tensor, b: Tensor): Tensor {\n    this.assertNotComplex([a, b], 'lessEqual');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal <= bVal) ? 1 : 0;\n    });\n  }\n\n  greater(a: Tensor, b: Tensor): Tensor {\n    this.assertNotComplex([a, b], 'greater');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal > bVal) ? 1 : 0;\n    });\n  }\n\n  greaterEqual(a: Tensor, b: Tensor): Tensor {\n    this.assertNotComplex([a, b], 'greaterEqual');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal >= bVal) ? 1 : 0;\n    });\n  }\n\n  logicalNot<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'logicalNot');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Uint8Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = values[i] ? 0 : 1;\n    }\n    return Tensor.make(x.shape, {values: newValues}, 'bool');\n  }\n\n  logicalAnd(a: Tensor, b: Tensor): Tensor {\n    this.assertNotComplex([a, b], 'logicalAnd');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return aVal && bVal;\n    });\n  }\n\n  logicalOr(a: Tensor, b: Tensor): Tensor {\n    this.assertNotComplex([a, b], 'logicalOr');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return aVal || bVal;\n    });\n  }\n\n  select(condition: Tensor, a: Tensor, b: Tensor): Tensor {\n    this.assertNotComplex([condition, a, b], 'select');\n\n    const values = this.readSync(condition.dataId) as TypedArray;\n    const aValues = this.readSync(a.dataId) as TypedArray;\n    const bValues = this.readSync(b.dataId) as TypedArray;\n    const result = ops.zeros(a.shape, upcastType(a.dtype, b.dtype));\n    const newValues = this.readSync(result.dataId) as TypedArray;\n    let index = 0;\n    const offset = condition.rank === 0 || condition.rank > 1 || a.rank === 1 ?\n        1 :\n        a.shape[1];\n\n    for (let i = 0; i < values.length; i++) {\n      for (let j = 0; j < offset; j++) {\n        if (values[i] === 1) {\n          newValues[index++] = aValues[i];\n        } else {\n          newValues[index++] = bValues[i];\n        }\n      }\n    }\n    return result;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    this.assertNotComplex([condition], 'where');\n\n    const condVals = this.readSync(condition.dataId) as TypedArray;\n    return whereImpl(condition.shape, condVals);\n  }\n\n  topk<T extends Tensor>(x: T, k: number, sorted: boolean): [T, T] {\n    this.assertNotComplex(x, 'topk');\n\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    return topkImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n  }\n\n  min(x: Tensor, axes: number[]): Tensor {\n    this.assertNotComplex(x, 'min');\n\n    axis_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = ops.zeros(outShape, x.dtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let min = aVals[offset];\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        if (value < min) {\n          min = value;\n        }\n      }\n      vals[i] = min;\n    }\n    return result;\n  }\n\n  minimum(a: Tensor, b: Tensor): Tensor {\n    this.assertNotComplex([a, b], 'minimum');\n\n    return this.broadcastedBinaryOp(\n        a, b, a.dtype, (aVal, bVal) => Math.min(aVal, bVal));\n  }\n\n  mod(a: Tensor, b: Tensor): Tensor {\n    this.assertNotComplex([a, b], 'mod');\n\n    return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => {\n      const rem = aVal % bVal;\n      if ((aVal < 0 && bVal < 0) || (aVal >= 0 && bVal >= 0)) {\n        return rem;\n      } else {\n        return (rem + bVal) % bVal;\n      }\n    });\n  }\n\n  max(x: Tensor, axes: number[]): Tensor {\n    this.assertNotComplex(x, 'max');\n\n    axis_util.assertAxesAreInnerMostDims('max', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = ops.zeros(outShape, x.dtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let max = aVals[offset];\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        if (value > max) {\n          max = value;\n        }\n      }\n      vals[i] = max;\n    }\n    return result;\n  }\n\n  maximum(a: Tensor, b: Tensor): Tensor {\n    this.assertNotComplex([a, b], 'maximum');\n\n    return this.broadcastedBinaryOp(\n        a, b, a.dtype, (aVal, bVal) => Math.max(aVal, bVal));\n  }\n\n  all(x: Tensor, axes: number[]): Tensor {\n    this.assertNotComplex(x, 'all');\n\n    axis_util.assertAxesAreInnerMostDims('all', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = ops.zeros(outShape, x.dtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let all = aVals[offset];\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        all = all && value;\n      }\n      vals[i] = all;\n    }\n    return result;\n  }\n\n  any(x: Tensor, axes: number[]): Tensor {\n    this.assertNotComplex(x, 'any');\n\n    axis_util.assertAxesAreInnerMostDims('any', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = ops.zeros(outShape, x.dtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let anyVal = aVals[offset];\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        anyVal = anyVal || value;\n      }\n      vals[i] = anyVal;\n    }\n    return result;\n  }\n\n  squaredDifference(a: Tensor, b: Tensor): Tensor {\n    this.assertNotComplex([a, b], 'squaredDifference');\n\n    return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => {\n      const diff = aVal - bVal;\n      return diff * diff;\n    });\n  }\n\n  ceil<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'ceil');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = Math.ceil(values[i]);\n    }\n    return Tensor.make(x.shape, {values: newValues});\n  }\n\n  floor<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'floor');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = Math.floor(values[i]);\n    }\n    return Tensor.make(x.shape, {values: newValues});\n  }\n\n  sign<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'x');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      if (values[i] < 0) {\n        newValues[i] = -1;\n      } else if (values[i] > 0) {\n        newValues[i] = 1;\n      } else {\n        newValues[i] = 0;\n      }\n    }\n    return Tensor.make(x.shape, {values: newValues});\n  }\n\n  isNaN<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'x');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Uint8Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      if (Number.isNaN(values[i])) {\n        newValues[i] = 1;\n      }\n    }\n    return Tensor.make(x.shape, {values: newValues}, 'bool');\n  }\n\n  isInf<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'x');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Uint8Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      if (Math.abs(values[i]) === Infinity) {\n        newValues[i] = 1;\n      }\n    }\n    return Tensor.make(x.shape, {values: newValues}, 'bool');\n  }\n\n  isFinite<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'x');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Uint8Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      if (Number.isFinite(values[i])) {\n        newValues[i] = 1;\n      }\n    }\n    return Tensor.make(x.shape, {values: newValues}, 'bool');\n  }\n\n  round<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'round');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      // The algorithm is based on banker's rounding.\n      const base = Math.floor(values[i]);\n      if (values[i] - base < 0.5) {\n        newValues[i] = Math.floor(values[i]);\n      } else if (values[i] - base > 0.5) {\n        newValues[i] = Math.ceil(values[i]);\n      } else {\n        if (base % 2.0 === 0.0) {\n          newValues[i] = base;\n        } else {\n          newValues[i] = base + 1.0;\n        }\n      }\n    }\n    return Tensor.make(x.shape, {values: newValues});\n  }\n\n  exp<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'exp');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = Math.exp(values[i]);\n    }\n    return Tensor.make(x.shape, {values: newValues});\n  }\n\n  expm1<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'expm1');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = Math.expm1(values[i]);\n    }\n    return Tensor.make(x.shape, {values: newValues});\n  }\n\n  log<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'log');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = Math.log(value);\n    }\n    return Tensor.make(x.shape, {values: newValues});\n  }\n\n  log1p<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'log1p');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = Math.log1p(value);\n    }\n    return Tensor.make(x.shape, {values: newValues});\n  }\n\n  sqrt<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'sqrt');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = Math.sqrt(value);\n    }\n    return Tensor.make(x.shape, {values: newValues});\n  }\n\n  rsqrt<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'rsqrt');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = 1 / Math.sqrt(value);\n    }\n    return Tensor.make(x.shape, {values: newValues});\n  }\n\n  square<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'square');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    return Tensor.make(x.shape, {values: newValues});\n  }\n\n  reciprocal<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'reciprocal');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = 1 / values[i];\n    }\n    return Tensor.make(x.shape, {values: newValues});\n  }\n\n  linear<T extends Tensor>(x: T): T {\n    return x;\n  }\n\n  relu<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'relu');\n\n    const res = ops.zeros(x.shape, x.dtype);\n    const resVals = this.readSync(res.dataId) as TypedArray;\n    const inVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < inVals.length; ++i) {\n      resVals[i] = Math.max(0, inVals[i]);\n    }\n    return res as T;\n  }\n\n  prelu<T extends Tensor>(x: T, a: T): T {\n    this.assertNotComplex([x, a], 'prelu');\n\n    return this.broadcastedBinaryOp(\n               x, a, x.dtype,\n               (xValue, aValue) => xValue < 0 ? aValue * xValue : xValue) as T;\n  }\n\n  elu<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'elu');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const v = values[i];\n      if (v >= 0) {\n        resultValues[i] = v;\n      } else {\n        resultValues[i] = (Math.exp(v) - 1);\n      }\n    }\n    return Tensor.make(x.shape, {values: resultValues});\n  }\n\n  eluDer<T extends Tensor>(dy: T, y: T): T {\n    this.assertNotComplex([dy, y], 'eluDer');\n\n    const resultValues = new Float32Array(y.size);\n    const values = this.readSync(y.dataId) as TypedArray;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const v = values[i];\n      if (v >= 1) {\n        resultValues[i] = dyValues[i];\n      } else {\n        resultValues[i] = dyValues[i] * (v + 1);\n      }\n    }\n    return Tensor.make(y.shape, {values: resultValues});\n  }\n\n  selu<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'selu');\n\n    // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n    // see: https://arxiv.org/abs/1706.02515\n    const scaleAlpha = selu_util.SELU_SCALEALPHA;\n    const scale = selu_util.SELU_SCALE;\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const v = values[i];\n      if (v >= 0) {\n        resultValues[i] = scale * v;\n      } else {\n        resultValues[i] = scaleAlpha * (Math.exp(v) - 1);\n      }\n    }\n    return Tensor.make(x.shape, {values: resultValues});\n  }\n\n  clip<T extends Tensor>(x: T, min: number, max: number): T {\n    this.assertNotComplex(x, 'clip');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const v = values[i];\n      resultValues[i] = v > max ? max : (v < min ? min : v);\n    }\n    return Tensor.make(x.shape, {values: resultValues});\n  }\n\n  abs<T extends Tensor>(x: T): T {\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.abs(values[i]);\n    }\n\n    return Tensor.make(x.shape, {values: resultValues});\n  }\n\n  complexAbs<T extends Tensor>(x: T): T {\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n\n    for (let i = 0; i < x.size; ++i) {\n      const real = values[i * 2];\n      const imag = values[i * 2 + 1];\n      resultValues[i] = Math.hypot(real, imag);\n    }\n    return Tensor.make(x.shape, {values: resultValues});\n  }\n\n  int<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'int');\n\n    const resultValues = new Int32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = values[i];\n    }\n    return Tensor.make(x.shape, {values: resultValues}, 'int32');\n  }\n\n  sigmoid<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'sigmoid');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = 1 / (1 + Math.exp(-values[i]));\n    }\n    return Tensor.make(x.shape, {values: resultValues});\n  }\n\n  softplus<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'softplus');\n\n    // mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n\n    // epsilon is the difference between 1.0 and the next representable float.\n    // For a single precision 32 bit float this should be 2^-23, see:\n    // https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\n    const epsilon = 1.1920928955078125e-7;\n    const threshold = Math.log(epsilon) + 2.0;\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n\n    for (let i = 0; i < values.length; ++i) {\n      // Value above which exp(x) may overflow, but softplus(x) == x\n      // is within machine epsilon.\n      const tooLarge = values[i] > -threshold;\n\n      // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n      // is within machine epsilon.\n      const tooSmall = values[i] < threshold;\n\n      const expX = Math.exp(values[i]);\n      let result;\n\n      if (tooSmall) {\n        result = expX;\n      } else if (tooLarge) {\n        result = values[i];\n      } else {\n        result = Math.log(1.0 + expX);\n      }\n      resultValues[i] = result;\n    }\n    return Tensor.make(x.shape, {values: resultValues});\n  }\n\n  sin<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'sin');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.sin(values[i]);\n    }\n    return Tensor.make(x.shape, {values: resultValues});\n  }\n\n  cos<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'cos');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.cos(values[i]);\n    }\n    return Tensor.make(x.shape, {values: resultValues});\n  }\n\n  tan<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'tan');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.tan(values[i]);\n    }\n    return Tensor.make(x.shape, {values: resultValues});\n  }\n\n  asin<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'asin');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.asin(values[i]);\n    }\n    return Tensor.make(x.shape, {values: resultValues});\n  }\n\n  acos<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'acos');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.acos(values[i]);\n    }\n    return Tensor.make(x.shape, {values: resultValues});\n  }\n\n  atan<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'atan');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.atan(values[i]);\n    }\n    return Tensor.make(x.shape, {values: resultValues});\n  }\n\n  atan2<T extends Tensor>(a: T, b: T): T {\n    this.assertNotComplex([a, b], 'atan2');\n\n    return this.broadcastedBinaryOp(\n               a, b, a.dtype, (aValue, bValue) => Math.atan2(aValue, bValue)) as\n        T;\n  }\n\n  sinh<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'sinh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.sinh(values[i]);\n    }\n    return Tensor.make(x.shape, {values: resultValues});\n  }\n\n  cosh<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'cosh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.cosh(values[i]);\n    }\n    return Tensor.make(x.shape, {values: resultValues});\n  }\n\n  tanh<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'tanh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = util.tanh(values[i]);\n    }\n    return Tensor.make(x.shape, {values: resultValues});\n  }\n\n  asinh<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'asinh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.asinh(values[i]);\n    }\n    return Tensor.make(x.shape, {values: resultValues});\n  }\n\n  acosh<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'acosh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.acosh(values[i]);\n    }\n    return Tensor.make(x.shape, {values: resultValues});\n  }\n\n  atanh<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'atanh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.atanh(values[i]);\n    }\n    return Tensor.make(x.shape, {values: resultValues});\n  }\n\n  erf<T extends Tensor>(x: T): T {\n    this.assertNotComplex(x, 'erf');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    const p = erf_util.ERF_P;\n    const a1 = erf_util.ERF_A1;\n    const a2 = erf_util.ERF_A2;\n    const a3 = erf_util.ERF_A3;\n    const a4 = erf_util.ERF_A4;\n    const a5 = erf_util.ERF_A5;\n    for (let i = 0; i < values.length; ++i) {\n      const v = values[i];\n      const t = 1.0 / (1.0 + p * v);\n      resultValues[i] = 1.0 -\n          (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n              Math.exp(-v * v);\n    }\n    return Tensor.make(x.shape, {values: resultValues});\n  }\n\n  step<T extends Tensor>(x: T, alpha = 0): T {\n    this.assertNotComplex(x, 'step');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      if (isNaN(value)) {\n        resultValues[i] = NaN;\n      } else {\n        resultValues[i] = value > 0 ? 1 : alpha;\n      }\n    }\n    return Tensor.make(x.shape, {values: resultValues});\n  }\n\n  fusedConv2d(\n      x: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo, bias?: Tensor4D,\n      activation?: Activation, preluActivationWeights?: Tensor): Tensor4D {\n    let result = this.conv2d(x, filter, convInfo);\n\n    if (bias) {\n      result = this.add(result, bias) as Tensor4D;\n    }\n    if (activation) {\n      result =\n          mapActivation(this, result, activation, preluActivationWeights) as\n          Tensor4D;\n    }\n    return result;\n  }\n\n  conv2d(x: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    this.assertNotComplex([x, filter], 'conv2d');\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const padLeft = convInfo.padInfo.left;\n    const padTop = convInfo.padInfo.top;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const y = ops.buffer(convInfo.outShape, x.dtype as 'float32');\n\n    const xBatchStride = x.strides[0];\n    const xRowStride = isChannelsLast ? x.strides[1] : x.strides[2];\n    const xColStride = isChannelsLast ? x.strides[2] : 1;\n    const xChannelStride = isChannelsLast ? 1 : x.strides[1];\n    const yBatchStride = y.strides[0];\n    const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n    const yColStride = isChannelsLast ? y.strides[2] : 1;\n    const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const wVals = this.readSync(filter.dataId) as TypedArray;\n    const yVals = y.values;\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      const xOffset1 = b * xBatchStride;\n      const yOffset1 = b * yBatchStride;\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const yOffset2 = yOffset1 + yR * yRowStride;\n        const xRCorner = yR * convInfo.strideHeight - padTop;\n        for (let wR = 0; wR < filterHeight; wR++) {\n          const xR = xRCorner + wR * dilationHeight;\n          if (xR < 0 || xR >= convInfo.inHeight) {\n            continue;\n          }\n          const wOffset1 = wR * filter.strides[0];\n          const xOffset2 = xOffset1 + xR * xRowStride;\n          for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n            const yOffset3 = yOffset2 + yC * yColStride;\n            const xCCorner = yC * convInfo.strideWidth - padLeft;\n            for (let wC = 0; wC < filterWidth; wC++) {\n              const xC = xCCorner + wC * dilationWidth;\n              if (xC < 0 || xC >= convInfo.inWidth) {\n                continue;\n              }\n              const wOffset2 = wOffset1 + wC * filter.strides[1];\n              const xOffset3 = xOffset2 + xC * xColStride;\n              let wOffset3 = wOffset2;\n              for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                const xVal = xVals[xOffset3 + d1 * xChannelStride];\n                for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                  yVals[yOffset3 + d2 * yChannelStride] +=\n                      xVal * wVals[wOffset3 + d2];\n                }\n                wOffset3 += convInfo.outChannels;\n              }\n            }\n          }\n        }\n      }\n    }\n    return y.toTensor() as Tensor4D;\n  }\n\n  conv3d(x: Tensor5D, filter: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const padFront = convInfo.padInfo.front;\n    const padLeft = convInfo.padInfo.left;\n    const padTop = convInfo.padInfo.top;\n    const y = ops.buffer<Rank.R5>(convInfo.outShape, x.dtype as 'float32');\n\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const wVals = this.readSync(filter.dataId) as TypedArray;\n    const yVals = y.values;\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      const xOffset1 = b * x.strides[0];\n      const yOffset1 = b * y.strides[0];\n      for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n        const yOffset2 = yOffset1 + yF * y.strides[1];\n        const xFCorner = yF * convInfo.strideDepth - padFront;\n        for (let wF = 0; wF < filterDepth; wF++) {\n          const xF = xFCorner + wF * dilationDepth;\n          if (xF < 0 || xF >= convInfo.inDepth) {\n            continue;\n          }\n          const wOffset1 = wF * filter.strides[0];\n          const xOffset2 = xOffset1 + xF * x.strides[1];\n\n          for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n            const yOffset3 = yOffset2 + yR * y.strides[2];\n            const xRCorner = yR * convInfo.strideHeight - padTop;\n            for (let wR = 0; wR < filterHeight; wR++) {\n              const xR = xRCorner + wR * dilationHeight;\n              if (xR < 0 || xR >= convInfo.inHeight) {\n                continue;\n              }\n              const wOffset2 = wOffset1 + wR * filter.strides[1];\n              const xOffset3 = xOffset2 + xR * x.strides[2];\n              for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n                const xCCorner = yC * convInfo.strideWidth - padLeft;\n                for (let wC = 0; wC < filterWidth; wC++) {\n                  const xC = xCCorner + wC * dilationWidth;\n                  if (xC < 0 || xC >= convInfo.inWidth) {\n                    continue;\n                  }\n                  const wOffset3 = wOffset2 + wC * filter.strides[2];\n                  const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                  let wOffset4 = wOffset3;\n                  for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                    const xVal = xVals[xOffset4 + d1];\n                    for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                      yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                    }\n                    wOffset4 += convInfo.outChannels;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return y.toTensor();\n  }\n\n  conv2dDerInput(dy: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    this.assertNotComplex([dy, filter], 'conv2dDerInput');\n\n    const dx = ops.buffer<Rank.R4>(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const fltValues = this.readSync(filter.dataId) as TypedArray;\n    const [fltS0, fltS1, fltS2] = filter.strides;\n    const {\n      batchSize,\n      filterHeight,\n      filterWidth,\n      inChannels,\n      inHeight,\n      inWidth,\n      outChannels,\n      outHeight,\n      outWidth,\n      strideHeight,\n      strideWidth,\n      dataFormat\n    } = convInfo;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const xBatchStride = dx.strides[0];\n    const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n    const xColStride = isChannelsLast ? dx.strides[2] : 1;\n    const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n    const yBatchStride = dy.strides[0];\n    const yRowStride = isChannelsLast ? dy.strides[1] : dy.strides[2];\n    const yColStride = isChannelsLast ? dy.strides[2] : 1;\n    const yChannelStride = isChannelsLast ? 1 : dy.strides[1];\n\n    for (let b = 0; b < batchSize; ++b) {\n      for (let d1 = 0; d1 < inChannels; ++d1) {\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yR = xRMin; yR < yRMax; ++yR) {\n              const wR = yR * strideHeight - xRCorner;\n\n              for (let yC = xCMin; yC < yCMax; ++yC) {\n                const wC = yC * strideWidth - xCCorner;\n                const dyOffset =\n                    yBatchStride * b + yRowStride * yR + yColStride * yC;\n                const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                    fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n                for (let d2 = 0; d2 < outChannels; ++d2) {\n                  const pixel = dyValues[dyOffset + yChannelStride * d2];\n                  const weight = fltValues[fltOffset + d2];\n                  dotProd += pixel * weight;\n                }\n              }\n            }\n            const dxOffset = xBatchStride * b + xRowStride * xR +\n                xColStride * xC + xChannelStride * d1;\n            dxValues[dxOffset] = dotProd;\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  conv3dDerInput(dy: Tensor5D, filter: Tensor5D, convInfo: Conv3DInfo):\n      Tensor5D {\n    const dx = ops.buffer<Rank.R5>(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const [dyS0, dyS1, dyS2, dyS3] = dy.strides;\n    const fltValues = this.readSync(filter.dataId) as TypedArray;\n    const [fltS0, fltS1, fltS2, fltS3] = filter.strides;\n    const {\n      batchSize,\n      filterDepth,\n      filterHeight,\n      filterWidth,\n      inChannels,\n      inDepth,\n      inHeight,\n      inWidth,\n      outChannels,\n      outDepth,\n      outHeight,\n      outWidth,\n      strideDepth,\n      strideHeight,\n      strideWidth\n    } = convInfo;\n    const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n    for (let b = 0; b < batchSize; ++b) {\n      for (let d1 = 0; d1 < inChannels; ++d1) {\n        // Frames of depth\n        for (let xF = 0; xF < inDepth; ++xF) {\n          const xFCorner = xF - frontPad;\n          const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n          const yFMax =\n              Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n          // Rows as per standard 2d matrix notation\n          for (let xR = 0; xR < inHeight; ++xR) {\n            const xRCorner = xR - topPad;\n            const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n            const yRMax =\n                Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n            // Columns as per standard 2d matrix notation\n            for (let xC = 0; xC < inWidth; ++xC) {\n              const xCCorner = xC - leftPad;\n              const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n              const yCMax =\n                  Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n              let dotProd = 0;\n              for (let yF = xFMin; yF < yFMax; ++yF) {\n                const wF = yF * strideDepth - xFCorner;\n\n                for (let yR = xRMin; yR < yRMax; ++yR) {\n                  const wR = yR * strideHeight - xRCorner;\n\n                  for (let yC = xCMin; yC < yCMax; ++yC) {\n                    const wC = yC * strideWidth - xCCorner;\n                    const dyOffset =\n                        dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                    const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                        fltS1 * (filterHeight - 1 - wR) +\n                        fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                    for (let d2 = 0; d2 < outChannels; ++d2) {\n                      const pixel = dyValues[dyOffset + d2];\n                      const weight = fltValues[fltOffset + d2];\n                      dotProd += pixel * weight;\n                    }\n                  }\n                }\n              }\n              dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                  dotProd;\n            }\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  conv2dDerFilter(x: Tensor4D, dy: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    this.assertNotComplex([x, dy], 'conv2dDerFilter');\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const dW = ops.buffer<Rank.R4>(convInfo.filterShape, 'float32');\n\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n    const xBuf = this.bufferSync(x);\n    const dyBuf = this.bufferSync(dy);\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            // Need to convolve.\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              for (let yR = yRMin; yR < yRMax; ++yR) {\n                const xR = wR + yR * strideHeight - topPad;\n                for (let yC = yCMin; yC < yCMax; ++yC) {\n                  const xC = wC + yC * strideWidth - leftPad;\n                  if (isChannelsLast) {\n                    dotProd +=\n                        xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n                  } else {\n                    dotProd +=\n                        xBuf.get(b, d1, xR, xC) * dyBuf.get(b, d2, yR, yC);\n                  }\n                }\n              }\n            }\n            dW.set(dotProd, wR, wC, d1, d2);\n          }\n        }\n      }\n    }\n    return dW.toTensor();\n  }\n\n  conv3dDerFilter(x: Tensor5D, dy: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const dw = ops.buffer<Rank.R5>(convInfo.filterShape, 'float32');\n    const dwValues = dw.values;\n    const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const [dyS0, dyS1, dyS2, dyS3] = dy.strides;\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const [xS0, xS1, xS2, xS3] = x.strides;\n\n    const frontPad = convInfo.padInfo.front;\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n\n    for (let wF = 0; wF < filterDepth; ++wF) {\n      const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n      const yFMax = Math.min(\n          convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n      const wOffset1 = wF * dwS0;\n\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n        const yRMax = Math.min(\n            convInfo.outHeight,\n            (convInfo.inHeight + topPad - wR) / strideHeight);\n        const wOffset2 = wR * dwS1 + wOffset1;\n\n        for (let wC = 0; wC < filterWidth; ++wC) {\n          const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n          const yCMax = Math.min(\n              convInfo.outWidth,\n              (convInfo.inWidth + leftPad - wC) / strideWidth);\n          const wOffset3 = wC * dwS2 + wOffset2;\n\n          for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n            const wOffset4 = d1 * dwS3 + wOffset3;\n\n            for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n              let dotProd = 0;\n              for (let b = 0; b < convInfo.batchSize; ++b) {\n                const xOffset1 = b * xS0;\n                const yOffset1 = b * dyS0;\n\n                for (let yF = yFMin; yF < yFMax; ++yF) {\n                  const xF = wF + yF * strideDepth - frontPad;\n                  const xOffset2 = xF * xS1 + xOffset1;\n                  const yOffset2 = yF * dyS1 + yOffset1;\n\n                  for (let yR = yRMin; yR < yRMax; ++yR) {\n                    const xR = wR + yR * strideHeight - topPad;\n                    const xOffset3 = xR * xS2 + xOffset2;\n                    const yOffset3 = yR * dyS2 + yOffset2;\n\n                    for (let yC = yCMin; yC < yCMax; ++yC) {\n                      const xC = wC + yC * strideWidth - leftPad;\n                      const xOffset4 = xC * xS3 + xOffset3;\n                      const yOffset4 = yC * dyS3 + yOffset3;\n\n                      dotProd +=\n                          xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                    }\n                  }\n                }\n              }\n              dwValues[wOffset4 + d2] = dotProd;\n            }\n          }\n        }\n      }\n    }\n    return dw.toTensor();\n  }\n\n  depthwiseConv2D(x: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    this.assertNotComplex([x, filter], 'depthwiseConv2D');\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const padLeft = convInfo.padInfo.left;\n    const padTop = convInfo.padInfo.top;\n    const chMul = convInfo.outChannels / convInfo.inChannels;\n    const y = ops.buffer(convInfo.outShape, x.dtype as 'float32');\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const wVals = this.readSync(filter.dataId) as TypedArray;\n    const yVals = y.values;\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      const xOffset1 = b * x.strides[0];\n      const yOffset1 = b * y.strides[0];\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const yOffset2 = yOffset1 + yR * y.strides[1];\n        const xRCorner = yR * convInfo.strideHeight - padLeft;\n        for (let wR = 0; wR < filterHeight; ++wR) {\n          const xR = xRCorner + wR * dilationHeight;\n          if (xR < 0 || xR >= convInfo.inHeight) {\n            continue;\n          }\n          const wOffset1 = wR * filter.strides[0];\n          const xOffset2 = xOffset1 + xR * x.strides[1];\n          for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n            const yOffset3 = yOffset2 + yC * y.strides[2];\n            const xCCorner = yC * convInfo.strideWidth - padTop;\n            for (let wC = 0; wC < filterWidth; ++wC) {\n              const xC = xCCorner + wC * dilationWidth;\n              if (xC < 0 || xC >= convInfo.inWidth) {\n                continue;\n              }\n              const wOffset2 = wOffset1 + wC * filter.strides[1];\n              const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n              let yOffset4 = yOffset3;\n              let wOffset3 = wOffset2;\n              for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                const xVal = xVals[xOffset3 + d1];\n                for (let q = 0; q < chMul; ++q) {\n                  yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n                }\n                yOffset4 += chMul;\n                wOffset3 += chMul;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return y.toTensor() as Tensor4D;\n  }\n\n  depthwiseConv2DDerInput(dy: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    this.assertNotComplex([dy, filter], 'depthwiseConv2DDerInput');\n\n    const dx = ops.buffer<Rank.R4>(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const [dxS0, dxS1, dxS2] = dx.strides;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const [dyS0, dyS1, dyS2] = dy.strides;\n    const fltValues = this.readSync(filter.dataId) as TypedArray;\n    const [fltS0, fltS1, fltS2] = filter.strides;\n    const {\n      batchSize,\n      filterHeight,\n      filterWidth,\n      inChannels,\n      inHeight,\n      inWidth,\n      outChannels,\n      outHeight,\n      outWidth,\n      strideHeight,\n      strideWidth\n    } = convInfo;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n    const chMul = outChannels / inChannels;\n\n    for (let b = 0; b < batchSize; ++b) {\n      for (let d1 = 0; d1 < inChannels; ++d1) {\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yR = xRMin; yR < yRMax; ++yR) {\n              const wR = yR * strideHeight - xRCorner;\n\n              for (let yC = xCMin; yC < yCMax; ++yC) {\n                const wC = yC * strideWidth - xCCorner;\n                const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n                const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                    fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n                for (let dm = 0; dm < chMul; ++dm) {\n                  const d2 = d1 * chMul + dm;\n                  const pixel = dyValues[dyOffset + d2];\n                  const weight = fltValues[fltOffset + dm];\n                  dotProd += pixel * weight;\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  depthwiseConv2DDerFilter(x: Tensor4D, dy: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    this.assertNotComplex([x, dy], 'depthwiseConv2DDerFilter');\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dW = ops.buffer<Rank.R4>(convInfo.filterShape, 'float32');\n\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n    const chMul = convInfo.outChannels / convInfo.inChannels;\n\n    const xBuf = this.bufferSync(x);\n    const dyBuf = this.bufferSync(dy);\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          const d1 = Math.trunc(d2 / chMul);\n          const dm = d2 % chMul;\n\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, dm);\n        }\n      }\n    }\n    return dW.toTensor();\n  }\n\n  tile<T extends Tensor>(x: T, reps: number[]): T {\n    this.assertNotComplex(x, 'tile');\n    return tile(this.bufferSync(x), reps) as T;\n  }\n\n  pad<T extends Tensor>(\n      x: T, paddings: Array<[number, number]>, constantValue: number): T {\n    this.assertNotComplex(x, 'pad');\n\n    const outShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n    const start = paddings.map(p => p[0]);\n    const xBuffer = this.bufferSync(x);\n    const buffer = ops.buffer(outShape, x.dtype as 'float32');\n    if (constantValue !== 0) {\n      buffer.values.fill(constantValue);\n    }\n\n    for (let i = 0; i < x.size; i++) {\n      const coords = xBuffer.indexToLoc(i);\n      const outCoords = coords.map((c, i) => c + start[i]);\n      buffer.set(xBuffer.get(...coords), ...outCoords);\n    }\n    return buffer.toTensor() as T;\n  }\n\n  transpose<T extends Tensor>(x: T, perm: number[]): T {\n    this.assertNotComplex(x, 'transpose');\n\n    const newShape: number[] = new Array(x.rank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = x.shape[perm[i]];\n    }\n    const values = this.readSync(x.dataId) as TypedArray;\n    const result = buffer(newShape, x.dtype);\n\n    const xBuf = this.bufferSync(x);\n    for (let i = 0; i < x.size; ++i) {\n      const loc = xBuf.indexToLoc(i);\n\n      // Permute location.\n      const newLoc: number[] = new Array(loc.length);\n      for (let i = 0; i < newLoc.length; i++) {\n        newLoc[i] = loc[perm[i]];\n      }\n\n      const newIndex = result.locToIndex(newLoc);\n      result.values[newIndex] = values[i];\n    }\n    return result.toTensor() as T;\n  }\n\n  gather<T extends Tensor>(x: T, indices: Tensor1D, axis: number): T {\n    this.assertNotComplex([x, indices], 'gather');\n\n    const newShape: number[] = x.shape.slice();\n    const indicesValues = this.readSync(indices.dataId) as TypedArray;\n    newShape[axis] = indicesValues.length;\n    const result = buffer(newShape, x.dtype);\n    const xBuf = this.bufferSync(x);\n\n    for (let i = 0; i < result.size; ++i) {\n      const newLoc = result.indexToLoc(i);\n\n      const originalLoc: number[] = newLoc.slice();\n      originalLoc[axis] = indicesValues[newLoc[axis]];\n\n      const originalIndex = xBuf.locToIndex(originalLoc);\n      result.values[i] = xBuf.values[originalIndex];\n    }\n    return result.toTensor() as T;\n  }\n\n  batchToSpaceND<T extends Tensor>(\n      x: T, blockShape: number[], crops: number[][]): T {\n    this.assertNotComplex([x], 'batchToSpaceND');\n\n    const prod = blockShape.reduce((a, b) => a * b);\n\n    const reshaped = array_ops_util.getReshaped(x.shape, blockShape, prod);\n    const permuted =\n        array_ops_util.getPermuted(reshaped.length, blockShape.length);\n    const reshapedPermuted =\n        array_ops_util.getReshapedPermuted(x.shape, blockShape, prod);\n    const sliceBeginCoords =\n        array_ops_util.getSliceBeginCoords(crops, blockShape.length);\n    const sliceSize =\n        array_ops_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n    return x.reshape(reshaped)\n               .transpose(permuted)\n               .reshape(reshapedPermuted)\n               .slice(sliceBeginCoords, sliceSize) as T;\n  }\n\n  spaceToBatchND<T extends Tensor>(\n      x: T, blockShape: number[], paddings: Array<[number, number]>): T {\n    this.assertNotComplex([x], 'spaceToBatchND');\n\n    const prod = blockShape.reduce((a, b) => a * b);\n\n    const completePaddings: Array<[number, number]> = [[0, 0]];\n    completePaddings.push(...paddings);\n    for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n      completePaddings.push([0, 0]);\n    }\n\n    const paddedX = x.pad(completePaddings);\n\n    const reshapedPaddedShape =\n        array_ops_util.getReshaped(paddedX.shape, blockShape, prod, false);\n    const permutedReshapedPaddedPermutation = array_ops_util.getPermuted(\n        reshapedPaddedShape.length, blockShape.length, false);\n    const flattenShape = array_ops_util.getReshapedPermuted(\n        paddedX.shape, blockShape, prod, false);\n\n    return paddedX.reshape(reshapedPaddedShape)\n               .transpose(permutedReshapedPaddedPermutation)\n               .reshape(flattenShape) as T;\n  }\n\n  private pool(x: Tensor4D, convInfo: Conv2DInfo, poolType: 'max'|'avg'):\n      Tensor4D {\n    this.assertNotComplex(x, 'pool');\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    const initialValue =\n        (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                              Number.POSITIVE_INFINITY);\n\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const output = ops.buffer(convInfo.outShape, x.dtype);\n    const outputVals = output.values;\n\n    const outputBatchStrides =\n        convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n    const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n    const outputColStrides = convInfo.outShape[3];\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      const outputBatchOffset = b * outputBatchStrides;\n      const inputBatchOffset = b * x.strides[0];\n      for (let d = 0; d < convInfo.inChannels; ++d) {\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const xRCorner = yR * strideHeight - padTop;\n          const xRMin = Math.max(0, xRCorner);\n          const xRMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n          const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n          for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n            const xCCorner = yC * strideWidth - padLeft;\n            const xCMin = Math.max(0, xCCorner);\n            const xCMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n            let minMaxValue = initialValue;\n            let avgValue = 0;\n            let count = 0;\n            for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n              const xROffset = inputBatchOffset + xR * x.strides[1];\n              for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n                const xCOffset = xROffset + xC * x.strides[2];\n                const pixel = xValues[xCOffset + d];\n                if ((poolType === 'max' && pixel > minMaxValue)) {\n                  minMaxValue = pixel;\n                } else if (poolType === 'avg') {\n                  avgValue += pixel;\n                  count++;\n                }\n              }\n              if (isNaN(minMaxValue)) {\n                break;\n              }\n            }\n            const outputOffset = outputRowOffset + yC * outputColStrides + d;\n            outputVals[outputOffset] =\n                poolType === 'avg' ? avgValue / count : minMaxValue;\n          }\n        }\n      }\n    }\n    return output.toTensor() as Tensor4D;\n  }\n\n  maxPool(x: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    return this.pool(x, convInfo, 'max');\n  }\n\n  private maxPoolPositions(x: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    const maxPositions = ops.buffer(convInfo.outShape, 'int32');\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    const xBuf = this.bufferSync(x);\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      for (let d = 0; d < convInfo.inChannels; ++d) {\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const xRCorner = yR * strideHeight - padTop;\n          let xRMin = xRCorner;\n          while (xRMin < 0) {\n            xRMin += dilationHeight;\n          }\n          // const xRMin = Math.max(0, xRCorner);\n          const xRMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n          for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n            const xCCorner = yC * strideWidth - padLeft;\n            let xCMin = xCCorner;\n            while (xCMin < 0) {\n              xCMin += dilationWidth;\n            }\n            const xCMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n            let maxValue = Number.NEGATIVE_INFINITY;\n            let maxPosition = -1;\n\n            for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n              const wR = xR - xRCorner;\n              for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n                const wC = xC - xCCorner;\n                const pixel = xBuf.get(b, xR, xC, d);\n                if (pixel > maxValue) {\n                  maxValue = pixel;\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n            maxPositions.set(maxPosition, b, yR, yC, d);\n          }\n        }\n      }\n    }\n    return maxPositions.toTensor() as Tensor4D;\n  }\n\n  maxPoolBackprop(dy: Tensor4D, x: Tensor4D, y: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    this.assertNotComplex([x, y], 'maxPoolBackprop');\n\n    const maxPositions = this.maxPoolPositions(x, convInfo);\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = ops.buffer<Rank.R4>(x.shape, 'float32');\n\n    const maxPosBuf = this.bufferSync(maxPositions);\n    const dyBuf = this.bufferSync(dy);\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      for (let d = 0; d < convInfo.inChannels; ++d) {\n        for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n          for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n            // Shader code begins.\n            const dyRCorner = dxR - padTop;\n            const dyCCorner = dxC - padLeft;\n            let dotProd = 0;\n            for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n              const dyR = (dyRCorner + wR) / strideHeight;\n              if (dyR < 0 || dyR >= convInfo.outHeight ||\n                  Math.floor(dyR) !== dyR) {\n                continue;\n              }\n              for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n                const dyC = (dyCCorner + wC) / strideWidth;\n                if (dyC < 0 || dyC >= convInfo.outWidth ||\n                    Math.floor(dyC) !== dyC) {\n                  continue;\n                }\n                const maxPos = effectiveFilterHeight * effectiveFilterWidth -\n                    1 - maxPosBuf.get(b, dyR, dyC, d);\n                const curPos = wR * effectiveFilterWidth + wC;\n\n                const mask = maxPos === curPos ? 1 : 0;\n                if (mask === 0) {\n                  continue;\n                }\n\n                const pixel = dyBuf.get(b, dyR, dyC, d);\n                dotProd += pixel * mask;\n              }\n            }\n            dx.set(dotProd, b, dxR, dxC, d);\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  avgPoolBackprop(dy: Tensor4D, x: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    this.assertNotComplex([dy, x], 'avgPoolBackprop');\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = ops.buffer<Rank.R4>(x.shape, 'float32');\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    const dyBuf = this.bufferSync(dy);\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      for (let d = 0; d < convInfo.inChannels; ++d) {\n        for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n          for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n            // Shader code begins.\n            const dyRCorner = dxR - padTop;\n            const dyCCorner = dxC - padLeft;\n            let dotProd = 0;\n            for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n              const dyR = (dyRCorner + wR) / strideHeight;\n              if (dyR < 0 || dyR >= convInfo.outHeight ||\n                  Math.floor(dyR) !== dyR) {\n                continue;\n              }\n              for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n                const dyC = (dyCCorner + wC) / strideWidth;\n                if (dyC < 0 || dyC >= convInfo.outWidth ||\n                    Math.floor(dyC) !== dyC) {\n                  continue;\n                }\n\n                const pixel = dyBuf.get(b, dyR, dyC, d);\n                dotProd += pixel;\n              }\n            }\n            dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  private pool3d(x: Tensor5D, convInfo: Conv3DInfo, poolType: 'max'|'avg'):\n      Tensor5D {\n    this.assertNotComplex(x, 'pool3d');\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    const initialValue =\n        (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                              Number.POSITIVE_INFINITY);\n\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const output = ops.buffer(convInfo.outShape, x.dtype);\n    const outputVals = output.values;\n\n    const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n        convInfo.outShape[3] * convInfo.outShape[4];\n    const outputDepthStrides =\n        convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n    const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n    const outputColStrides = convInfo.outShape[4];\n\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      const outputBatchOffset = batch * outputBatchStrides;\n      const inputBatchOffset = batch * x.strides[0];\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n          const xDepthCorner = yDepth * strideDepth - padFront;\n          let xDepthMin = xDepthCorner;\n          while (xDepthMin < 0) {\n            xDepthMin += dilationDepth;\n          }\n          const xDepthMax =\n              Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n          const outputDepthOffset =\n              outputBatchOffset + yDepth * outputDepthStrides;\n          for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n            const xRowCorner = yRow * strideHeight - padTop;\n            let xRowMin = xRowCorner;\n            while (xRowMin < 0) {\n              xRowMin += dilationHeight;\n            }\n            const xRowMax =\n                Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n            const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n            for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n              const xColCorner = yCol * strideWidth - padLeft;\n              let xColMin = xColCorner;\n              while (xColMin < 0) {\n                xColMin += dilationWidth;\n              }\n              const xColMax =\n                  Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n              // Shader code begins\n              const outputColOffset = outputRowOffset + yCol * outputColStrides;\n              let minMaxValue = initialValue;\n              let avgValue = 0;\n              let count = 0;\n              for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                   xDepth += dilationDepth) {\n                const xDepthOffset = inputBatchOffset + xDepth * x.strides[1];\n                for (let xRow = xRowMin; xRow < xRowMax;\n                     xRow += dilationHeight) {\n                  const xRowOffset = xDepthOffset + xRow * x.strides[2];\n                  for (let xCol = xColMin; xCol < xColMax;\n                       xCol += dilationWidth) {\n                    const xColOffset = xRowOffset + xCol * x.strides[3];\n                    const pixel = xValues[xColOffset + channel];\n                    if ((poolType === 'max' && pixel > minMaxValue)) {\n                      minMaxValue = pixel;\n                    } else if (poolType === 'avg') {\n                      avgValue += pixel;\n                      count++;\n                    }\n                    if (isNaN(minMaxValue)) {\n                      break;\n                    }\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              const outputOffset = outputColOffset + channel;\n              outputVals[outputOffset] =\n                  poolType === 'avg' ? avgValue / count : minMaxValue;\n            }\n          }\n        }\n      }\n    }\n    return output.toTensor() as Tensor5D;\n  }\n\n  avgPool3d(x: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    this.assertNotComplex(x, 'avgPool3d');\n\n    return this.pool3d(x, convInfo, 'avg').toFloat();\n  }\n\n  avgPool3dBackprop(dy: Tensor5D, x: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    this.assertNotComplex([dy, x], 'avgPool3dBackprop');\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = ops.buffer<Rank.R5>(x.shape, 'float32');\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    const dyBuf = this.bufferSync(dy);\n\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n          for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n            for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n              // Shader code begins.\n              const dyDepthCorner = dxDepth - padFront;\n              const dyRowCorner = dxRow - padTop;\n              const dyColCorner = dxCol - padLeft;\n              let dotProd = 0;\n              for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                   wDepth += dilationDepth) {\n                const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                    Math.floor(dyDepth) !== dyDepth) {\n                  continue;\n                }\n                for (let wRow = 0; wRow < effectiveFilterHeight;\n                     wRow += dilationHeight) {\n                  const dyRow = (dyRowCorner + wRow) / strideHeight;\n                  if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                      Math.floor(dyRow) !== dyRow) {\n                    continue;\n                  }\n                  for (let wCol = 0; wCol < effectiveFilterWidth;\n                       wCol += dilationWidth) {\n                    const dyCol = (dyColCorner + wCol) / strideWidth;\n                    if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                        Math.floor(dyCol) !== dyCol) {\n                      continue;\n                    }\n\n                    const pixel =\n                        dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                    dotProd += pixel;\n                  }\n                }\n              }\n              dx.set(\n                  dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol,\n                  channel);\n            }\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  maxPool3d(x: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    this.assertNotComplex(x, 'maxPool3d');\n\n    return this.pool3d(x, convInfo, 'max').toFloat();\n  }\n\n  private maxPool3dPositions(x: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    const maxPositions = ops.buffer(convInfo.outShape, 'int32');\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    const xBuf = this.bufferSync(x);\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n          const xDepthCorner = yDepth * strideDepth - padFront;\n          let xDepthMin = xDepthCorner;\n          while (xDepthMin < 0) {\n            xDepthMin += dilationDepth;\n          }\n          const xDepthMax =\n              Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n          for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n            const xRowCorner = yRow * strideHeight - padTop;\n            let xRowMin = xRowCorner;\n            while (xRowMin < 0) {\n              xRowMin += dilationHeight;\n            }\n            const xRowMax =\n                Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n            for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n              const xColCorner = yCol * strideWidth - padLeft;\n              let xColMin = xColCorner;\n              while (xColMin < 0) {\n                xColMin += dilationWidth;\n              }\n              const xColMax =\n                  Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n\n              // Shader code begins\n              let maxValue = Number.NEGATIVE_INFINITY;\n              let maxPosition = -1;\n\n              for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                   xDepth += dilationDepth) {\n                const wDepth = xDepth - xDepthCorner;\n                for (let xRow = xRowMin; xRow < xRowMax;\n                     xRow += dilationHeight) {\n                  const wRow = xRow - xRowCorner;\n                  for (let xCol = xColMin; xCol < xColMax;\n                       xCol += dilationWidth) {\n                    const wCol = xCol - xColCorner;\n                    const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                    if (pixel >= maxValue) {\n                      maxValue = pixel;\n                      maxPosition = wDepth * effectiveFilterHeight *\n                              effectiveFilterWidth +\n                          wRow * effectiveFilterHeight + wCol;\n                    }\n                  }\n                }\n              }\n\n              maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n            }\n          }\n        }\n      }\n    }\n    return maxPositions.toTensor() as Tensor5D;\n  }\n\n  maxPool3dBackprop(\n      dy: Tensor5D, x: Tensor5D, y: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    this.assertNotComplex([x, y], 'maxPool3dBackprop');\n\n    const maxPositions = this.maxPool3dPositions(x, convInfo);\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = ops.buffer<Rank.R5>(x.shape, 'float32');\n\n    const maxPosBuf = this.bufferSync(maxPositions);\n    const dyBuf = this.bufferSync(dy);\n\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n          for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n            for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n              // Shader code begins\n              const dyDepthCorner = dxDepth - padFront;\n              const dyRowCorner = dxRow - padTop;\n              const dyColCorner = dxCol - padLeft;\n              let dotProd = 0;\n              for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                   wDepth += dilationDepth) {\n                const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                    Math.floor(dyDepth) !== dyDepth) {\n                  continue;\n                }\n                for (let wRow = 0; wRow < effectiveFilterHeight;\n                     wRow += dilationHeight) {\n                  const dyRow = (dyRowCorner + wRow) / strideHeight;\n                  if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                      Math.floor(dyRow) !== dyRow) {\n                    continue;\n                  }\n                  for (let wCol = 0; wCol < effectiveFilterWidth;\n                       wCol += dilationWidth) {\n                    const dyCol = (dyColCorner + wCol) / strideWidth;\n                    if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                        Math.floor(dyCol) !== dyCol) {\n                      continue;\n                    }\n\n                    const maxPos = effectiveFilterDepth *\n                            effectiveFilterHeight * effectiveFilterWidth -\n                        1 -\n                        maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                    const curPos =\n                        wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                        wRow * effectiveFilterWidth + wCol;\n\n                    const mask = maxPos === curPos ? 1 : 0;\n                    if (mask === 0) {\n                      continue;\n                    }\n\n                    const pixel =\n                        dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                    dotProd += pixel * mask;\n                  }\n                }\n              }\n              dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n            }\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  cast<T extends Tensor>(x: T, dtype: DataType): T {\n    return backend_util.castTensor(x, dtype, this);\n  }\n\n  reshape<R extends Rank>(x: Tensor, shape: ShapeMap[R]): Tensor<R> {\n    return backend_util.reshapeTensor(x, shape);\n  }\n\n  avgPool(x: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    this.assertNotComplex(x, 'avgPool');\n\n    return this.pool(x, convInfo, 'avg').toFloat();\n  }\n\n  resizeBilinear(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    this.assertNotComplex(x, 'resizeBilinear');\n\n    const [batch, oldHeight, oldWidth, numChannels] = x.shape;\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const result = new Float32Array(\n        util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n    const effectiveInputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n    let outputIdx = 0;\n    const effectiveRowSizeRatio =\n        effectiveInputSize[0] / effectiveOutputSize[0];\n    const effectiveColSizeRatio =\n        effectiveInputSize[1] / effectiveOutputSize[1];\n    for (let b = 0; b < batch; b++) {\n      for (let r = 0; r < newHeight; r++) {\n        const sourceFracRow = effectiveRowSizeRatio * r;\n        const sourceRowFloor = Math.floor(sourceFracRow);\n        const rowFrac = sourceFracRow - sourceRowFloor;\n        const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n        const topRowOffset = b * x.strides[0] + sourceRowFloor * x.strides[1];\n        const botRowOffset = b * x.strides[0] + sourceRowCeil * x.strides[1];\n        for (let c = 0; c < newWidth; c++) {\n          const sourceFracCol = effectiveColSizeRatio * c;\n          const sourceColFloor = Math.floor(sourceFracCol);\n          const colFrac = sourceFracCol - sourceColFloor;\n          const sourceColCeil =\n              Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n          const topLeftOffest = topRowOffset + sourceColFloor * x.strides[2];\n          const botLeftOffset = botRowOffset + sourceColFloor * x.strides[2];\n          const topRightOffset = topRowOffset + +sourceColCeil * x.strides[2];\n          const botRightOffest = botRowOffset + sourceColCeil * x.strides[2];\n          for (let d = 0; d < numChannels; d++) {\n            // Begin shader.\n\n            // Compute the fractional index of the source.\n            const topLeft = xValues[topLeftOffest + d];\n            const bottomLeft = xValues[botLeftOffset + d];\n            const topRight = xValues[topRightOffset + d];\n            const bottomRight = xValues[botRightOffest + d];\n\n            const top = topLeft + (topRight - topLeft) * colFrac;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n            const newValue = top + (bottom - top) * rowFrac;\n\n            result[outputIdx++] = newValue;\n          }\n        }\n      }\n    }\n    return ops.tensor(result, [batch, newHeight, newWidth, numChannels]);\n  }\n\n  resizeBilinearBackprop(dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    this.assertNotComplex([dy, x], 'resizeBilinearBackprop');\n\n    const [batch, xHeight, xWidth, depth] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    const output = new Float32Array(batch * xHeight * xWidth * depth);\n\n    // In the backwards pass, we want to find the pixels that were generated\n    // for each pixel in the input image the forward pass and add the\n    // corresponding coefficient from dy to the gradient (with some\n    // interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    let offset = 0;\n    for (let b = 0; b < batch; b++) {\n      const bOffset = b * x.strides[0];\n      for (let r = 0; r < yHeight; r++) {\n        const dxR = r * heightScale;\n        const topDxRIndex = Math.floor(dxR);\n        const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n\n        const topDxROffset = bOffset + topDxRIndex * x.strides[1];\n        const bottomDxROffset = bOffset + bottomDxRIndex * x.strides[1];\n\n        const dxRLerp = dxR - topDxRIndex;\n        const inverseDxRLerp = 1.0 - dxRLerp;\n        for (let c = 0; c < yWidth; c++) {\n          const dxC = c * widthScale;\n          const leftDxCIndex = Math.floor(dxC);\n          const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n          const dxCLerp = dxC - leftDxCIndex;\n          const inverseDxCLerp = 1.0 - dxCLerp;\n\n          const topLeftRCOffset = topDxROffset + leftDxCIndex * x.strides[2];\n          const topRightRCOffset = topDxROffset + rightDxCIndex * x.strides[2];\n          const bottomLeftRCOffset =\n              bottomDxROffset + leftDxCIndex * x.strides[2];\n          const bottomRightRCOffset =\n              bottomDxROffset + rightDxCIndex * x.strides[2];\n\n          const inverseDxRLerpTimesInverseDxCLerp =\n              inverseDxRLerp * inverseDxCLerp;\n          const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n          const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n          const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n          for (let d = 0; d < depth; d++) {\n            const dyVal = dyValues[offset++];\n            output[topLeftRCOffset + d] +=\n                dyVal * inverseDxRLerpTimesInverseDxCLerp;\n            output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n            output[bottomLeftRCOffset + d] +=\n                dyVal * dxRLerpTimesInverseDxCLerp;\n            output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n          }\n        }\n      }\n    }\n    return ops.tensor4d(output, [batch, xWidth, xHeight, depth], x.dtype);\n  }\n\n  resizeNearestNeighbor(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    this.assertNotComplex(x, 'resizeNearestNeighbor');\n\n    const [batch, oldHeight, oldWidth, numChannels] = x.shape;\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n    const effectiveInputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    const effectiveRowSizeRatio =\n        effectiveInputSize[0] / effectiveOutputSize[0];\n    const effectiveColSizeRatio =\n        effectiveInputSize[1] / effectiveOutputSize[1];\n\n    let outputOffset = 0;\n    for (let b = 0; b < batch; b++) {\n      const batchOffset = b * x.strides[0];\n      for (let r = 0; r < newHeight; r++) {\n        const sourceFracRow = effectiveRowSizeRatio * r;\n        const sourceNearestRow = Math.min(\n            oldHeight - 1,\n            alignCorners ? Math.round(sourceFracRow) :\n                           Math.floor(sourceFracRow));\n        const rowOffset = batchOffset + sourceNearestRow * x.strides[1];\n        for (let c = 0; c < newWidth; c++) {\n          const sourceFracCol = effectiveColSizeRatio * c;\n          const sourceNearestCol = Math.min(\n              oldWidth - 1,\n              alignCorners ? Math.round(sourceFracCol) :\n                             Math.floor(sourceFracCol));\n          const colOffset = rowOffset + sourceNearestCol * x.strides[2];\n          for (let d = 0; d < numChannels; d++) {\n            // Begin shader.\n            // Compute the fractional index of the source.\n            const newVal = xValues[colOffset + d];\n            output[outputOffset++] = newVal;\n          }\n        }\n      }\n    }\n    return ops.tensor(\n        output, [batch, newHeight, newWidth, numChannels], x.dtype);\n  }\n\n  resizeNearestNeighborBackprop(\n      dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    this.assertNotComplex([dy, x], 'resizeNearestNeighborBackprop');\n\n    const [batch, xHeight, xWidth, depth] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    const output = new Float32Array(batch * xHeight * xWidth * depth);\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n\n    // In the backwards pass, we want to find the pixels that were generated\n    // for each pixel in the input image the forward pass\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    // Loop over the output space.\n    for (let b = 0; b < batch; b++) {\n      const batchOffset = b * x.strides[0];\n      for (let r = 0; r < xHeight; r++) {\n        const rowOffset = batchOffset + r * x.strides[1];\n\n        // Compute bounds for where in dy we will look\n        const startRLerp = Math.floor(r * invHeightScale);\n        const startDyR = Math.floor(startRLerp - (winHeight / 2));\n        for (let c = 0; c < xWidth; c++) {\n          const colOffset = rowOffset + c * x.strides[2];\n\n          // Compute bounds for where in dy we will look\n          const startCLerp = Math.floor(c * invWidthScale);\n          const startDyC = Math.floor(startCLerp - (winWidth / 2));\n\n          for (let d = 0; d < depth; d++) {\n            let accum = 0;\n            // loop over dy\n\n            for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n              const dyR = dyRIndex + startDyR;\n              // Guard against the window exceeding the bounds of dy\n              if (dyR < 0 || dyR >= yHeight) {\n                continue;\n              }\n\n              const dyROffset = batchOffset + dyR * dy.strides[1];\n              const sourceFracRow = dyR * heightScale;\n              const sourceNearestRow = Math.min(\n                  xHeight - 1,\n                  alignCorners ? Math.round(sourceFracRow) :\n                                 Math.floor(sourceFracRow));\n              if (r !== sourceNearestRow) {\n                continue;\n              }\n              for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n                const dyC = dyCIndex + startDyC;\n                // Guard against the window exceeding the bounds of dy\n                if (dyC < 0 || dyC >= yWidth) {\n                  continue;\n                }\n\n                const dyCOffset = dyROffset + dyC * dy.strides[2];\n                const sourceFracCol = dyC * widthScale;\n                const sourceNearestCol = Math.min(\n                    xWidth - 1,\n                    alignCorners ? Math.round(sourceFracCol) :\n                                   Math.floor(sourceFracCol));\n\n                if (c === sourceNearestCol) {\n                  accum += dyValues[dyCOffset + d];\n                }\n              }\n            }\n            output[colOffset + d] = accum;\n          }\n        }\n      }\n    }\n    return ops.tensor4d(output, x.shape, x.dtype);\n  }\n\n  batchNormalization(\n      x: Tensor4D, mean: Tensor4D|Tensor1D, variance: Tensor4D|Tensor1D,\n      varianceEpsilon: number, scale?: Tensor4D|Tensor1D,\n      offset?: Tensor4D|Tensor1D): Tensor4D {\n    this.assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const mVals = this.readSync(mean.dataId) as TypedArray;\n    const varVals = this.readSync(variance.dataId) as TypedArray;\n    const sVals = scale ? this.readSync(scale.dataId) as TypedArray :\n                          new Float32Array([1]);\n    const offVals = offset ? this.readSync(offset.dataId) as TypedArray :\n                             new Float32Array([0]);\n    const outVals = new Float32Array(xVals.length);\n\n    const offValsLength = offVals.length;\n    const sValsLength = sVals.length;\n    const varValsLength = varVals.length;\n    const mValsLength = mVals.length;\n\n    let offi = 0;\n    let mi = 0;\n    let si = 0;\n    let vi = 0;\n    for (let i = 0; i < xVals.length; ++i) {\n      outVals[i] = offVals[offi++] +\n          (xVals[i] - mVals[mi++]) * sVals[si++] /\n              Math.sqrt(varVals[vi++] + varianceEpsilon);\n      if (offi >= offValsLength) {\n        offi = 0;\n      }\n      if (mi >= mValsLength) {\n        mi = 0;\n      }\n      if (si >= sValsLength) {\n        si = 0;\n      }\n      if (vi >= varValsLength) {\n        vi = 0;\n      }\n    }\n    return tensor4d(outVals, x.shape);\n  }\n\n  localResponseNormalization4D(\n      x: Tensor4D, depthRadius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    this.assertNotComplex(x, 'localResponseNormalization4D');\n\n    const channels = x.shape[3];\n    const maxD = channels - 1;\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const size = x.size;\n    const result = new Float32Array(size);\n\n    function sumAcrossChannels(offset: number) {\n      const currentChannel = offset % channels;\n      let beginSumOffset =\n          offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n      const endSumOffset = offset - currentChannel +\n          Math.min(currentChannel + depthRadius, maxD);\n\n      let sum = 0.0;\n      for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n        const z = xValues[beginSumOffset];\n        sum += z * z;\n      }\n      return sum;\n    }\n\n    for (let offset = 0; offset < size; offset++) {\n      const sum = sumAcrossChannels(offset);\n      const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n      result[offset] = val;\n    }\n\n    return ops.tensor4d(result, x.shape);\n  }\n\n  LRNGrad(\n      dy: Tensor4D, inputImage: Tensor4D, outputImage: Tensor4D,\n      depthRadius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    this.assertNotComplex(dy, 'LRNGrad');\n    const channels = dy.shape[3];\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const inputImageValues = this.readSync(inputImage.dataId) as TypedArray;\n    const outputImageValues = this.readSync(outputImage.dataId) as TypedArray;\n    const result = new Float32Array(dy.size);\n    const size = dy.size;\n\n    for (let offset = 0; offset < size; offset++) {\n      const currentChannel = offset % channels;\n      const depthBegin =\n          (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n      const depthEnd = (offset - currentChannel) +\n          Math.min(channels, currentChannel + depthRadius + 1);\n\n      let norm = 0;\n      for (let k = depthBegin; k < depthEnd; k++) {\n        norm += Math.pow(inputImageValues[k], 2);\n      }\n      norm = alpha * norm + bias;\n\n      for (let k = depthBegin; k < depthEnd; k++) {\n        let dyi = -2 * alpha * beta * inputImageValues[k] *\n            outputImageValues[offset] / norm;\n        if (offset === k) {\n          dyi += Math.pow(norm, -beta);\n        }\n        dyi *= dyValues[offset];\n        result[k] += dyi;\n      }\n    }\n    return ops.tensor4d(result, dy.shape);\n  }\n\n  multinomial(\n      logits: Tensor2D, normalized: boolean, numSamples: number,\n      seed: number): Tensor2D {\n    this.assertNotComplex(logits, 'multinomial');\n\n    const probabilities = normalized ? logits : ops.softmax(logits);\n    const batchSize = probabilities.shape[0];\n    const numEvents = probabilities.shape[1];\n    const res = ops.zeros<Rank.R2>([batchSize, numSamples], 'int32');\n    const resVals = this.readSync(res.dataId) as TypedArray;\n    const probVals = this.readSync(probabilities.dataId) as TypedArray;\n\n    for (let b = 0; b < batchSize; ++b) {\n      const offset = b * numEvents;\n      // The cdf won't include the last event. It will be implicit if no other\n      // event happened.\n      const cdf = new Float32Array(numEvents - 1);\n      cdf[0] = probVals[offset];\n      for (let event = 1; event < cdf.length; ++event) {\n        cdf[event] = cdf[event - 1] + probVals[offset + event];\n      }\n\n      const random = seedrandom.alea(seed.toString());\n      const outOffset = b * numSamples;\n      for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n        const r = random();\n\n        // Assume last event happened by default.\n        resVals[outOffset + sampleId] = cdf.length;\n\n        for (let event = 0; event < cdf.length; event++) {\n          if (r < cdf[event]) {\n            resVals[outOffset + sampleId] = event;\n            break;\n          }\n        }\n      }\n    }\n    return res;\n  }\n\n  oneHot(indices: Tensor1D, depth: number, onValue: number, offValue: number):\n      Tensor2D {\n    this.assertNotComplex(indices, 'oneHot');\n\n    const res = new Float32Array(indices.size * depth);\n    res.fill(offValue);\n    const indicesVal = this.readSync(indices.dataId) as TypedArray;\n\n    for (let event = 0; event < indices.size; ++event) {\n      if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n        res[event * depth + indicesVal[event]] = onValue;\n      }\n    }\n    return ops.tensor2d(res, [indices.size, depth], 'int32');\n  }\n\n  nonMaxSuppression(\n      boxes: Tensor2D, scores: Tensor1D, maxOutputSize: number,\n      iouThreshold: number, scoreThreshold: number): Tensor1D {\n    this.assertNotComplex(boxes, 'nonMaxSuppression');\n\n    const boxesVals = this.readSync(boxes.dataId) as TypedArray;\n    const scoresVals = this.readSync(scores.dataId) as TypedArray;\n    return nonMaxSuppressionImpl(\n        boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n  }\n\n  fft(x: Tensor2D): Tensor2D {\n    return this.fftBatch(x, false);\n  }\n\n  ifft(x: Tensor2D): Tensor2D {\n    return this.fftBatch(x, true);\n  }\n\n  /**\n   * Calculate FFT of inner most elements of batch tensor.\n   */\n  private fftBatch(x: Tensor2D, inverse: boolean): Tensor2D {\n    const batch = x.shape[0];\n    const innerDim = x.shape[1];\n    // Collects real and imaginary values separately.\n    const realResult = ops.buffer(x.shape, 'float32');\n    const imagResult = ops.buffer(x.shape, 'float32');\n\n    const real = ops.real(x).as2D(batch, innerDim);\n    const imag = ops.imag(x).as2D(batch, innerDim);\n\n    for (let b = 0; b < batch; b++) {\n      // TODO: Support slice ops for complex type.\n      const r = real.slice([b, 0], [1, innerDim]);\n      const i = imag.slice([b, 0], [1, innerDim]);\n      const input = ops.complex(r, i);\n      // Run FFT by batch element.\n      const res =\n          this.readSync(this.fftImpl(input, inverse).dataId) as Float32Array;\n      for (let d = 0; d < innerDim; d++) {\n        const c = complex_util.getComplexWithIndex(res, d);\n        realResult.values[b * innerDim + d] = c.real;\n        imagResult.values[b * innerDim + d] = c.imag;\n      }\n    }\n\n    const t = ops.complex(realResult.toTensor(), imagResult.toTensor());\n    return t.as2D(batch, innerDim);\n  }\n\n  private fftImpl(x: Tensor2D, inverse: boolean): Tensor2D {\n    const x1D = x.as1D();\n\n    const n = x1D.size;\n\n    if (this.isExponentOf2(n)) {\n      let result = this.fftRadix2(x1D, n, inverse).as2D(x.shape[0], x.shape[1]);\n      if (inverse) {\n        result = ops.complex(\n                     ops.real(result).div(scalar(n)),\n                     ops.imag(result).div(scalar(n))) as Tensor2D;\n      }\n      return result;\n    } else {\n      const data = this.readSync(x.dataId) as TypedArray;\n      const rawOutput =\n          this.fourierTransformByMatmul(data, n, inverse) as Float32Array;\n      const output = complex_util.splitRealAndImagArrays(rawOutput);\n      return ops.complex(output.real, output.imag).as2D(x.shape[0], x.shape[1]);\n    }\n  }\n\n  private isExponentOf2(size: number): boolean {\n    return (size & size - 1) === 0;\n  }\n\n  // FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\n  private fftRadix2(input: Tensor1D, size: number, inverse: boolean): Tensor1D {\n    if (size === 1) {\n      return input;\n    }\n    const data = this.readSync(input.dataId) as TypedArray as Float32Array;\n    const half = size / 2;\n    const evenComplex = complex_util.complexWithEvenIndex(data);\n    let evenTensor = ops.complex(evenComplex.real, evenComplex.imag).as1D();\n    const oddComplex = complex_util.complexWithOddIndex(data);\n    let oddTensor = ops.complex(oddComplex.real, oddComplex.imag).as1D();\n\n    // Recursive call for half part of original input.\n    evenTensor = this.fftRadix2(evenTensor, half, inverse);\n    oddTensor = this.fftRadix2(oddTensor, half, inverse);\n\n    const e = complex_util.exponents(size, inverse);\n    const exponent = ops.complex(e.real, e.imag).mul(oddTensor);\n\n    const addPart = evenTensor.add(exponent);\n    const subPart = evenTensor.sub(exponent);\n\n    const realTensor = ops.real(addPart).concat(ops.real(subPart));\n    const imagTensor = ops.imag(addPart).concat(ops.imag(subPart));\n\n    return ops.complex(realTensor, imagTensor).as1D();\n  }\n\n  // Calculate fourier transform by multplying sinusoid matrix.\n  private fourierTransformByMatmul(\n      data: TypedArray, size: number, inverse: boolean): TypedArray {\n    const ret = new Float32Array(size * 2);\n    // TODO: Use matmul instead once it supports complex64 type.\n    for (let r = 0; r < size; r++) {\n      let real = 0.0;\n      let imag = 0.0;\n      for (let c = 0; c < size; c++) {\n        const e = complex_util.exponent(r * c, size, inverse);\n        const term = complex_util.getComplexWithIndex(data as Float32Array, c);\n        real += term.real * e.real - term.imag * e.imag;\n        imag += term.real * e.imag + term.imag * e.real;\n      }\n      if (inverse) {\n        real /= size;\n        imag /= size;\n      }\n      complex_util.assignToTypedArray(ret, real, imag, r);\n    }\n    return ret;\n  }\n\n  depthToSpace(x: Tensor4D, blockSize: number, dataFormat: 'NHWC'|'NCHW'):\n      Tensor4D {\n    util.assert(\n        dataFormat === 'NHWC',\n        () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n            dataFormat}`);\n    util.assert(\n        blockSize > 1,\n        () =>\n            `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n    const batchSize = x.shape[0];\n    const inputHeight = x.shape[1];\n    const inputWidth = x.shape[2];\n    const inputDepth = x.shape[3];\n\n    const outputHeight = inputHeight * blockSize;\n    const outputWidth = inputWidth * blockSize;\n    const outputDepth = inputDepth / (blockSize * blockSize);\n\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const result =\n        new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n    let outputIdx = 0;\n    for (let b = 0; b < batchSize; ++b) {\n      for (let h = 0; h < outputHeight; ++h) {\n        const inH = Math.floor(h / blockSize);\n        const offsetH = (h % blockSize);\n        for (let w = 0; w < outputWidth; ++w) {\n          const inW = Math.floor(w / blockSize);\n          const offsetW = (w % blockSize);\n          const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n          for (let d = 0; d < outputDepth; ++d) {\n            const inD = d + offsetD;\n            const inputIdx =\n                inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n            result[outputIdx++] = xValues[inputIdx];\n          }\n        }\n      }\n    }\n    return ops.tensor4d(\n        result, [batchSize, outputHeight, outputWidth, outputDepth]);\n  }\n\n  private broadcastedBinaryOp(\n      a: Tensor, b: Tensor, dtype: DataType,\n      op: (a: number, b: number) => number): Tensor {\n    const newShape =\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    const result = ops.buffer(newShape, dtype);\n    const aVals = this.readSync(a.dataId) as TypedArray;\n    const bVals = this.readSync(b.dataId) as TypedArray;\n    const aBroadcastDims = broadcast_util.getBroadcastDims(a.shape, newShape);\n    const bBroadcastDims = broadcast_util.getBroadcastDims(b.shape, newShape);\n\n    const resVals = result.values;\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resVals.length; ++i) {\n        resVals[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      const aBuf = this.bufferSync(a);\n      const bBuf = this.bufferSync(b);\n      for (let i = 0; i < resVals.length; ++i) {\n        const loc = result.indexToLoc(i);\n\n        const aLoc = loc.slice(-a.rank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = aBuf.locToIndex(aLoc);\n\n        const bLoc = loc.slice(-b.rank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = bBuf.locToIndex(bLoc);\n\n        resVals[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n    return result.toTensor();\n  }\n\n  private broadcastedBinaryComplexOp(\n      a: Tensor, b: Tensor,\n      op:\n          (aReal: number, aImag: number, bReal: number,\n           bImag: number) => {real: number, imag: number}): Tensor {\n    const newShape =\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    const realResult = ops.buffer(newShape, 'float32');\n    const imagResult = ops.buffer(newShape, 'float32');\n\n    const aVals = this.readSync(a.dataId) as TypedArray;\n    const bVals = this.readSync(b.dataId) as TypedArray;\n    const aBroadcastDims = broadcast_util.getBroadcastDims(a.shape, newShape);\n    const bBroadcastDims = broadcast_util.getBroadcastDims(b.shape, newShape);\n\n    const realVals = realResult.values;\n    const imagVals = imagResult.values;\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < realVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        realVals[i] = result.real;\n        imagVals[i] = result.imag;\n      }\n    } else {\n      const aRealBuf =\n          this.bufferSync(this.data.get(a.dataId).complexTensors.real);\n      const bRealBuf =\n          this.bufferSync(this.data.get(b.dataId).complexTensors.real);\n      for (let i = 0; i < realVals.length; i++) {\n        const loc = realResult.indexToLoc(i);\n\n        const aLoc = loc.slice(-a.rank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = aRealBuf.locToIndex(aLoc);\n\n        const bLoc = loc.slice(-b.rank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = bRealBuf.locToIndex(bLoc);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        realVals[i] = opResult.real;\n        imagVals[i] = opResult.imag;\n      }\n    }\n    return this.complex(realResult.toTensor(), imagResult.toTensor());\n  }\n\n  split<T extends Tensor>(x: T, sizeSplits: number[], axis: number): T[] {\n    return split(x, sizeSplits, axis);\n  }\n\n  dispose() {}\n\n  floatPrecision(): 16|32 {\n    return 32;\n  }\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return EPSILON_FLOAT32;\n  }\n\n  cropAndResize(\n      images: Tensor4D,\n      boxes: Tensor2D,\n      boxIndex: Tensor1D,\n      cropSize: [number, number],\n      method: string,\n      extrapolationValue: number,\n  ) {\n    const [batch, imageHeight, imageWidth, numChannels] = images.shape;\n    const numBoxes = boxes.shape[0];\n\n    const [cropHeight, cropWidth] = cropSize;\n    const output = ops.buffer(\n        [numBoxes, cropHeight, cropWidth, numChannels], images.dtype);\n\n    const boxVals = this.readSync(boxes.dataId) as TypedArray;\n    const boxIndVals = this.readSync(boxIndex.dataId) as TypedArray;\n    const imageVals = this.readSync(images.dataId) as TypedArray;\n\n    const inStride = images.strides;   // to calculate flat indexes into image\n    const outStride = output.strides;  // to calculate flat indexes into output\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n    for (let b = 0; b < numBoxes; b++) {\n      const startInd = b * 4;\n      const y1 = boxVals[startInd];\n      const x1 = boxVals[startInd + 1];\n      const y2 = boxVals[startInd + 2];\n      const x2 = boxVals[startInd + 3];\n\n      const bInd: number = boxIndVals[b];\n      if (bInd >= batch) {\n        continue;\n      }\n\n      const heightScale = (cropHeight > 1) ?\n          (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) :\n          0;\n      const widthScale =\n          (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n      for (let y = 0; y < cropHeight; y++) {\n        const yInd: number = (cropHeight > 1) ?\n            y1 * (imageHeight - 1) + y * (heightScale) :\n            0.5 * (y1 + y2) * (imageHeight - 1);\n\n        if (yInd < 0 || yInd > imageHeight - 1) {\n          for (let x = 0; x < cropWidth; x++) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n          }\n          continue;\n        }\n\n        if (method === 'bilinear') {\n          const topInd = Math.floor(yInd);\n          const bottomInd = Math.ceil(yInd);\n          const yLerp = yInd - topInd;\n\n          for (let x = 0; x < cropWidth; x++) {\n            const xInd = (cropWidth > 1) ?\n                x1 * (imageWidth - 1) + x * widthScale :\n                0.5 * (x1 + x2) * (imageWidth - 1);\n\n            if (xInd < 0 || xInd > imageWidth - 1) {\n              for (let c = 0; c < numChannels; c++) {\n                const ind =\n                    c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                output.values[ind] = extrapolationValue;\n              }\n              continue;\n            }\n\n            const leftInd = Math.floor(xInd);\n            const rightInd = Math.ceil(xInd);\n            const xLerp = xInd - leftInd;\n\n            for (let c = 0; c < numChannels; c++) {\n              let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                  bInd * inStride[0];\n              const topLeft = imageVals[ind];\n\n              ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                  bInd * inStride[0];\n              const topRight = imageVals[ind];\n\n              ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                  bInd * inStride[0];\n              const bottomLeft = imageVals[ind];\n\n              ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                  bInd * inStride[0];\n              const bottomRight = imageVals[ind];\n\n              const top = topLeft + (topRight - topLeft) * xLerp;\n              const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n\n              ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = top + ((bottom - top) * yLerp);\n            }\n          }\n        } else {  // method == \"nearest\"\n          for (let x = 0; x < cropWidth; ++x) {\n            const xInd = (cropWidth > 1) ?\n                x1 * (imageWidth - 1) + x * widthScale :\n                0.5 * (x1 + x2) * (imageWidth - 1);\n\n            if (xInd < 0 || xInd > imageWidth - 1) {\n              for (let c = 0; c < numChannels; c++) {\n                const ind =\n                    c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                output.values[ind] = extrapolationValue;\n              }\n              continue;\n            }\n\n            const closestX = Math.round(xInd);\n            const closestY = Math.round(yInd);\n            for (let c = 0; c < numChannels; c++) {\n              const inInd = c + closestX * inStride[2] +\n                  closestY * inStride[1] + bInd * inStride[0];\n              const outInd =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[outInd] = imageVals[inInd];\n            }\n          }\n        }\n      }\n    }\n    return output.toTensor() as Tensor4D;\n  }\n\n  sparseToDense<R extends Rank>(\n      sparseIndices: Tensor, sparseValues: Tensor, outputShape: ShapeMap[R],\n      defaultValue: Scalar): Tensor<R> {\n    const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n        scatter_nd_util.calculateShapes(\n            sparseValues, sparseIndices, outputShape);\n    const sumDupeIndices = false;\n    return this.scatter(\n        sparseIndices, sparseValues, outputShape, outputSize, sliceSize,\n        numUpdates, sliceRank, strides, defaultValue, sumDupeIndices);\n  }\n\n  gatherND(x: Tensor, indices: Tensor): Tensor {\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n\n    const [resultShape, numSlices, sliceSize, strides] =\n        gather_nd_util.prepareAndValidate(x, indices);\n    if (numSlices === 0) {\n      return tensor([], resultShape, x.dtype);\n    }\n\n    const buffer = new TensorBuffer([numSlices, sliceSize], x.dtype);\n    const indicesData = this.readSync(indices.dataId) as TypedArray;\n    const xData = this.readSync(x.dataId) as TypedArray;\n\n    for (let i = 0; i < numSlices; i++) {\n      const index = [];\n      let flattenIndex = 0;\n      for (let j = 0; j < sliceRank; j++) {\n        const dim = indicesData[i * sliceRank + j];\n        flattenIndex += dim * strides[j];\n        index.push(dim);\n      }\n      if (flattenIndex < 0 || flattenIndex >= x.size / sliceSize) {\n        throw new Error(\n            `Invalid indices: ${index} does not index into ${x.shape}`);\n      }\n\n      for (let k = 0; k < sliceSize; k++) {\n        buffer.values[i * sliceSize + k] = xData[flattenIndex * sliceSize + k];\n      }\n    }\n    return buffer.toTensor().reshape(resultShape);\n  }\n\n  scatterND<R extends Rank>(\n      indices: Tensor, updates: Tensor, shape: ShapeMap[R]): Tensor<R> {\n    const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n        scatter_nd_util.calculateShapes(updates, indices, shape);\n    const defaultValue = scalar(0);\n    const sumDupeIndices = true;\n    return this.scatter(\n        indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank,\n        strides, defaultValue, sumDupeIndices);\n  }\n\n  fill<R extends Rank>(\n      shape: ShapeMap[R], value: number|string, dtype?: DataType): Tensor<R> {\n    dtype = dtype || inferDtype(value);\n    const values = getArrayFromDType(dtype, sizeFromShape(shape)) as TypedArray;\n    values.fill(value as number);\n    return Tensor.make(shape, {values}, dtype);\n  }\n\n  onesLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    if (x.dtype === 'string') {\n      throw new Error('onesLike is not supported for string tensors');\n    } else {\n      return this.fill(x.shape, 1, x.dtype);\n    }\n  }\n\n  zerosLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    const values =\n        getArrayFromDType(x.dtype, sizeFromShape(x.shape)) as TypedArray;\n    return Tensor.make(x.shape, {values}, x.dtype);\n  }\n\n  linspace(start: number, stop: number, num: number): Tensor1D {\n    return backend_util.linspaceImpl(start, stop, num);\n  }\n\n  private scatter<R extends Rank>(\n      indices: Tensor, updates: Tensor, shape: ShapeMap[R], outputSize: number,\n      sliceSize: number, numUpdates: number, sliceRank: number,\n      strides: number[], defaultValue: Scalar,\n      sumDupeIndices: boolean): Tensor<R> {\n    const flattenShape = [outputSize / sliceSize, sliceSize];\n\n    const indicesData = this.readSync(indices.dataId) as TypedArray;\n    const updatesData = this.readSync(updates.dataId) as TypedArray;\n\n    if (outputSize === 0) {\n      return tensor([], shape, updates.dtype);\n    }\n\n    const buffer = new TensorBuffer(flattenShape, updates.dtype as 'float32');\n    buffer.values.fill((this.readSync(defaultValue.dataId) as TypedArray)[0]);\n\n    for (let i = 0; i < numUpdates; i++) {\n      const index = [];\n      let flattenIndex = 0;\n      for (let j = 0; j < sliceRank; j++) {\n        const dim = indicesData[i * sliceRank + j];\n        index.push(dim);\n        flattenIndex += dim * strides[j];\n      }\n\n      if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n        throw new Error(\n            `Invalid indices: ${index} does not index into ${shape}`);\n      }\n\n      for (let k = 0; k < sliceSize; k++) {\n        if (sumDupeIndices) {\n          buffer.values[flattenIndex * sliceSize + k] +=\n              updatesData[i * sliceSize + k];\n        } else {\n          buffer.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n              updatesData[0] :\n              updatesData[i * sliceSize + k];\n        }\n      }\n    }\n    return buffer.toTensor().reshape(shape);\n  }\n}\n\nENGINE.registerBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const ERF_P = 0.3275911;\nexport const ERF_A1 = 0.254829592;\nexport const ERF_A2 = -0.284496736;\nexport const ERF_A3 = 1.421413741;\nexport const ERF_A4 = -1.453152027;\nexport const ERF_A5 = 1.061405429;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENV} from '../environment';\nimport {Platform} from './platform';\n\nexport class PlatformBrowser implements Platform {\n  private textEncoder: TextEncoder;\n\n  constructor() {\n    // According to the spec, the built-in encoder can do only UTF-8 encoding.\n    // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n    this.textEncoder = new TextEncoder();\n  }\n\n  fetch(path: string, init?: RequestInit): Promise<Response> {\n    return fetch(path, init);\n  }\n\n  now(): number {\n    return performance.now();\n  }\n\n  encode(text: string, encoding: string): Uint8Array {\n    if (encoding !== 'utf-8' && encoding !== 'utf8') {\n      throw new Error(\n          `Browser's encoder only supports utf-8, but got ${encoding}`);\n    }\n    return this.textEncoder.encode(text);\n  }\n  decode(bytes: Uint8Array, encoding: string): string {\n    return new TextDecoder(encoding).decode(bytes);\n  }\n}\n\nif (ENV.get('IS_BROWSER')) {\n  ENV.setPlatform('browser', new PlatformBrowser());\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENV} from '../environment';\n\nimport {Platform} from './platform';\n\n// We are wrapping this within an object so it can be stubbed by Jasmine.\nexport const getNodeFetch = {\n  // tslint:disable-next-line:no-require-imports\n  importFetch: () => require('node-fetch')\n};\n\ntype FetchFn = (url: string, init?: RequestInit) => Promise<Response>;\nlet systemFetch: FetchFn;\n// These getters and setters are for testing so we don't export a mutable\n// variable.\nexport function resetSystemFetch() {\n  systemFetch = null;\n}\nexport function setSystemFetch(fetchFn: FetchFn) {\n  systemFetch = fetchFn;\n}\nexport function getSystemFetch(): FetchFn {\n  return systemFetch;\n}\n\nexport class PlatformNode implements Platform {\n  private textEncoder: TextEncoder;\n  // tslint:disable-next-line:no-any\n  util: any;\n\n  constructor() {\n    // tslint:disable-next-line:no-require-imports\n    this.util = require('util');\n    // According to the spec, the built-in encoder can do only UTF-8 encoding.\n    // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n    this.textEncoder = new this.util.TextEncoder();\n  }\n\n  fetch(path: string, requestInits?: RequestInit): Promise<Response> {\n    if (ENV.global.fetch != null) {\n      return ENV.global.fetch(path, requestInits);\n    }\n\n    if (systemFetch == null) {\n      systemFetch = getNodeFetch.importFetch();\n    }\n    return systemFetch(path, requestInits);\n  }\n\n  now(): number {\n    const time = process.hrtime();\n    return time[0] * 1000 + time[1] / 1000000;\n  }\n\n  encode(text: string, encoding: string): Uint8Array {\n    if (encoding !== 'utf-8' && encoding !== 'utf8') {\n      throw new Error(\n          `Node built-in encoder only supports utf-8, but got ${encoding}`);\n    }\n    return this.textEncoder.encode(text);\n  }\n  decode(bytes: Uint8Array, encoding: string): string {\n    if (bytes.length === 0) {\n      return '';\n    }\n    return new this.util.TextDecoder(encoding).decode(bytes);\n  }\n}\n\nif (ENV.get('IS_NODE')) {\n  ENV.setPlatform('node', new PlatformNode());\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/* Type definitions for exporting and importing of models. */\n\n/**\n * A map from Tensor dtype to number of bytes per element of the Tensor.\n */\nexport const DTYPE_VALUE_SIZE_MAP: {[dtype: string]: number} = {\n  'float32': 4,\n  'int32': 4,\n  'uint16': 2,\n  'uint8': 1,\n  'bool': 1,\n};\n\n/**\n * A weight manifest.\n *\n * The weight manifest consists of an ordered list of weight-manifest groups.\n * Each weight-manifest group (\"group\" for short hereafter) consists of a\n * number of weight values stored in a number of paths.\n * See the documentation of `WeightManifestGroupConfig` below for more details.\n */\nexport declare type WeightsManifestConfig = WeightsManifestGroupConfig[];\n\n/**\n * A weight-manifest group.\n *\n * Consists of an ordered list of weight values encoded in binary format,\n * stored in an ordered list of paths.\n */\nexport declare interface WeightsManifestGroupConfig {\n  /**\n   * An ordered list of paths.\n   *\n   * Paths are intentionally abstract in order to be general. For example, they\n   * can be relative URL paths or relative paths on the file system.\n   */\n  paths: string[];\n\n  /**\n   * Specifications of the weights stored in the paths.\n   */\n  weights: WeightsManifestEntry[];\n}\n\n/**\n * Group to which the weight belongs.\n *\n * - 'optimizer': Weight from a stateful optimizer.\n */\nexport type WeightGroup = 'model'|'optimizer';\n\n/**\n * An entry in the weight manifest.\n *\n * The entry contains specification of a weight.\n */\nexport declare interface WeightsManifestEntry {\n  /**\n   * Name of the weight, e.g., 'Dense_1/bias'\n   */\n  name: string;\n\n  /**\n   * Shape of the weight.\n   */\n  shape: number[];\n\n  /**\n   * Data type of the weight.\n   */\n  dtype: 'float32'|'int32'|'bool'|'string';\n\n  /**\n   * Type of the weight.\n   *\n   * Optional.\n   *\n   * The value 'optimizer' indicates the weight belongs to an optimizer\n   * (i.e., used only during model training and not during inference).\n   */\n  group?: WeightGroup;\n\n  /**\n   * Information for dequantization of the weight.\n   */\n  quantization?: {\n    scale: number,           // The scaling constant to multiply by.\n    min: number,             // The (possibly nudged) minimum weight to add.\n    dtype: 'uint16'|'uint8'  // The dtype of the quantized weights.\n  };\n}\n\n/**\n * Options for saving a model.\n * @innamespace io\n */\nexport interface SaveConfig {\n  /**\n   * Whether to save only the trainable weights of the model, ignoring the\n   * non-trainable ones.\n   */\n  trainableOnly?: boolean;\n\n  /**\n   * Whether the optimizer will be saved (if exists).\n   *\n   * Default: `false`.\n   */\n  includeOptimizer?: boolean;\n}\n\n/**\n * Result of a saving operation.\n */\nexport interface SaveResult {\n  /**\n   * Information about the model artifacts saved.\n   */\n  modelArtifactsInfo: ModelArtifactsInfo;\n\n  /**\n   * HTTP responses from the server that handled the model-saving request (if\n   * any). This is applicable only to server-based saving routes.\n   */\n  responses?: Response[];\n\n  /**\n   * Error messages and related data (if any).\n   */\n  errors?: Array<{}|string>;\n}\n\nexport declare interface ModelArtifactsInfo {\n  /**\n   * Timestamp for when the model is saved.\n   */\n  dateSaved: Date;\n\n  /**\n   * TODO (cais,yassogba) consider removing GraphDef as GraphDefs now\n   * come in a JSON format and none of our IOHandlers support a non json\n   * format. We could conder replacing this with 'Binary' if we want to\n   * allow future handlers to save to non json formats (though they will\n   * probably want more information than 'Binary').\n   * Type of the model topology\n   *\n   * Type of the model topology\n   *\n   * Possible values:\n   *   - JSON: JSON config (human-readable, e.g., Keras JSON).\n   *   - GraphDef: TensorFlow\n   *     [GraphDef](https://www.tensorflow.org/extend/tool_developers/#graphdef)\n   *     protocol buffer (binary).\n   */\n  modelTopologyType: 'JSON'|'GraphDef';\n\n  /**\n   * Size of model topology (Keras JSON or GraphDef), in bytes.\n   */\n  modelTopologyBytes?: number;\n\n  /**\n   * Size of weight specification or manifest, in bytes.\n   */\n  weightSpecsBytes?: number;\n\n  /**\n   * Size of weight value data, in bytes.\n   */\n  weightDataBytes?: number;\n}\n\n/** Model training configuration. */\nexport declare interface TrainingConfig {\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\n  // See\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tfjs-layers/blob/master/src/keras_format/training_config.ts\n  /** Optimizer used for the model training. */\n  optimizer_config: {};\n\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\n  /** Loss function(s) for the model's output(s). */\n  loss: string|string[]|{[key: string]: string};\n\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\n  /** Metric function(s) for the model's output(s). */\n  metrics?: string[]|{[key: string]: string};\n\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\n  weighted_metrics?: string[];\n\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\n  sample_weight_mode?: string;\n\n  loss_weights?: number[]|{[key: string]: number};\n}\n\n/**\n * The serialized artifacts of a model, including topology and weights.\n *\n * The `modelTopology`, `trainingConfig`, `weightSpecs` and `weightData` fields\n * of this interface are optional, in order to support topology- or weights-only\n * saving and loading.\n *\n * Note this interface is used internally in IOHandlers.  For the file format\n * written to disk as `model.json`, see `ModelJSON`.\n */\nexport declare interface ModelArtifacts {\n  /**\n   * Model topology.\n   *\n   * For Keras-style `tf.Model`s, this is a JSON object.\n   * For TensorFlow-style models (e.g., `SavedModel`), this is the JSON\n   * encoding of the `GraphDef` protocol buffer.\n   */\n  modelTopology?: {}|ArrayBuffer;\n\n  /**\n   * Serialized configuration for the model's training.\n   */\n  trainingConfig?: TrainingConfig;\n\n  /**\n   * Weight specifications.\n   *\n   * This corresponds to the weightsData below.\n   */\n  weightSpecs?: WeightsManifestEntry[];\n\n  /**\n   * Binary buffer for all weight values concatenated in the order specified\n   * by `weightSpecs`.\n   */\n  weightData?: ArrayBuffer;\n\n  /**\n   * Hard-coded format name for models saved from TensorFlow.js or converted\n   * by TensorFlow.js Converter.\n   */\n  format?: string;\n\n  /**\n   * What library is responsible for originally generating this artifact.\n   *\n   * Used for debugging purposes. E.g., 'TensorFlow.js v1.0.0'.\n   */\n  generatedBy?: string;\n\n  /**\n   * What library or tool is responsible for converting the original model\n   * to this format, applicable only if the model is output by a converter.\n   *\n   * Used for debugging purposes.  E.g., 'TensorFlow.js Converter v1.0.0'.\n   *\n   * A value of `null` means the model artifacts are generated without any\n   * conversion process (e.g., saved directly from a TensorFlow.js\n   * `tf.LayersModel` instance.)\n   */\n  convertedBy?: string|null;\n\n  /**\n   * User-defined metadata about the model.\n   */\n  userDefinedMetadata?: {};\n}\n\n/**\n * The on-disk format of the `model.json` file.\n *\n * TF.js 1.0 always populates the optional fields when writing model.json.\n * Prior versions did not provide those fields.\n */\nexport declare interface ModelJSON {\n  /**\n   * Model topology.\n   *\n   * For Keras-style `tf.Model`s, this is a JSON object.\n   * For TensorFlow-style models (e.g., `SavedModel`), this is the JSON\n   * encoding of the `GraphDef` protocol buffer.\n   */\n  modelTopology: {};\n\n  /** Model training configuration. */\n  trainingConfig?: TrainingConfig;\n\n  /**\n   * Weights manifest.\n   *\n   * The weights manifest consists of an ordered list of weight-manifest\n   * groups. Each weight-manifest group consists of a number of weight values\n   * stored in a number of paths. See the documentation of\n   * `WeightsManifestConfig` for more details.\n   */\n  weightsManifest: WeightsManifestConfig;\n\n  /**\n   * Hard-coded format name for models saved from TensorFlow.js or converted\n   * by TensorFlow.js Converter.\n   */\n  format?: string;\n\n  /**\n   * What library is responsible for originally generating this artifact.\n   *\n   * Used for debugging purposes. E.g., 'TensorFlow.js v1.0.0'.\n   */\n  generatedBy?: string;\n\n  /**\n   * What library or tool is responsible for converting the original model\n   * to this format, applicable only if the model is output by a converter.\n   *\n   * Used for debugging purposes.  E.g., 'TensorFlow.js Converter v1.0.0'.\n   *\n   * A value of `null` means the model artifacts are generated without any\n   * conversion process (e.g., saved directly from a TensorFlow.js\n   * `tf.LayersModel` instance.)\n   */\n  convertedBy?: string|null;\n\n  /**\n   * User-defined metadata about the model.\n   */\n  userDefinedMetadata?: {};\n}\n\n/**\n * Type definition for handlers of loading operations.\n */\nexport type LoadHandler = () => Promise<ModelArtifacts>;\n\n/**\n * Type definition for handlers of saving operations.\n */\nexport type SaveHandler = (modelArtifact: ModelArtifacts) =>\n    Promise<SaveResult>;\n\n/**\n * Interface for a model import/export handler.\n *\n * The `save` and `load` handlers are both optional, in order to allow handlers\n * that support only saving or loading.\n */\n// tslint:disable-next-line:interface-name\nexport interface IOHandler {\n  save?: SaveHandler;\n  load?: LoadHandler;\n}\n\n/**\n * An interface for the manager of a model store.\n *\n * A model store is defined as a storage medium on which multiple models can\n * be stored. Each stored model has a unique `path` as its identifier.\n * A `ModelStoreManager` for the store allows actions including\n *\n * - Listing the models stored in the store.\n * - Deleting a model from the store.\n */\nexport interface ModelStoreManager {\n  /**\n   * List all models in the model store.\n   *\n   * @returns A dictionary mapping paths of existing models to their\n   *   model artifacts info. Model artifacts info include type of the model's\n   *   topology, byte sizes of the topology, weights, etc.\n   */\n  listModels(): Promise<{[path: string]: ModelArtifactsInfo}>;\n\n  /**\n   * Remove a model specified by `path`.\n   *\n   * @param path\n   * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\n   *   is successful).\n   * @throws Error if deletion fails, e.g., if no model exists at `path`.\n   */\n  removeModel(path: string): Promise<ModelArtifactsInfo>;\n}\n\n/**\n * Callback for the progress of a long-running action such as an HTTP\n * request for a large binary object.\n *\n * `fraction` should be a number in the [0, 1] interval, indicating how\n * much of the action has completed.\n */\nexport type OnProgressCallback = (fraction: number) => void;\n\n/** @innamespace io */\nexport interface LoadOptions {\n  /**\n   * RequestInit (options) for HTTP requests.\n   *\n   * For detailed information on the supported fields, see\n   * [https://developer.mozilla.org/en-US/docs/Web/API/Request/Request](\n   *     https://developer.mozilla.org/en-US/docs/Web/API/Request/Request)\n   */\n  requestInit?: RequestInit;\n\n  /**\n   * Progress callback.\n   */\n  onProgress?: OnProgressCallback;\n\n  /**\n   * A function used to override the `window.fetch` function.\n   */\n  fetchFunc?: Function;\n\n  /**\n   * Strict loading model: whether extraneous weights or missing\n   * weights should trigger an `Error`.\n   *\n   * If `true`, require that the provided weights exactly match those\n   * required by the layers. `false` means that both extra weights\n   * and missing weights will be silently ignored.\n   *\n   * Default: `true`.\n   */\n  strict?: boolean;\n\n  /**\n   * Path prefix for weight files, by default this is calculated from the\n   * path of the model JSON file.\n   *\n   * For instance, if the path to the model JSON file is\n   * `http://localhost/foo/model.json`, then the default path prefix will be\n   * `http://localhost/foo/`. If a weight file has the path value\n   * `group1-shard1of2` in the weight manifest, then the weight file will be\n   * loaded from `http://localhost/foo/group1-shard1of2` by default. However,\n   * if you provide a `weightPathPrefix` value of\n   * `http://localhost/foo/alt-weights`, then the weight file will be loaded\n   * from the path `http://localhost/foo/alt-weights/group1-shard1of2` instead.\n   */\n  weightPathPrefix?: string;\n\n  /**\n   * Whether the module or model is to be loaded from TF Hub.\n   *\n   * Setting this to `true` allows passing a TF-Hub module URL, omitting the\n   * standard model file name and the query parameters.\n   *\n   * Default: `false`.\n   */\n  fromTFHub?: boolean;\n}\n\n/**\n * Additional options for Platform.fetch\n */\nexport interface RequestDetails {\n  /**\n   * Is this request for a binary file (as opposed to a json file)\n   */\n  isBinary?: boolean;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {tensor} from '../ops/tensor_ops';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\nimport {TypedArray} from '../types';\nimport {sizeFromShape} from '../util';\n\nimport {DTYPE_VALUE_SIZE_MAP, ModelArtifacts, ModelArtifactsInfo, WeightGroup, WeightsManifestEntry} from './types';\n\n/** Number of bytes reserved for the length of the string. (32bit integer). */\nconst NUM_BYTES_STRING_LENGTH = 4;\n\n/**\n * Encode a map from names to weight values as an ArrayBuffer, along with an\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\n *\n * This function does not perform sharding.\n *\n * This function is the reverse of `decodeWeights`.\n *\n * @param tensors A map (\"dict\") from names to tensors.\n * @param group Group to which the weights belong (optional).\n * @returns A `Promise` of\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\n *     concatenated.\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\n *     tensor names, `dtype`s and shapes.\n * @throws Error: on unsupported tensor `dtype`.\n */\nexport async function encodeWeights(\n    tensors: NamedTensorMap|NamedTensor[], group?: WeightGroup):\n    Promise<{data: ArrayBuffer, specs: WeightsManifestEntry[]}> {\n  // TODO(adarob, cais): Support quantization.\n  const specs: WeightsManifestEntry[] = [];\n  const dataPromises: Array<Promise<TypedArray>> = [];\n\n  const names: string[] = Array.isArray(tensors) ?\n      tensors.map(tensor => tensor.name) :\n      Object.keys(tensors);\n\n  for (let i = 0; i < names.length; ++i) {\n    const name = names[i];\n    const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n    if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' &&\n        t.dtype !== 'string') {\n      throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);\n    }\n    const spec: WeightsManifestEntry = {name, shape: t.shape, dtype: t.dtype};\n    if (t.dtype === 'string') {\n      const utf8bytes = new Promise<TypedArray>(async resolve => {\n        const vals = await t.bytes() as Uint8Array[];\n        const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) +\n            NUM_BYTES_STRING_LENGTH * vals.length;\n        const bytes = new Uint8Array(totalNumBytes);\n        let offset = 0;\n        for (let i = 0; i < vals.length; i++) {\n          const val = vals[i];\n          const bytesOfLength =\n              new Uint8Array(new Uint32Array([val.length]).buffer);\n          bytes.set(bytesOfLength, offset);\n          offset += NUM_BYTES_STRING_LENGTH;\n          bytes.set(val, offset);\n          offset += val.length;\n        }\n        resolve(bytes);\n      });\n      dataPromises.push(utf8bytes);\n    } else {\n      dataPromises.push(t.data());\n    }\n    if (group != null) {\n      spec.group = group;\n    }\n    specs.push(spec);\n  }\n\n  const tensorValues = await Promise.all(dataPromises);\n  return {data: concatenateTypedArrays(tensorValues), specs};\n}\n\n/**\n * Decode flat ArrayBuffer as weights.\n *\n * This function does not handle sharding.\n *\n * This function is the reverse of `encodeWeights`.\n *\n * @param buffer A flat ArrayBuffer carrying the binary values of the tensors\n *   concatenated in the order specified in `specs`.\n * @param specs Specifications of the names, dtypes and shapes of the tensors\n *   whose value are encoded by `buffer`.\n * @return A map from tensor name to tensor value, with the names corresponding\n *   to names in `specs`.\n * @throws Error, if any of the tensors has unsupported dtype.\n */\nexport function decodeWeights(\n    buffer: ArrayBuffer, specs: WeightsManifestEntry[]): NamedTensorMap {\n  // TODO(adarob, cais): Support quantization.\n  const out: NamedTensorMap = {};\n  let offset = 0;\n  for (const spec of specs) {\n    const name = spec.name;\n    const dtype = spec.dtype;\n    const shape = spec.shape;\n    const size = sizeFromShape(shape);\n    let values: TypedArray|string[]|Uint8Array[];\n\n    if ('quantization' in spec) {\n      const quantization = spec.quantization;\n      if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\n        throw new Error(\n            `Weight ${spec.name} has unknown ` +\n            `quantization dtype ${quantization.dtype}. ` +\n            `Supported quantization dtypes are: 'uint8' and 'uint16'.`);\n      }\n      const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n      const byteBuffer =\n          buffer.slice(offset, offset + size * quantizationSizeFactor);\n      const quantizedArray = (quantization.dtype === 'uint8') ?\n          new Uint8Array(byteBuffer) :\n          new Uint16Array(byteBuffer);\n      if (dtype === 'float32') {\n        values = Float32Array.from(\n            quantizedArray, v => v * quantization.scale + quantization.min);\n      } else if (dtype === 'int32') {\n        values = Int32Array.from(\n            quantizedArray,\n            v => Math.round(v * quantization.scale + quantization.min));\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n      offset += size * quantizationSizeFactor;\n    } else if (dtype === 'string') {\n      const size = sizeFromShape(spec.shape);\n      values = [];\n      for (let i = 0; i < size; i++) {\n        const byteLength = new Uint32Array(\n            buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n        offset += NUM_BYTES_STRING_LENGTH;\n        const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));\n        (values as Uint8Array[]).push(bytes);\n        offset += byteLength;\n      }\n    } else {\n      const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n      const byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);\n\n      if (dtype === 'float32') {\n        values = new Float32Array(byteBuffer);\n      } else if (dtype === 'int32') {\n        values = new Int32Array(byteBuffer);\n      } else if (dtype === 'bool') {\n        values = new Uint8Array(byteBuffer);\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n      offset += size * dtypeFactor;\n    }\n\n    out[name] = tensor(values, shape, dtype);\n  }\n  return out;\n}\n\n/**\n * Concatenate TypedArrays into an ArrayBuffer.\n */\nexport function concatenateTypedArrays(xs: TypedArray[]): ArrayBuffer {\n  // TODO(adarob, cais): Support quantization.\n  if (xs === null) {\n    throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);\n  }\n\n  let totalByteLength = 0;\n\n  // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\n  // can have a different byte length from that of the `TypedArray` itself,\n  // for example, when the `TypedArray` is created from an offset in an\n  // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\n  // the `TypedArray` in byte length. If an element of `xs` does not show\n  // this property, a new `TypedArray` that satisfy this property will be\n  // constructed and pushed into `normalizedXs`.\n  const normalizedXs: TypedArray[] = [];\n  xs.forEach((x: TypedArray) => {\n    totalByteLength += x.byteLength;\n    // tslint:disable:no-any\n    normalizedXs.push(\n        x.byteLength === x.buffer.byteLength ? x :\n                                               new (x.constructor as any)(x));\n    if (!(x as any instanceof Float32Array || x as any instanceof Int32Array ||\n          x as any instanceof Uint8Array)) {\n      throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);\n    }\n    // tslint:enable:no-any\n  });\n\n  const y = new Uint8Array(totalByteLength);\n  let offset = 0;\n  normalizedXs.forEach((x: TypedArray) => {\n    y.set(new Uint8Array(x.buffer), offset);\n    offset += x.byteLength;\n  });\n\n  return y.buffer;\n}\n\n// Use Buffer on Node.js instead of Blob/atob/btoa\nconst useNodeBuffer = typeof Buffer !== 'undefined' &&\n    (typeof Blob === 'undefined' || typeof atob === 'undefined' ||\n     typeof btoa === 'undefined');\n\n/**\n * Calculate the byte length of a JavaScript string.\n *\n * Note that a JavaScript string can contain wide characters, therefore the\n * length of the string is not necessarily equal to the byte length.\n *\n * @param str Input string.\n * @returns Byte length.\n */\nexport function stringByteLength(str: string): number {\n  if (useNodeBuffer) {\n    return Buffer.byteLength(str);\n  }\n  return new Blob([str]).size;\n}\n\n/**\n * Encode an ArrayBuffer as a base64 encoded string.\n *\n * @param buffer `ArrayBuffer` to be converted.\n * @returns A string that base64-encodes `buffer`.\n */\nexport function arrayBufferToBase64String(buffer: ArrayBuffer): string {\n  if (useNodeBuffer) {\n    return Buffer.from(buffer).toString('base64');\n  }\n  return btoa(String.fromCharCode.apply(null, new Uint8Array(buffer)));\n}\n\n/**\n * Decode a base64 string as an ArrayBuffer.\n *\n * @param str Base64 string.\n * @returns Decoded `ArrayBuffer`.\n */\nexport function base64StringToArrayBuffer(str: string): ArrayBuffer {\n  if (useNodeBuffer) {\n    const buf = Buffer.from(str, 'base64');\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n  }\n  const s = atob(str);\n  const buffer = new Uint8Array(s.length);\n  for (let i = 0; i < s.length; ++i) {\n    buffer.set([s.charCodeAt(i)], i);\n  }\n  return buffer.buffer;\n}\n\n/**\n * Concatenate a number of ArrayBuffers into one.\n *\n * @param buffers A number of array buffers to concatenate.\n * @returns Result of concatenating `buffers` in order.\n */\nexport function concatenateArrayBuffers(buffers: ArrayBuffer[]): ArrayBuffer {\n  let totalByteLength = 0;\n  buffers.forEach((buffer: ArrayBuffer) => {\n    totalByteLength += buffer.byteLength;\n  });\n\n  const temp = new Uint8Array(totalByteLength);\n  let offset = 0;\n  buffers.forEach((buffer: ArrayBuffer) => {\n    temp.set(new Uint8Array(buffer), offset);\n    offset += buffer.byteLength;\n  });\n  return temp.buffer;\n}\n\n/**\n * Get the basename of a path.\n *\n * Behaves in a way analogous to Linux's basename command.\n *\n * @param path\n */\nexport function basename(path: string): string {\n  const SEPARATOR = '/';\n  path = path.trim();\n  while (path.endsWith(SEPARATOR)) {\n    path = path.slice(0, path.length - 1);\n  }\n  const items = path.split(SEPARATOR);\n  return items[items.length - 1];\n}\n\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\nexport function getModelArtifactsInfoForJSON(modelArtifacts: ModelArtifacts):\n    ModelArtifactsInfo {\n  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n    throw new Error('Expected JSON model topology, received ArrayBuffer.');\n  }\n\n  return {\n    dateSaved: new Date(),\n    modelTopologyType: 'JSON',\n    modelTopologyBytes: modelArtifacts.modelTopology == null ?\n        0 :\n        stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n    weightSpecsBytes: modelArtifacts.weightSpecs == null ?\n        0 :\n        stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n    weightDataBytes: modelArtifacts.weightData == null ?\n        0 :\n        modelArtifacts.weightData.byteLength,\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IOHandler} from './types';\n\nexport type IORouter = (url: string|string[], onProgress?: Function) =>\n    IOHandler;\n\nexport class IORouterRegistry {\n  // Singleton instance.\n  private static instance: IORouterRegistry;\n\n  private saveRouters: IORouter[];\n  private loadRouters: IORouter[];\n\n  private constructor() {\n    this.saveRouters = [];\n    this.loadRouters = [];\n  }\n\n  private static getInstance(): IORouterRegistry {\n    if (IORouterRegistry.instance == null) {\n      IORouterRegistry.instance = new IORouterRegistry();\n    }\n    return IORouterRegistry.instance;\n  }\n\n  /**\n   * Register a save-handler router.\n   *\n   * @param saveRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `save` method defined or `null`.\n   */\n  static registerSaveRouter(saveRouter: IORouter) {\n    IORouterRegistry.getInstance().saveRouters.push(saveRouter);\n  }\n\n  /**\n   * Register a load-handler router.\n   *\n   * @param loadRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `load` method defined or `null`.\n   */\n  static registerLoadRouter(loadRouter: IORouter) {\n    IORouterRegistry.getInstance().loadRouters.push(loadRouter);\n  }\n\n  /**\n   * Look up IOHandler for saving, given a URL-like string.\n   *\n   * @param url\n   * @returns If only one match is found, an instance of IOHandler with the\n   * `save` method defined. If no match is found, `null`.\n   * @throws Error, if more than one match is found.\n   */\n  static getSaveHandlers(url: string|string[]): IOHandler[] {\n    return IORouterRegistry.getHandlers(url, 'save');\n  }\n\n  /**\n   * Look up IOHandler for loading, given a URL-like string.\n   *\n   * @param url\n   * @param onProgress Optional, progress callback function, fired periodically\n   *   before the load is completed.\n   * @returns All valid handlers for `url`, given the currently registered\n   *   handler routers.\n   */\n  static getLoadHandlers(url: string|string[], onProgress?: Function):\n      IOHandler[] {\n    return IORouterRegistry.getHandlers(url, 'load', onProgress);\n  }\n\n  private static getHandlers(\n      url: string|string[], handlerType: 'save'|'load',\n      onProgress?: Function): IOHandler[] {\n    const validHandlers: IOHandler[] = [];\n    const routers = handlerType === 'load' ?\n        IORouterRegistry.getInstance().loadRouters :\n        IORouterRegistry.getInstance().saveRouters;\n    routers.forEach(router => {\n      const handler = router(url, onProgress);\n      if (handler !== null) {\n        validHandlers.push(handler);\n      }\n    });\n    return validHandlers;\n  }\n}\n\nexport const registerSaveRouter = (loudRouter: IORouter) =>\n    IORouterRegistry.registerSaveRouter(loudRouter);\nexport const registerLoadRouter = (loudRouter: IORouter) =>\n    IORouterRegistry.registerLoadRouter(loudRouter);\nexport const getSaveHandlers = (url: string|string[]) =>\n    IORouterRegistry.getSaveHandlers(url);\nexport const getLoadHandlers = (url: string|string[], onProgress?: Function) =>\n    IORouterRegistry.getLoadHandlers(url, onProgress);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Classes and functions for model management across multiple storage mediums.\n *\n * Supported client actions:\n * - Listing models on all registered storage mediums.\n * - Remove model by URL from any registered storage mediums, by using URL\n *   string.\n * - Moving or copying model from one path to another in the same medium or from\n *   one medium to another, by using URL strings.\n */\n\nimport {assert} from '../util';\n\nimport {IORouterRegistry} from './router_registry';\nimport {ModelArtifactsInfo, ModelStoreManager} from './types';\n\nconst URL_SCHEME_SUFFIX = '://';\n\nexport class ModelStoreManagerRegistry {\n  // Singleton instance.\n  private static instance: ModelStoreManagerRegistry;\n\n  private managers: {[scheme: string]: ModelStoreManager};\n\n  private constructor() {\n    this.managers = {};\n  }\n\n  private static getInstance(): ModelStoreManagerRegistry {\n    if (ModelStoreManagerRegistry.instance == null) {\n      ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();\n    }\n    return ModelStoreManagerRegistry.instance;\n  }\n\n  /**\n   * Register a save-handler router.\n   *\n   * @param saveRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `save` method defined or `null`.\n   */\n  static registerManager(scheme: string, manager: ModelStoreManager) {\n    assert(scheme != null, () => 'scheme must not be undefined or null.');\n    if (scheme.endsWith(URL_SCHEME_SUFFIX)) {\n      scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));\n    }\n    assert(scheme.length > 0, () => 'scheme must not be an empty string.');\n    const registry = ModelStoreManagerRegistry.getInstance();\n    assert(\n        registry.managers[scheme] == null,\n        () => `A model store manager is already registered for scheme '${\n            scheme}'.`);\n    registry.managers[scheme] = manager;\n  }\n\n  static getManager(scheme: string): ModelStoreManager {\n    const manager = this.getInstance().managers[scheme];\n    if (manager == null) {\n      throw new Error(`Cannot find model manager for scheme '${scheme}'`);\n    }\n    return manager;\n  }\n\n  static getSchemes(): string[] {\n    return Object.keys(this.getInstance().managers);\n  }\n}\n\n/**\n * Helper method for parsing a URL string into a scheme and a path.\n *\n * @param url E.g., 'localstorage://my-model'\n * @returns A dictionary with two fields: scheme and path.\n *   Scheme: e.g., 'localstorage' in the example above.\n *   Path: e.g., 'my-model' in the example above.\n */\nfunction parseURL(url: string): {scheme: string, path: string} {\n  if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {\n    throw new Error(\n        `The url string provided does not contain a scheme. ` +\n        `Supported schemes are: ` +\n        `${ModelStoreManagerRegistry.getSchemes().join(',')}`);\n  }\n  return {\n    scheme: url.split(URL_SCHEME_SUFFIX)[0],\n    path: url.split(URL_SCHEME_SUFFIX)[1],\n  };\n}\n\nasync function cloneModelInternal(\n    sourceURL: string, destURL: string,\n    deleteSource = false): Promise<ModelArtifactsInfo> {\n  assert(\n      sourceURL !== destURL,\n      () => `Old path and new path are the same: '${sourceURL}'`);\n\n  const loadHandlers = IORouterRegistry.getLoadHandlers(sourceURL);\n  assert(\n      loadHandlers.length > 0,\n      () => `Copying failed because no load handler is found for source URL ${\n          sourceURL}.`);\n  assert(\n      loadHandlers.length < 2,\n      () => `Copying failed because more than one (${loadHandlers.length}) ` +\n          `load handlers for source URL ${sourceURL}.`);\n  const loadHandler = loadHandlers[0];\n\n  const saveHandlers = IORouterRegistry.getSaveHandlers(destURL);\n  assert(\n      saveHandlers.length > 0,\n      () => `Copying failed because no save handler is found for destination ` +\n          `URL ${destURL}.`);\n  assert(\n      saveHandlers.length < 2,\n      () => `Copying failed because more than one (${loadHandlers.length}) ` +\n          `save handlers for destination URL ${destURL}.`);\n  const saveHandler = saveHandlers[0];\n\n  const sourceScheme = parseURL(sourceURL).scheme;\n  const sourcePath = parseURL(sourceURL).path;\n  const sameMedium = sourceScheme === parseURL(sourceURL).scheme;\n\n  const modelArtifacts = await loadHandler.load();\n\n  // If moving within the same storage medium, remove the old model as soon as\n  // the loading is done. Without doing this, it is possible that the combined\n  // size of the two models will cause the cloning to fail.\n  if (deleteSource && sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme)\n        .removeModel(sourcePath);\n  }\n\n  const saveResult = await saveHandler.save(modelArtifacts);\n\n  // If moving between mediums, the deletion is done after the save succeeds.\n  // This guards against the case in which saving to the destination medium\n  // fails.\n  if (deleteSource && !sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme)\n        .removeModel(sourcePath);\n  }\n\n  return saveResult.modelArtifactsInfo;\n}\n\n/**\n * List all models stored in registered storage mediums.\n *\n * For a web browser environment, the registered mediums are Local Storage and\n * IndexedDB.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @returns A `Promise` of a dictionary mapping URLs of existing models to\n * their model artifacts info. URLs include medium-specific schemes, e.g.,\n *   'indexeddb://my/model/1'. Model artifacts info include type of the\n * model's topology, byte sizes of the topology, weights, etc.\n */\n/**\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function listModels(): Promise<{[url: string]: ModelArtifactsInfo}> {\n  const schemes = ModelStoreManagerRegistry.getSchemes();\n  const out: {[url: string]: ModelArtifactsInfo} = {};\n  for (const scheme of schemes) {\n    const schemeOut =\n        await ModelStoreManagerRegistry.getManager(scheme).listModels();\n    for (const path in schemeOut) {\n      const url = scheme + URL_SCHEME_SUFFIX + path;\n      out[url] = schemeOut[path];\n    }\n  }\n  return out;\n}\n\n/**\n * Remove a model specified by URL from a reigstered storage medium.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @param url A URL to a stored model, with a scheme prefix, e.g.,\n *   'localstorage://my-model-1', 'indexeddb://my/model/2'.\n * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\n *   is successful).\n * @throws Error if deletion fails, e.g., if no model exists at `path`.\n */\n/**\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function removeModel(url: string): Promise<ModelArtifactsInfo> {\n  const schemeAndPath = parseURL(url);\n  const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);\n  return manager.removeModel(schemeAndPath.path);\n}\n\n/**\n * Copy a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Copying within a storage medium, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Copying between two storage mediums, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Copy the model, from Local Storage to IndexedDB.\n * await tf.io.copyModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove both models.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of copying.\n * @param destURL Destination URL of copying.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n */\n/**\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function copyModel(\n    sourceURL: string, destURL: string): Promise<ModelArtifactsInfo> {\n  const deleteSource = false;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n\n/**\n * Move a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Moving within a storage medium, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Moving between two storage mediums, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Move the model, from Local Storage to IndexedDB.\n * await tf.io.moveModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove the moved model.\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of moving.\n * @param destURL Destination URL of moving.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n */\n/**\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function moveModel(\n    sourceURL: string, destURL: string): Promise<ModelArtifactsInfo> {\n  const deleteSource = true;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n\nexport {moveModel, copyModel, removeModel, listModels};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENV} from '../environment';\nimport {getModelArtifactsInfoForJSON} from './io_utils';\nimport {ModelStoreManagerRegistry} from './model_management';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelArtifactsInfo, ModelStoreManager, SaveResult} from './types';\n\nconst DATABASE_NAME = 'tensorflowjs';\nconst DATABASE_VERSION = 1;\n\n// Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\nconst MODEL_STORE_NAME = 'models_store';\n// 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\nconst INFO_STORE_NAME = 'model_info_store';\n\n/**\n * Delete the entire database for tensorflow.js, including the models store.\n */\nexport async function deleteDatabase(): Promise<void> {\n  const idbFactory = getIndexedDBFactory();\n\n  return new Promise<void>((resolve, reject) => {\n    const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n    deleteRequest.onsuccess = () => resolve();\n    deleteRequest.onerror = error => reject(error);\n  });\n}\n\nfunction getIndexedDBFactory(): IDBFactory {\n  if (!ENV.getBool('IS_BROWSER')) {\n    // TODO(cais): Add more info about what IOHandler subtypes are available.\n    //   Maybe point to a doc page on the web and/or automatically determine\n    //   the available IOHandlers and print them in the error message.\n    throw new Error(\n        'Failed to obtain IndexedDB factory because the current environment' +\n        'is not a web browser.');\n  }\n  // tslint:disable-next-line:no-any\n  const theWindow: any = window;\n  const factory = theWindow.indexedDB || theWindow.mozIndexedDB ||\n      theWindow.webkitIndexedDB || theWindow.msIndexedDB ||\n      theWindow.shimIndexedDB;\n  if (factory == null) {\n    throw new Error(\n        'The current browser does not appear to support IndexedDB.');\n  }\n  return factory;\n}\n\nfunction setUpDatabase(openRequest: IDBRequest) {\n  const db = openRequest.result as IDBDatabase;\n  db.createObjectStore(MODEL_STORE_NAME, {keyPath: 'modelPath'});\n  db.createObjectStore(INFO_STORE_NAME, {keyPath: 'modelPath'});\n}\n\n/**\n * IOHandler subclass: Browser IndexedDB.\n *\n * See the doc string of `browserIndexedDB` for more details.\n */\nexport class BrowserIndexedDB implements IOHandler {\n  protected readonly indexedDB: IDBFactory;\n  protected readonly modelPath: string;\n\n  static readonly URL_SCHEME = 'indexeddb://';\n\n  constructor(modelPath: string) {\n    this.indexedDB = getIndexedDBFactory();\n\n    if (modelPath == null || !modelPath) {\n      throw new Error(\n          'For IndexedDB, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    // TODO(cais): Support saving GraphDef models.\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserLocalStorage.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    }\n\n    return this.databaseAction(this.modelPath, modelArtifacts) as\n        Promise<SaveResult>;\n  }\n\n  async load(): Promise<ModelArtifacts> {\n    return this.databaseAction(this.modelPath) as Promise<ModelArtifacts>;\n  }\n\n  /**\n   * Perform database action to put model artifacts into or read model artifacts\n   * from IndexedDB object store.\n   *\n   * Whether the action is put or get depends on whether `modelArtifacts` is\n   * specified. If it is specified, the action will be put; otherwise the action\n   * will be get.\n   *\n   * @param modelPath A unique string path for the model.\n   * @param modelArtifacts If specified, it will be the model artifacts to be\n   *   stored in IndexedDB.\n   * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\n   *   of `ModelArtifacts`, if the action is get.\n   */\n  private databaseAction(modelPath: string, modelArtifacts?: ModelArtifacts):\n      Promise<ModelArtifacts|SaveResult> {\n    return new Promise<ModelArtifacts|SaveResult>((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n\n        if (modelArtifacts == null) {\n          // Read model out from object store.\n          const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n          const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n          const getRequest = modelStore.get(this.modelPath);\n          getRequest.onsuccess = () => {\n            if (getRequest.result == null) {\n              db.close();\n              return reject(new Error(\n                  `Cannot find model with path '${this.modelPath}' ` +\n                  `in IndexedDB.`));\n            } else {\n              resolve(getRequest.result.modelArtifacts);\n            }\n          };\n          getRequest.onerror = error => {\n            db.close();\n            return reject(getRequest.error);\n          };\n          modelTx.oncomplete = () => db.close();\n        } else {\n          // Put model into object store.\n          const modelArtifactsInfo: ModelArtifactsInfo =\n              getModelArtifactsInfoForJSON(modelArtifacts);\n          // First, put ModelArtifactsInfo into info store.\n          const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n          let infoStore = infoTx.objectStore(INFO_STORE_NAME);\n          const putInfoRequest =\n              infoStore.put({modelPath: this.modelPath, modelArtifactsInfo});\n          let modelTx: IDBTransaction;\n          putInfoRequest.onsuccess = () => {\n            // Second, put model data into model store.\n            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n            const putModelRequest = modelStore.put({\n              modelPath: this.modelPath,\n              modelArtifacts,\n              modelArtifactsInfo\n            });\n            putModelRequest.onsuccess = () => resolve({modelArtifactsInfo});\n            putModelRequest.onerror = error => {\n              // If the put-model request fails, roll back the info entry as\n              // well.\n              infoStore = infoTx.objectStore(INFO_STORE_NAME);\n              const deleteInfoRequest = infoStore.delete(this.modelPath);\n              deleteInfoRequest.onsuccess = () => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n              deleteInfoRequest.onerror = error => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n            };\n          };\n          putInfoRequest.onerror = error => {\n            db.close();\n            return reject(putInfoRequest.error);\n          };\n          infoTx.oncomplete = () => {\n            if (modelTx == null) {\n              db.close();\n            } else {\n              modelTx.oncomplete = () => db.close();\n            }\n          };\n        }\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}\n\nexport const indexedDBRouter: IORouter = (url: string|string[]) => {\n  if (!ENV.getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n      return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n\n/**\n * Creates a browser IndexedDB IOHandler for saving and loading models.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save('indexeddb://MyModel'));\n * console.log(saveResult);\n * ```\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\n *   which can be used with, e.g., `tf.Model.save`.\n */\nexport function browserIndexedDB(modelPath: string): IOHandler {\n  return new BrowserIndexedDB(modelPath);\n}\n\nfunction maybeStripScheme(key: string) {\n  return key.startsWith(BrowserIndexedDB.URL_SCHEME) ?\n      key.slice(BrowserIndexedDB.URL_SCHEME.length) :\n      key;\n}\n\nexport class BrowserIndexedDBManager implements ModelStoreManager {\n  private indexedDB: IDBFactory;\n\n  constructor() {\n    this.indexedDB = getIndexedDBFactory();\n  }\n\n  async listModels(): Promise<{[path: string]: ModelArtifactsInfo}> {\n    return new Promise<{[path: string]: ModelArtifactsInfo}>(\n        (resolve, reject) => {\n          const openRequest =\n              this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n          openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n          openRequest.onsuccess = () => {\n            const db = openRequest.result;\n            const tx = db.transaction(INFO_STORE_NAME, 'readonly');\n            const store = tx.objectStore(INFO_STORE_NAME);\n            // tslint:disable:max-line-length\n            // Need to cast `store` as `any` here because TypeScript's DOM\n            // library does not have the `getAll()` method even though the\n            // method is supported in the latest version of most mainstream\n            // browsers:\n            // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n            // tslint:enable:max-line-length\n            // tslint:disable-next-line:no-any\n            const getAllInfoRequest = (store as any).getAll() as IDBRequest;\n            getAllInfoRequest.onsuccess = () => {\n              const out: {[path: string]: ModelArtifactsInfo} = {};\n              for (const item of getAllInfoRequest.result) {\n                out[item.modelPath] = item.modelArtifactsInfo;\n              }\n              resolve(out);\n            };\n            getAllInfoRequest.onerror = error => {\n              db.close();\n              return reject(getAllInfoRequest.error);\n            };\n            tx.oncomplete = () => db.close();\n          };\n          openRequest.onerror = error => reject(openRequest.error);\n        });\n  }\n\n  async removeModel(path: string): Promise<ModelArtifactsInfo> {\n    path = maybeStripScheme(path);\n    return new Promise<ModelArtifactsInfo>((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n        const infoStore = infoTx.objectStore(INFO_STORE_NAME);\n\n        const getInfoRequest = infoStore.get(path);\n        let modelTx: IDBTransaction;\n        getInfoRequest.onsuccess = () => {\n          if (getInfoRequest.result == null) {\n            db.close();\n            return reject(new Error(\n                `Cannot find model with path '${path}' ` +\n                `in IndexedDB.`));\n          } else {\n            // First, delete the entry in the info store.\n            const deleteInfoRequest = infoStore.delete(path);\n            const deleteModelData = () => {\n              // Second, delete the entry in the model store.\n              modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n              const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n              const deleteModelRequest = modelStore.delete(path);\n              deleteModelRequest.onsuccess = () =>\n                  resolve(getInfoRequest.result.modelArtifactsInfo);\n              deleteModelRequest.onerror = error =>\n                  reject(getInfoRequest.error);\n            };\n            // Proceed with deleting model data regardless of whether deletion\n            // of info data succeeds or not.\n            deleteInfoRequest.onsuccess = deleteModelData;\n            deleteInfoRequest.onerror = error => {\n              deleteModelData();\n              db.close();\n              return reject(getInfoRequest.error);\n            };\n          }\n        };\n        getInfoRequest.onerror = error => {\n          db.close();\n          return reject(getInfoRequest.error);\n        };\n\n        infoTx.oncomplete = () => {\n          if (modelTx == null) {\n            db.close();\n          } else {\n            modelTx.oncomplete = () => db.close();\n          }\n        };\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}\n\nif (ENV.getBool('IS_BROWSER')) {\n  // Wrap the construction and registration, to guard against browsers that\n  // don't support Local Storage.\n  try {\n    ModelStoreManagerRegistry.registerManager(\n        BrowserIndexedDB.URL_SCHEME, new BrowserIndexedDBManager());\n  } catch (err) {\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENV} from '../environment';\nimport {assert} from '../util';\nimport {arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON} from './io_utils';\nimport {ModelStoreManagerRegistry} from './model_management';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelArtifactsInfo, ModelStoreManager, SaveResult} from './types';\n\nconst PATH_SEPARATOR = '/';\nconst PATH_PREFIX = 'tensorflowjs_models';\nconst INFO_SUFFIX = 'info';\nconst MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nconst WEIGHT_SPECS_SUFFIX = 'weight_specs';\nconst WEIGHT_DATA_SUFFIX = 'weight_data';\nconst MODEL_METADATA_SUFFIX = 'model_metadata';\n\n/**\n * Purge all tensorflow.js-saved model artifacts from local storage.\n *\n * @returns Paths of the models purged.\n */\nexport function purgeLocalStorageArtifacts(): string[] {\n  if (!ENV.getBool('IS_BROWSER') ||\n      typeof window.localStorage === 'undefined') {\n    throw new Error(\n        'purgeLocalStorageModels() cannot proceed because local storage is ' +\n        'unavailable in the current environment.');\n  }\n  const LS = window.localStorage;\n  const purgedModelPaths: string[] = [];\n  for (let i = 0; i < LS.length; ++i) {\n    const key = LS.key(i);\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    if (key.startsWith(prefix) && key.length > prefix.length) {\n      LS.removeItem(key);\n      const modelName = getModelPathFromKey(key);\n      if (purgedModelPaths.indexOf(modelName) === -1) {\n        purgedModelPaths.push(modelName);\n      }\n    }\n  }\n  return purgedModelPaths;\n}\n\nfunction getModelKeys(path: string): {\n  info: string,\n  topology: string,\n  weightSpecs: string,\n  weightData: string,\n  modelMetadata: string\n} {\n  return {\n    info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n    topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n    weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n    weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n    modelMetadata:\n        [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n  };\n}\n\n/**\n * Get model path from a local-storage key.\n *\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\n *\n * @param key\n */\nfunction getModelPathFromKey(key: string) {\n  const items = key.split(PATH_SEPARATOR);\n  if (items.length < 3) {\n    throw new Error(`Invalid key format: ${key}`);\n  }\n  return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\n\nfunction maybeStripScheme(key: string) {\n  return key.startsWith(BrowserLocalStorage.URL_SCHEME) ?\n      key.slice(BrowserLocalStorage.URL_SCHEME.length) :\n      key;\n}\n\ndeclare type LocalStorageKeys = {\n  info: string,\n  topology: string,\n  weightSpecs: string,\n  weightData: string,\n  modelMetadata: string\n};\n\n/**\n * IOHandler subclass: Browser Local Storage.\n *\n * See the doc string to `browserLocalStorage` for more details.\n */\nexport class BrowserLocalStorage implements IOHandler {\n  protected readonly LS: Storage;\n  protected readonly modelPath: string;\n  protected readonly keys: LocalStorageKeys;\n\n  static readonly URL_SCHEME = 'localstorage://';\n\n  constructor(modelPath: string) {\n    if (!ENV.getBool('IS_BROWSER') ||\n        typeof window.localStorage === 'undefined') {\n      // TODO(cais): Add more info about what IOHandler subtypes are\n      // available.\n      //   Maybe point to a doc page on the web and/or automatically determine\n      //   the available IOHandlers and print them in the error message.\n      throw new Error(\n          'The current environment does not support local storage.');\n    }\n    this.LS = window.localStorage;\n\n    if (modelPath == null || !modelPath) {\n      throw new Error(\n          'For local storage, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n    this.keys = getModelKeys(this.modelPath);\n  }\n\n  /**\n   * Save model artifacts to browser local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @param modelArtifacts The model artifacts to be stored.\n   * @returns An instance of SaveResult.\n   */\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserLocalStorage.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    } else {\n      const topology = JSON.stringify(modelArtifacts.modelTopology);\n      const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n\n      const modelArtifactsInfo: ModelArtifactsInfo =\n          getModelArtifactsInfoForJSON(modelArtifacts);\n\n      try {\n        this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\n        this.LS.setItem(this.keys.topology, topology);\n        this.LS.setItem(this.keys.weightSpecs, weightSpecs);\n        this.LS.setItem(\n            this.keys.weightData,\n            arrayBufferToBase64String(modelArtifacts.weightData));\n        this.LS.setItem(this.keys.modelMetadata, JSON.stringify({\n          format: modelArtifacts.format,\n          generatedBy: modelArtifacts.generatedBy,\n          convertedBy: modelArtifacts.convertedBy\n        }));\n\n        return {modelArtifactsInfo};\n      } catch (err) {\n        // If saving failed, clean up all items saved so far.\n        this.LS.removeItem(this.keys.info);\n        this.LS.removeItem(this.keys.topology);\n        this.LS.removeItem(this.keys.weightSpecs);\n        this.LS.removeItem(this.keys.weightData);\n        this.LS.removeItem(this.keys.modelMetadata);\n\n        throw new Error(\n            `Failed to save model '${this.modelPath}' to local storage: ` +\n            `size quota being exceeded is a possible cause of this failure: ` +\n            `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` +\n            `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` +\n            `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);\n      }\n    }\n  }\n\n  /**\n   * Load a model from local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model (if loading succeeds).\n   */\n  async load(): Promise<ModelArtifacts> {\n    const info =\n        JSON.parse(this.LS.getItem(this.keys.info)) as ModelArtifactsInfo;\n    if (info == null) {\n      throw new Error(\n          `In local storage, there is no model with name '${this.modelPath}'`);\n    }\n\n    if (info.modelTopologyType !== 'JSON') {\n      throw new Error(\n          'BrowserLocalStorage does not support loading non-JSON model ' +\n          'topology yet.');\n    }\n\n    const out: ModelArtifacts = {};\n\n    // Load topology.\n    const topology = JSON.parse(this.LS.getItem(this.keys.topology));\n    if (topology == null) {\n      throw new Error(\n          `In local storage, the topology of model '${this.modelPath}' ` +\n          `is missing.`);\n    }\n    out.modelTopology = topology;\n\n    // Load weight specs.\n    const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\n    if (weightSpecs == null) {\n      throw new Error(\n          `In local storage, the weight specs of model '${this.modelPath}' ` +\n          `are missing.`);\n    }\n    out.weightSpecs = weightSpecs;\n\n    // Load meta-data fields.\n    const metadataString = this.LS.getItem(this.keys.modelMetadata);\n    if (metadataString != null) {\n      const metadata = JSON.parse(metadataString) as\n          {format: string, generatedBy: string, convertedBy: string};\n      out.format = metadata['format'];\n      out.generatedBy = metadata['generatedBy'];\n      out.convertedBy = metadata['convertedBy'];\n    }\n\n    // Load weight data.\n    const weightDataBase64 = this.LS.getItem(this.keys.weightData);\n    if (weightDataBase64 == null) {\n      throw new Error(\n          `In local storage, the binary weight values of model ` +\n          `'${this.modelPath}' are missing.`);\n    }\n    out.weightData = base64StringToArrayBuffer(weightDataBase64);\n\n    return out;\n  }\n}\n\nexport const localStorageRouter: IORouter = (url: string|string[]) => {\n  if (!ENV.getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n      return browserLocalStorage(\n          url.slice(BrowserLocalStorage.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\n\n/**\n * Factory function for local storage IOHandler.\n *\n * This `IOHandler` supports both `save` and `load`.\n *\n * For each model's saved artifacts, four items are saved to local storage.\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\n *     model, such as date saved, type of the topology, size in bytes, etc.\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\n *     style models, this is a stringized JSON.\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\n *     model, can be used to decode the saved binary weight values (see\n *     item below).\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\n *     weight values, stored as a base64-encoded string.\n *\n * Saving may throw an `Error` if the total size of the artifacts exceed the\n * browser-specific quota.\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\n *   `tf.Model.save`.\n */\nexport function browserLocalStorage(modelPath: string): IOHandler {\n  return new BrowserLocalStorage(modelPath);\n}\n\nexport class BrowserLocalStorageManager implements ModelStoreManager {\n  private readonly LS: Storage;\n\n  constructor() {\n    assert(\n        ENV.getBool('IS_BROWSER'),\n        () => 'Current environment is not a web browser');\n    assert(\n        typeof window.localStorage !== 'undefined',\n        () => 'Current browser does not appear to support localStorage');\n    this.LS = window.localStorage;\n  }\n\n  async listModels(): Promise<{[path: string]: ModelArtifactsInfo}> {\n    const out: {[path: string]: ModelArtifactsInfo} = {};\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    const suffix = PATH_SEPARATOR + INFO_SUFFIX;\n    for (let i = 0; i < this.LS.length; ++i) {\n      const key = this.LS.key(i);\n      if (key.startsWith(prefix) && key.endsWith(suffix)) {\n        const modelPath = getModelPathFromKey(key);\n        out[modelPath] = JSON.parse(this.LS.getItem(key)) as ModelArtifactsInfo;\n      }\n    }\n    return out;\n  }\n\n  async removeModel(path: string): Promise<ModelArtifactsInfo> {\n    path = maybeStripScheme(path);\n    const keys = getModelKeys(path);\n    if (this.LS.getItem(keys.info) == null) {\n      throw new Error(`Cannot find model at path '${path}'`);\n    }\n    const info = JSON.parse(this.LS.getItem(keys.info)) as ModelArtifactsInfo;\n\n    this.LS.removeItem(keys.info);\n    this.LS.removeItem(keys.topology);\n    this.LS.removeItem(keys.weightSpecs);\n    this.LS.removeItem(keys.weightData);\n    return info;\n  }\n}\n\nif (ENV.getBool('IS_BROWSER')) {\n  // Wrap the construction and registration, to guard against browsers that\n  // don't support Local Storage.\n  try {\n    ModelStoreManagerRegistry.registerManager(\n        BrowserLocalStorage.URL_SCHEME, new BrowserLocalStorageManager());\n  } catch (err) {\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\n\nimport {ENV} from '../environment';\nimport {basename, concatenateArrayBuffers, getModelArtifactsInfoForJSON} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelJSON, SaveResult, WeightsManifestConfig, WeightsManifestEntry} from './types';\n\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\n\nfunction defer<T>(f: () => T): Promise<T> {\n  return new Promise(resolve => setTimeout(resolve)).then(f);\n}\n\nexport class BrowserDownloads implements IOHandler {\n  private readonly modelTopologyFileName: string;\n  private readonly weightDataFileName: string;\n  private readonly jsonAnchor: HTMLAnchorElement;\n  private readonly weightDataAnchor: HTMLAnchorElement;\n\n  static readonly URL_SCHEME = 'downloads://';\n\n  constructor(fileNamePrefix?: string) {\n    if (!ENV.getBool('IS_BROWSER')) {\n      // TODO(cais): Provide info on what IOHandlers are available under the\n      //   current environment.\n      throw new Error(\n          'browserDownloads() cannot proceed because the current environment ' +\n          'is not a browser.');\n    }\n\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n\n    this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName =\n        fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (typeof (document) === 'undefined') {\n      throw new Error(\n          'Browser downloads are not supported in ' +\n          'this environment since `document` is not present');\n    }\n    const weightsURL = window.URL.createObjectURL(new Blob(\n        [modelArtifacts.weightData], {type: 'application/octet-stream'}));\n\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserDownloads.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    } else {\n      const weightsManifest: WeightsManifestConfig = [{\n        paths: ['./' + this.weightDataFileName],\n        weights: modelArtifacts.weightSpecs\n      }];\n      const modelTopologyAndWeightManifest: ModelJSON = {\n        modelTopology: modelArtifacts.modelTopology,\n        format: modelArtifacts.format,\n        generatedBy: modelArtifacts.generatedBy,\n        convertedBy: modelArtifacts.convertedBy,\n        weightsManifest\n      };\n      const modelTopologyAndWeightManifestURL =\n          window.URL.createObjectURL(new Blob(\n              [JSON.stringify(modelTopologyAndWeightManifest)],\n              {type: 'application/json'}));\n\n      // If anchor elements are not provided, create them without attaching them\n      // to parents, so that the downloaded file names can be controlled.\n      const jsonAnchor = this.jsonAnchor == null ? document.createElement('a') :\n                                                   this.jsonAnchor;\n      jsonAnchor.download = this.modelTopologyFileName;\n      jsonAnchor.href = modelTopologyAndWeightManifestURL;\n      // Trigger downloads by evoking a click event on the download anchors.\n      // When multiple downloads are started synchronously, Firefox will only\n      // save the last one.\n      await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n\n      if (modelArtifacts.weightData != null) {\n        const weightDataAnchor = this.weightDataAnchor == null ?\n            document.createElement('a') :\n            this.weightDataAnchor;\n        weightDataAnchor.download = this.weightDataFileName;\n        weightDataAnchor.href = weightsURL;\n        await defer(\n            () => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n      }\n\n      return {modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts)};\n    }\n  }\n}\n\nclass BrowserFiles implements IOHandler {\n  private readonly files: File[];\n\n  constructor(files: File[]) {\n    if (files == null || files.length < 1) {\n      throw new Error(\n          `When calling browserFiles, at least 1 file is required, ` +\n          `but received ${files}`);\n    }\n    this.files = files;\n  }\n\n  async load(): Promise<ModelArtifacts> {\n    const jsonFile = this.files[0];\n    const weightFiles = this.files.slice(1);\n\n    return new Promise<ModelArtifacts>((resolve, reject) => {\n      const jsonReader = new FileReader();\n      jsonReader.onload = (event: Event) => {\n        // tslint:disable-next-line:no-any\n        const modelJSON = JSON.parse((event.target as any).result) as ModelJSON;\n        const modelTopology = modelJSON.modelTopology;\n        if (modelTopology == null) {\n          reject(new Error(\n              `modelTopology field is missing from file ${jsonFile.name}`));\n          return;\n        }\n\n        if (weightFiles.length === 0) {\n          resolve({modelTopology});\n        }\n\n        const weightsManifest = modelJSON.weightsManifest;\n        if (weightsManifest == null) {\n          reject(new Error(\n              `weightManifest field is missing from file ${jsonFile.name}`));\n          return;\n        }\n\n        let pathToFile: {[path: string]: File};\n        try {\n          pathToFile =\n              this.checkManifestAndWeightFiles(weightsManifest, weightFiles);\n        } catch (err) {\n          reject(err);\n          return;\n        }\n\n        const weightSpecs: WeightsManifestEntry[] = [];\n        const paths: string[] = [];\n        const perFileBuffers: ArrayBuffer[] = [];\n        weightsManifest.forEach(weightsGroup => {\n          weightsGroup.paths.forEach(path => {\n            paths.push(path);\n            perFileBuffers.push(null);\n          });\n          weightSpecs.push(...weightsGroup.weights);\n        });\n\n        weightsManifest.forEach(weightsGroup => {\n          weightsGroup.paths.forEach(path => {\n            const weightFileReader = new FileReader();\n            weightFileReader.onload = (event: Event) => {\n              // tslint:disable-next-line:no-any\n              const weightData = (event.target as any).result as ArrayBuffer;\n              const index = paths.indexOf(path);\n              perFileBuffers[index] = weightData;\n              if (perFileBuffers.indexOf(null) === -1) {\n                resolve({\n                  modelTopology,\n                  weightSpecs,\n                  weightData: concatenateArrayBuffers(perFileBuffers),\n                });\n              }\n            };\n            weightFileReader.onerror = error =>\n                reject(`Failed to weights data from file of path '${path}'.`);\n            weightFileReader.readAsArrayBuffer(pathToFile[path]);\n          });\n        });\n      };\n      jsonReader.onerror = error => reject(\n          `Failed to read model topology and weights manifest JSON ` +\n          `from file '${jsonFile.name}'. BrowserFiles supports loading ` +\n          `Keras-style tf.Model artifacts only.`);\n      jsonReader.readAsText(jsonFile);\n    });\n  }\n\n  /**\n   * Check the compatibility between weights manifest and weight files.\n   */\n  private checkManifestAndWeightFiles(\n      manifest: WeightsManifestConfig, files: File[]): {[path: string]: File} {\n    const basenames: string[] = [];\n    const fileNames = files.map(file => basename(file.name));\n    const pathToFile: {[path: string]: File} = {};\n    for (const group of manifest) {\n      group.paths.forEach(path => {\n        const pathBasename = basename(path);\n        if (basenames.indexOf(pathBasename) !== -1) {\n          throw new Error(\n              `Duplicate file basename found in weights manifest: ` +\n              `'${pathBasename}'`);\n        }\n        basenames.push(pathBasename);\n        if (fileNames.indexOf(pathBasename) === -1) {\n          throw new Error(\n              `Weight file with basename '${pathBasename}' is not provided.`);\n        } else {\n          pathToFile[path] = files[fileNames.indexOf(pathBasename)];\n        }\n      });\n    }\n\n    if (basenames.length !== files.length) {\n      throw new Error(\n          `Mismatch in the number of files in weights manifest ` +\n          `(${basenames.length}) and the number of weight files provided ` +\n          `(${files.length}).`);\n    }\n    return pathToFile;\n  }\n}\n\nexport const browserDownloadsRouter: IORouter = (url: string|string[]) => {\n  if (!ENV.getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n */\n/**\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads(fileNamePrefix = 'model'): IOHandler {\n  return new BrowserDownloads(fileNamePrefix);\n}\n\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, One or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n */\n/**\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files: File[]): IOHandler {\n  return new BrowserFiles(files);\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {assert} from '../util';\n\nimport {OnProgressCallback} from './types';\n\n/**\n * Monitor Promise.all progress, fire onProgress callback function.\n *\n * @param promises Promise list going to be monitored\n * @param onProgress Callback function. Fired when a promise resolved.\n * @param startFraction Optional fraction start. Default to 0.\n * @param endFraction Optional fraction end. Default to 1.\n */\nexport function monitorPromisesProgress(\n    promises: Array<Promise<{}|void>>, onProgress: OnProgressCallback,\n    startFraction?: number, endFraction?: number) {\n  checkPromises(promises);\n  startFraction = startFraction == null ? 0 : startFraction;\n  endFraction = endFraction == null ? 1 : endFraction;\n  checkFraction(startFraction, endFraction);\n  let resolvedPromise = 0;\n\n  const registerMonitor = (promise: Promise<{}>) => {\n    promise.then(value => {\n      const fraction = startFraction +\n          ++resolvedPromise / promises.length * (endFraction - startFraction);\n      // pass fraction as parameter to callback function.\n      onProgress(fraction);\n      return value;\n    });\n    return promise;\n  };\n\n  function checkPromises(promises: Array<Promise<{}|void>>): void {\n    assert(\n        promises != null && Array.isArray(promises) && promises.length > 0,\n        () => 'promises must be a none empty array');\n  }\n\n  function checkFraction(startFraction: number, endFraction: number): void {\n    assert(\n        startFraction >= 0 && startFraction <= 1,\n        () => `Progress fraction must be in range [0, 1], but ` +\n            `got startFraction ${startFraction}`);\n    assert(\n        endFraction >= 0 && endFraction <= 1,\n        () => `Progress fraction must be in range [0, 1], but ` +\n            `got endFraction ${endFraction}`);\n    assert(\n        endFraction >= startFraction,\n        () => `startFraction must be no more than endFraction, but ` +\n            `got startFraction ${startFraction} and endFraction ` +\n            `${endFraction}`);\n  }\n\n  return Promise.all(promises.map(registerMonitor));\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENV} from '../environment';\nimport {NamedTensorMap} from '../tensor_types';\nimport * as util from '../util';\n\nimport {decodeWeights} from './io_utils';\nimport {monitorPromisesProgress} from './progress';\nimport {DTYPE_VALUE_SIZE_MAP, LoadOptions, WeightsManifestConfig, WeightsManifestEntry} from './types';\n\n/**\n * Reads binary weights data from a number of URLs.\n *\n * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.\n * @param requestOptions RequestInit (options) for the HTTP requests.\n * @param fetchFunc Optional overriding value for the `window.fetch` function.\n * @param onProgress Optional, progress callback function, fired periodically\n *   before the load is completed.\n * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same\n *   length as `fetchURLs`.\n */\nexport async function loadWeightsAsArrayBuffer(\n    fetchURLs: string[], loadOptions?: LoadOptions): Promise<ArrayBuffer[]> {\n  if (loadOptions == null) {\n    loadOptions = {};\n  }\n\n  const fetchFunc = loadOptions.fetchFunc == null ? ENV.platform.fetch :\n                                                    loadOptions.fetchFunc;\n\n  // Create the requests for all of the weights in parallel.\n  const requests = fetchURLs.map(\n      fetchURL =>\n          fetchFunc(fetchURL, loadOptions.requestInit, {isBinary: true}));\n\n  const fetchStartFraction = 0;\n  const fetchEndFraction = 0.5;\n\n  const responses = loadOptions.onProgress == null ?\n      await Promise.all(requests) :\n      await monitorPromisesProgress(\n          requests, loadOptions.onProgress, fetchStartFraction,\n          fetchEndFraction);\n\n  const bufferPromises = responses.map(response => response.arrayBuffer());\n\n  const bufferStartFraction = 0.5;\n  const bufferEndFraction = 1;\n\n  const buffers = loadOptions.onProgress == null ?\n      await Promise.all(bufferPromises) :\n      await monitorPromisesProgress(\n          bufferPromises, loadOptions.onProgress, bufferStartFraction,\n          bufferEndFraction);\n  return buffers;\n}\n\n/**\n * Reads a weights manifest JSON configuration, fetches the weights and\n * returns them as `Tensor`s.\n *\n * @param manifest The weights manifest JSON.\n * @param filePathPrefix The path prefix for filenames given in the manifest.\n *     Defaults to the empty string.\n * @param weightNames The names of the weights to be fetched.\n */\nexport async function loadWeights(\n    manifest: WeightsManifestConfig, filePathPrefix = '',\n    weightNames?: string[],\n    requestInit?: RequestInit): Promise<NamedTensorMap> {\n  // TODO(nsthorat): Groups are currently fetched atomically. If you need a\n  // single weight from a group, the whole group will be fetched. At a future\n  // date, we should support fetching only the individual shards within a\n  // group that are needed to reconstruct the requested weight.\n  // TODO(cais): Use `decodeWeights` for implementation.\n\n  const fetchWeights = (fetchUrls: string[]) =>\n      loadWeightsAsArrayBuffer(fetchUrls, {requestInit});\n  const loadWeights = weightsLoaderFactory(fetchWeights);\n\n  return loadWeights(manifest, filePathPrefix, weightNames);\n}\n\n/**\n * Creates a function, which reads a weights manifest JSON configuration,\n * fetches the weight files using the specified function and returns them as\n * `Tensor`s.\n *\n * ```js\n * // example for creating a nodejs weight loader, which reads the weight files\n * // from disk using fs.readFileSync\n *\n * import * as fs from 'fs'\n *\n * const fetchWeightsFromDisk = (filePaths: string[]) =>\n *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)\n *\n * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)\n *\n * const manifest = JSON.parse(\n *   fs.readFileSync('./my_model-weights_manifest').toString()\n * )\n * const weightMap = await loadWeights(manifest, './')\n * ```\n * @param fetchWeightsFunction The function used for fetching the weight files.\n * @returns Weight loading function.\n */\nexport function weightsLoaderFactory(\n    fetchWeightsFunction: (fetchUrls: string[]) => Promise<ArrayBuffer[]>):\n    (manifest: WeightsManifestConfig, filePathPrefix?: string,\n     weightNames?: string[]) => Promise<NamedTensorMap> {\n  return async(\n             manifest: WeightsManifestConfig, filePathPrefix = '',\n             weightNames?: string[]): Promise<NamedTensorMap> => {\n    // Collect all the groups, weights, and their relative offsets to be\n    // fetched.\n    const groupIndicesToFetchMap = manifest.map(() => false);\n    const groupWeightsToFetch: {\n      [group: number]: Array<{\n        manifestEntry: WeightsManifestEntry; groupOffset: number;\n        sizeBytes: number;\n      }>\n    } = {};\n    const weightsFound =\n        weightNames != null ? weightNames.map(() => false) : [];\n    const allManifestWeightNames: string[] = [];\n    manifest.forEach((manifestGroupConfig, groupIndex) => {\n      let groupOffset = 0;\n      manifestGroupConfig.weights.forEach(weightsEntry => {\n        const rawDtype = ('quantization' in weightsEntry) ?\n            weightsEntry.quantization.dtype :\n            weightsEntry.dtype;\n\n        const weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] *\n            util.sizeFromShape(weightsEntry.shape);\n\n        const enqueueWeightsForFetchingFn = () => {\n          groupIndicesToFetchMap[groupIndex] = true;\n          if (groupWeightsToFetch[groupIndex] == null) {\n            groupWeightsToFetch[groupIndex] = [];\n          }\n\n          groupWeightsToFetch[groupIndex].push({\n            manifestEntry: weightsEntry,\n            groupOffset,\n            sizeBytes: weightsBytes\n          });\n        };\n\n        if (weightNames != null) {\n          weightNames.forEach((weightName, weightIndex) => {\n            if (weightName === weightsEntry.name) {\n              enqueueWeightsForFetchingFn();\n              weightsFound[weightIndex] = true;\n            }\n          });\n        } else {\n          enqueueWeightsForFetchingFn();\n        }\n\n        allManifestWeightNames.push(weightsEntry.name);\n        groupOffset += weightsBytes;\n      });\n    });\n\n    if (!weightsFound.every(found => found)) {\n      const weightsNotFound = weightNames.filter((_, i) => !weightsFound[i]);\n      throw new Error(\n          `Could not find weights in manifest with names: ` +\n          `${weightsNotFound.join(', ')}. \\n` +\n          `Manifest JSON has weights with names: ` +\n          `${allManifestWeightNames.join(', ')}.`);\n    }\n\n    // Convert the one-hot boolean groupId => shouldFetch map to a list of group\n    // IDs.\n    const groupIndicesToFetch =\n        groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i) => {\n          if (shouldFetch) {\n            accumulator.push(i);\n          }\n          return accumulator;\n        }, []);\n\n    const fetchUrls: string[] = [];\n    groupIndicesToFetch.forEach(i => {\n      manifest[i].paths.forEach(filepath => {\n        const fetchUrl = filePathPrefix +\n            (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\n        fetchUrls.push(fetchUrl);\n      });\n    });\n    const buffers = await fetchWeightsFunction(fetchUrls);\n\n    const weightsTensorMap: NamedTensorMap = {};\n    let bufferIndexOffset = 0;\n    groupIndicesToFetch.forEach(i => {\n      const numBuffers = manifest[i].paths.length;\n\n      let groupBytes = 0;\n      for (let i = 0; i < numBuffers; i++) {\n        groupBytes += buffers[bufferIndexOffset + i].byteLength;\n      }\n\n      // Create a buffer for the whole group.\n      const groupBuffer = new ArrayBuffer(groupBytes);\n      const groupByteBuffer = new Uint8Array(groupBuffer);\n      let groupBufferOffset = 0;\n      for (let i = 0; i < numBuffers; i++) {\n        const buffer = new Uint8Array(buffers[bufferIndexOffset + i]);\n        groupByteBuffer.set(buffer, groupBufferOffset);\n        groupBufferOffset += buffer.byteLength;\n      }\n\n      const weightsEntries = groupWeightsToFetch[i];\n      weightsEntries.forEach(weightsEntry => {\n        const byteBuffer = groupBuffer.slice(\n            weightsEntry.groupOffset,\n            weightsEntry.groupOffset + weightsEntry.sizeBytes);\n        const nameToTensorMap =\n            decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);\n        for (const name in nameToTensorMap) {\n          weightsTensorMap[name] = nameToTensorMap[name];\n        }\n      });\n\n      bufferIndexOffset += numBuffers;\n    });\n\n    return weightsTensorMap;\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\n\nimport {ENV} from '../environment';\nimport {assert} from '../util';\nimport {concatenateArrayBuffers, getModelArtifactsInfoForJSON} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, LoadOptions, ModelArtifacts, ModelJSON, OnProgressCallback, SaveResult, WeightsManifestConfig, WeightsManifestEntry} from './types';\nimport {loadWeightsAsArrayBuffer} from './weights_loader';\n\nconst OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nconst JSON_TYPE = 'application/json';\nexport class HTTPRequest implements IOHandler {\n  protected readonly path: string;\n  protected readonly requestInit: RequestInit;\n\n  private readonly fetch: Function;\n\n  readonly DEFAULT_METHOD = 'POST';\n\n  static readonly URL_SCHEME_REGEX = /^https?:\\/\\//;\n\n  private readonly weightPathPrefix: string;\n  private readonly onProgress: OnProgressCallback;\n\n  constructor(path: string, loadOptions?: LoadOptions) {\n    if (loadOptions == null) {\n      loadOptions = {};\n    }\n    this.weightPathPrefix = loadOptions.weightPathPrefix;\n    this.onProgress = loadOptions.onProgress;\n\n    if (loadOptions.fetchFunc != null) {\n      assert(\n          typeof loadOptions.fetchFunc === 'function',\n          () => 'Must pass a function that matches the signature of ' +\n              '`fetch` (see ' +\n              'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');\n      this.fetch = loadOptions.fetchFunc;\n    } else {\n      this.fetch = ENV.platform.fetch;\n    }\n\n    assert(\n        path != null && path.length > 0,\n        () => 'URL path for http must not be null, undefined or ' +\n            'empty.');\n\n    if (Array.isArray(path)) {\n      assert(\n          path.length === 2,\n          () => 'URL paths for http must have a length of 2, ' +\n              `(actual length is ${path.length}).`);\n    }\n    this.path = path;\n\n    if (loadOptions.requestInit != null &&\n        loadOptions.requestInit.body != null) {\n      throw new Error(\n          'requestInit is expected to have no pre-existing body, but has one.');\n    }\n    this.requestInit = loadOptions.requestInit || {};\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserHTTPRequest.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    }\n\n    const init = Object.assign({method: this.DEFAULT_METHOD}, this.requestInit);\n    init.body = new FormData();\n\n    const weightsManifest: WeightsManifestConfig = [{\n      paths: ['./model.weights.bin'],\n      weights: modelArtifacts.weightSpecs,\n    }];\n    const modelTopologyAndWeightManifest: ModelJSON = {\n      modelTopology: modelArtifacts.modelTopology,\n      format: modelArtifacts.format,\n      generatedBy: modelArtifacts.generatedBy,\n      convertedBy: modelArtifacts.convertedBy,\n      weightsManifest\n    };\n\n    init.body.append(\n        'model.json',\n        new Blob(\n            [JSON.stringify(modelTopologyAndWeightManifest)],\n            {type: JSON_TYPE}),\n        'model.json');\n\n    if (modelArtifacts.weightData != null) {\n      init.body.append(\n          'model.weights.bin',\n          new Blob([modelArtifacts.weightData], {type: OCTET_STREAM_MIME_TYPE}),\n          'model.weights.bin');\n    }\n\n    const response = await this.fetch(this.path, init);\n\n    if (response.ok) {\n      return {\n        modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n        responses: [response],\n      };\n    } else {\n      throw new Error(\n          `BrowserHTTPRequest.save() failed due to HTTP response status ` +\n          `${response.status}.`);\n    }\n  }\n\n  /**\n   * Load model artifacts via HTTP request(s).\n   *\n   * See the documentation to `tf.io.http` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model artifacts (if loading succeeds).\n   */\n  async load(): Promise<ModelArtifacts> {\n    const modelConfigRequest = await this.fetch(this.path, this.requestInit);\n\n    if (!modelConfigRequest.ok) {\n      throw new Error(\n          `Request to ${this.path} failed with status code ` +\n          `${modelConfigRequest.status}. Please verify this URL points to ` +\n          `the model JSON of the model to load.`);\n    }\n    let modelConfig: ModelJSON;\n    try {\n      modelConfig = await modelConfigRequest.json();\n    } catch (e) {\n      let message = `Failed to parse model JSON of response from ${this.path}.`;\n      // TODO(nsthorat): Remove this after some time when we're comfortable that\n      // .pb files are mostly gone.\n      if (this.path.endsWith('.pb')) {\n        message += ' Your path contains a .pb file extension. ' +\n            'Support for .pb models have been removed in TensorFlow.js 1.0 ' +\n            'in favor of .json models. You can re-convert your Python ' +\n            'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' +\n            'or you can convert your.pb models with the \\'pb2json\\'' +\n            'NPM script in the tensorflow/tfjs-converter repository.';\n      } else {\n        message += ' Please make sure the server is serving valid ' +\n            'JSON for this request.';\n      }\n      throw new Error(message);\n    }\n    const modelTopology = modelConfig.modelTopology;\n    const weightsManifest = modelConfig.weightsManifest;\n\n    // We do not allow both modelTopology and weightsManifest to be missing.\n    if (modelTopology == null && weightsManifest == null) {\n      throw new Error(\n          `The JSON from HTTP path ${this.path} contains neither model ` +\n          `topology or manifest for weights.`);\n    }\n\n    let weightSpecs: WeightsManifestEntry[];\n    let weightData: ArrayBuffer;\n    if (weightsManifest != null) {\n      const results = await this.loadWeights(weightsManifest);\n      [weightSpecs, weightData] = results;\n    }\n\n    return {modelTopology, weightSpecs, weightData};\n  }\n\n  private async loadWeights(weightsManifest: WeightsManifestConfig):\n      Promise<[WeightsManifestEntry[], ArrayBuffer]> {\n    const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n    const [prefix, suffix] = parseUrl(weightPath);\n    const pathPrefix = this.weightPathPrefix || prefix;\n\n    const weightSpecs = [];\n    for (const entry of weightsManifest) {\n      weightSpecs.push(...entry.weights);\n    }\n\n    const fetchURLs: string[] = [];\n    weightsManifest.forEach(weightsGroup => {\n      weightsGroup.paths.forEach(path => {\n        fetchURLs.push(pathPrefix + path + suffix);\n      });\n    });\n    const buffers = await loadWeightsAsArrayBuffer(fetchURLs, {\n      requestInit: this.requestInit,\n      fetchFunc: this.fetch,\n      onProgress: this.onProgress\n    });\n    return [weightSpecs, concatenateArrayBuffers(buffers)];\n  }\n}\n\n/**\n * Extract the prefix and suffix of the url, where the prefix is the path before\n * the last file, and suffix is the search params after the last file.\n * ```\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\n * [prefix, suffix] = parseUrl(url)\n * // prefix = 'http://tfhub.dev/model/1/'\n * // suffix = '?tfjs-format=file'\n * ```\n * @param url the model url to be parsed.\n */\nexport function parseUrl(url: string): [string, string] {\n  const lastSlash = url.lastIndexOf('/');\n  const lastSearchParam = url.lastIndexOf('?');\n  const prefix = url.substring(0, lastSlash);\n  const suffix =\n      lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n  return [prefix + '/', suffix];\n}\n\nexport function isHTTPScheme(url: string): boolean {\n  return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\n\nexport const httpRouter: IORouter =\n    (url: string, onProgress?: OnProgressCallback) => {\n      if (typeof fetch === 'undefined') {\n        // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n        // an environment that is not the browser or node they have to setup a\n        // global fetch polyfill.\n        return null;\n      } else {\n        let isHTTP = true;\n        if (Array.isArray(url)) {\n          isHTTP = url.every(urlItem => isHTTPScheme(urlItem));\n        } else {\n          isHTTP = isHTTPScheme(url);\n        }\n        if (isHTTP) {\n          return http(url, {onProgress});\n        }\n      }\n      return null;\n    };\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.http(\n *     'http://model-server:5000/upload', {method: 'PUT'}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following GitHub Gist\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\n * implements a server based on [flask](https://github.com/pallets/flask) that\n * can receive the request. Upon receiving the model artifacts via the requst,\n * this particular server reconsistutes instances of [Keras\n * Models](https://keras.io/models/model/) in memory.\n *\n *\n * @param path A URL path to the model.\n *   Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the\n * body will be set by TensorFlow.js. File blobs representing the model\n * topology (filename: 'model.json') and the weights of the model (filename:\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\n * `body`, an Error will be thrown.\n * @param loadOptions Optional configuration for the loading. It includes the\n *   following fields:\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\n *     files, by default this is calculated from the path param.\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\n *     the `fetch` from node-fetch can be used here.\n *   - onProgress Optional, progress callback function, fired periodically\n *     before the load is completed.\n * @returns An instance of `IOHandler`.\n */\n/**\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function http(path: string, loadOptions?: LoadOptions): IOHandler {\n  return new HTTPRequest(path, loadOptions);\n}\n\n/**\n * Deprecated. Use `tf.io.http`.\n * @param path\n * @param loadOptions\n */\nexport function browserHTTPRequest(\n    path: string, loadOptions?: LoadOptions): IOHandler {\n  return http(path, loadOptions);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandlers that pass through the in-memory ModelArtifacts format.\n */\n\nimport {IOHandler, ModelArtifacts, SaveResult, TrainingConfig, WeightsManifestEntry} from './types';\n\nclass PassthroughLoader implements IOHandler {\n  constructor(private readonly modelArtifacts?: ModelArtifacts) {}\n\n  async load(): Promise<ModelArtifacts> {\n    return this.modelArtifacts;\n  }\n}\n\nclass PassthroughSaver implements IOHandler {\n  constructor(\n      private readonly saveHandler:\n          (artifacts: ModelArtifacts) => Promise<SaveResult>) {}\n\n  async save(modelArtifacts: ModelArtifacts) {\n    return this.saveHandler(modelArtifacts);\n  }\n}\n\n/**\n * Creates an IOHandler that loads model artifacts from memory.\n *\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * const model = await tf.loadLayersModel(tf.io.fromMemory(\n *     modelTopology, weightSpecs, weightData));\n * ```\n *\n * @param modelArtifacts a object containing model topology (i.e., parsed from\n *   the JSON format).\n * @param weightSpecs An array of `WeightsManifestEntry` objects describing the\n *   names, shapes, types, and quantization of the weight data.\n * @param weightData A single `ArrayBuffer` containing the weight data,\n *   concatenated in the order described by the weightSpecs.\n * @param trainingConfig Model training configuration. Optional.\n *\n * @returns A passthrough `IOHandler` that simply loads the provided data.\n */\nexport function fromMemory(\n    modelArtifacts: {}|ModelArtifacts, weightSpecs?: WeightsManifestEntry[],\n    weightData?: ArrayBuffer, trainingConfig?: TrainingConfig): IOHandler {\n  if (arguments.length === 1) {\n    const isModelArtifacts =\n        (modelArtifacts as ModelArtifacts).modelTopology != null ||\n        (modelArtifacts as ModelArtifacts).weightSpecs != null;\n    if (isModelArtifacts) {\n      return new PassthroughLoader(modelArtifacts as ModelArtifacts);\n    } else {\n      // Legacy support: with only modelTopology.\n      // TODO(cais): Remove this deprecated API.\n      console.warn(\n          'Please call tf.io.fromMemory() with only one argument. ' +\n          'The argument should be of type ModelArtifacts. ' +\n          'The multi-argument signature of tf.io.fromMemory() has been ' +\n          'deprecated and will be removed in a future release.');\n      return new PassthroughLoader({modelTopology: modelArtifacts as {}});\n    }\n  } else {\n    // Legacy support.\n    // TODO(cais): Remove this deprecated API.\n    console.warn(\n        'Please call tf.io.fromMemory() with only one argument. ' +\n        'The argument should be of type ModelArtifacts. ' +\n        'The multi-argument signature of tf.io.fromMemory() has been ' +\n        'deprecated and will be removed in a future release.');\n    return new PassthroughLoader({\n      modelTopology: modelArtifacts as {},\n      weightSpecs,\n      weightData,\n      trainingConfig\n    });\n  }\n}\n\n/**\n * Creates an IOHandler that passes saved model artifacts to a callback.\n *\n * ```js\n * function handleSave(artifacts) {\n *   // ... do something with the artifacts ...\n *   return {modelArtifactsInfo: {...}, ...};\n * }\n *\n * const saveResult = model.save(tf.io.withSaveHandler(handleSave));\n * ```\n *\n * @param saveHandler A function that accepts a `ModelArtifacts` and returns a\n *     `SaveResult`.\n */\nexport function withSaveHandler(\n    saveHandler: (artifacts: ModelArtifacts) =>\n        Promise<SaveResult>): IOHandler {\n  return new PassthroughSaver(saveHandler);\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D, Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {oneHot} from './array_ops';\nimport {op} from './operation';\n\n/**\n * Computes the confusion matrix from true labels and predicted labels.\n *\n * ```js\n * const labels = tf.tensor1d([0, 1, 2, 1, 0], 'int32');\n * const predictions = tf.tensor1d([0, 2, 2, 1, 0], 'int32');\n * const numClasses = 3;\n * const out = tf.math.confusionMatrix(labels, predictions, numClasses);\n * out.print();\n * // Expected output matrix:\n * // [[2, 0, 0],\n * //  [0, 1, 1],\n * //  [0, 0, 1]]\n * ```\n *\n * @param labels The target labels, assumed to be 0-based integers\n *   for the classes. The shape is `[numExamples]`, where\n *   `numExamples` is the number of examples included.\n * @param predictions The predicted classes, assumed to be\n *   0-based integers for the classes. Must have the same shape as `labels`.\n * @param numClasses Number of all classes, as an integer.\n *   Its value must be larger than the largest element in `labels` and\n *   `predictions`.\n * @returns The confusion matrix as a int32-type 2D tensor. The value at\n *   row `r` and column `c` is the number of times examples of actual class\n *   `r` were predicted as class `c`.\n */\n/** @doc {heading: 'Operations', subheading: 'Evaluation'} */\nexport function confusionMatrix_(\n    labels: Tensor1D|TensorLike, predictions: Tensor1D|TensorLike,\n    numClasses: number): Tensor2D {\n  const $labels = convertToTensor(labels, 'labels', 'confusionMatrix');\n  const $predictions =\n      convertToTensor(predictions, 'predictions', 'confusionMatrix');\n\n  util.assert(\n      numClasses == null || numClasses > 0 && Number.isInteger(numClasses),\n      () => `If provided, numClasses must be a positive integer, ` +\n          `but got ${numClasses}`);\n  util.assert(\n      $labels.rank === 1,\n      () => `Expected the rank of labels to be 1, but got ${$labels.rank}`);\n  util.assert(\n      $predictions.rank === 1,\n      () => `Expected the rank of predictions to be 1, ` +\n          `but got ${$predictions.rank}`);\n  util.assert(\n      $labels.shape[0] === $predictions.shape[0],\n      () => `Mismatch in the number of examples: ` +\n          `${$labels.shape[0]} vs. ${$predictions.shape[0]}. ` +\n          `Labels and predictions should have the same number of elements.`);\n  util.assert(\n      numClasses > 0 && Number.isInteger(numClasses),\n      () => `numClasses is required to be a positive integer, but got ` +\n          `${numClasses}`);\n  // TODO(cais): In the future, if oneHot supports tensors inputs for\n  //   `numClasses`, `confusionMatrix` can make `numClasses` optional.\n\n  const oneHotLabels = oneHot($labels.asType('int32'), numClasses) as Tensor2D;\n  const oneHotPredictions =\n      oneHot($predictions.asType('int32'), numClasses) as Tensor2D;\n  return oneHotLabels.transpose().matMul(oneHotPredictions).asType('int32');\n}\n\nexport const confusionMatrix = op({confusionMatrix_});\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor, Tensor2D, Tensor3D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {PixelData, TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Creates a `tf.Tensor` from an image.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * tf.browser.fromPixels(image).print();\n * ```\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n */\n/** @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true} */\nfunction fromPixels_(\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement,\n    numChannels = 3): Tensor3D {\n  if (numChannels > 4) {\n    throw new Error(\n        'Cannot construct Tensor with more than 4 channels from pixels.');\n  }\n  const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement;\n  if (isVideo) {\n    const HAVE_CURRENT_DATA_READY_STATE = 2;\n    if (isVideo &&\n        (pixels as HTMLVideoElement).readyState <\n            HAVE_CURRENT_DATA_READY_STATE) {\n      throw new Error(\n          'The video element has not loaded data yet. Please wait for ' +\n          '`loadeddata` event on the <video> element.');\n    }\n  }\n  return ENGINE.fromPixels(pixels, numChannels);\n}\n\n/**\n * Draws a `tf.Tensor` of pixel values to a byte array or optionally a\n * canvas.\n *\n * When the dtype of the input is 'float32', we assume values in the range\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\n * [0-255].\n *\n * Returns a promise that resolves when the canvas has been drawn to.\n *\n * @param img A rank-2 or rank-3 tensor. If rank-2, draws grayscale. If\n *     rank-3, must have depth of 1, 3 or 4. When depth of 1, draws\n * grayscale. When depth of 3, we draw with the first three components of\n * the depth dimension corresponding to r, g, b and alpha = 1. When depth of\n * 4, all four components of the depth dimension correspond to r, g, b, a.\n * @param canvas The canvas to draw to.\n */\n/** @doc {heading: 'Browser', namespace: 'browser'} */\nexport async function toPixels(\n    img: Tensor2D|Tensor3D|TensorLike,\n    canvas?: HTMLCanvasElement): Promise<Uint8ClampedArray> {\n  let $img = convertToTensor(img, 'img', 'toPixels');\n  if (!(img instanceof Tensor)) {\n    // Assume int32 if user passed a native array.\n    $img = $img.toInt();\n  }\n  if ($img.rank !== 2 && $img.rank !== 3) {\n    throw new Error(\n        `toPixels only supports rank 2 or 3 tensors, got rank ${$img.rank}.`);\n  }\n  const [height, width] = $img.shape.slice(0, 2);\n  const depth = $img.rank === 2 ? 1 : $img.shape[2];\n\n  if (depth > 4 || depth === 2) {\n    throw new Error(\n        `toPixels only supports depth of size ` +\n        `1, 3 or 4 but got ${depth}`);\n  }\n\n  const data = await $img.data();\n  const minTensor = $img.min();\n  const maxTensor = $img.max();\n  const vals = await Promise.all([minTensor.data(), maxTensor.data()]);\n  const minVals = vals[0];\n  const maxVals = vals[1];\n  const min = minVals[0];\n  const max = maxVals[0];\n  minTensor.dispose();\n  maxTensor.dispose();\n  if ($img.dtype === 'float32') {\n    if (min < 0 || max > 1) {\n      throw new Error(\n          `Tensor values for a float32 Tensor must be in the ` +\n          `range [0 - 1] but got range [${min} - ${max}].`);\n    }\n  } else if ($img.dtype === 'int32') {\n    if (min < 0 || max > 255) {\n      throw new Error(\n          `Tensor values for a int32 Tensor must be in the ` +\n          `range [0 - 255] but got range [${min} - ${max}].`);\n    }\n  } else {\n    throw new Error(\n        `Unsupported type for toPixels: ${$img.dtype}.` +\n        ` Please use float32 or int32 tensors.`);\n  }\n  const multiplier = $img.dtype === 'float32' ? 255 : 1;\n  const bytes = new Uint8ClampedArray(width * height * 4);\n\n  for (let i = 0; i < height * width; ++i) {\n    let r, g, b, a;\n    if (depth === 1) {\n      r = data[i] * multiplier;\n      g = data[i] * multiplier;\n      b = data[i] * multiplier;\n      a = 255;\n    } else if (depth === 3) {\n      r = data[i * 3] * multiplier;\n      g = data[i * 3 + 1] * multiplier;\n      b = data[i * 3 + 2] * multiplier;\n      a = 255;\n    } else if (depth === 4) {\n      r = data[i * 4] * multiplier;\n      g = data[i * 4 + 1] * multiplier;\n      b = data[i * 4 + 2] * multiplier;\n      a = data[i * 4 + 3] * multiplier;\n    }\n\n    const j = i * 4;\n    bytes[j + 0] = Math.round(r);\n    bytes[j + 1] = Math.round(g);\n    bytes[j + 2] = Math.round(b);\n    bytes[j + 3] = Math.round(a);\n  }\n\n  if (canvas != null) {\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const imageData = new ImageData(bytes, width, height);\n    ctx.putImageData(imageData, 0, 0);\n  }\n  if ($img !== img) {\n    $img.dispose();\n  }\n  return bytes;\n}\n\nexport const fromPixels = op({fromPixels_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {assert} from './util';\n\n/**\n * Types to support JSON-esque data structures internally.\n *\n * Internally ConfigDict's use camelCase keys and values where the\n * values are class names to be instantiated.  On the python side, these\n * will be snake_case.  Internally we allow Enums into the values for better\n * type safety, but these need to be converted to raw primitives (usually\n * strings) for round-tripping with python.\n *\n * toConfig returns the TS-friendly representation. model.toJSON() returns\n * the pythonic version as that's the portable format.  If you need to\n * python-ify a non-model level toConfig output, you'll need to use a\n * convertTsToPythonic from serialization_utils in -Layers.\n *\n */\nexport declare type ConfigDictValue =\n    boolean | number | string | null | ConfigDictArray | ConfigDict;\nexport declare interface ConfigDict {\n  [key: string]: ConfigDictValue;\n}\nexport declare interface ConfigDictArray extends Array<ConfigDictValue> {}\n\n/**\n * Type to represent the class-type of Serializable objects.\n *\n * Ie the class prototype with access to the constructor and any\n * static members/methods. Instance methods are not listed here.\n *\n * Source for this idea: https://stackoverflow.com/a/43607255\n */\nexport declare type SerializableConstructor<T extends Serializable> = {\n  // tslint:disable-next-line:no-any\n  new (...args: any[]): T; className: string; fromConfig: FromConfigMethod<T>;\n};\nexport declare type FromConfigMethod<T extends Serializable> =\n    (cls: SerializableConstructor<T>, config: ConfigDict) => T;\n\n/**\n * Serializable defines the serialization contract.\n *\n * TFJS requires serializable classes to return their className when asked\n * to avoid issues with minification.\n */\nexport abstract class Serializable {\n  /**\n   * Return the class name for this class to use in serialization contexts.\n   *\n   * Generally speaking this will be the same thing that constructor.name\n   * would have returned.  However, the class name needs to be robust\n   * against minification for serialization/deserialization to work properly.\n   *\n   * There's also places such as initializers.VarianceScaling, where\n   * implementation details between different languages led to different\n   * class hierarchies and a non-leaf node is used for serialization purposes.\n   */\n  getClassName(): string {\n    return (this.constructor as SerializableConstructor<Serializable>)\n        .className;\n  }\n\n  /**\n   * Return all the non-weight state needed to serialize this object.\n   */\n  abstract getConfig(): ConfigDict;\n\n  /**\n   * Creates an instance of T from a ConfigDict.\n   *\n   * This works for most descendants of serializable.  A few need to\n   * provide special handling.\n   * @param cls A Constructor for the class to instantiate.\n   * @param config The Configuration for the object.\n   */\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(config);\n  }\n}\n\n/**\n * Maps string keys to class constructors.\n *\n * Used during (de)serialization from the cross-language JSON format, which\n * requires the class name in the serialization format matches the class\n * names as used in Python, should it exist.\n */\nexport class SerializationMap {\n  private static instance: SerializationMap;\n  classNameMap: {\n    [className: string]:\n        [SerializableConstructor<Serializable>, FromConfigMethod<Serializable>]\n  };\n\n  private constructor() {\n    this.classNameMap = {};\n  }\n\n  /**\n   * Returns the singleton instance of the map.\n   */\n  static getMap(): SerializationMap {\n    if (SerializationMap.instance == null) {\n      SerializationMap.instance = new SerializationMap();\n    }\n    return SerializationMap.instance;\n  }\n\n  /**\n   * Registers the class as serializable.\n   */\n  static register<T extends Serializable>(cls: SerializableConstructor<T>) {\n    SerializationMap.getMap().classNameMap[cls.className] =\n        [cls, cls.fromConfig];\n  }\n}\n\n/**\n * Register a class with the serialization map of TensorFlow.js.\n *\n * This is often used for registering custom Layers, so they can be\n * serialized and deserialized.\n *\n * Example:\n *\n * ```js\n * class MyCustomLayer extends tf.layers.Layer {\n *   static className = 'MyCustomLayer';\n *\n *   constructor(config) {\n *     super(config);\n *   }\n * }\n * tf.serialization.registerClass(MyCustomLayer);\n * ```\n *\n * @param cls The class to be registered. It must have a public static member\n *   called `className` defined and the value must be a non-empty string.\n */\n/** @doc {heading: 'Models', subheading: 'Serialization', ignoreCI: true} */\nexport function registerClass<T extends Serializable>(\n    cls: SerializableConstructor<T>) {\n  assert(\n      cls.className != null,\n      () => `Class being registered does not have the static className ` +\n          `property defined.`);\n  assert(\n      typeof cls.className === 'string',\n      () => `className is required to be a string, but got type ` +\n          typeof cls.className);\n  assert(\n      cls.className.length > 0,\n      () => `Class being registered has an empty-string as its className, ` +\n          `which is disallowed.`);\n\n  SerializationMap.register(cls);\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from './engine';\nimport {inferShape} from './tensor_util_env';\nimport {RecursiveArray, TensorLike, TypedArray} from './types';\nimport {arraysEqual, flatten, isString, isTypedArray} from './util';\n\nconst TEST_EPSILON_FLOAT32 = 1e-3;\nexport const TEST_EPSILON_FLOAT16 = 1e-1;\n\nexport function expectArraysClose(\n    actual: TypedArray|number|RecursiveArray<number>,\n    expected: TypedArray|number|RecursiveArray<number>, epsilon?: number) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  return expectArraysPredicate(\n      actual, expected, (a, b) => areClose(a as number, b as number, epsilon));\n}\n\nexport function testEpsilon() {\n  return ENGINE.backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 :\n                                                  TEST_EPSILON_FLOAT16;\n}\n\nfunction expectArraysPredicate(\n    actual: TensorLike, expected: TensorLike,\n    predicate: (a: {}, b: {}) => boolean) {\n  let checkClassType = true;\n  if (isTypedArray(actual) || isTypedArray(expected)) {\n    checkClassType = false;\n  }\n  if (isTypedArray(actual) && isTypedArray(expected)) {\n    checkClassType = true;\n  }\n  if (checkClassType) {\n    const aType = actual.constructor.name;\n    const bType = expected.constructor.name;\n\n    if (aType !== bType) {\n      throw new Error(\n          `Arrays are of different type. Actual: ${aType}. ` +\n          `Expected: ${bType}`);\n    }\n  }\n\n  if (Array.isArray(actual) && Array.isArray(expected)) {\n    const actualShape = inferShape(actual);\n    const expectedShape = inferShape(expected);\n    if (!arraysEqual(actualShape, expectedShape)) {\n      throw new Error(\n          `Arrays have different shapes. ` +\n          `Actual: [${actualShape}]. Expected: [${expectedShape}]`);\n    }\n  }\n\n  const actualFlat =\n      isTypedArray(actual) ? actual : flatten(actual as RecursiveArray<number>);\n  const expectedFlat = isTypedArray(expected) ?\n      expected :\n      flatten(expected as RecursiveArray<number>);\n\n  if (actualFlat.length !== expectedFlat.length) {\n    throw new Error(\n        `Arrays have different lengths actual: ${actualFlat.length} vs ` +\n        `expected: ${expectedFlat.length}.\\n` +\n        `Actual:   ${actualFlat}.\\n` +\n        `Expected: ${expectedFlat}.`);\n  }\n  for (let i = 0; i < expectedFlat.length; ++i) {\n    const a = actualFlat[i];\n    const e = expectedFlat[i];\n\n    if (!predicate(a, e)) {\n      throw new Error(\n          `Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${e}.\\n` +\n          `Actual:   ${actualFlat}.\\n` +\n          `Expected: ${expectedFlat}.`);\n    }\n  }\n}\n\nexport interface DoneFn {\n  (): void;\n  fail: (message?: Error|string) => void;\n}\n\nexport function expectPromiseToFail(fn: () => Promise<{}>, done: DoneFn): void {\n  fn().then(() => done.fail(), () => done());\n}\n\nexport function expectArraysEqual(actual: TensorLike, expected: TensorLike) {\n  const exp = typeof expected === 'string' || typeof expected === 'number' ||\n          typeof expected === 'boolean' ?\n      [expected] as number[] :\n      expected as number[];\n  if (isString(actual) || isString((actual as string[])[0]) ||\n      isString(expected) || isString((expected as string[])[0])) {\n    // tslint:disable-next-line: triple-equals\n    return expectArraysPredicate(actual, exp, (a, b) => a == b);\n  }\n  return expectArraysPredicate(\n      actual, expected, (a, b) => areClose(a as number, b as number, 0));\n}\n\nexport function expectNumbersClose(a: number, e: number, epsilon?: number) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  if (!areClose(a, e, epsilon)) {\n    throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`);\n  }\n}\n\nfunction areClose(a: number, e: number, epsilon: number): boolean {\n  if (!isFinite(a) && !isFinite(e)) {\n    return true;\n  }\n  if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {\n    return false;\n  }\n  return true;\n}\n\nexport function expectValuesInRange(\n    actual: TypedArray|number[], low: number, high: number) {\n  for (let i = 0; i < actual.length; i++) {\n    if (actual[i] < low || actual[i] > high) {\n      throw new Error(\n          `Value out of range:${actual[i]} low: ${low}, high: ${high}`);\n    }\n  }\n}\n\nexport function expectArrayBuffersEqual(\n    actual: ArrayBuffer, expected: ArrayBuffer) {\n  // Safari & Jasmine don't like comparing ArrayBuffers directly. Wrapping in\n  // a Float32Array solves this issue.\n  expect(new Float32Array(actual)).toEqual(new Float32Array(expected));\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '1.2.9';\nexport {version};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as gpgpu_util from './backends/webgl/gpgpu_util';\nimport * as webgl_util from './backends/webgl/webgl_util';\n\nimport {ENV} from './environment';\nexport {MathBackendWebGL, WebGLMemoryInfo, WebGLTimingInfo} from './backends/webgl/backend_webgl';\nexport {setWebGLContext} from './backends/webgl/canvas_util';\nexport {GPGPUContext} from './backends/webgl/gpgpu_context';\nexport {GPGPUProgram} from './backends/webgl/gpgpu_math';\n// WebGL specific utils.\nexport {gpgpu_util, webgl_util};\n\n/**\n * Enforce use of half precision textures if available on the platform.\n */\n/** @doc {heading: 'Environment', namespace: 'webgl'} */\nexport function forceHalfFloat(): void {\n  ENV.set('WEBGL_FORCE_F16_TEXTURES', true);\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {dispose} from '../globals';\nimport {variableGrads} from '../gradients';\nimport {scalar} from '../ops/ops';\nimport {Serializable} from '../serialization';\nimport {Scalar, Variable} from '../tensor';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\n\n/**\n * A variable that belongs to an optimizer.\n *\n * The `originalName` field is required for keeping track of the canonical\n * name of the variable, which is usually the name of the model weight that\n * the variable is related to plus a suffix, e.g., 'dense1/kernel/momentum'.\n * The name of the `Variable` object itself cannot be used directly due to\n * possible deduplication: Every `Variable` must have a unique name but more\n * than one optimizer objects of the same type may be created for the same model\n * or the same `Variable`.\n */\nexport interface OptimizerVariable {\n  originalName: string;\n  variable: Variable;\n}\n\n/** @doc {heading: 'Training', subheading: 'Classes', namespace: 'train'} */\nexport abstract class Optimizer extends Serializable {\n  protected iterations_: number;\n\n  /**\n   * Executes `f()` and minimizes the scalar output of `f()` by computing\n   * gradients of y with respect to the list of trainable variables provided by\n   * `varList`. If no list is provided, it defaults to all trainable variables.\n   *\n   * @param f The function to execute and whose output to minimize.\n   * @param returnCost Whether to return the scalar cost value produced by\n   * executing `f()`.\n   * @param varList An optional list of variables to update. If specified, only\n   * the trainable variables in varList will be updated by minimize. Defaults to\n   * all trainable variables.\n   */\n  /** @doc {heading: 'Training', subheading: 'Optimizers'} */\n  minimize(f: () => Scalar, returnCost = false, varList?: Variable[]): Scalar\n      |null {\n    const {value, grads} = this.computeGradients(f, varList);\n\n    if (varList != null) {\n      const gradArray: NamedTensor[] =\n          varList.map(v => ({name: v.name, tensor: grads[v.name]}));\n      this.applyGradients(gradArray);\n    } else {\n      this.applyGradients(grads);\n    }\n\n    // Dispose gradients.\n    dispose(grads);\n\n    if (returnCost) {\n      return value;\n    } else {\n      value.dispose();\n      return null;\n    }\n  }\n\n  /**\n   * The number of iterations that this optimizer instance has been invoked for.\n   */\n  get iterations(): number {\n    if (this.iterations_ == null) {\n      this.iterations_ = 0;\n    }\n    return this.iterations_;\n  }\n\n  protected incrementIterations() {\n    this.iterations_ = this.iterations + 1;\n  }\n\n  /**\n   * Executes f() and computes the gradient of the scalar output of f() with\n   * respect to the list of trainable variables provided by `varList`. If no\n   * list is provided, it defaults to all trainable variables.\n   *\n   * @param f The function to execute and whose output to use for computing\n   * gradients with respect to variables.\n   * @param varList An optional list of variables to compute gradients with\n   * respect to. If specified, only the trainable variables in varList will have\n   * gradients computed with respect to. Defaults to all trainable variables.\n   */\n  computeGradients(f: () => Scalar, varList?: Variable[]):\n      {value: Scalar, grads: NamedTensorMap} {\n    return variableGrads(f, varList);\n  }\n\n  /**\n   * Updates variables by using the computed gradients.\n   *\n   * @param variableGradients A mapping of variable name to its gradient value.\n   */\n  abstract applyGradients(variableGradients: NamedTensorMap|\n                          NamedTensor[]): void;\n\n  /**\n   * Dispose the variables (if any) owned by this optimizer instance.\n   */\n  dispose(): void {\n    if (this.iterations_ != null) {\n      dispose(this.iterations_);\n    }\n  }\n\n  async saveIterations(): Promise<NamedTensor> {\n    if (this.iterations_ == null) {\n      this.iterations_ = 0;\n    }\n    return {\n      name: 'iter',  // Named for Python compatibility.\n      // TODO(cais): Use 'int64' type when available.\n      tensor: scalar(this.iterations_, 'int32')\n    };\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    throw new Error('getWeights() is not implemented for this optimizer yet.');\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    throw new Error(\n        `setWeights() is not implemented for this optimizer class ` +\n        `${this.getClassName()}`);\n  }\n\n  /**\n   * Extract the first element of the weight values and set it\n   * as the iterations counter variable of this instance of optimizer.\n   *\n   * @param weightValues\n   * @returns Weight values with the first element consumed and excluded.\n   */\n  protected async extractIterations(weightValues: NamedTensor[]):\n      Promise<NamedTensor[]> {\n    this.iterations_ = (await weightValues[0].tensor.data())[0];\n    return weightValues.slice(1);\n  }\n}\n\nObject.defineProperty(Optimizer, Symbol.hasInstance, {\n  value: (instance: Optimizer) => {\n    return instance.minimize != null && instance.computeGradients != null &&\n        instance.applyGradients != null;\n  }\n});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {zerosLike} from '../ops/ops';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\n/** @doclink Optimizer */\nexport class AdadeltaOptimizer extends Optimizer {\n  /** @nocollapse */\n  static className = 'Adadelta';  // Name matters for Python compatibility.\n  private accumulatedGrads: OptimizerVariable[] = [];\n  private accumulatedUpdates: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, protected rho: number,\n      protected epsilon: number = null) {\n    super();\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      const trainable = false;\n      if (this.accumulatedGrads[i] == null) {\n        this.accumulatedGrads[i] = {\n          originalName: `${name}/accum_grad`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      if (this.accumulatedUpdates[i] == null) {\n        this.accumulatedUpdates[i] = {\n          originalName: `${name}/accum_var`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n\n      const accumulatedGrad = this.accumulatedGrads[i].variable;\n      const accumulatedUpdate = this.accumulatedUpdates[i].variable;\n\n      tidy(() => {\n        const newAccumulatedGrad = accumulatedGrad.mul(this.rho).add(\n            gradient.square().mul(1 - this.rho));\n\n        const updates = accumulatedUpdate.add(this.epsilon)\n                            .sqrt()\n                            .div(accumulatedGrad.add(this.epsilon).sqrt())\n                            .mul(gradient);\n\n        const newAccumulatedUpdate = accumulatedUpdate.mul(this.rho).add(\n            updates.square().mul(1 - this.rho));\n\n        accumulatedGrad.assign(newAccumulatedGrad);\n        accumulatedUpdate.assign(newAccumulatedUpdate);\n\n        const newValue = updates.mul(-this.learningRate).add(value);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  dispose(): void {\n    if (this.accumulatedUpdates != null) {\n      dispose(this.accumulatedGrads.map(v => v.variable));\n      dispose(this.accumulatedUpdates.map(v => v.variable));\n    }\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    const variables: OptimizerVariable[] =\n        [...this.accumulatedGrads, ...this.accumulatedUpdates];\n    return [await this.saveIterations()].concat(\n        variables.map(v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    const variableCount = weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedGrads =\n        weightValues.slice(0, variableCount).map(v => ({\n                                                   originalName: v.name,\n                                                   variable: v.tensor.variable(\n                                                       trainable)\n                                                 }));\n    this.accumulatedUpdates =\n        weightValues.slice(variableCount, variableCount * 2)\n            .map(v => ({\n                   originalName: v.name,\n                   variable: v.tensor.variable(trainable)\n                 }));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'rho': this.rho,\n      'epsilon': this.epsilon\n    };\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(config['learningRate'], config['rho'], config['epsilon']);\n  }\n}\nregisterClass(AdadeltaOptimizer);\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {fill} from '../ops/ops';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\n/** @doclink Optimizer */\nexport class AdagradOptimizer extends Optimizer {\n  /** @nocollapse */\n  static className = 'Adagrad';  // Note: Name matters for Python compatibility.\n\n  private accumulatedGrads: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, private initialAccumulatorValue = 0.1) {\n    super();\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      if (this.accumulatedGrads[i] == null) {\n        const trainable = false;\n        this.accumulatedGrads[i] = {\n          originalName: `${name}/accumulator`,\n          variable: tidy(\n              () => fill(value.shape, this.initialAccumulatorValue)\n                        .variable(trainable))\n        };\n      }\n\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n\n      const accumulatedGrad = this.accumulatedGrads[i].variable;\n\n      tidy(() => {\n        const newAccumulatedGrad = accumulatedGrad.add(gradient.square());\n        accumulatedGrad.assign(newAccumulatedGrad);\n\n        const newValue =\n            gradient\n                .div(newAccumulatedGrad.add(ENGINE.backend.epsilon()).sqrt())\n                .mul(-this.learningRate)\n                .add(value);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  dispose(): void {\n    if (this.accumulatedGrads != null) {\n      dispose(this.accumulatedGrads.map(v => v.variable));\n    }\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    return [await this.saveIterations()].concat(this.accumulatedGrads.map(\n        v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    const trainable = false;\n    this.accumulatedGrads = weightValues.map(\n        v => ({originalName: v.name, variable: v.tensor.variable(trainable)}));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'initialAccumulatorValue': this.initialAccumulatorValue,\n    };\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(config['learningRate'], config['initialAccumulatorValue']);\n  }\n}\nregisterClass(AdagradOptimizer);\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {pow, scalar, sub, zerosLike} from '../ops/ops';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {Variable} from '../tensor';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\nexport class AdamOptimizer extends Optimizer {\n  /** @nocollapse */\n  static className = 'Adam';  // Note: Name matters for Python compatibility.\n  private accBeta1: Variable;\n  private accBeta2: Variable;\n\n  private accumulatedFirstMoment: OptimizerVariable[] = [];\n  private accumulatedSecondMoment: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, protected beta1: number,\n      protected beta2: number, protected epsilon: number = null) {\n    super();\n    tidy(() => {\n      // accB* will be updated by batch.\n      this.accBeta1 = scalar(beta1).variable();\n      this.accBeta2 = scalar(beta2).variable();\n    });\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const varNames = Array.isArray(variableGradients) ?\n        variableGradients.map(v => v.name) :\n        Object.keys(variableGradients);\n    tidy(() => {\n      const oneMinusAccBeta1 = sub(1, this.accBeta1);\n      const oneMinusAccBeta2 = sub(1, this.accBeta2);\n\n      varNames.forEach((name, i) => {\n        const value = ENGINE.registeredVariables[name];\n        const trainable = false;\n        if (this.accumulatedFirstMoment[i] == null) {\n          this.accumulatedFirstMoment[i] = {\n            originalName: `${name}/m`,\n            variable: tidy(() => zerosLike(value).variable(trainable))\n          };\n        }\n        if (this.accumulatedSecondMoment[i] == null) {\n          this.accumulatedSecondMoment[i] = {\n            originalName: `${name}/v`,\n            variable: tidy(() => zerosLike(value).variable(trainable))\n          };\n        }\n\n        const gradient = Array.isArray(variableGradients) ?\n            variableGradients[i].tensor :\n            variableGradients[name];\n        if (gradient == null) {\n          return;\n        }\n\n        const firstMoment = this.accumulatedFirstMoment[i].variable;\n        const secondMoment = this.accumulatedSecondMoment[i].variable;\n\n        const newFirstMoment =\n            firstMoment.mul(this.beta1).add(gradient.mul(1 - this.beta1));\n        const newSecondMoment = secondMoment.mul(this.beta2)\n                                    .add(gradient.square().mul(1 - this.beta2));\n\n        const biasCorrectedFirstMoment = newFirstMoment.div(oneMinusAccBeta1);\n        const biasCorrectedSecondMoment = newSecondMoment.div(oneMinusAccBeta2);\n\n        firstMoment.assign(newFirstMoment);\n        secondMoment.assign(newSecondMoment);\n\n        const newValue =\n            biasCorrectedFirstMoment\n                .div(biasCorrectedSecondMoment.sqrt().add(this.epsilon))\n                .mul(-this.learningRate)\n                .add(value);\n        value.assign(newValue);\n      });\n\n      this.accBeta1.assign(this.accBeta1.mul(this.beta1));\n      this.accBeta2.assign(this.accBeta2.mul(this.beta2));\n    });\n    this.incrementIterations();\n  }\n\n  dispose(): void {\n    this.accBeta1.dispose();\n    this.accBeta2.dispose();\n\n    if (this.accumulatedFirstMoment != null) {\n      dispose(this.accumulatedFirstMoment.map(v => v.variable));\n    }\n    if (this.accumulatedSecondMoment != null) {\n      dispose(this.accumulatedSecondMoment.map(v => v.variable));\n    }\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    const variables: OptimizerVariable[] =\n        [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];\n    return [await this.saveIterations()].concat(\n        variables.map(v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    tidy(() => {\n      this.accBeta1.assign(pow(this.beta1, this.iterations_ + 1));\n      this.accBeta2.assign(pow(this.beta2, this.iterations_ + 1));\n    });\n\n    const variableCount = weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedFirstMoment =\n        weightValues.slice(0, variableCount).map(v => ({\n                                                   originalName: v.name,\n                                                   variable: v.tensor.variable(\n                                                       trainable)\n                                                 }));\n    this.accumulatedSecondMoment =\n        weightValues.slice(variableCount, variableCount * 2)\n            .map(v => ({\n                   originalName: v.name,\n                   variable: v.tensor.variable(trainable)\n                 }));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'beta1': this.beta1,\n      'beta2': this.beta2,\n      'epsilon': this.epsilon,\n    };\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['beta1'], config['beta2'],\n        config['epsilon']);\n  }\n}\nregisterClass(AdamOptimizer);\n","﻿/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {div, scalar, sub, zerosLike} from '../ops/ops';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {Variable} from '../tensor';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\nexport class AdamaxOptimizer extends Optimizer {\n  /** @nocollapse */\n  static className = 'Adamax';  // Note: Name matters for Python compatbility.\n  private accBeta1: Variable;\n  private iteration: Variable;\n\n  private accumulatedFirstMoment: OptimizerVariable[] = [];\n  private accumulatedWeightedInfNorm: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, protected beta1: number,\n      protected beta2: number, protected epsilon: number = null,\n      protected decay = 0.0) {\n    super();\n\n    tidy(() => {\n      this.iteration = scalar(0).variable();\n      this.accBeta1 = scalar(beta1).variable();\n    });\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    tidy(() => {\n      const oneMinusAccBeta1 = sub(1, this.accBeta1);\n      const lr = div(-this.learningRate, this.iteration.mul(this.decay).add(1));\n\n      variableNames.forEach((name, i) => {\n        const value = ENGINE.registeredVariables[name];\n        const trainable = false;\n        if (this.accumulatedFirstMoment[i] == null) {\n          this.accumulatedFirstMoment[i] = {\n            originalName: `${name}/m`,\n            variable: zerosLike(value).variable(trainable)\n          };\n        }\n        if (this.accumulatedWeightedInfNorm[i] == null) {\n          this.accumulatedWeightedInfNorm[i] = {\n            originalName: `${name}/v`,\n            variable: zerosLike(value).variable(trainable)\n          };\n        }\n\n        const gradient = Array.isArray(variableGradients) ?\n            variableGradients[i].tensor :\n            variableGradients[name];\n        if (gradient == null) {\n          return;\n        }\n\n        const firstMoment = this.accumulatedFirstMoment[i].variable;\n        const weightedInfNorm = this.accumulatedWeightedInfNorm[i].variable;\n\n        const newFirstMoment =\n            firstMoment.mul(this.beta1).add(gradient.mul(1 - this.beta1));\n\n        const ut0 = weightedInfNorm.mul(this.beta2);\n        const ut1 = gradient.abs();\n\n        const newWeightedInfNorm = ut0.maximum(ut1);\n\n        firstMoment.assign(newFirstMoment);\n        weightedInfNorm.assign(newWeightedInfNorm);\n\n        const newValue =\n            lr.div(oneMinusAccBeta1)\n                .mul(newFirstMoment.div(newWeightedInfNorm.add(this.epsilon)))\n                .add(value);\n\n        value.assign(newValue);\n      });\n\n      this.iteration.assign(this.iteration.add(1));\n      this.accBeta1.assign(this.accBeta1.mul(this.beta1));\n    });\n    this.incrementIterations();\n  }\n\n  dispose(): void {\n    this.accBeta1.dispose();\n    this.iteration.dispose();\n\n    if (this.accumulatedFirstMoment != null) {\n      dispose(this.accumulatedFirstMoment.map(v => v.variable));\n    }\n    if (this.accumulatedWeightedInfNorm != null) {\n      dispose(this.accumulatedWeightedInfNorm.map(v => v.variable));\n    }\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    throw new Error('getWeights() is not implemented for Adamax yet.');\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    throw new Error('setWeights() is not implemented for Adamax yet.');\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'beta1': this.beta1,\n      'beta2': this.beta2,\n      'epsilon': this.epsilon,\n      'decay': this.decay\n    };\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['beta1'], config['beta2'],\n        config['epsilon'], config['decay']);\n  }\n}\nregisterClass(AdamaxOptimizer);\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {keep, tidy} from '../globals';\nimport {scalar} from '../ops/ops';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {Scalar} from '../tensor';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\n\nimport {Optimizer} from './optimizer';\n\n/** @doclink Optimizer */\nexport class SGDOptimizer extends Optimizer {\n  /** @nocollapse */\n  static className = 'SGD';  // Note: Name matters for Python compatibility.\n  protected c: Scalar;\n\n  constructor(protected learningRate: number) {\n    super();\n    this.setLearningRate(learningRate);\n  }\n\n  applyGradients(variableGradients: NamedTensorMap|NamedTensor[]) {\n    const varNames = Array.isArray(variableGradients) ?\n        variableGradients.map(v => v.name) :\n        Object.keys(variableGradients);\n    varNames.forEach((name, i) => {\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n      const value = ENGINE.registeredVariables[name];\n      tidy(() => {\n        const newValue = this.c.mul(gradient).add(value);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  /**\n   * Sets the learning rate of the optimizer.\n   */\n  setLearningRate(learningRate: number) {\n    this.learningRate = learningRate;\n    if (this.c != null) {\n      this.c.dispose();\n    }\n    this.c = keep(scalar(-learningRate));\n  }\n\n  dispose() {\n    this.c.dispose();\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    return [await this.saveIterations()];\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    if (weightValues.length !== 0) {\n      throw new Error('SGD optimizer does not have settable weights.');\n    }\n  }\n\n  getConfig(): ConfigDict {\n    return {'learningRate': this.learningRate};\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(config['learningRate']);\n  }\n}\nregisterClass(SGDOptimizer);\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {scalar, zerosLike} from '../ops/ops';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {Scalar, Tensor} from '../tensor';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {OptimizerVariable} from './optimizer';\nimport {SGDOptimizer} from './sgd_optimizer';\n\n/** @doclink Optimizer */\nexport class MomentumOptimizer extends SGDOptimizer {\n  /** @nocollapse */\n  static className = 'Momentum';  // Name matters for Python compatibility.\n  private m: Scalar;\n  private accumulations: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, private momentum: number,\n      private useNesterov = false) {\n    super(learningRate);\n    this.m = scalar(this.momentum);\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      if (this.accumulations[i] == null) {\n        const trainable = false;\n        this.accumulations[i] = {\n          originalName: `${name}/momentum`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n\n      const accumulation = this.accumulations[i].variable;\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n\n      tidy(() => {\n        let newValue: Tensor;\n        const newAccumulation = this.m.mul(accumulation).add(gradient);\n        if (this.useNesterov) {\n          newValue =\n              this.c.mul(gradient.add(newAccumulation.mul(this.m))).add(value);\n        } else {\n          newValue = this.c.mul(newAccumulation).add(value);\n        }\n        accumulation.assign(newAccumulation);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  dispose(): void {\n    this.m.dispose();\n    if (this.accumulations != null) {\n      dispose(this.accumulations.map(v => v.variable));\n    }\n  }\n\n  /**\n   * Sets the momentum of the optimizer.\n   *\n   * @param momentum\n   */\n  setMomentum(momentum: number) {\n    this.momentum = momentum;\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    return [await this.saveIterations()].concat(this.accumulations.map(\n        v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    const trainable = false;\n    this.accumulations = weightValues.map(\n        v => ({originalName: v.name, variable: v.tensor.variable(trainable)}));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'momentum': this.momentum,\n      'useNesterov': this.useNesterov\n    };\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['momentum'], config['useNesterov']);\n  }\n}\nregisterClass(MomentumOptimizer);\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {zerosLike} from '../ops/ops';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\n/** @doclink Optimizer */\nexport class RMSPropOptimizer extends Optimizer {\n  /** @nocollapse */\n  static className = 'RMSProp';  // Note: Name matters for Python compatibility.\n  private centered: boolean;\n\n  private accumulatedMeanSquares: OptimizerVariable[] = [];\n  private accumulatedMoments: OptimizerVariable[] = [];\n  private accumulatedMeanGrads: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, protected decay = 0.9,\n      protected momentum = 0.0, protected epsilon: number = null,\n      centered = false) {\n    super();\n\n    this.centered = centered;\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n\n  applyGradients(variableGradients: NamedTensorMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      const trainable = false;\n      if (this.accumulatedMeanSquares[i] == null) {\n        this.accumulatedMeanSquares[i] = {\n          originalName: `${name}/rms`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      if (this.accumulatedMoments[i] == null) {\n        this.accumulatedMoments[i] = {\n          originalName: `${name}/momentum`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      if (this.accumulatedMeanGrads[i] == null && this.centered) {\n        this.accumulatedMeanGrads[i] = {\n          originalName: `${name}/mg`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n\n      const accumulatedMeanSquare = this.accumulatedMeanSquares[i].variable;\n      const accumulatedMoments = this.accumulatedMoments[i].variable;\n      tidy(() => {\n        const newAccumulatedMeanSquare =\n            accumulatedMeanSquare.mul(this.decay)\n                .add(gradient.square().mul(1 - this.decay));\n\n        if (this.centered) {\n          const accumulatedMeanGrad = this.accumulatedMeanGrads[i].variable;\n          // Centered gradient\n          const newAccumulatedMeanGrad = accumulatedMeanGrad.mul(this.decay)\n                                             .add(gradient.mul(1 - this.decay));\n\n          const newAccumulatedMoments =\n              accumulatedMoments.mul(this.momentum)\n                  .add(gradient.mul(this.learningRate)\n                           .div(newAccumulatedMeanSquare\n                                    .sub(newAccumulatedMeanGrad.square().add(\n                                        this.epsilon))\n                                    .sqrt()));\n\n          accumulatedMeanSquare.assign(newAccumulatedMeanSquare);\n          accumulatedMeanGrad.assign(newAccumulatedMeanGrad);\n          accumulatedMoments.assign(newAccumulatedMoments);\n\n          const newValue = value.sub(newAccumulatedMoments);\n          value.assign(newValue);\n        } else {\n          // Plain gradient\n          const newAccumulatedMeanSquare =\n              accumulatedMeanSquare.mul(this.decay)\n                  .add(gradient.square().mul(1 - this.decay));\n\n          const newAccumulatedMoments =\n              accumulatedMoments.mul(this.momentum)\n                  .add(gradient.mul(this.learningRate)\n                           .div(newAccumulatedMeanSquare.add(this.epsilon)\n                                    .sqrt()));\n\n          accumulatedMeanSquare.assign(newAccumulatedMeanSquare);\n          accumulatedMoments.assign(newAccumulatedMoments);\n\n          const newValue = value.sub(newAccumulatedMoments);\n          value.assign(newValue);\n        }\n      });\n    });\n    this.incrementIterations();\n  }\n\n  dispose(): void {\n    if (this.accumulatedMeanSquares != null) {\n      dispose(this.accumulatedMeanSquares.map(v => v.variable));\n    }\n    if (this.accumulatedMeanGrads != null && this.centered) {\n      dispose(this.accumulatedMeanGrads.map(v => v.variable));\n    }\n    if (this.accumulatedMoments != null) {\n      dispose(this.accumulatedMoments.map(v => v.variable));\n    }\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    const variables: OptimizerVariable[] =\n        [...this.accumulatedMeanSquares, ...this.accumulatedMoments];\n    if (this.centered) {\n      variables.push(...this.accumulatedMeanGrads);\n    }\n    return [await this.saveIterations()].concat(\n        variables.map(v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    const variableCount =\n        this.centered ? weightValues.length / 3 : weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedMeanSquares =\n        weightValues.slice(0, variableCount).map(v => ({\n                                                   originalName: v.name,\n                                                   variable: v.tensor.variable(\n                                                       trainable)\n                                                 }));\n    this.accumulatedMoments =\n        weightValues.slice(variableCount, variableCount * 2)\n            .map(v => ({\n                   originalName: v.name,\n                   variable: v.tensor.variable(trainable)\n                 }));\n    if (this.centered) {\n      this.accumulatedMeanGrads =\n          weightValues.slice(variableCount * 2, variableCount * 3)\n              .map(v => ({\n                     originalName: v.name,\n                     variable: v.tensor.variable(trainable)\n                   }));\n    }\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'decay': this.decay,\n      'momentum': this.momentum,\n      'epsilon': this.epsilon,\n      'centered': this.centered\n    };\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['decay'], config['momentum'],\n        config['epsilon'], config['centered']);\n  }\n}\nregisterClass(RMSPropOptimizer);\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AdadeltaOptimizer} from './adadelta_optimizer';\nimport {AdagradOptimizer} from './adagrad_optimizer';\nimport {AdamOptimizer} from './adam_optimizer';\nimport {AdamaxOptimizer} from './adamax_optimizer';\nimport {MomentumOptimizer} from './momentum_optimizer';\nimport {RMSPropOptimizer} from './rmsprop_optimizer';\nimport {SGDOptimizer} from './sgd_optimizer';\n\nexport class OptimizerConstructors {\n  /**\n   * Constructs a `tf.SGDOptimizer` that uses stochastic gradient descent.\n   *\n   * ```js\n   * // Fit a quadratic function by learning the coefficients a, b, c.\n   * const xs = tf.tensor1d([0, 1, 2, 3]);\n   * const ys = tf.tensor1d([1.1, 5.9, 16.8, 33.9]);\n   *\n   * const a = tf.scalar(Math.random()).variable();\n   * const b = tf.scalar(Math.random()).variable();\n   * const c = tf.scalar(Math.random()).variable();\n   *\n   * // y = a * x^2 + b * x + c.\n   * const f = x => a.mul(x.square()).add(b.mul(x)).add(c);\n   * const loss = (pred, label) => pred.sub(label).square().mean();\n   *\n   * const learningRate = 0.01;\n   * const optimizer = tf.train.sgd(learningRate);\n   *\n   * // Train the model.\n   * for (let i = 0; i < 10; i++) {\n   *   optimizer.minimize(() => loss(f(xs), ys));\n   * }\n   *\n   * // Make predictions.\n   * console.log(\n   *     `a: ${a.dataSync()}, b: ${b.dataSync()}, c: ${c.dataSync()}`);\n   * const preds = f(xs).dataSync();\n   * preds.forEach((pred, i) => {\n   *   console.log(`x: ${i}, pred: ${pred}`);\n   * });\n   * ```\n   *\n   * @param learningRate The learning rate to use for the SGD algorithm.\n   */\n  /**\n   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n   */\n  static sgd(learningRate: number): SGDOptimizer {\n    return new SGDOptimizer(learningRate);\n  }\n\n  /**\n   * Constructs a `tf.MomentumOptimizer` that uses momentum gradient\n   * descent.\n   *\n   * See\n   * [http://proceedings.mlr.press/v28/sutskever13.pdf](\n   * http://proceedings.mlr.press/v28/sutskever13.pdf)\n   *\n   * @param learningRate The learning rate to use for the Momentum gradient\n   * descent algorithm.\n   * @param momentum The momentum to use for the momentum gradient descent\n   * algorithm.\n   */\n  /**\n   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n   */\n  static momentum(learningRate: number, momentum: number, useNesterov = false):\n      MomentumOptimizer {\n    return new MomentumOptimizer(learningRate, momentum, useNesterov);\n  }\n\n  /**\n   * Constructs a `tf.RMSPropOptimizer` that uses RMSProp gradient\n   * descent. This implementation uses plain momentum and is not centered\n   * version of RMSProp.\n   *\n   * See\n   * [http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf](\n   * http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)\n   *\n   * @param learningRate The learning rate to use for the RMSProp gradient\n   * descent algorithm.\n   * @param decay The discounting factor for the history/coming gradient.\n   * @param momentum The momentum to use for the RMSProp gradient descent\n   * algorithm.\n   * @param epsilon Small value to avoid zero denominator.\n   * @param centered If true, gradients are normalized by the estimated\n   * variance of the gradient.\n   */\n  /**\n   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n   */\n  static rmsprop(\n      learningRate: number, decay = .9, momentum = 0.0, epsilon: number = null,\n      centered = false): RMSPropOptimizer {\n    return new RMSPropOptimizer(\n        learningRate, decay, momentum, epsilon, centered);\n  }\n\n  /**\n   * Constructs a `tf.AdamOptimizer` that uses the Adam algorithm.\n   * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)\n   *\n   * @param learningRate The learning rate to use for the Adam gradient\n   * descent algorithm.\n   * @param beta1 The exponential decay rate for the 1st moment estimates.\n   * @param beta2 The exponential decay rate for the 2nd moment estimates.\n   * @param epsilon A small constant for numerical stability.\n   */\n  /**\n   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n   */\n  static adam(\n      learningRate = 0.001, beta1 = 0.9, beta2 = 0.999,\n      epsilon: number = null): AdamOptimizer {\n    return new AdamOptimizer(learningRate, beta1, beta2, epsilon);\n  }\n\n  /**\n   * Constructs a `tf.AdadeltaOptimizer` that uses the Adadelta algorithm.\n   * See [https://arxiv.org/abs/1212.5701](https://arxiv.org/abs/1212.5701)\n   *\n   * @param learningRate The learning rate to use for the Adadelta gradient\n   * descent algorithm.\n   * @param rho The learning rate decay over each update.\n   * @param epsilon A constant epsilon used to better condition the grad\n   * update.\n   */\n  /**\n   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n   */\n  static adadelta(learningRate = .001, rho = .95, epsilon: number = null):\n      AdadeltaOptimizer {\n    return new AdadeltaOptimizer(learningRate, rho, epsilon);\n  }\n\n  /**\n   * Constructs a `tf.AdamaxOptimizer` that uses the Adamax algorithm.\n   * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)\n   *\n   * @param learningRate The learning rate to use for the Adamax gradient\n   * descent algorithm.\n   * @param beta1 The exponential decay rate for the 1st moment estimates.\n   * @param beta2 The exponential decay rate for the 2nd moment estimates.\n   * @param epsilon A small constant for numerical stability.\n   * @param decay The learning rate decay over each update.\n   */\n  /**\n   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n   */\n  static adamax(\n      learningRate = 0.002, beta1 = 0.9, beta2 = 0.999, epsilon: number = null,\n      decay = 0.0): AdamaxOptimizer {\n    return new AdamaxOptimizer(learningRate, beta1, beta2, epsilon, decay);\n  }\n\n  /**\n   * Constructs a `tf.AdagradOptimizer` that uses the Adagrad algorithm.\n   * See\n   * [http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf](\n   * http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)\n   * or\n   * [http://ruder.io/optimizing-gradient-descent/index.html#adagrad](\n   * http://ruder.io/optimizing-gradient-descent/index.html#adagrad)\n   *\n   * @param learningRate The learning rate to use for the Adagrad gradient\n   * descent algorithm.\n   * @param initialAccumulatorValue Starting value for the accumulators, must be\n   * positive.\n   */\n  /**\n   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n   */\n  static adagrad(learningRate: number, initialAccumulatorValue = 0.1):\n      AdagradOptimizer {\n    return new AdagradOptimizer(learningRate, initialAccumulatorValue);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// So typings can propagate.\nimport {AdadeltaOptimizer} from './optimizers/adadelta_optimizer';\nimport {AdagradOptimizer} from './optimizers/adagrad_optimizer';\nimport {AdamOptimizer} from './optimizers/adam_optimizer';\nimport {AdamaxOptimizer} from './optimizers/adamax_optimizer';\nimport {MomentumOptimizer} from './optimizers/momentum_optimizer';\nimport {OptimizerConstructors} from './optimizers/optimizer_constructors';\nimport {RMSPropOptimizer} from './optimizers/rmsprop_optimizer';\nimport {SGDOptimizer} from './optimizers/sgd_optimizer';\n\n// tslint:disable-next-line:no-unused-expression\n[MomentumOptimizer, SGDOptimizer, AdadeltaOptimizer, AdagradOptimizer,\n RMSPropOptimizer, AdamaxOptimizer, AdamOptimizer];\n\nexport const train = {\n  sgd: OptimizerConstructors.sgd,\n  momentum: OptimizerConstructors.momentum,\n  adadelta: OptimizerConstructors.adadelta,\n  adagrad: OptimizerConstructors.adagrad,\n  rmsprop: OptimizerConstructors.rmsprop,\n  adamax: OptimizerConstructors.adamax,\n  adam: OptimizerConstructors.adam\n};\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst delayCallback: Function = (() => {\n  if (typeof requestAnimationFrame !== 'undefined') {\n    return requestAnimationFrame;\n  } else if (typeof setImmediate !== 'undefined') {\n    return setImmediate;\n  }\n  return (f: Function) => f();  // no delays\n})();\n\n/**\n * Returns a promise that resolve when a requestAnimationFrame has completed.\n *\n * On Node.js this uses setImmediate instead of requestAnimationFrame.\n *\n * This is simply a sugar method so that users can do the following:\n * `await tf.nextFrame();`\n */\n/** @doc {heading: 'Performance', subheading: 'Timing'} */\nfunction nextFrame(): Promise<void> {\n  return new Promise<void>(resolve => delayCallback(() => resolve()));\n}\n\nexport {nextFrame};\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Engine is the global singleton that needs to be initialized before the rest\n// of the app.\nimport './engine';\n// Register backend-agnostic flags.\nimport './flags';\n\n// backend_cpu.ts and backend_webgl.ts are standalone files and should be\n// explicitly included here.\nimport './backends/webgl/backend_webgl';\nimport './backends/cpu/backend_cpu';\n\nimport './platforms/platform_browser';\nimport './platforms/platform_node';\n\nimport * as backend_util from './backends/backend_util';\nimport * as environment from './environment';\n// Serialization.\nimport * as io from './io/io';\nimport * as math from './math';\nimport * as browser from './ops/browser';\nimport * as serialization from './serialization';\nimport {setOpHandler} from './tensor';\nimport * as tensor_util from './tensor_util';\nimport * as test_util from './test_util';\nimport * as util from './util';\nimport {version} from './version';\nimport * as webgl from './webgl';\n\nexport {InferenceModel, ModelPredictConfig} from './model_types';\n// Optimizers.\nexport {AdadeltaOptimizer} from './optimizers/adadelta_optimizer';\nexport {AdagradOptimizer} from './optimizers/adagrad_optimizer';\nexport {AdamOptimizer} from './optimizers/adam_optimizer';\nexport {AdamaxOptimizer} from './optimizers/adamax_optimizer';\nexport {MomentumOptimizer} from './optimizers/momentum_optimizer';\nexport {Optimizer} from './optimizers/optimizer';\nexport {RMSPropOptimizer} from './optimizers/rmsprop_optimizer';\nexport {SGDOptimizer} from './optimizers/sgd_optimizer';\nexport {Scalar, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Tensor5D, TensorBuffer, variable, Variable} from './tensor';\nexport {GradSaveFunc, NamedTensorMap, TensorContainer, TensorContainerArray, TensorContainerObject} from './tensor_types';\nexport {DataType, DataTypeMap, DataValues, Rank, RecursiveArray, ShapeMap, TensorLike} from './types';\n\nexport * from './ops/ops';\nexport {LSTMCellFunc} from './ops/lstm';\nexport {Reduction} from './ops/loss_ops';\n\nexport * from './train';\nexport * from './globals';\nexport {customGrad, grad, grads, valueAndGrad, valueAndGrads, variableGrads} from './gradients';\n\nexport {TimingInfo, MemoryInfo} from './engine';\nexport {ENV, Environment} from './environment';\nexport {Platform} from './platforms/platform';\n\nexport {version as version_core};\n\n// Top-level method exports.\nexport {nextFrame} from './browser_util';\n\n// Second level exports.\nexport {\n  browser,\n  environment,\n  io,\n  math,\n  serialization,\n  test_util,\n  util,\n  backend_util,\n  webgl,\n  tensor_util\n};\n\n// Backend specific.\nexport {KernelBackend, BackendTimingInfo, DataMover, DataStorage} from './backends/backend';\n\nimport * as ops from './ops/ops';\nsetOpHandler(ops);\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/* tslint:disable */\n\n/** Properties of an Any. */\nexport declare interface IAny {\n  /** Any typeUrl */\n  typeUrl?: (string|null);\n\n  /** Any value */\n  value?: (Uint8Array|null);\n}\n\n/** DataType enum. */\nexport enum DataType {\n  DT_INVALID = 0,\n  DT_FLOAT = 1,\n  DT_DOUBLE = 2,\n  DT_INT32 = 3,\n  DT_UINT8 = 4,\n  DT_INT16 = 5,\n  DT_INT8 = 6,\n  DT_STRING = 7,\n  DT_COMPLEX64 = 8,\n  DT_INT64 = 9,\n  DT_BOOL = 10,\n  DT_QINT8 = 11,\n  DT_QUINT8 = 12,\n  DT_QINT32 = 13,\n  DT_BFLOAT16 = 14,\n  DT_FLOAT_REF = 101,\n  DT_DOUBLE_REF = 102,\n  DT_INT32_REF = 103,\n  DT_UINT8_REF = 104,\n  DT_INT16_REF = 105,\n  DT_INT8_REF = 106,\n  DT_STRING_REF = 107,\n  DT_COMPLEX64_REF = 108,\n  DT_INT64_REF = 109,\n  DT_BOOL_REF = 110,\n  DT_QINT8_REF = 111,\n  DT_QUINT8_REF = 112,\n  DT_QINT32_REF = 113,\n  DT_BFLOAT16_REF = 114\n}\n\n/** Properties of a TensorShape. */\nexport declare interface ITensorShape {\n  /** TensorShape dim */\n  dim?: (TensorShape.IDim[]|null);\n\n  /** TensorShape unknownRank */\n  unknownRank?: (boolean|null);\n}\n\nexport namespace TensorShape {\n  /** Properties of a Dim. */\n  export declare interface IDim {\n    /** Dim size */\n    size?: (number|string|null);\n\n    /** Dim name */\n    name?: (string|null);\n  }\n}\n\n/** Properties of a Tensor. */\nexport declare interface ITensor {\n  /** Tensor dtype */\n  dtype?: (DataType|null);\n\n  /** Tensor tensorShape */\n  tensorShape?: (ITensorShape|null);\n\n  /** Tensor versionNumber */\n  versionNumber?: (number|null);\n\n  /** Tensor tensorContent */\n  tensorContent?: (Uint8Array|null);\n\n  /** Tensor floatVal */\n  floatVal?: (number[]|null);\n\n  /** Tensor doubleVal */\n  doubleVal?: (number[]|null);\n\n  /** Tensor intVal */\n  intVal?: (number[]|null);\n\n  /** Tensor stringVal */\n  stringVal?: (Uint8Array[]|null);\n\n  /** Tensor scomplexVal */\n  scomplexVal?: (number[]|null);\n\n  /** Tensor int64Val */\n  int64Val?: ((number | string)[]|null);\n\n  /** Tensor boolVal */\n  boolVal?: (boolean[]|null);\n\n  /** Tensor uint32Val */\n  uint32Val?: (number[]|null);\n\n  /** Tensor uint64Val */\n  uint64Val?: ((number | string)[]|null);\n}\n\n/** Properties of an AttrValue. */\nexport declare interface IAttrValue {\n  /** AttrValue list */\n  list?: (AttrValue.IListValue|null);\n\n  /** AttrValue s */\n  s?: (string|null);\n\n  /** AttrValue i */\n  i?: (number|string|null);\n\n  /** AttrValue f */\n  f?: (number|null);\n\n  /** AttrValue b */\n  b?: (boolean|null);\n\n  /** AttrValue type */\n  type?: (DataType|null);\n\n  /** AttrValue shape */\n  shape?: (ITensorShape|null);\n\n  /** AttrValue tensor */\n  tensor?: (ITensor|null);\n\n  /** AttrValue placeholder */\n  placeholder?: (string|null);\n\n  /** AttrValue func */\n  func?: (INameAttrList|null);\n}\n\nexport namespace AttrValue {\n  /** Properties of a ListValue. */\n  export declare interface IListValue {\n    /** ListValue s */\n    s?: (string[]|null);\n\n    /** ListValue i */\n    i?: ((number | string)[]|null);\n\n    /** ListValue f */\n    f?: (number[]|null);\n\n    /** ListValue b */\n    b?: (boolean[]|null);\n\n    /** ListValue type */\n    type?: (DataType[]|null);\n\n    /** ListValue shape */\n    shape?: (ITensorShape[]|null);\n\n    /** ListValue tensor */\n    tensor?: (ITensor[]|null);\n\n    /** ListValue func */\n    func?: (INameAttrList[]|null);\n  }\n}\n\n/** Properties of a NameAttrList. */\nexport declare interface INameAttrList {\n  /** NameAttrList name */\n  name?: (string|null);\n\n  /** NameAttrList attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a NodeDef. */\nexport declare interface INodeDef {\n  /** NodeDef name */\n  name?: (string|null);\n\n  /** NodeDef op */\n  op?: (string|null);\n\n  /** NodeDef input */\n  input?: (string[]|null);\n\n  /** NodeDef device */\n  device?: (string|null);\n\n  /** NodeDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a VersionDef. */\nexport declare interface IVersionDef {\n  /** VersionDef producer */\n  producer?: (number|null);\n\n  /** VersionDef minConsumer */\n  minConsumer?: (number|null);\n\n  /** VersionDef badConsumers */\n  badConsumers?: (number[]|null);\n}\n\n/** Properties of a GraphDef. */\nexport declare interface IGraphDef {\n  /** GraphDef node */\n  node?: (INodeDef[]|null);\n\n  /** GraphDef versions */\n  versions?: (IVersionDef|null);\n\n  /** GraphDef library */\n  library?: (IFunctionDefLibrary|null);\n}\n\n/** Properties of a CollectionDef. */\nexport declare interface ICollectionDef {\n  /** CollectionDef nodeList */\n  nodeList?: (CollectionDef.INodeList|null);\n\n  /** CollectionDef bytesList */\n  bytesList?: (CollectionDef.IBytesList|null);\n\n  /** CollectionDef int64List */\n  int64List?: (CollectionDef.IInt64List|null);\n\n  /** CollectionDef floatList */\n  floatList?: (CollectionDef.IFloatList|null);\n\n  /** CollectionDef anyList */\n  anyList?: (CollectionDef.IAnyList|null);\n}\n\nexport namespace CollectionDef {\n  /** Properties of a NodeList. */\n  export declare interface INodeList {\n    /** NodeList value */\n    value?: (string[]|null);\n  }\n\n  /** Properties of a BytesList. */\n  export declare interface IBytesList {\n    /** BytesList value */\n    value?: (Uint8Array[]|null);\n  }\n\n  /** Properties of an Int64List. */\n  export declare interface IInt64List {\n    /** Int64List value */\n    value?: ((number | string)[]|null);\n  }\n\n  /** Properties of a FloatList. */\n  export declare interface IFloatList {\n    /** FloatList value */\n    value?: (number[]|null);\n  }\n\n  /** Properties of an AnyList. */\n  export declare interface IAnyList {\n    /** AnyList value */\n    value?: (IAny[]|null);\n  }\n}\n\n/** Properties of a SaverDef. */\nexport declare interface ISaverDef {\n  /** SaverDef filenameTensorName */\n  filenameTensorName?: (string|null);\n\n  /** SaverDef saveTensorName */\n  saveTensorName?: (string|null);\n\n  /** SaverDef restoreOpName */\n  restoreOpName?: (string|null);\n\n  /** SaverDef maxToKeep */\n  maxToKeep?: (number|null);\n\n  /** SaverDef sharded */\n  sharded?: (boolean|null);\n\n  /** SaverDef keepCheckpointEveryNHours */\n  keepCheckpointEveryNHours?: (number|null);\n\n  /** SaverDef version */\n  version?: (SaverDef.CheckpointFormatVersion|null);\n}\n\nexport namespace SaverDef {\n  /** CheckpointFormatVersion enum. */\n  export enum CheckpointFormatVersion {LEGACY = 0, V1 = 1, V2 = 2}\n}\n\n/** Properties of a TensorInfo. */\nexport declare interface ITensorInfo {\n  /** TensorInfo name */\n  name?: (string|null);\n\n  /** TensorInfo cooSparse */\n  cooSparse?: (TensorInfo.ICooSparse|null);\n\n  /** TensorInfo dtype */\n  dtype?: (DataType|null);\n\n  /** TensorInfo tensorShape */\n  tensorShape?: (ITensorShape|null);\n}\n\nexport namespace TensorInfo {\n  /** Properties of a CooSparse. */\n  export declare interface ICooSparse {\n    /** CooSparse valuesTensorName */\n    valuesTensorName?: (string|null);\n\n    /** CooSparse indicesTensorName */\n    indicesTensorName?: (string|null);\n\n    /** CooSparse denseShapeTensorName */\n    denseShapeTensorName?: (string|null);\n  }\n}\n\n/** Properties of a SignatureDef. */\nexport declare interface ISignatureDef {\n  /** SignatureDef inputs */\n  inputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef outputs */\n  outputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef methodName */\n  methodName?: (string|null);\n}\n\n/** Properties of an AssetFileDef. */\nexport declare interface IAssetFileDef {\n  /** AssetFileDef tensorInfo */\n  tensorInfo?: (ITensorInfo|null);\n\n  /** AssetFileDef filename */\n  filename?: (string|null);\n}\n\n/** Properties of an OpDef. */\nexport declare interface IOpDef {\n  /** OpDef name */\n  name?: (string|null);\n\n  /** OpDef inputArg */\n  inputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef outputArg */\n  outputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef attr */\n  attr?: (OpDef.IAttrDef[]|null);\n\n  /** OpDef deprecation */\n  deprecation?: (OpDef.IOpDeprecation|null);\n\n  /** OpDef summary */\n  summary?: (string|null);\n\n  /** OpDef description */\n  description?: (string|null);\n\n  /** OpDef isCommutative */\n  isCommutative?: (boolean|null);\n\n  /** OpDef isAggregate */\n  isAggregate?: (boolean|null);\n\n  /** OpDef isStateful */\n  isStateful?: (boolean|null);\n\n  /** OpDef allowsUninitializedInput */\n  allowsUninitializedInput?: (boolean|null);\n}\n\nexport namespace OpDef {\n  /** Properties of an ArgDef. */\n  export declare interface IArgDef {\n    /** ArgDef name */\n    name?: (string|null);\n\n    /** ArgDef description */\n    description?: (string|null);\n\n    /** ArgDef type */\n    type?: (DataType|null);\n\n    /** ArgDef typeAttr */\n    typeAttr?: (string|null);\n\n    /** ArgDef numberAttr */\n    numberAttr?: (string|null);\n\n    /** ArgDef typeListAttr */\n    typeListAttr?: (string|null);\n\n    /** ArgDef isRef */\n    isRef?: (boolean|null);\n  }\n\n  /** Properties of an AttrDef. */\n  export declare interface IAttrDef {\n    /** AttrDef name */\n    name?: (string|null);\n\n    /** AttrDef type */\n    type?: (string|null);\n\n    /** AttrDef defaultValue */\n    defaultValue?: (IAttrValue|null);\n\n    /** AttrDef description */\n    description?: (string|null);\n\n    /** AttrDef hasMinimum */\n    hasMinimum?: (boolean|null);\n\n    /** AttrDef minimum */\n    minimum?: (number|string|null);\n\n    /** AttrDef allowedValues */\n    allowedValues?: (IAttrValue|null);\n  }\n\n  /** Properties of an OpDeprecation. */\n  export declare interface IOpDeprecation {\n    /** OpDeprecation version */\n    version?: (number|null);\n\n    /** OpDeprecation explanation */\n    explanation?: (string|null);\n  }\n}\n\n/** Properties of an OpList. */\nexport declare interface IOpList {\n  /** OpList op */\n  op?: (IOpDef[]|null);\n}\n\n/** Properties of a MetaGraphDef. */\nexport declare interface IMetaGraphDef {\n  /** MetaGraphDef metaInfoDef */\n  metaInfoDef?: (MetaGraphDef.IMetaInfoDef|null);\n\n  /** MetaGraphDef graphDef */\n  graphDef?: (IGraphDef|null);\n\n  /** MetaGraphDef saverDef */\n  saverDef?: (ISaverDef|null);\n\n  /** MetaGraphDef collectionDef */\n  collectionDef?: ({[k: string]: ICollectionDef}|null);\n\n  /** MetaGraphDef signatureDef */\n  signatureDef?: ({[k: string]: ISignatureDef}|null);\n\n  /** MetaGraphDef assetFileDef */\n  assetFileDef?: (IAssetFileDef[]|null);\n}\n\nexport namespace MetaGraphDef {\n  /** Properties of a MetaInfoDef. */\n  export declare interface IMetaInfoDef {\n    /** MetaInfoDef metaGraphVersion */\n    metaGraphVersion?: (string|null);\n\n    /** MetaInfoDef strippedOpList */\n    strippedOpList?: (IOpList|null);\n\n    /** MetaInfoDef anyInfo */\n    anyInfo?: (IAny|null);\n\n    /** MetaInfoDef tags */\n    tags?: (string[]|null);\n\n    /** MetaInfoDef tensorflowVersion */\n    tensorflowVersion?: (string|null);\n\n    /** MetaInfoDef tensorflowGitVersion */\n    tensorflowGitVersion?: (string|null);\n  }\n}\n\n/** Properties of a SavedModel. */\nexport declare interface ISavedModel {\n  /** SavedModel savedModelSchemaVersion */\n  savedModelSchemaVersion?: (number|string|null);\n\n  /** SavedModel metaGraphs */\n  metaGraphs?: (IMetaGraphDef[]|null);\n}\n\n/** Properties of a FunctionDefLibrary. */\nexport declare interface IFunctionDefLibrary {\n  /** FunctionDefLibrary function */\n  'function'?: (IFunctionDef[]|null);\n\n  /** FunctionDefLibrary gradient */\n  gradient?: (IGradientDef[]|null);\n}\n\n/** Properties of a FunctionDef. */\nexport declare interface IFunctionDef {\n  /** FunctionDef signature */\n  signature?: (IOpDef|null);\n\n  /** FunctionDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n\n  /** FunctionDef nodeDef */\n  nodeDef?: (INodeDef[]|null);\n\n  /** FunctionDef ret */\n  ret?: ({[k: string]: string}|null);\n}\n\n/** Properties of a GradientDef. */\nexport declare interface IGradientDef {\n  /** GradientDef functionName */\n  functionName?: (string|null);\n\n  /** GradientDef gradientFunc */\n  gradientFunc?: (string|null);\n}\n","\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpExecutor, OpMapper} from '../types';\n\nconst CUSTOM_OPS: {[key: string]: OpMapper} = {};\n\n/**\n * Register an Op for graph model executor. This allow you to register\n * TensorFlow custom op or override existing op.\n *\n * Here is an example of registering a new MatMul Op.\n * ```js\n * const customMatmul = (node) =>\n *    tf.matMul(\n *        node.inputs[0], node.inputs[1],\n *        node.attrs['transpose_a'], node.attrs['transpose_b']);\n *\n * tf.registerOp('MatMul', customMatmul);\n * ```\n * The inputs and attrs of the node object is based on the TensorFlow op\n * registry.\n *\n * @param name The Tensorflow Op name.\n * @param opFunc An op function which is called with the current graph node\n * during execution and needs to return a tensor or a list of tensors. The node\n * has the following attributes:\n *    - attr: A map from attribute name to its value\n *    - inputs: A list of input tensors\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\nexport function registerOp(name: string, opFunc: OpExecutor) {\n  const opMapper: OpMapper = {\n    tfOpName: name,\n    category: 'custom',\n    inputs: [],\n    attrs: [],\n    customExecutor: opFunc\n  };\n\n  CUSTOM_OPS[name] = opMapper;\n}\n\n/**\n * Retrieve the OpMapper object for the registered op.\n *\n * @param name The Tensorflow Op name.\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\n\nexport function getRegisteredOp(name: string): OpMapper {\n  return CUSTOM_OPS[name];\n}\n\n/**\n * Deregister the Op for graph model executor.\n *\n * @param name The Tensorflow Op name.\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\nexport function deregisterOp(name: string) {\n  delete CUSTOM_OPS[name];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, ValueType} from '../types';\n\nexport function getParamValue(\n    paramName: string, node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): ValueType {\n  const inputParam = node.inputParams[paramName];\n  if (inputParam && inputParam.inputIndexStart !== undefined) {\n    const start = inputParam.inputIndexStart;\n    const end = inputParam.inputIndexEnd === 0 ?\n        undefined :\n        (inputParam.inputIndexEnd === undefined ? start + 1 :\n                                                  inputParam.inputIndexEnd);\n    if (inputParam.type === 'tensor') {\n      return getTensor(\n          node.inputNames[inputParam.inputIndexStart], tensorMap, context);\n    }\n    if (inputParam.type === 'tensors') {\n      const inputs = node.inputNames.slice(start, end);\n\n      return inputs.map(name => getTensor(name, tensorMap, context));\n    }\n    const data = Array.prototype.slice.call(\n        getTensor(node.inputNames.slice(start)[0], tensorMap, context)\n            .dataSync());\n    return inputParam.type === 'number' ? data[0] : data;\n  }\n  const attrParam = node.attrParams[paramName];\n  return attrParam && attrParam.value;\n}\n\n/**\n * Retrieve the tensor based on input name by extracting the node name and\n * output index information.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensor(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor {\n  const [nodeName, index] = parseNodeName(name);\n  const contextId = context.currentContextIds.find(contextId => {\n    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n  });\n\n  return contextId !== undefined ?\n      tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :\n      undefined;\n}\n\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContenxt(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor[] {\n  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n\n/**\n * Returns the node name and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n */\nexport function getNodeNameAndIndex(\n    inputName: string, context?: ExecutionContext): [string, number] {\n  const [nodeName, index] = parseNodeName(inputName);\n\n  return [\n    getNodeNameWithContextId(nodeName, context && context.currentContextId),\n    index\n  ];\n}\n\nfunction getNodeNameWithContextId(name: string, contextId?: string): string {\n  return !!contextId ? `${name}-${contextId}` : name;\n}\n\nexport function parseNodeName(name: string): [string, number] {\n  const index = name.lastIndexOf(':');\n  if (index === -1) {\n    return [name, 0];\n  }\n\n  const nodeName = name.substring(0, index);\n  return [nodeName, Number(name.substring(index + 1))];\n}\n\nexport function split(arr: number[], size: number) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += size) {\n    res.push(arr.slice(i, i + size));\n  }\n  return res;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Add',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddV2',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddN',\n    'category': 'arithmetic',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'BiasAdd',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sub',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'RealDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Div',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mul',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Maximum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Minimum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Pow',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SquaredDifference',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorMod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Abs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan2',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ceil',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ClipByValue',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'clip_value_min', 'name': 'clipValueMin', 'type': 'number'},\n      {'tfName': 'clip_value_max', 'name': 'clipValueMax', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Complex',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'real', 'type': 'tensor'},\n      {'start': 1, 'name': 'imag', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ComplexAbs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Elu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Exp',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Floor',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Imag',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Neg',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Real',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Prelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'alpha', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu6',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'clipValueMin',\n        'name': 'clipValueMin',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'clipValueMax',\n        'name': 'clipValueMax',\n        'type': 'number',\n        'defaultValue': 6\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Selu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sigmoid',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Rsqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Square',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sign',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Round',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Expm1',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log1p',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Reciprocal',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Softplus',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Erf',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axes', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LeakyRelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 0.2\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'LoopCond',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'pred', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Switch',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'data', 'type': 'tensor'},\n      {'start': 1, 'name': 'pred', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Merge',\n    'category': 'control',\n    'inputs':\n        [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Enter',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'frame_name', 'name': 'frameName', 'type': 'string'},\n      {'tfName': 'is_constant', 'name': 'isConstant', 'type': 'bool'}\n    ]\n  },\n  {\n    'tfOpName': 'Exit',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NextIteration',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'size', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'},\n      {'tfName': 'dynamic_size', 'name': 'dynamicSize', 'type': 'bool'},\n      {'tfName': 'clear_after_read', 'name': 'clearAfterRead', 'type': 'bool'},\n      {\n        'tfName': 'identical_element_shapes',\n        'name': 'identicalElementShapes',\n        'type': 'bool'\n      },\n      {'tfName': 'tensor_array_name', 'name': 'name', 'type': 'string'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayWriteV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayReadV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{\n      'tfName': 'dtype',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  },\n  {\n    'tfOpName': 'TensorArrayGatherV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayScatterV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArrayConcatV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}, {\n        'tfName': 'element_shape_except0',\n        'name': 'elementShapeExcept0',\n        'type': 'shape',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArraySplitV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 2, 'name': 'lengths', 'type': 'number[]'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArraySizeV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayCloseV3',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'tensorArrayId', 'type': 'number'}]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'AvgPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AvgPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Conv1D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'stride', 'name': 'stride', 'type': 'number'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NWC'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'dilation',\n        'name': 'dilation',\n        'type': 'number',\n        'defaultValue': 1\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {'tfName': 'useCudnnOnGpu', 'name': 'useCudnnOnGpu', 'type': 'bool'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': '_FusedConv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'use_cudnn_on_gpu',\n        'name': 'useCudnnOnGpu',\n        'type': 'bool',\n        'defaultValue': true\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n    ]\n  },\n  {\n    'tfOpName': 'Conv2DBackpropInput',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 2, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 0, 'name': 'outputShape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2d',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Conv3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ],\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Fill',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n      {'start': 1, 'name': 'value', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'LinSpace',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'num', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'OneHot',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'depth', 'type': 'number'},\n      {'start': 2, 'name': 'onValue', 'type': 'number', 'defaultValue': 1},\n      {'start': 3, 'name': 'offValue', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'name': 'axis',\n        'type': 'number',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ones',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'OnesLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'RandomUniform',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'minval',\n        'name': 'minval',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'maxval',\n        'name': 'maxval',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Range',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'step', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [{'tfName': 'Tidx', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TruncatedNormal',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'means',\n        'name': 'mean',\n        'type': 'number',\n        'defaultValue': 0.0\n      },\n      {\n        'tfName': 'stddev',\n        'name': 'stdDev',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Zeros',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'ZerosLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'Multinomial',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'logits', 'type': 'tensor'},\n      {'start': 1, 'name': 'numSamples', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'},\n      {'tfName': 'seed2', 'name': 'seed2', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'output_dtype', 'name': 'output_dtype', 'type': 'dtype'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'NonMaxSuppressionV2',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV3',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Where',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ListDiff',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [{\n  'tfOpName': 'TopKV2',\n  'category': 'evaluation',\n  'inputs': [\n    {'start': 0, 'name': 'x', 'type': 'tensor'},\n    {'start': 1, 'name': 'k', 'type': 'number'},\n  ],\n  'attrs': [{'tfName': 'sorted', 'name': 'sorted', 'type': 'bool'}]\n}];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'PlaceholderWithDefault',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'default', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'Placeholder',\n    'category': 'graph',\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {'tfOpName': 'Const', 'category': 'graph'}, {\n    'tfOpName': 'Identity',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IdentityN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Snapshot',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Rank',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Size',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Shape',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'ShapeN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Print',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'data', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'message', 'name': 'message', 'type': 'string'}, {\n        'tfName': 'first_n',\n        'name': 'firstN',\n        'type': 'number',\n        'notSupported': true\n      },\n      {\n        'tfName': 'summarize',\n        'name': 'summarize',\n        'type': 'number',\n        'defaultValue': 3\n      }\n    ]\n  },\n  {'tfOpName': 'NoOp', 'category': 'graph', 'inputs': []}, {\n    'tfOpName': 'StopGradient',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'FakeQuantWithMinMaxVars',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'min', 'name': 'min', 'type': 'number'},\n      {'tfName': 'max', 'name': 'max', 'type': 'number'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ResizeBilinear',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ResizeNearestNeighbor',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'CropAndResize',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'image', 'type': 'tensor'},\n      {'start': 1, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 2, 'name': 'boxInd', 'type': 'tensor'},\n      {'start': 3, 'name': 'cropSize', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'method', 'name': 'method', 'type': 'string'}, {\n        'tfName': 'extrapolation_value',\n        'name': 'extrapolationValue',\n        'type': 'number'\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Equal',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NotEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Greater',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'GreaterEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Less',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LessEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalAnd',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalNot',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalOr',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Select',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n      {'start': 1, 'name': 'a', 'type': 'tensor'},\n      {'start': 2, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'MatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMulV2',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Transpose',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'perm', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FusedBatchNorm',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV2',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV3',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LRN',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'depth_radius',\n        'name': 'radius',\n        'type': 'number',\n        'defaultValue': 5\n      },\n      {'tfName': 'bias', 'name': 'bias', 'type': 'number', 'defaultValue': 1.0},\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {\n        'tfName': 'beta',\n        'name': 'beta',\n        'type': 'number',\n        'defaultValue': 0.5\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Softmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'LogSoftmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': true,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Max',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Mean',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Min',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Sum',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'All',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Any',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'ArgMax',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'ArgMin',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ConcatV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': -1, 'name': 'tensors', 'type': 'tensors'},\n      {'start': -1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Concat',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 1, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n      {'start': 0, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'GatherV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Gather',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'validate_indices',\n        'name': 'validateIndices',\n        'type': 'bool',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reverse',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'dims', 'type': 'bool', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ReverseV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Slice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'size', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'StridedSlice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'end', 'type': 'number[]'},\n      {'start': 3, 'name': 'strides', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'begin_mask',\n        'name': 'beginMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'end_mask',\n        'name': 'endMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'new_axis_mask',\n        'name': 'newAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'ellipsis_mask',\n        'name': 'ellipsisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'shrink_axis_mask',\n        'name': 'shrinkAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Pack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Unpack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'num',\n        'name': 'num',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tile',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'reps', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Split',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'axis', 'type': 'number', 'defaultValue': 0},\n      {'start': 1, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'num_split',\n      'name': 'numOrSizeSplits',\n      'type': 'number',\n      'defaultValue': 1\n    }]\n  },\n  {\n    'tfOpName': 'SplitV',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'numOrSizeSplits', 'type': 'number[]'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'ScatterNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'values', 'type': 'tensor'},\n      {'start': 2, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'GatherNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': false,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IFFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'RFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'IRFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Cast',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'SrcT',\n        'name': 'sdtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {'tfName': 'DstT', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'ExpandDims',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Pad',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'constant_value',\n      'name': 'constantValue',\n      'type': 'number',\n      'defaultValue': 0\n    }]\n  },\n  {\n    'tfOpName': 'PadV2',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'}, {\n        'start': 2,\n        'name': 'constantValue',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reshape',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Squeeze',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'axis',\n      'tfDeprecatedName': 'squeeze_dims',\n      'name': 'axis',\n      'type': 'number[]'\n    }]\n  },\n  {\n    'tfOpName': 'SpaceToBatchND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'paddings', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'BatchToSpaceND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'crops', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthToSpace',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'block_size', 'name': 'blockSize', 'type': 'number'},\n      {'tfName': 'data_format', 'name': 'dataFormat', 'type': 'string'}\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, ENV} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {getRegisteredOp} from './custom_op/register';\n\nimport {getNodeNameAndIndex} from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as spectral from './op_list/spectral';\nimport * as transformation from './op_list/transformation';\nimport {Graph, InputParamValue, Node, OpMapper, ParamValue} from './types';\n\nexport class OperationMapper {\n  private static _instance: OperationMapper;\n\n  private opMappers: {[key: string]: OpMapper};\n\n  // Singleton instance for the mapper\n  public static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  // Loads the op mapping from the JSON file.\n  private constructor() {\n    const ops = [\n      arithmetic, basicMath, control, convolution, creation, dynamic,\n      evaluation, logical, image, graph, matrices, normalization, reduction,\n      sliceJoin, spectral, transformation\n    ];\n    const mappersJson: OpMapper[] = [].concat.apply([], ops.map(op => op.json));\n\n    this.opMappers = mappersJson.reduce<{[key: string]: OpMapper}>(\n        (map, mapper: OpMapper) => {\n          map[mapper.tfOpName] = mapper;\n          return map;\n        },\n        {});\n  }\n\n  // Converts the model from Tensorflow GraphDef to local representation for\n  // TensorFlow.js API\n  transformGraph(graph: tensorflow.IGraphDef): Graph {\n    const tfNodes = graph.node;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    const nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (node.op === 'Placeholder') {\n        placeholders.push(map[node.name]);\n      }\n      if (node.op === 'Const') {\n        weights.push(map[node.name]);\n      }\n      return map;\n    }, {});\n\n    const inputs: Node[] = [];\n    const outputs: Node[] = [];\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n      if (node.inputs.length === 0) {\n        inputs.push(node);\n      }\n    });\n\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      if (node.children.length === 0) {\n        outputs.push(node);\n      }\n    });\n\n    return {nodes, inputs, outputs, weights, placeholders};\n  }\n\n  private mapNode(node: tensorflow.INodeDef): Node {\n    // Unsupported ops will cause an error at run-time (not parse time), since\n    // they may not be used by the actual execution subgraph.\n    const mapper =\n        getRegisteredOp(node.op) || this.opMappers[node.op] || {} as OpMapper;\n    if (node.attr == null) {\n      node.attr = {};\n    }\n\n    const newNode: Node = {\n      name: node.name,\n      op: node.op,\n      category: mapper.category,\n      inputNames:\n          (node.input ||\n           []).map(input => input.startsWith('^') ? input.substr(1) : input),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {},\n      rawAttrs: node.attr\n    };\n\n    if (mapper.inputs != null) {\n      newNode.inputParams =\n          mapper.inputs.reduce<{[key: string]: InputParamValue}>(\n              (map, param) => {\n                map[param.name] = {\n                  type: param.type,\n                  inputIndexStart: param.start,\n                  inputIndexEnd: param.end\n                };\n                return map;\n              },\n              {});\n    }\n    if (mapper.attrs != null) {\n      newNode.attrParams =\n          mapper.attrs.reduce<{[key: string]: ParamValue}>((map, param) => {\n            const type = param.type;\n            let value = undefined;\n            switch (param.type) {\n              case 'string':\n                value = getStringParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'string[]':\n                value = getStringArrayParam(\n                    node.attr, param.tfName, param.defaultValue as string[]);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string[]);\n                }\n                break;\n              case 'number':\n                value = getNumberParam(\n                    node.attr, param.tfName,\n                    (param.defaultValue || 0) as number);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumberParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number);\n                }\n                break;\n              case 'number[]':\n                value = getNumericArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumericArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'bool':\n                value = getBoolParam(\n                    node.attr, param.tfName, param.defaultValue as boolean);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean);\n                }\n                break;\n              case 'bool[]':\n                value = getBoolArrayParam(\n                    node.attr, param.tfName, param.defaultValue as boolean[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean[]);\n                }\n                break;\n              case 'shape':\n                value = getTensorShapeParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'shape[]':\n                value = getTensorShapeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[][]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[][]);\n                }\n                break;\n              case 'dtype':\n                value = getDtypeParam(\n                    node.attr, param.tfName, param.defaultValue as DataType);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType);\n                }\n                break;\n              case 'dtype[]':\n                value = getDtypeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as DataType[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType[]);\n                }\n                break;\n              case 'tensor':\n              case 'tensors':\n                break;\n              default:\n                throw new Error(\n                    `Unsupported param type: ${param.type} for op: ${node.op}`);\n            }\n            map[param.name] = {value, type};\n            return map;\n          }, {});\n    }\n    return newNode;\n  }\n}\n\nexport function decodeBase64(text: string): string {\n  const global = ENV.global;\n  if (typeof global.atob !== 'undefined') {\n    return global.atob(text);\n  } else if (typeof Buffer !== 'undefined') {\n    return new Buffer(text, 'base64').toString();\n  } else {\n    throw new Error(\n        'Unable to decode base64 in this environment. ' +\n        'Missing built-in atob() or Buffer()');\n  }\n}\n\nexport function parseStringParam(s: []|string, keepCase: boolean): string {\n  const value =\n      Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n  return keepCase ? value : value.toLowerCase();\n}\n\nexport function getStringParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string,\n    keepCase = false): string {\n  const param = attrs[name];\n  if (param != null) {\n    return parseStringParam(param.s, keepCase);\n  }\n  return def;\n}\n\nexport function getBoolParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean): boolean {\n  const param = attrs[name];\n  return param ? param.b : def;\n}\n\nexport function getNumberParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number): number {\n  const param = attrs[name] || {};\n  const value =\n      param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);\n  return (typeof value === 'number') ? value : parseInt(value, 10);\n}\n\nexport function parseDtypeParam(value: string|tensorflow.DataType): DataType {\n  if (typeof (value) === 'string') {\n    // tslint:disable-next-line:no-any\n    value = tensorflow.DataType[value as any];\n  }\n  switch (value) {\n    case tensorflow.DataType.DT_FLOAT:\n      return 'float32';\n    case tensorflow.DataType.DT_INT32:\n      return 'int32';\n    case tensorflow.DataType.DT_BOOL:\n      return 'bool';\n    case tensorflow.DataType.DT_DOUBLE:\n      return 'float32';\n    case tensorflow.DataType.DT_STRING:\n      return 'string';\n    default:\n      // Unknown dtype error will happen at runtime (instead of parse time),\n      // since these nodes might not be used by the actual subgraph execution.\n      return null;\n  }\n}\n\nexport function getDtypeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType): DataType {\n  const param = attrs[name];\n  if (param && param.type) {\n    return parseDtypeParam(param.type);\n  }\n  return def;\n}\n\nexport function getDtypeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType[]): DataType[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.type) {\n    return param.list.type.map(v => parseDtypeParam(v));\n  }\n  return def;\n}\n\nexport function parseTensorShapeParam(shape: tensorflow.ITensorShape): number[]|\n    undefined {\n  if (shape.unknownRank) {\n    return undefined;\n  }\n  if (shape.dim != null) {\n    return shape.dim.map(\n        dim =>\n            (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10));\n  }\n  return [];\n}\n\nexport function getTensorShapeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def?: number[]): number[]|undefined {\n  const param = attrs[name];\n  if (param && param.shape) {\n    return parseTensorShapeParam(param.shape);\n  }\n  return def;\n}\n\nexport function getNumericArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[]): number[] {\n  const param = attrs[name];\n  if (param) {\n    return ((param.list.f && param.list.f.length ? param.list.f :\n                                                   param.list.i) ||\n            [])\n        .map(v => (typeof v === 'number') ? v : parseInt(v, 10));\n  }\n  return def;\n}\n\nexport function getStringArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string[],\n    keepCase = false): string[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.s) {\n    return param.list.s.map((v) => {\n      return parseStringParam(v, keepCase);\n    });\n  }\n  return def;\n}\n\nexport function getTensorShapeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[][]): number[][] {\n  const param = attrs[name];\n  if (param && param.list && param.list.shape) {\n    return param.list.shape.map((v) => {\n      return parseTensorShapeParam(v);\n    });\n  }\n  return def;\n}\n\nexport function getBoolArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean[]): boolean[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.b) {\n    return param.list.b;\n  }\n  return def;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {getTensor} from '../executors/utils';\nimport {getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam} from '../operation_mapper';\nimport {GraphNode, Node, ValueType} from '../types';\n\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl implements GraphNode {\n  public readonly inputs: Tensor[] = [];\n  public readonly attrs: {[key: string]: ValueType} = {};\n  constructor(\n      private node: Node, private tensorMap: NamedTensorsMap,\n      private context: ExecutionContext) {\n    this.inputs = node.inputNames.map(name => this.getInput(name));\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs)\n                       .reduce((attrs: {[key: string]: ValueType}, key) => {\n                         attrs[key] = this.getAttr(key);\n                         return attrs;\n                       }, {});\n    }\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getInput(name: string): Tensor {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getAttr(name: string, defaultValue?: ValueType): ValueType {\n    const value = this.node.rawAttrs[name];\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue as number);\n    }\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue as string);\n    }\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue as boolean);\n    }\n    if (value.shape != null) {\n      return getTensorShapeParam(\n          this.node.rawAttrs, name, defaultValue as number[]);\n    }\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue as DataType);\n    }\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[]);\n      }\n      if (value.list.s != null) {\n        return getStringArrayParam(\n            this.node.rawAttrs, name, defaultValue as string[]);\n      }\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[][]);\n      }\n      if (value.list.b != null) {\n        return getBoolArrayParam(\n            this.node.rawAttrs, name, defaultValue as boolean[]);\n      }\n      if (value.list.type != null) {\n        return getDtypeArrayParam(\n            this.node.rawAttrs, name, defaultValue as DataType[]);\n      }\n    }\n\n    return defaultValue;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'BiasAdd':\n    case 'AddV2':\n    case 'Add': {\n      return [tfc.add(\n          (getParamValue('a', node, tensorMap, context) as tfc.Tensor),\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'AddN': {\n      return [tfc.addN((\n          getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[]))];\n    }\n    case 'FloorMod':\n    case 'Mod':\n      return [tfc.mod(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    case 'Mul':\n      return [tfc.mul(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    case 'RealDiv':\n    case 'Div': {\n      return [tfc.div(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'FloorDiv': {\n      return [tfc.floorDiv(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sub': {\n      return [tfc.sub(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Minimum': {\n      return [tfc.minimum(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Maximum': {\n      return [tfc.maximum(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Pow': {\n      return [tfc.pow(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'SquaredDifference': {\n      return [tfc.squaredDifference(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'arithmetic';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Abs':\n    case 'ComplexAbs':\n      return [tfc.abs(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Acos':\n      return [tfc.acos(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Acosh':\n      return [tfc.acosh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Asin':\n      return [tfc.asin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Asinh':\n      return [tfc.asinh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atan':\n      return [tfc.atan(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atan2':\n      return [tfc.atan2(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('y', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atanh':\n      return [tfc.atanh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Ceil':\n      return [tfc.ceil(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Complex':\n      return [tfc.complex(\n          getParamValue('real', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('imag', node, tensorMap, context) as tfc.Tensor)];\n    case 'Cos':\n      return [tfc.cos(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Cosh':\n      return [tfc.cosh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Elu':\n      return [tfc.elu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Erf':\n      return [tfc.erf(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Exp':\n      return [tfc.exp(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Expm1': {\n      return [tfc.expm1(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Floor':\n      return [tfc.floor(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Log':\n      return [tfc.log(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Log1p': {\n      return [tfc.log1p(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Imag':\n      return [tfc.imag(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n\n    case 'Neg':\n      return [tfc.neg(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Reciprocal': {\n      return [tfc.reciprocal(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Real':\n      return [tfc.real(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Relu':\n      return [tfc.relu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Round': {\n      return [tfc.round(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Selu':\n      return [tfc.selu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sigmoid':\n      return [tfc.sigmoid(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sin':\n      return [tfc.sin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sign': {\n      return [tfc.sign(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sinh': {\n      return [tfc.sinh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Softplus': {\n      return [tfc.softplus(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sqrt': {\n      return [tfc.sqrt(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Square': {\n      return [tfc.square(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Tanh': {\n      return [tfc.tanh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Tan':\n      return [tfc.tan(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Relu6':\n    case 'ClipByValue':\n      return [tfc.clipByValue(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('clipValueMin', node, tensorMap, context) as number,\n          getParamValue('clipValueMax', node, tensorMap, context) as number)];\n    case 'Rsqrt':\n      return [tfc.rsqrt(getTensor(node.inputNames[0], tensorMap, context))];\n    case 'Prod':\n      return [tfc.prod(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('axes', node, tensorMap, context) as number[])];\n    case 'LeakyRelu':\n      return [tfc.leakyRelu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('alpha', node, tensorMap, context) as number)];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'basic_math';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, slice, stack, Tensor, tensor, tidy, unstack, util} from '@tensorflow/tfjs-core';\n\nexport interface TensorWithState {\n  tensor?: Tensor;\n  written?: boolean;\n  read?: boolean;\n  cleared?: boolean;\n}\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n  private static nextId = 0;\n  private tensors: TensorWithState[] = [];\n  private closed_ = false;\n  readonly id: number;\n  constructor(\n      public readonly name: string, public readonly dtype: DataType,\n      private maxSize: number, private elementShape: number[],\n      public readonly identicalElementShapes: boolean,\n      public readonly dynamicSize: boolean,\n      public readonly clearAfterRead: boolean) {\n    this.id = TensorArray.nextId++;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n\n  /**\n   * Close the current TensorArray.\n   */\n  clearAndClose() {\n    this.tensors.forEach(tensor => tensor.tensor.dispose());\n    this.tensors = [];\n    this.closed_ = true;\n  }\n\n  size(): number {\n    return this.tensors.length;\n  }\n\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n  read(index: number): Tensor {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.tensors.length) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${\n          this.tensors.length}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not read index ${\n              index} twice because it was cleared after a previous read ` +\n          `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n  readMany(indices: number[]): Tensor[] {\n    return indices.map(index => this.read(index));\n  }\n\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n  write(index: number, tensor: Tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${\n          index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${\n          this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${\n          tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n\n    // Set the shape for the first time write to unknow shape tensor array\n    if (this.size() === 0 &&\n        (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    this.assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape,\n        `TensorArray ${this.name}: Could not write to TensorArray index ${\n            index}.`);\n\n    if (t && t.read) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been read.`);\n    }\n\n    if (t && t.written) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    t.written = true;\n\n    this.tensors[index] = t;\n  }\n\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n  writeMany(indices: number[], tensors: Tensor[]) {\n    if (indices.length !== tensors.length) {\n      throw new Error(\n          `TensorArray ${this.name}: could not write multiple tensors,` +\n          `because the index size: ${\n              indices.length} is not the same as tensors size: ${\n              tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n  gather(indices?: number[], dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n    const tensors = this.readMany(indices);\n\n    this.assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n\n    return stack(tensors, 0);\n  }\n\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n  concat(dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    // Collect all the tensors from the tensors array.\n    const tensors = this.readMany(indices);\n\n    this.assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape,\n        `TensorArray shape mismatch: tensor array shape (${\n            this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n\n    return concat(tensors, 0);\n  }\n\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n  scatter(indices: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n          indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(\n          `Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n  split(length: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(\n          `TensorArray's size is not equal to the size of lengths (${\n              this.maxSize} vs. ${length.length}), ` +\n          'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors: Tensor[] = [];\n    tidy(() => {\n      tensor = tensor.reshape([1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = slice(tensor, indices, sizes).reshape(this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n\n  /**\n   * This differs from util.assertShapesMatch in that it allows values of\n   * negative one, an undefined size of a dimensinon, in a shape to match\n   * anything.\n   */\n  private assertShapesMatchAllowUndefinedSize(\n      shapeA: number[], shapeB: number[], errorMessagePrefix = ''): void {\n    util.assert(\n        this.shapesEqualAllowUndefinedSize(shapeA, shapeB),\n        () =>\n            errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  }\n\n  private shapesEqualAllowUndefinedSize(n1: number[], n2: number[]) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== -1 && n2[i] !== -1 && n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {scalar} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {TensorArray} from '../../executor/tensor_array';\nimport {Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport async function executeOp(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<tfc.Tensor[]> {\n  switch (node.op) {\n    case 'LoopCond':\n      return [\n        (getParamValue('pred', node, tensorMap, context) as tfc.Tensor).clone()\n      ];\n    case 'Switch': {\n      const pred =\n          getParamValue('pred', node, tensorMap, context) as tfc.Tensor;\n      const data =\n          getParamValue('data', node, tensorMap, context) as tfc.Tensor;\n      // Outputs nodes :0 => false, :1 => true\n      return (await pred.data())[0] ? [undefined, data.clone()] :\n                                      [data.clone(), undefined];\n    }\n    case 'Merge':\n      const inputName = node.inputNames.find(\n          name => getTensor(name, tensorMap, context) !== undefined);\n      return inputName ? [getTensor(inputName, tensorMap, context).clone()] :\n                         undefined;\n\n    case 'Enter':\n      const frameId =\n          getParamValue('frameName', node, tensorMap, context) as string;\n      const data =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.enterFrame(frameId);\n      return [data.clone()];\n\n    case 'Exit':\n      const tensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.exitFrame();\n      return [tensor.clone()];\n\n    case 'NextIteration':\n      const input =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.nextIteration();\n      return [input.clone()];\n\n    case 'TensorArrayV3':\n      const size = getParamValue('size', node, tensorMap, context) as number;\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const dynamicSize =\n          getParamValue('dynamicSize', node, tensorMap, context) as boolean;\n      const clearAfterRead =\n          getParamValue('clearAfterRead', node, tensorMap, context) as boolean;\n      const identicalElementShapes =\n          getParamValue('identicalElementShapes', node, tensorMap, context) as\n          boolean;\n      const name = getParamValue('name', node, tensorMap, context) as string;\n      const tensorArray = new TensorArray(\n          name, dtype, size, elementShape, identicalElementShapes, dynamicSize,\n          clearAfterRead);\n      context.addTensorArray(tensorArray);\n      return [scalar(tensorArray.id), scalar(1.0)];\n\n    case 'TensorArrayWriteV3':\n      const id =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const writeTensorArray = context.getTensorArray(id);\n      writeTensorArray.write(index, writeTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArrayReadV3':\n      const readId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const readTensorArray = context.getTensorArray(readId);\n      return [readTensorArray.read(readIndex)];\n\n    case 'TensorArrayGatherV3':\n      const gatherId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const gatherDtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const gatherTensorArray = context.getTensorArray(gatherId);\n      return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n\n    case 'TensorArrayScatterV3':\n      const scatterId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const scatterTensorArray = context.getTensorArray(scatterId);\n      scatterTensorArray.scatter(scatterIndices, scatterTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArrayConcatV3':\n      const concatId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const concatTensorArray = context.getTensorArray(concatId);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      return [concatTensorArray.concat(concatDtype)];\n\n    case 'TensorArraySplitV3':\n      const splitId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n      const splitTensorArray = context.getTensorArray(splitId);\n      splitTensorArray.split(lengths, splitTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArraySizeV3':\n      const sizeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const sizeTensorArray = context.getTensorArray(sizeId);\n      return [scalar(sizeTensorArray.size(), 'int32')];\n\n    case 'TensorArrayCloseV3':\n      const closeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const closeTensorArray = context.getTensorArray(closeId);\n      closeTensorArray.clearAndClose();\n      return [];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n}\n\nexport const CATEGORY = 'control';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Conv1D': {\n      const stride =\n          getParamValue('stride', node, tensorMap, context) as number;\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n      const dilation =\n          getParamValue('dilation', node, tensorMap, context) as number;\n      return [tfc.conv1d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D,\n          getParamValue('filter', node, tensorMap, context) as tfc.Tensor3D,\n          stride, pad as 'valid' | 'same', dataFormat as 'NWC' | 'NCW',\n          dilation)];\n    }\n    case 'Conv2D': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n      const dilations =\n          getParamValue('dilations', node, tensorMap, context) as number[];\n      return [tfc.conv2d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n          [stride[1], stride[2]], pad as 'valid' | 'same',\n          dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n    }\n    case '_FusedConv2D': {\n      const [extraOp, activationFunc] =\n          (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n      const isBiasAdd = extraOp === 'biasadd';\n      const isPrelu = activationFunc === 'prelu';\n      const isBatchNorm = extraOp === 'fusedbatchnorm';\n\n      const numArgs =\n          (getParamValue('numArgs', node, tensorMap, context) as number);\n      if (isBiasAdd) {\n        if (isPrelu && numArgs !== 2) {\n          throw new Error(\n              'Fused Conv2d with BiasAdd and Prelu must have two ' +\n              'extra arguments: bias and alpha.');\n        }\n        if (!isPrelu && numArgs !== 1) {\n          throw new Error(\n              'Fused Conv2d with BiasAdd must have one extra argument: bias.');\n        }\n      }\n      if (isBatchNorm) {\n        throw new Error('Fused Conv2d with FusedBatchNorm is not supported.');\n      }\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n      const dilations =\n          getParamValue('dilations', node, tensorMap, context) as number[];\n      const [biasArg, preluArg] =\n          getParamValue('args', node, tensorMap, context) as tfc.Tensor[];\n      return [tfc.fused.conv2d({\n        x: getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n            tfc.Tensor4D,\n        filter: getParamValue('filter', node, tensorMap, context) as\n            tfc.Tensor4D,\n        strides: [stride[1], stride[2]],\n        pad: pad as 'valid' | 'same',\n        dataFormat: dataFormat as 'NHWC' | 'NCHW',\n        dilations: [dilations[1], dilations[2]],\n        bias: biasArg,\n        activation: activationFunc as tfc.fused.Activation,\n        preluActivationWeights: preluArg\n      })];\n    }\n    case 'Conv2DBackpropInput':\n    case 'Conv2dTranspose': {\n      const shape = getParamValue(\n                        'outputShape', node, tensorMap,\n                        context) as [number, number, number] |\n          [number, number, number, number];\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      return [tfc.conv2dTranspose(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n          shape, [stride[1], stride[2]], pad as 'valid' | 'same')];\n    }\n    case 'DepthwiseConv2dNative':\n    case 'DepthwiseConv2d': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dilations =\n          getParamValue('dilations', node, tensorMap, context) as number[];\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n\n      return [tfc.depthwiseConv2d(\n          getParamValue('input', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n          [stride[1], stride[2]], pad as 'valid' | 'same',\n          dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n    }\n    case 'Conv3D': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n      const dilations =\n          getParamValue('dilations', node, tensorMap, context) as number[];\n      return [tfc.conv3d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor4D |\n              tfc.Tensor<tfc.Rank.R5>,\n          getParamValue('filter', node, tensorMap, context) as\n              tfc.Tensor<tfc.Rank.R5>,\n          [stride[1], stride[2], stride[3]], pad as 'valid' | 'same',\n          dataFormat as 'NDHWC' | 'NCDHW',\n          [dilations[1], dilations[2], dilations[3]])];\n    }\n\n    case 'AvgPool': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const kernelSize =\n          getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n      return [tfc.avgPool(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n          pad as 'valid' | 'same')];\n    }\n\n    case 'MaxPool': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const kernelSize =\n          getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n      return [tfc.maxPool(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n          pad as 'valid' | 'same')];\n    }\n\n    case 'AvgPool3D': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const kernelSize =\n          getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n      return [tfc.avgPool3d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor5D,\n          [kernelSize[1], kernelSize[2], kernelSize[3]],\n          [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n    }\n\n    case 'MaxPool3D': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const kernelSize =\n          getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n      return [tfc.maxPool3d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor5D,\n          [kernelSize[1], kernelSize[2], kernelSize[3]],\n          [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n    }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'convolution';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Fill': {\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const value = getParamValue('value', node, tensorMap, context) as number;\n      return [tfc.fill(shape, value, dtype)];\n    }\n    case 'LinSpace': {\n      const start = getParamValue('start', node, tensorMap, context) as number;\n      const stop = getParamValue('stop', node, tensorMap, context) as number;\n      const num = getParamValue('num', node, tensorMap, context) as number;\n      return [tfc.linspace(start, stop, num)];\n    }\n    case 'Multinomial': {\n      const logits =\n          getParamValue('logits', node, tensorMap, context) as tfc.Tensor1D;\n      const numSamples =\n          getParamValue('numSamples', node, tensorMap, context) as number;\n      const seed = getParamValue('seed', node, tensorMap, context) as number;\n      return [tfc.multinomial(logits, numSamples, seed)];\n    }\n    case 'OneHot': {\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor1D;\n      const depth = getParamValue('depth', node, tensorMap, context) as number;\n      const onValue =\n          getParamValue('onValue', node, tensorMap, context) as number;\n      const offValue =\n          getParamValue('offValue', node, tensorMap, context) as number;\n      return [tfc.oneHot(indices, depth, onValue, offValue)];\n    }\n    case 'Ones': {\n      return [tfc.ones(\n          getParamValue('shape', node, tensorMap, context) as number[],\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'OnesLike': {\n      return [tfc.onesLike(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'RandomUniform': {\n      return [tfc.randomUniform(\n          // tslint:disable-next-line:no-any\n          getParamValue('shape', node, tensorMap, context) as any,\n          getParamValue('minval', node, tensorMap, context) as number,\n          getParamValue('maxval', node, tensorMap, context) as number,\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'Range': {\n      const start = getParamValue('start', node, tensorMap, context) as number;\n      const stop = getParamValue('stop', node, tensorMap, context) as number;\n      const step = getParamValue('step', node, tensorMap, context) as number;\n      return [tfc.range(\n          start, stop, step,\n          getParamValue('dtype', node, tensorMap, context) as 'float32' |\n              'int32')];\n    }\n    case 'TruncatedNormal': {\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      const mean = getParamValue('mean', node, tensorMap, context) as number;\n      const stdDev =\n          getParamValue('stdDev', node, tensorMap, context) as number;\n      const seed = getParamValue('seed', node, tensorMap, context) as number;\n      return [tfc.truncatedNormal(\n          shape, mean, stdDev,\n          getParamValue('dtype', node, tensorMap, context) as 'float32' |\n              'int32',\n          seed)];\n    }\n    case 'Zeros': {\n      return [tfc.zeros(\n          getParamValue('shape', node, tensorMap, context) as number[],\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'ZerosLike': {\n      return [tfc.zerosLike(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'creation';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\nimport {getParamValue} from './utils';\n\nexport async function executeOp(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<tfc.Tensor[]> {\n  switch (node.op) {\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2': {\n      const boxes =\n          getParamValue('boxes', node, tensorMap, context) as tfc.Tensor;\n      const scores =\n          getParamValue('scores', node, tensorMap, context) as tfc.Tensor;\n      const maxOutputSize =\n          getParamValue('maxOutputSize', node, tensorMap, context) as number;\n      const iouThreshold =\n          getParamValue('iouThreshold', node, tensorMap, context) as number;\n      const scoreThreshold =\n          getParamValue('scoreThreshold', node, tensorMap, context) as number;\n      return [await tfc.image.nonMaxSuppressionAsync(\n          boxes as tfc.Tensor2D, scores as tfc.Tensor1D, maxOutputSize,\n          iouThreshold, scoreThreshold)];\n    }\n    case 'Where': {\n      return [await tfc.whereAsync(\n          getParamValue('condition', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'ListDiff': {\n      return tfc.setdiff1dAsync(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('y', node, tensorMap, context) as tfc.Tensor);\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n}\n\nexport const CATEGORY = 'dynamic';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport let executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'TopKV2': {\n          const x = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n          const k = getParamValue('k', node, tensorMap, context) as number;\n          const sorted =\n              getParamValue('sorted', node, tensorMap, context) as boolean;\n          const result = tfc.topk(x, k, sorted);\n          return [result.values, result.indices];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'evaluation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Const': {\n      return tensorMap[node.name];\n    }\n    case 'PlaceholderWithDefault':\n      const def =\n          getParamValue('default', node, tensorMap, context) as tfc.Tensor;\n      return [getTensor(node.name, tensorMap, context) || def];\n    case 'Placeholder':\n      return [getTensor(node.name, tensorMap, context)];\n    case 'Identity':\n    case 'StopGradient':\n    case 'FakeQuantWithMinMaxVars':  // This op is currently ignored.\n      return [\n        (getParamValue('x', node, tensorMap, context) as tfc.Tensor).clone()\n      ];\n    case 'IdentityN':\n      return (getParamValue('x', node, tensorMap, context) as tfc.Tensor[])\n          .map((t: tfc.Tensor) => t.clone());\n    case 'Snapshot':\n      const snapshot =\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor);\n      return [snapshot.clone()];\n    case 'Shape':\n      return [tfc.tensor1d(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).shape,\n          'int32')];\n    case 'ShapeN':\n      return (getParamValue('x', node, tensorMap, context) as tfc.Tensor[])\n          .map((t: tfc.Tensor) => tfc.tensor1d(t.shape));\n    case 'Size':\n      return [tfc.scalar(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).size,\n          'int32')];\n    case 'Rank':\n      return [tfc.scalar(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).rank,\n          'int32')];\n    case 'NoOp':\n      return [];\n    case 'Print':\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const data =\n          getParamValue('data', node, tensorMap, context) as tfc.Tensor[];\n      const message =\n          getParamValue('message', node, tensorMap, context) as string;\n      const summarize =\n          getParamValue('summarize', node, tensorMap, context) as number;\n      console.warn(\n          'The graph has a tf.print() operation,' +\n          'usually used for debugging, which slows down performance.');\n      console.log(message);\n      for (let i = 0; i < data.length; i++) {\n        console.log(\n            Array.prototype.slice.call(data[i].dataSync()).slice(0, summarize));\n      }\n      return [input];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'graph';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'ResizeBilinear': {\n      const images =\n          getParamValue('images', node, tensorMap, context) as tfc.Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number[];\n      const alignCorners =\n          getParamValue('alignCorners', node, tensorMap, context) as boolean;\n      return [tfc.image.resizeBilinear(\n          images as tfc.Tensor3D | tfc.Tensor4D, [size[0], size[1]],\n          alignCorners)];\n    }\n    case 'ResizeNearestNeighbor': {\n      const images =\n          getParamValue('images', node, tensorMap, context) as tfc.Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number[];\n      const alignCorners =\n          getParamValue('alignCorners', node, tensorMap, context) as boolean;\n      return [tfc.image.resizeNearestNeighbor(\n          images as tfc.Tensor3D | tfc.Tensor4D, [size[0], size[1]],\n          alignCorners)];\n    }\n    case 'CropAndResize': {\n      const image =\n          getParamValue('image', node, tensorMap, context) as tfc.Tensor;\n      const boxes =\n          getParamValue('boxes', node, tensorMap, context) as tfc.Tensor;\n      const boxInd =\n          getParamValue('boxInd', node, tensorMap, context) as tfc.Tensor;\n      const cropSize =\n          getParamValue('cropSize', node, tensorMap, context) as number[];\n      const method =\n          getParamValue('method', node, tensorMap, context) as string;\n      const extrapolationValue =\n          getParamValue('extrapolationValue', node, tensorMap, context) as\n          number;\n      return [tfc.image.cropAndResize(\n          image as tfc.Tensor4D, boxes as tfc.Tensor2D, boxInd as tfc.Tensor1D,\n          cropSize as [number, number], method as 'bilinear' | 'nearest',\n          extrapolationValue)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'image';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Equal': {\n      return [tfc.equal(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'NotEqual': {\n      return [tfc.notEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Greater': {\n      return [tfc.greater(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'GreaterEqual': {\n      return [tfc.greaterEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Less': {\n      return [tfc.less(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LessEqual': {\n      return [tfc.lessEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalAnd': {\n      return [tfc.logicalAnd(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalNot': {\n      return [tfc.logicalNot(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalOr': {\n      return [tfc.logicalOr(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Select': {\n      return [tfc.where(\n          getParamValue('condition', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'logical';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'BatchMatMul':\n    case 'BatchMatMulV2':\n    case 'MatMul':\n      return [tfc.matMul(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor2D,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor2D,\n          getParamValue('transposeA', node, tensorMap, context) as boolean,\n          getParamValue('transposeB', node, tensorMap, context) as boolean)];\n    case 'Transpose':\n      return [tfc.transpose(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('perm', node, tensorMap, context) as number[])];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'matrices';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'FusedBatchNorm':\n    case 'FusedBatchNormV2': {\n      return [tfc.batchNorm(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('mean', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('variance', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('offset', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('scale', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('epsilon', node, tensorMap, context) as number)];\n    }\n    case 'FusedBatchNormV3': {\n      return [tfc.batchNorm(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('mean', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('variance', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('offset', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('scale', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('epsilon', node, tensorMap, context) as number)];\n    }\n    case 'LRN': {\n      return [tfc.localResponseNormalization(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('radius', node, tensorMap, context) as number,\n          getParamValue('bias', node, tensorMap, context) as number,\n          getParamValue('alpha', node, tensorMap, context) as number,\n          getParamValue('beta', node, tensorMap, context) as number)];\n    }\n    case 'Softmax': {\n      return [tfc.softmax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogSoftmax': {\n      return [tfc.logSoftmax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'SparseToDense': {\n      return [tfc.sparseToDense(\n          getParamValue('sparseIndices', node, tensorMap, context) as\n              tfc.Tensor,\n          getParamValue('outputShape', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('sparseValues', node, tensorMap, context) as number[],\n          getParamValue('defaultValue', node, tensorMap, context) as\n              tfc.Scalar)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'normalization';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Max': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.max(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Mean': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.mean(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Min': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.min(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Sum': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.sum(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'All': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.all(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Any': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.any(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'ArgMax': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.argMax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'ArgMin': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.argMin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'Prod': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.prod(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'reduction';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'ConcatV2':\n    case 'Concat': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const inputs =\n          getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[];\n      return [tfc.concat(inputs, axis)];\n    }\n    case 'GatherV2':\n    case 'Gather': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor1D;\n      return [tfc.gather(input, indices.asType('int32'), axis)];\n    }\n    case 'ReverseV2':\n    case 'Reverse': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      return [tfc.reverse(input, axis)];\n    }\n    case 'Slice': {\n      // tslint:disable-next-line:no-any\n      const begin = getParamValue('begin', node, tensorMap, context) as any;\n      // tslint:disable-next-line:no-any\n      const size = getParamValue('size', node, tensorMap, context) as any;\n      return [tfc.slice(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, begin,\n          size)];\n    }\n    case 'StridedSlice': {\n      const begin =\n          getParamValue('begin', node, tensorMap, context) as number[];\n      const end = getParamValue('end', node, tensorMap, context) as number[];\n      const strides =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const beginMask =\n          getParamValue('beginMask', node, tensorMap, context) as number;\n      const endMask =\n          getParamValue('endMask', node, tensorMap, context) as number;\n      const ellipsisMask =\n          getParamValue('ellipsisMask', node, tensorMap, context) as number;\n      const newAxisMask =\n          getParamValue('newAxisMask', node, tensorMap, context) as number;\n      const shrinkAxisMask =\n          getParamValue('shrinkAxisMask', node, tensorMap, context) as number;\n      const tensor = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      if (begin.length === 1 && tensor.shape.length > 1) {\n        for (let i = 1; i < tensor.shape.length; i++) {\n          begin.push(0);\n          end.push(tensor.shape[i]);\n          strides.push(strides[0]);\n        }\n      }\n      return [tfc.stridedSlice(\n          tensor, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask)];\n    }\n    case 'Pack': {\n      return tfc.tidy(() => {\n        const axis = getParamValue('axis', node, tensorMap, context) as number;\n        const tensors =\n            getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[];\n        // Reshape the tensors to the first tensor's shape if they don't match.\n        const shape = tensors[0].shape;\n        const squeezedShape = tensors[0].squeeze().shape;\n        const mapped = tensors.map(tensor => {\n          const sameShape = tfc.util.arraysEqual(tensor.shape, shape);\n          if (!sameShape &&\n              !tfc.util.arraysEqual(tensor.squeeze().shape, squeezedShape)) {\n            throw new Error('the input tensors shape does not match');\n          }\n          return sameShape ? tensor : tensor.reshape(shape);\n        });\n        return [tfc.stack(mapped, axis)];\n      });\n    }\n    case 'Unpack': {\n      return tfc.tidy(() => {\n        const axis = getParamValue('axis', node, tensorMap, context) as number;\n        const tensor =\n            getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n        return tfc.unstack(tensor, axis);\n      });\n    }\n    case 'Tile': {\n      const reps = getParamValue('reps', node, tensorMap, context) as number[];\n      return [tfc.tile(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, reps)];\n    }\n    case 'Split':\n    case 'SplitV': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const numOrSizeSplits =\n          getParamValue('numOrSizeSplits', node, tensorMap, context) as number |\n          number[];\n      return tfc.split(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          numOrSizeSplits, axis);\n    }\n    case 'ScatterNd': {\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor;\n      const values =\n          getParamValue('values', node, tensorMap, context) as tfc.Tensor;\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      return [tfc.scatterND(indices, values, shape)];\n    }\n    case 'GatherNd': {\n      const x = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor;\n      return [tfc.gatherND(x, indices)];\n    }\n    case 'SparseToDense': {\n      const indices =\n          getParamValue('sparseIndices', node, tensorMap, context) as\n          tfc.Tensor;\n      const shape =\n          getParamValue('outputShape', node, tensorMap, context) as number[];\n      const sparseValues =\n          getParamValue('sparseValues', node, tensorMap, context) as tfc.Tensor;\n      const defaultValue =\n          getParamValue('defaultValue', node, tensorMap, context) as tfc.Scalar;\n      return [tfc.sparseToDense(\n          indices, sparseValues, shape,\n          sparseValues.dtype === defaultValue.dtype ?\n              defaultValue :\n              defaultValue.asType(sparseValues.dtype))];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'slice_join';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport let executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'FFT': {\n          return [tfc.fft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'IFFT': {\n          return [tfc.ifft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'RFFT': {\n          return [tfc.rfft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'IRFFT': {\n          return [tfc.irfft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'spectral';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, split} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Cast': {\n      return [tfc.cast(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('dtype', node, tensorMap, context) as 'int32' |\n              'float32' | 'bool')];\n    }\n    case 'ExpandDims': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.expandDims(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'Squeeze': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      return [tfc.squeeze(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n\n    case 'Reshape': {\n      return [tfc.reshape(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('shape', node, tensorMap, context) as number[])];\n    }\n    case 'PadV2':\n    case 'Pad': {\n      return [tfc.pad(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          split(\n              getParamValue('padding', node, tensorMap, context) as number[],\n              2) as Array<[number, number]>,\n          getParamValue('constantValue', node, tensorMap, context) as number)];\n    }\n    case 'SpaceToBatchND': {\n      const blockShape =\n          getParamValue('blockShape', node, tensorMap, context) as number[];\n      const paddings = split(\n          getParamValue('paddings', node, tensorMap, context) as number[], 2);\n      return [tfc.spaceToBatchND(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          blockShape, paddings)];\n    }\n    case 'BatchToSpaceND': {\n      const blockShape =\n          getParamValue('blockShape', node, tensorMap, context) as number[];\n      const crops = split(\n          getParamValue('crops', node, tensorMap, context) as number[], 2);\n      return [tfc.batchToSpaceND(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          blockShape, crops)];\n    }\n    case 'DepthToSpace': {\n      const blockSize =\n          getParamValue('blockSize', node, tensorMap, context) as number;\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as\n           string).toUpperCase() as 'NHWC' |\n          'NCHW';\n      return [tfc.depthToSpace(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor4D,\n          blockSize, dataFormat)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'transformation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {ExecutionContext} from '../executor/execution_context';\n\nimport {NodeValueImpl} from './custom_op/node_value_impl';\nimport {getRegisteredOp} from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as transformation from './executors/transformation_executor';\nimport {Node} from './types';\n\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n */\nexport function executeOp(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor[]|Promise<tfc.Tensor[]> {\n  const value =\n      ((node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) => {\n        switch (node.category) {\n          case 'arithmetic':\n            return arithmetic.executeOp(node, tensorMap, context);\n          case 'basic_math':\n            return basicMath.executeOp(node, tensorMap, context);\n          case 'control':\n            return control.executeOp(node, tensorMap, context);\n          case 'convolution':\n            return convolution.executeOp(node, tensorMap, context);\n          case 'creation':\n            return creation.executeOp(node, tensorMap, context);\n          case 'dynamic':\n            return dynamic.executeOp(node, tensorMap, context);\n          case 'evaluation':\n            return evaluation.executeOp(node, tensorMap, context);\n          case 'image':\n            return image.executeOp(node, tensorMap, context);\n          case 'graph':\n            return graph.executeOp(node, tensorMap, context);\n          case 'logical':\n            return logical.executeOp(node, tensorMap, context);\n          case 'matrices':\n            return matrices.executeOp(node, tensorMap, context);\n          case 'normalization':\n            return normalization.executeOp(node, tensorMap, context);\n          case 'reduction':\n            return reduction.executeOp(node, tensorMap, context);\n          case 'slice_join':\n            return sliceJoin.executeOp(node, tensorMap, context);\n          case 'spectral':\n            return spectral.executeOp(node, tensorMap, context);\n          case 'transformation':\n            return transformation.executeOp(node, tensorMap, context);\n          case 'custom':\n            const opMapper = getRegisteredOp(node.op);\n            if (opMapper && opMapper.customExecutor) {\n              return opMapper.customExecutor(\n                  new NodeValueImpl(node, tensorMap, context));\n            } else {\n              throw TypeError(`Custom op ${node.op} is not registered.`);\n            }\n          default:\n            throw TypeError(\n                `Unknown op '${node.op}'. File an issue at ` +\n                `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                `, or register a custom execution with tf.registerOp()`);\n        }\n      })(node, tensorMap, context);\n  if (value instanceof Promise) {\n    return value.then((data) => [].concat(data));\n  }\n  return [].concat(value);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap, TensorArrayMap} from '../data/types';\n\nimport {TensorArray} from './tensor_array';\n\nexport interface ExecutionContextInfo {\n  id: number;           // the unique id of the context info\n  frameName: string;    // The frame name of the loop, this comes from\n                        // the TensorFlow NodeDef.\n  iterationId: number;  // The iteration id of the loop\n}\n\n/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport class ExecutionContext {\n  private rootContext = {id: 0, frameName: '', iterationId: 0};\n  private contexts: ExecutionContextInfo[] = [this.rootContext];\n  private lastId = 0;\n  private _currentContextIds: string[];\n\n  constructor(\n      public readonly weightMap: NamedTensorsMap,\n      public readonly tensorArrayMap: TensorArrayMap) {\n    this.generateCurrentContextIds();\n  }\n\n  private newFrame(id: number, frameName: string) {\n    return {id, frameName, iterationId: 0};\n  }\n\n  /**\n   * Set the current context\n   * @param contexts: ExecutionContextInfo[] the current path of execution\n   * frames\n   */\n  set currentContext(contexts: ExecutionContextInfo[]) {\n    if (this.contexts !== contexts) {\n      this.contexts = contexts;\n      this.generateCurrentContextIds();\n    }\n  }\n\n  get currentContext(): ExecutionContextInfo[] {\n    return this.contexts;\n  }\n\n  /**\n   * Returns the current context in string format.\n   */\n  get currentContextId(): string {\n    return this._currentContextIds[0];\n  }\n\n  /**\n   * Returns the current context and all parent contexts in string format.\n   * This allow access to the nodes in the current and parent frames.\n   */\n  get currentContextIds(): string[] {\n    return this._currentContextIds;\n  }\n\n  private generateCurrentContextIds() {\n    const names = [];\n    for (let i = 0; i < this.contexts.length - 1; i++) {\n      const contexts = this.contexts.slice(0, this.contexts.length - i);\n      names.push(this.contextIdforContexts(contexts));\n    }\n    names.push('');\n    this._currentContextIds = names;\n  }\n\n  private contextIdforContexts(contexts: ExecutionContextInfo[]) {\n    return contexts ?\n        contexts\n            .map(\n                context => (context.id === 0 && context.iterationId === 0) ?\n                    '' :\n                    `${context.frameName}-${context.iterationId}`)\n            .join('/') :\n        '';\n  }\n\n  /**\n   * Enter a new frame, a new context is pushed on the current context list.\n   * @param frameId new frame id\n   */\n  enterFrame(frameId: string) {\n    if (this.contexts) {\n      this.lastId++;\n      this.contexts = this.contexts.slice();\n      this.contexts.push(this.newFrame(this.lastId, frameId));\n      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n    }\n  }\n\n  /**\n   * Exit the current frame, the last context is removed from the current\n   * context list.\n   */\n  exitFrame() {\n    if (this.contexts && this.contexts.length > 1) {\n      this.contexts = this.contexts.slice();\n      this.contexts.splice(-1);\n      this.currentContextIds.shift();\n    } else {\n      throw new Error('Cannot exit frame, the context is empty');\n    }\n  }\n\n  /**\n   * Enter the next iteration of a loop, the iteration id of last context is\n   * increased.\n   */\n  nextIteration() {\n    if (this.contexts && this.contexts.length > 0) {\n      this.contexts = this.contexts.slice();\n      this.lastId++;\n      const context =\n          Object.assign({}, this.contexts[this.contexts.length - 1]);\n      context.iterationId += 1;\n      context.id = this.lastId;\n      this.contexts.splice(-1, 1, context);\n      this._currentContextIds.splice(\n          0, 1, this.contextIdforContexts(this.contexts));\n    } else {\n      throw new Error('Cannot increase frame iteration, the context is empty');\n    }\n  }\n\n  getWeight(name: string): Tensor[] {\n    return this.weightMap[name];\n  }\n\n  addTensorArray(tensorArray: TensorArray) {\n    this.tensorArrayMap[tensorArray.id] = tensorArray;\n  }\n\n  getTensorArray(id: number): TensorArray {\n    return this.tensorArrayMap[id];\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NamedTensorMap} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {Graph, Node} from '../operations/types';\n\nexport interface ExecutionInfo {\n  inputs: NamedTensorMap;\n  outputs: Node[];\n  usedNodes: Set<string>;\n  missingInputs: string[];\n  dynamicNode: Node;\n  syncInputs: string[];\n}\n\n/**\n * Given graph inputs and desired outputs, find the minimal set of nodes\n * to execute in order to compute the outputs. In addition return other useful\n * info such:\n * - Missing inputs needed to compute the output.\n * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).\n * - Alternative inputs in order to avoid async (dynamic op) execution.\n */\nexport function getExecutionSubgraph(\n    inputs: NamedTensorMap, outputs: Node[],\n    weightMap: NamedTensorsMap): ExecutionInfo {\n  const usedNodes = new Set<string>();\n  const missingInputs: string[] = [];\n  let dynamicNode: Node = null;\n  let syncInputs: string[] = null;\n\n  // Start with the outputs, going backwards and find all the nodes that are\n  // needed to compute those outputs.\n  const seen = new Set<string>();\n  const frontier = [...outputs];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    if (isControlFlow(node) || isDynamicShape(node)) {\n      if (dynamicNode == null) {\n        dynamicNode = node;\n        syncInputs = dynamicNode.children.map(child => child.name)\n                         .filter(name => usedNodes.has(name));\n      }\n    }\n    usedNodes.add(node.name);\n\n    // Weights are dead end since we already have their values.\n    if (weightMap[node.name] != null) {\n      continue;\n    }\n    // This node is a dead end since it's one of the user-provided inputs.\n    if (inputs[node.name] != null) {\n      continue;\n    }\n    if (node.inputs.length === 0) {\n      missingInputs.push(node.name);\n      continue;\n    }\n    node.inputs.forEach(input => {\n      // Don't add to the frontier if it is already there.\n      if (seen.has(input.name)) {\n        return;\n      }\n      seen.add(input.name);\n      frontier.push(input);\n    });\n  }\n  return {inputs, outputs, usedNodes, missingInputs, dynamicNode, syncInputs};\n}\n\n/**\n * Given the execution info, return a list of nodes in topological order that\n * need to be executed to compute the output.\n */\nexport function getNodesInTopologicalOrder(\n    graph: Graph, weightMap: NamedTensorsMap,\n    executionInfo: ExecutionInfo): Node[] {\n  const {usedNodes, inputs} = executionInfo;\n  const frontier: Node[] = [];\n  const inputNodes = Object.keys(inputs).map(name => graph.nodes[name]);\n  inputNodes.forEach(input => {\n    if (usedNodes.has(input.name)) {\n      frontier.push(input);\n    }\n  });\n  graph.weights.forEach(weight => {\n    if (usedNodes.has(weight.name)) {\n      frontier.push(weight);\n    }\n  });\n  const seen = new Set<string>();\n  const orderedNodes: Node[] = [];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    seen.add(node.name);\n    if (!weightMap[node.name]) {\n      orderedNodes.push(node);\n    }\n    node.children.forEach(child => {\n      if (!seen.has(child.name) && usedNodes.has(child.name) &&\n          child.inputs.every(input => seen.has(input.name))) {\n        frontier.push(child);\n      }\n    });\n  }\n  return orderedNodes;\n}\n\nconst CONTROL_FLOW_OPS = ['Switch', 'Merge', 'Enter', 'Exit', 'NextIteration'];\nconst DYNAMIC_SHAPE_OPS =\n    ['NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'Where'];\n\nexport function isControlFlow(node: Node) {\n  return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;\n}\n\nexport function isDynamicShape(node: Node) {\n  return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NamedTensorMap, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap, TensorArrayMap, TensorInfo} from '../data/types';\nimport {getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName} from '../operations/executors/utils';\nimport {executeOp} from '../operations/operation_executor';\nimport {Graph, Node} from '../operations/types';\n\nimport {ExecutionContext, ExecutionContextInfo} from './execution_context';\nimport {getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow} from './model_analysis';\n\ninterface NodeWithContexts {\n  contexts: ExecutionContextInfo[];\n  node: Node;\n}\n\nexport class GraphExecutor {\n  private compiledMap: Map<string, Node[]> = new Map();\n  private _weightMap: NamedTensorsMap = {};\n  private weightIds: number[];\n  private placeholders: Node[];\n  private _outputs: Node[];\n  private SEPERATOR = ',';\n  get weightMap(): NamedTensorsMap {\n    return this._weightMap;\n  }\n  set weightMap(weightMap: NamedTensorsMap) {\n    const weightIds = Object.keys(weightMap).map(\n        key => weightMap[key].map(tensor => tensor.id));\n    this.weightIds = [].concat.apply([], weightIds);\n    this._weightMap = weightMap;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.placeholders.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get outputs(): TensorInfo[] {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get inputNodes(): string[] {\n    return this.placeholders.map(node => node.name);\n  }\n\n  get outputNodes(): string[] {\n    return this.outputs.map(node => node.name);\n  }\n\n  constructor(private graph: Graph) {\n    this.placeholders = graph.placeholders;\n    this._outputs = graph.outputs;\n  }\n\n  private getCompilationKey(inputs: Node[], outputs: Node[]): string {\n    const sortedInputs = inputs.map(node => node.name).sort();\n    const sortedOutputs = outputs.map(node => node.name).sort();\n    return sortedInputs.join(this.SEPERATOR) + '--' +\n        sortedOutputs.join(this.SEPERATOR);\n  }\n\n  /**\n   * Compiles the inference graph and returns the minimal set of nodes that are\n   * required for execution, in the correct execution order.\n   */\n  private compile(inputs: NamedTensorMap, outputs: Node[]): Node[] {\n    const executionInfo = getExecutionSubgraph(inputs, outputs, this.weightMap);\n    const {missingInputs, dynamicNode, syncInputs} = executionInfo;\n    if (dynamicNode != null) {\n      throw new Error(\n          `This execution contains the node '${dynamicNode.name}', which has ` +\n          `the dynamic op '${dynamicNode.op}'. Please use ` +\n          `model.executeAsync() instead. Alternatively, to avoid the ` +\n          `dynamic ops, specify the inputs [${syncInputs}]`);\n    }\n\n    if (missingInputs.length > 0) {\n      const outNames = outputs.map(n => n.name);\n      const inNames = Object.keys(inputs);\n      throw new Error(\n          `Cannot compute the outputs [${outNames}] from the provided inputs ` +\n          `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n    }\n\n    return getNodesInTopologicalOrder(\n        this.graph, this.weightMap, executionInfo);\n  }\n\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  execute(inputs: NamedTensorMap, outputs: string[]): Tensor[] {\n    const names = Object.keys(inputs).sort();\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    this.checkOutputs(outputs);\n    const inputNodes = names.map(name => this.graph.nodes[name]);\n    const outputNodes =\n        outputs.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n    // Do nothing if the compiled graph cache contains the input.\n    let orderedNodes = this.compiledMap.get(compilationKey);\n    if (orderedNodes == null) {\n      orderedNodes = this.compile(inputs, outputNodes);\n      this.compiledMap.set(compilationKey, orderedNodes);\n    }\n    const tensorArrayMap: TensorArrayMap = {};\n    return tidy(() => {\n      const context = new ExecutionContext(this._weightMap, tensorArrayMap);\n      const tensorsMap: NamedTensorsMap = {...this.weightMap};\n      Object.keys(inputs).forEach(name => {\n        tensorsMap[name] = [inputs[name]];\n      });\n      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n      const intermediateTensorConsumerCount: {[key: number]: number} = {};\n      for (let i = 0; i < orderedNodes.length; i++) {\n        const node = orderedNodes[i];\n        if (!tensorsMap[node.name]) {\n          const tensors = executeOp(node, tensorsMap, context) as Tensor[];\n          if (tensors instanceof Promise) {\n            throw new Error(\n                `The execution of the op '${node.op}' returned a promise. ` +\n                `Please use model.executeAsync() instead.`);\n          }\n          tensorsMap[node.name] = tensors;\n          this.checkTensorForDisposal(\n              node.name, node, tensorsMap, context, tensorsToKeep, outputs,\n              intermediateTensorConsumerCount);\n        }\n      }\n      return outputs.map(name => getTensor(name, tensorsMap, context));\n    });\n  }\n\n  private getFrozenTensorIds(tensorMap: NamedTensorsMap): Set<number> {\n    const ids = [].concat.apply(\n        [],\n        Object.keys(tensorMap)\n            .map(key => tensorMap[key])\n            .map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n  private checkTensorForDisposal(\n      nodeName: string, node: Node, tensorMap: NamedTensorsMap,\n      context: ExecutionContext, tensorsToKeep: Set<number>,\n      outputNames: string[],\n      intermediateTensorConsumerCount: {[key: string]: number}) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n\n    tensorMap[nodeName].forEach(tensor => {\n      if (tensor != null) {\n        intermediateTensorConsumerCount[tensor.id] =\n            (intermediateTensorConsumerCount[tensor.id] || 0) +\n            node.children.length;\n      }\n    });\n    node.inputs.forEach(input => {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (input.category !== 'control') {\n        const tensors =\n            getTensorsForCurrentContenxt(input.name, tensorMap, context);\n        if (tensors != null) {\n          tensors.forEach(tensor => {\n            if (tensor && !tensorsToKeep.has(tensor.id)) {\n              const count = intermediateTensorConsumerCount[tensor.id];\n              if (count === 1) {\n                tensor.dispose();\n                delete intermediateTensorConsumerCount[tensor.id];\n              } else if (count != null) {\n                // only intermediate nodes has count set, inputs and weights are\n                // not.\n                intermediateTensorConsumerCount[tensor.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  async executeAsync(inputs: NamedTensorMap, outputs: string[]):\n      Promise<Tensor[]> {\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    this.checkOutputs(outputs);\n    const tensorArrayMap: TensorArrayMap = {};\n    const context = new ExecutionContext(this._weightMap, tensorArrayMap);\n    // Graph with control flow op requires runtime evaluation of the execution\n    // order, while without control flow the execution order is pre-determined\n    // in the compile method.\n    const tensorMap =\n        await this.executeWithControlFlow(inputs, context, outputs);\n    const results = outputs.map(name => getTensor(name, tensorMap, context));\n\n    // dispose all the intermediate tensors\n    const outputIds = new Set<number>(results.map(t => t.id));\n    const inputIds =\n        new Set<number>(Object.keys(inputs).map(name => inputs[name].id));\n    Object.keys(tensorMap).forEach(key => {\n      const tensorArray = tensorMap[key];\n      tensorArray.forEach(tensor => {\n        if (tensor && !tensor.isDisposed && !outputIds.has(tensor.id) &&\n            !inputIds.has(tensor.id) &&\n            this.weightIds.indexOf(tensor.id) === -1) {\n          tensor.dispose();\n        }\n      });\n    });\n    return results;\n  }\n\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   */\n  private async executeWithControlFlow(\n      inputs: NamedTensorMap, context: ExecutionContext,\n      outputNames: string[]): Promise<NamedTensorsMap> {\n    const names = Object.keys(inputs);\n    const inputNodes = names.map(name => this.graph.nodes[name]);\n    const outputNodes =\n        outputNames.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const {usedNodes, missingInputs, dynamicNode, syncInputs} =\n        getExecutionSubgraph(inputs, outputNodes, this.weightMap);\n\n    const stack: NodeWithContexts[] =\n        [...inputNodes, ...this.graph.weights].map(node => {\n          return {node, contexts: context.currentContext};\n        });\n    const tensorsMap: NamedTensorsMap = {...this.weightMap};\n    Object.keys(inputs).forEach(name => {\n      tensorsMap[name] = [inputs[name]];\n    });\n    const intermediateTensorConsumerCount: {[key: number]: number} = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n    const added: {[key: string]: boolean} = {};\n    while (stack.length > 0) {\n      const promises = this.processStack(\n          inputNodes, stack, context, tensorsMap, added, tensorsToKeep,\n          outputNames, intermediateTensorConsumerCount, usedNodes);\n      await Promise.all(promises);\n    }\n    if (dynamicNode == null) {\n      console.warn(\n          `This model execution did not contain any nodes with control flow ` +\n          `or dynamic output shapes. You can use model.execute() instead.`);\n    }\n    const missingOutputs =\n        outputNodes\n            .filter(\n                node => !isControlFlow(node) &&\n                    !getTensor(node.name, tensorsMap, context))\n            .map(node => node.name);\n    if (missingOutputs.length > 0) {\n      let alternativeMsg = '';\n      if (dynamicNode != null) {\n        alternativeMsg =\n            `Alternatively, to avoid the dynamic ops, use model.execute() ` +\n            `and specify the inputs [${syncInputs}]`;\n      }\n      throw new Error(\n          `Cannot compute the outputs [${missingOutputs}] from the provided ` +\n          `inputs [${names}]. Consider providing the following inputs: ` +\n          `[${missingInputs}]. ${alternativeMsg}`);\n    }\n    return tensorsMap;\n  }\n\n  private processStack(\n      inputNodes: Node[], stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      tensorsToKeep: Set<number>, outputNames: string[],\n      intermediateTensorConsumerCount: {[key: number]: number},\n      usedNodes: Set<string>) {\n    const promises: Array<Promise<Tensor[]>> = [];\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = '';\n      // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n      if (item.node.op === 'Enter' &&\n          getParamValue('isConstant', item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      }\n\n      // only process nodes that are not provided as input nodes.\n      if (inputNodes.indexOf(item.node) === -1) {\n        const tensors = executeOp(item.node, tensorMap, context);\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n        const currentContext = context.currentContext;\n        if (tensors instanceof Promise) {\n          promises.push(tensors.then(t => {\n            tensorMap[nodeName] = t;\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(\n                nodeName, item.node, tensorMap, context, tensorsToKeep,\n                outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(\n                item.node, stack, context, tensorMap, added, usedNodes);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors;\n          this.checkTensorForDisposal(\n              nodeName, item.node, tensorMap, context, tensorsToKeep,\n              outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(\n              item.node, stack, context, tensorMap, added, usedNodes);\n        }\n      } else {\n        this.processChildNodes(\n            item.node, stack, context, tensorMap, added, usedNodes);\n      }\n    }\n    return promises;\n  }\n\n  private processChildNodes(\n      node: Node, stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      usedNodes: Set<string>) {\n    node.children.forEach((childNode) => {\n      const [nodeName, ] = getNodeNameAndIndex(childNode.name, context);\n      if (added[nodeName] || !usedNodes.has(childNode.name)) {\n        return;\n      }\n      // Merge op can be pushed if any of its inputs has value.\n      if (childNode.op === 'Merge') {\n        if (childNode.inputNames.some(name => {\n              return !!getTensor(name, tensorMap, context);\n            })) {\n          added[nodeName] = true;\n          stack.push({contexts: context.currentContext, node: childNode});\n        }\n      } else  // Otherwise all inputs must to have value.\n          if (childNode.inputNames.every(name => {\n                return !!getTensor(name, tensorMap, context);\n              })) {\n        added[nodeName] = true;\n        stack.push({contexts: context.currentContext, node: childNode});\n      }\n    });\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    Object.keys(this.weightMap)\n        .forEach(\n            key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n\n  private checkInputShapeAndType(inputs: NamedTensorMap) {\n    Object.keys(inputs).forEach(name => {\n      const input = inputs[name];\n      const node = this.graph.nodes[name];\n      if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n        const shape = node.attrParams['shape'].value as number[];\n        const match = shape.length === input.shape.length &&\n            input.shape.every(\n                (dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(\n            match,\n            () => `The shape of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be [${shape}], but was ` +\n                `[${input.shape}]`);\n      }\n      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n        util.assert(\n            input.dtype === node.attrParams['dtype'].value as string,\n            () => `The dtype of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be ` +\n                `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n      }\n    });\n  }\n\n  private checkInputs(inputs: NamedTensorMap) {\n    const notInGraph =\n        Object.keys(inputs).filter(name => !this.graph.nodes[name]);\n    if (notInGraph.length > 0) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has ` +\n          `keys: [${notInGraph}] that are not part of graph`);\n    }\n  }\n\n  private checkOutputs(outputs: string[]): void {\n    outputs.forEach(name => {\n      const [normalizedName] = parseNodeName(name);\n      if (!this.graph.nodes[normalizedName]) {\n        throw new Error(`The output '${name}' is not found in the graph`);\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {InferenceModel, io, ModelPredictConfig, NamedTensorMap, Tensor} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {NamedTensorsMap, TensorInfo} from '../data/types';\nimport {OperationMapper} from '../operations/operation_mapper';\n\nimport {GraphExecutor} from './graph_executor';\n\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\n * A `tf.GraphModel` is a directed, acyclic graph of built from\n * SavedModel GraphDef and allows inference exeuction.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n */\n/** @doc {heading: 'Models', subheading: 'Classes'} */\nexport class GraphModel implements InferenceModel {\n  private executor: GraphExecutor;\n  private version = 'n/a';\n  private handler: io.IOHandler;\n  // Returns the version information for the tensorflow model GraphDef.\n  get modelVersion(): string {\n    return this.version;\n  }\n\n  get inputNodes(): string[] {\n    return this.executor.inputNodes;\n  }\n\n  get outputNodes(): string[] {\n    return this.executor.outputNodes;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.executor.inputs;\n  }\n\n  get outputs(): TensorInfo[] {\n    return this.executor.outputs;\n  }\n\n  get weights(): NamedTensorsMap {\n    return this.executor.weightMap;\n  }\n\n  /**\n   * @param modelUrl url for the model, or an `io.IOHandler`.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(\n      private modelUrl: string|io.IOHandler,\n      private loadOptions: io.LoadOptions = {}) {\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n  }\n\n  private findIOHandler() {\n    const path = this.modelUrl;\n    if ((path as io.IOHandler).load != null) {\n      // Path is an IO Handler.\n      this.handler = path as io.IOHandler;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = io.browserHTTPRequest(path as string, this.loadOptions);\n    } else {\n      const handlers =\n          io.getLoadHandlers(path as string, this.loadOptions.onProgress);\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(io.browserHTTPRequest(path as string, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) load handlers for ` +\n            `URL '${[path]}'`);\n      }\n      this.handler = handlers[0];\n    }\n  }\n\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n  async load(): Promise<boolean> {\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error(\n          'Cannot proceed with model loading because the IOHandler provided ' +\n          'does not have the `load` method implemented.');\n    }\n    const artifacts = await this.handler.load();\n    const graph = artifacts.modelTopology as tensorflow.IGraphDef;\n\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap =\n        io.decodeWeights(artifacts.weightData, artifacts.weightSpecs);\n    this.executor =\n        new GraphExecutor(OperationMapper.Instance.transformGraph(graph));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n    return true;\n  }\n\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size and\n   * output node names. Currently the batch size option is ignored for graph\n   * model.\n   *\n   * @returns Inference result tensors. The output would be single `tf.Tensor`\n   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\n   * will be returned for model with multiple outputs.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  predict(inputs: Tensor|Tensor[]|NamedTensorMap, config?: ModelPredictConfig):\n      Tensor|Tensor[]|NamedTensorMap {\n    return this.execute(inputs, this.outputNodes);\n  }\n\n  private normalizeInputs(inputs: Tensor|Tensor[]|\n                          NamedTensorMap): NamedTensorMap {\n    if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n      // The input is already a NamedTensorMap.\n      return inputs;\n    }\n    inputs = Array.isArray(inputs) ? inputs : [inputs];\n    if (inputs.length !== this.inputNodes.length) {\n      throw new Error(\n          'Input tensor count mismatch,' +\n          `the graph model has ${this.inputNodes.length} placeholders, ` +\n          `while there are ${inputs.length} input tensors.`);\n    }\n    return this.inputNodes.reduce((map, inputName, i) => {\n      map[inputName] = (inputs as Tensor[])[i];\n      return map;\n    }, {} as NamedTensorMap);\n  }\n\n  private normalizeOutputs(outputs: string|string[]): string[] {\n    outputs = outputs || this.outputNodes;\n    return !Array.isArray(outputs) ? [outputs] : outputs;\n  }\n\n  /**\n   * Executes inference for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs?: string|string[]):\n      Tensor|Tensor[] {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = this.executor.execute(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  async executeAsync(\n      inputs: Tensor|Tensor[]|NamedTensorMap,\n      outputs?: string|string[]): Promise<Tensor|Tensor[]> {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = await this.executor.executeAsync(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n\n  private convertTensorMapToTensorsMap(map: NamedTensorMap): NamedTensorsMap {\n    return Object.keys(map).reduce((newMap: NamedTensorsMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  dispose() {\n    this.executor.dispose();\n  }\n}\n\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\n * a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send credentials\n *    and custom headers.\n */\n/** @doc {heading: 'Models', subheading: 'Loading'} */\nexport async function loadGraphModel(\n    modelUrl: string|io.IOHandler,\n    options: io.LoadOptions = {}): Promise<GraphModel> {\n  if (modelUrl == null) {\n    throw new Error(\n        'modelUrl in loadGraphModel() cannot be null. Please provide a url ' +\n        'or an IOHandler that loads the model');\n  }\n  if (options == null) {\n    options = {};\n  }\n\n  if (options.fromTFHub) {\n    if ((modelUrl as io.IOHandler).load == null) {\n      if (!(modelUrl as string).endsWith('/')) {\n        modelUrl = (modelUrl as string) + '/';\n      }\n      modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n    }\n  }\n  const model = new GraphModel(modelUrl, options);\n  await model.load();\n  return model;\n}\n","/**\n    * @license\n    * Copyright 2019 Google LLC. All Rights Reserved.\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    * http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    * =============================================================================\n    */\nimport*as tf from\"@tensorflow/tfjs-core\";import{util,tidy,div,sub,buffer,Tensor,browser,pad3d,scalar,concat,tensor2d,tensor}from\"@tensorflow/tfjs-core\";import{loadGraphModel}from\"@tensorflow/tfjs-converter\";var VALID_OUTPUT_STRIDES=[8,16,32];function assertValidOutputStride(e){util.assert(\"number\"==typeof e,function(){return\"outputStride is not a number\"}),util.assert(VALID_OUTPUT_STRIDES.indexOf(e)>=0,function(){return\"outputStride of \"+e+\" is invalid. It must be either 8, 16, or 32\"})}function assertValidResolution(e,t){util.assert(\"number\"==typeof e,function(){return\"resolution is not a number\"}),util.assert((e-1)%t==0,function(){return\"resolution of \"+e+\" is invalid for output stride \"+t+\".\"})}function toFloatIfInt(e){return tidy(function(){return\"int32\"===e.dtype&&(e=e.toFloat()),e=div(e,127.5),sub(e,1)})}var MobileNet=function(){function e(e,t){this.model=e;var r=this.model.inputs[0].shape;util.assert(-1===r[1]&&-1===r[2],function(){return\"Input shape [\"+r[1]+\", \"+r[2]+\"] must both be -1\"}),this.outputStride=t}return e.prototype.predict=function(e){var t=this;return tidy(function(){var r=toFloatIfInt(e).expandDims(0),n=t.model.predict(r),o=n[0],i=n[1],s=n[2],a=n[3];return{heatmapScores:i.squeeze().sigmoid(),offsets:o.squeeze(),displacementFwd:s.squeeze(),displacementBwd:a.squeeze()}})},e.prototype.dispose=function(){this.model.dispose()},e}();function half(e){return Math.floor(e/2)}var MaxHeap=function(){function e(e,t){this.priorityQueue=new Array(e),this.numberOfElements=-1,this.getElementValue=t}return e.prototype.enqueue=function(e){this.priorityQueue[++this.numberOfElements]=e,this.swim(this.numberOfElements)},e.prototype.dequeue=function(){var e=this.priorityQueue[0];return this.exchange(0,this.numberOfElements--),this.sink(0),this.priorityQueue[this.numberOfElements+1]=null,e},e.prototype.empty=function(){return-1===this.numberOfElements},e.prototype.size=function(){return this.numberOfElements+1},e.prototype.all=function(){return this.priorityQueue.slice(0,this.numberOfElements+1)},e.prototype.max=function(){return this.priorityQueue[0]},e.prototype.swim=function(e){for(;e>0&&this.less(half(e),e);)this.exchange(e,half(e)),e=half(e)},e.prototype.sink=function(e){for(;2*e<=this.numberOfElements;){var t=2*e;if(t<this.numberOfElements&&this.less(t,t+1)&&t++,!this.less(e,t))break;this.exchange(e,t),e=t}},e.prototype.getValueAt=function(e){return this.getElementValue(this.priorityQueue[e])},e.prototype.less=function(e,t){return this.getValueAt(e)<this.getValueAt(t)},e.prototype.exchange=function(e,t){var r=this.priorityQueue[e];this.priorityQueue[e]=this.priorityQueue[t],this.priorityQueue[t]=r},e}();function scoreIsMaximumInLocalWindow(e,t,r,n,o,i){for(var s=i.shape,a=s[0],u=s[1],l=!0,f=Math.max(r-o,0),c=Math.min(r+o+1,a),d=f;d<c;++d){for(var p=Math.max(n-o,0),h=Math.min(n+o+1,u),m=p;m<h;++m)if(i.get(d,m,e)>t){l=!1;break}if(!l)break}return l}function buildPartWithScoreQueue(e,t,r){for(var n=r.shape,o=n[0],i=n[1],s=n[2],a=new MaxHeap(o*i*s,function(e){return e.score}),u=0;u<o;++u)for(var l=0;l<i;++l)for(var f=0;f<s;++f){var c=r.get(u,l,f);c<e||scoreIsMaximumInLocalWindow(f,c,u,l,t,r)&&a.enqueue({score:c,part:{heatmapY:u,heatmapX:l,id:f}})}return a}var partNames=[\"nose\",\"leftEye\",\"rightEye\",\"leftEar\",\"rightEar\",\"leftShoulder\",\"rightShoulder\",\"leftElbow\",\"rightElbow\",\"leftWrist\",\"rightWrist\",\"leftHip\",\"rightHip\",\"leftKnee\",\"rightKnee\",\"leftAnkle\",\"rightAnkle\"],NUM_KEYPOINTS=partNames.length,partIds=partNames.reduce(function(e,t,r){return e[t]=r,e},{}),connectedPartNames=[[\"leftHip\",\"leftShoulder\"],[\"leftElbow\",\"leftShoulder\"],[\"leftElbow\",\"leftWrist\"],[\"leftHip\",\"leftKnee\"],[\"leftKnee\",\"leftAnkle\"],[\"rightHip\",\"rightShoulder\"],[\"rightElbow\",\"rightShoulder\"],[\"rightElbow\",\"rightWrist\"],[\"rightHip\",\"rightKnee\"],[\"rightKnee\",\"rightAnkle\"],[\"leftShoulder\",\"rightShoulder\"],[\"leftHip\",\"rightHip\"]],poseChain=[[\"nose\",\"leftEye\"],[\"leftEye\",\"leftEar\"],[\"nose\",\"rightEye\"],[\"rightEye\",\"rightEar\"],[\"nose\",\"leftShoulder\"],[\"leftShoulder\",\"leftElbow\"],[\"leftElbow\",\"leftWrist\"],[\"leftShoulder\",\"leftHip\"],[\"leftHip\",\"leftKnee\"],[\"leftKnee\",\"leftAnkle\"],[\"nose\",\"rightShoulder\"],[\"rightShoulder\",\"rightElbow\"],[\"rightElbow\",\"rightWrist\"],[\"rightShoulder\",\"rightHip\"],[\"rightHip\",\"rightKnee\"],[\"rightKnee\",\"rightAnkle\"]],connectedPartIndices=connectedPartNames.map(function(e){var t=e[0],r=e[1];return[partIds[t],partIds[r]]}),partChannels=[\"left_face\",\"right_face\",\"right_upper_leg_front\",\"right_lower_leg_back\",\"right_upper_leg_back\",\"left_lower_leg_front\",\"left_upper_leg_front\",\"left_upper_leg_back\",\"left_lower_leg_back\",\"right_feet\",\"right_lower_leg_front\",\"left_feet\",\"torso_front\",\"torso_back\",\"right_upper_arm_front\",\"right_upper_arm_back\",\"right_lower_arm_back\",\"left_lower_arm_front\",\"left_upper_arm_front\",\"left_upper_arm_back\",\"left_lower_arm_back\",\"right_hand\",\"right_lower_arm_front\",\"left_hand\"];function getOffsetPoint(e,t,r,n){return{y:n.get(e,t,r),x:n.get(e,t,r+NUM_KEYPOINTS)}}function getImageCoords(e,t,r){var n=getOffsetPoint(e.heatmapY,e.heatmapX,e.id,r),o=n.y,i=n.x;return{x:e.heatmapX*t+i,y:e.heatmapY*t+o}}function clamp(e,t,r){return e<t?t:e>r?r:e}function squaredDistance(e,t,r,n){var o=r-e,i=n-t;return o*o+i*i}function addVectors(e,t){return{x:e.x+t.x,y:e.y+t.y}}var parentChildrenTuples=poseChain.map(function(e){var t=e[0],r=e[1];return[partIds[t],partIds[r]]}),parentToChildEdges=parentChildrenTuples.map(function(e){return e[1]}),childToParentEdges=parentChildrenTuples.map(function(e){return e[0]});function getDisplacement(e,t,r){var n=r.shape[2]/2;return{y:r.get(t.y,t.x,e),x:r.get(t.y,t.x,n+e)}}function getStridedIndexNearPoint(e,t,r,n){return{y:clamp(Math.round(e.y/t),0,r-1),x:clamp(Math.round(e.x/t),0,n-1)}}function traverseToTargetKeypoint(e,t,r,n,o,i,s,a){void 0===a&&(a=2);for(var u=n.shape,l=u[0],f=u[1],c=getDisplacement(e,getStridedIndexNearPoint(t.position,i,l,f),s),d=addVectors(t.position,c),p=0;p<a;p++){var h=getStridedIndexNearPoint(d,i,l,f),m=getOffsetPoint(h.y,h.x,r,o);d=addVectors({x:h.x*i,y:h.y*i},{x:m.x,y:m.y})}var g=getStridedIndexNearPoint(d,i,l,f),_=n.get(g.y,g.x,r);return{position:d,part:partNames[r],score:_}}function decodePose(e,t,r,n,o,i){var s=t.shape[2],a=parentToChildEdges.length,u=new Array(s),l=e.part,f=e.score,c=getImageCoords(l,n,r);u[l.id]={score:f,part:partNames[l.id],position:c};for(var d=a-1;d>=0;--d){var p=parentToChildEdges[d],h=childToParentEdges[d];u[p]&&!u[h]&&(u[h]=traverseToTargetKeypoint(d,u[p],h,t,r,n,i))}for(d=0;d<a;++d){p=childToParentEdges[d],h=parentToChildEdges[d];u[p]&&!u[h]&&(u[h]=traverseToTargetKeypoint(d,u[p],h,t,r,n,o))}return u}function withinNmsRadiusOfCorrespondingPoint(e,t,r,n){var o=r.x,i=r.y;return e.some(function(e){var r=e.keypoints[n].position;return squaredDistance(i,o,r.y,r.x)<=t})}function getInstanceScore(e,t,r){return r.reduce(function(r,n,o){var i=n.position,s=n.score;return withinNmsRadiusOfCorrespondingPoint(e,t,i,o)||(r+=s),r},0)/r.length}var kLocalMaximumRadius=1;function decodeMultiplePoses(e,t,r,n,o,i,s,a){void 0===s&&(s=.5),void 0===a&&(a=20);for(var u=[],l=buildPartWithScoreQueue(s,kLocalMaximumRadius,e),f=a*a;u.length<i&&!l.empty();){var c=l.dequeue();if(!withinNmsRadiusOfCorrespondingPoint(u,f,getImageCoords(c.part,o,t),c.part.id)){var d=decodePose(c,e,t,o,r,n),p=getInstanceScore(u,f,d);u.push({keypoints:d,score:p})}}return u}var __assign=function(){return(__assign=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function __awaiter(e,t,r,n){return new(r||(r=Promise))(function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){e.done?o(e.value):new r(function(t){t(e.value)}).then(s,a)}u((n=n.apply(e,t||[])).next())})}function __generator(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},\"function\"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError(\"Generator is already executing.\");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}function eitherPointDoesntMeetConfidence(e,t,r){return e<r||t<r}function getAdjacentKeyPoints(e,t){return connectedPartIndices.reduce(function(r,n){var o=n[0],i=n[1];return eitherPointDoesntMeetConfidence(e[o].score,e[i].score,t)?r:(r.push([e[o],e[i]]),r)},[])}var NEGATIVE_INFINITY=Number.NEGATIVE_INFINITY,POSITIVE_INFINITY=Number.POSITIVE_INFINITY;function getBoundingBox(e){return e.reduce(function(e,t){var r=e.maxX,n=e.maxY,o=e.minX,i=e.minY,s=t.position,a=s.x,u=s.y;return{maxX:Math.max(r,a),maxY:Math.max(n,u),minX:Math.min(o,a),minY:Math.min(i,u)}},{maxX:NEGATIVE_INFINITY,maxY:NEGATIVE_INFINITY,minX:POSITIVE_INFINITY,minY:POSITIVE_INFINITY})}function getBoundingBoxPoints(e){var t=getBoundingBox(e),r=t.minX,n=t.minY,o=t.maxX,i=t.maxY;return[{x:r,y:n},{x:o,y:n},{x:o,y:i},{x:r,y:i}]}function toTensorBuffer(e,t){return void 0===t&&(t=\"float32\"),__awaiter(this,void 0,void 0,function(){var r;return __generator(this,function(n){switch(n.label){case 0:return[4,e.data()];case 1:return r=n.sent(),[2,buffer(e.shape,t,r)]}})})}function toTensorBuffers3D(e){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(t){return[2,Promise.all(e.map(function(e){return toTensorBuffer(e,\"float32\")}))]})})}function scalePose(e,t,r,n,o){return void 0===n&&(n=0),void 0===o&&(o=0),{score:e.score,keypoints:e.keypoints.map(function(e){var i=e.score,s=e.part,a=e.position;return{score:i,part:s,position:{x:a.x*r+o,y:a.y*t+n}}})}}function scalePoses(e,t,r,n,o){return void 0===n&&(n=0),void 0===o&&(o=0),1===r&&1===t&&0===n&&0===o?e:e.map(function(e){return scalePose(e,t,r,n,o)})}function flipPoseHorizontal(e,t){return{score:e.score,keypoints:e.keypoints.map(function(e){var r=e.score,n=e.part,o=e.position;return{score:r,part:n,position:{x:t-1-o.x,y:o.y}}})}}function flipPosesHorizontal(e,t){return t<=0?e:e.map(function(e){return flipPoseHorizontal(e,t)})}function getInputTensorDimensions(e){return e instanceof Tensor?[e.shape[0],e.shape[1]]:[e.height,e.width]}function toInputTensor(e){return e instanceof Tensor?e:browser.fromPixels(e)}function padAndResizeTo(e,t){var r=t[0],n=t[1],o=getInputTensorDimensions(e),i=o[0],s=o[1],a=n/r,u=[0,0,0,0],l=u[0],f=u[1],c=u[2],d=u[3];return s/i<a?(l=0,f=0,c=Math.round(.5*(a*i-s)),d=Math.round(.5*(a*i-s))):(l=Math.round(.5*(1/a*s-i)),f=Math.round(.5*(1/a*s-i)),c=0,d=0),{resized:tidy(function(){var t=toInputTensor(e);return(t=pad3d(t,[[l,f],[c,d],[0,0]])).resizeBilinear([r,n])}),padding:{top:l,left:c,right:d,bottom:f}}}function scaleAndFlipPoses(e,t,r,n,o){var i=t[0],s=t[1],a=r[0],u=r[1],l=scalePoses(e,(i+n.top+n.bottom)/a,(s+n.left+n.right)/u,-n.top,-n.left);return o?flipPosesHorizontal(l,s):l}function mod(e,t){return tidy(function(){var r=e.div(scalar(t,\"int32\"));return e.sub(r.mul(scalar(t,\"int32\")))})}function argmax2d(e){var t=e.shape,r=t[0],n=t[1],o=t[2];return tidy(function(){var t=e.reshape([r*n,o]).argMax(0),i=t.div(scalar(n,\"int32\")).expandDims(1),s=mod(t,n).expandDims(1);return concat([i,s],1)})}function getPointsConfidence(e,t){for(var r=t.shape[0],n=new Float32Array(r),o=0;o<r;o++){var i=t.get(o,0),s=t.get(o,1);n[o]=e.get(i,s,o)}return n}function getOffsetPoint$1(e,t,r,n){return{y:n.get(e,t,r),x:n.get(e,t,r+NUM_KEYPOINTS)}}function getOffsetVectors(e,t){for(var r=[],n=0;n<NUM_KEYPOINTS;n++){var o=getOffsetPoint$1(e.get(n,0).valueOf(),e.get(n,1).valueOf(),n,t),i=o.x,s=o.y;r.push(s),r.push(i)}return tensor2d(r,[NUM_KEYPOINTS,2])}function getOffsetPoints(e,t,r){return tidy(function(){var n=getOffsetVectors(e,r);return e.toTensor().mul(scalar(t,\"int32\")).toFloat().add(n)})}function decodeSinglePose(e,t,r){return __awaiter(this,void 0,void 0,function(){var n,o,i,s,a,u,l,f,c,d;return __generator(this,function(p){switch(p.label){case 0:return n=0,o=argmax2d(e),[4,Promise.all([toTensorBuffer(e),toTensorBuffer(t),toTensorBuffer(o,\"int32\")])];case 1:return i=p.sent(),s=i[0],a=i[1],u=i[2],[4,toTensorBuffer(l=getOffsetPoints(u,r,a))];case 2:return f=p.sent(),c=Array.from(getPointsConfidence(s,u)),d=c.map(function(e,t){return n+=e,{position:{y:f.get(t,0),x:f.get(t,1)},part:partNames[t],score:e}}),o.dispose(),l.dispose(),[2,{keypoints:d,score:n/d.length}]}})})}var MOBILENET_BASE_URL=\"https://storage.googleapis.com/tfjs-models/savedmodel/posenet/mobilenet/\",RESNET50_BASE_URL=\"https://storage.googleapis.com/tfjs-models/savedmodel/posenet/resnet50/\";function resNet50Checkpoint(e,t){var r=\"model-stride\"+e+\".json\";return 4==t?RESNET50_BASE_URL+\"float/\"+r:RESNET50_BASE_URL+\"quant\"+t+\"/\"+r}function mobileNetCheckpoint(e,t,r){var n={1:\"100\",.75:\"075\",.5:\"050\"},o=\"model-stride\"+e+\".json\";return 4==r?MOBILENET_BASE_URL+\"float/\"+n[t]+\"/\"+o:MOBILENET_BASE_URL+\"quant\"+r+\"/\"+n[t]+\"/\"+o}function toFloatIfInt$1(e){return tidy(function(){\"int32\"===e.dtype&&(e=e.toFloat());var t=tensor([-123.15,-115.9,-103.06]);return e.add(t)})}var ResNet=function(){function e(e,t){this.model=e;var r=this.model.inputs[0].shape;util.assert(-1===r[1]&&-1===r[2],function(){return\"Input shape [\"+r[1]+\", \"+r[2]+\"] must both be equal to or -1\"}),this.outputStride=t}return e.prototype.predict=function(e){var t=this;return tidy(function(){var r=toFloatIfInt$1(e).expandDims(0),n=t.model.predict(r),o=n[0],i=n[1],s=n[2];return{heatmapScores:n[3].squeeze().sigmoid(),offsets:s.squeeze(),displacementFwd:o.squeeze(),displacementBwd:i.squeeze()}})},e.prototype.dispose=function(){this.model.dispose()},e}(),MOBILENET_V1_CONFIG={architecture:\"MobileNetV1\",outputStride:16,multiplier:.75,inputResolution:257},VALID_ARCHITECTURE=[\"MobileNetV1\",\"ResNet50\"],VALID_STRIDE={MobileNetV1:[8,16,32],ResNet50:[32,16]},VALID_INPUT_RESOLUTION=[161,193,257,289,321,353,385,417,449,481,513,801],VALID_MULTIPLIER={MobileNetV1:[.5,.75,1],ResNet50:[1]},VALID_QUANT_BYTES=[1,2,4];function validateModelConfig(e){if(null==(e=e||MOBILENET_V1_CONFIG).architecture&&(e.architecture=\"MobileNetV1\"),VALID_ARCHITECTURE.indexOf(e.architecture)<0)throw new Error(\"Invalid architecture \"+e.architecture+\". Should be one of \"+VALID_ARCHITECTURE);if(null==e.inputResolution&&(e.inputResolution=257),VALID_INPUT_RESOLUTION.indexOf(e.inputResolution)<0)throw new Error(\"Invalid inputResolution \"+e.inputResolution+\". Should be one of \"+VALID_INPUT_RESOLUTION);if(null==e.outputStride&&(e.outputStride=16),VALID_STRIDE[e.architecture].indexOf(e.outputStride)<0)throw new Error(\"Invalid outputStride \"+e.outputStride+\". Should be one of \"+VALID_STRIDE[e.architecture]+\" for architecutre \"+e.architecture+\".\");if(null==e.multiplier&&(e.multiplier=1),VALID_MULTIPLIER[e.architecture].indexOf(e.multiplier)<0)throw new Error(\"Invalid multiplier \"+e.multiplier+\". Should be one of \"+VALID_MULTIPLIER[e.architecture]+\" for architecutre \"+e.architecture+\".\");if(null==e.quantBytes&&(e.quantBytes=4),VALID_QUANT_BYTES.indexOf(e.quantBytes)<0)throw new Error(\"Invalid quantBytes \"+e.quantBytes+\". Should be one of \"+VALID_QUANT_BYTES+\" for architecutre \"+e.architecture+\".\");return e}var SINGLE_PERSON_INFERENCE_CONFIG={flipHorizontal:!1},MULTI_PERSON_INFERENCE_CONFIG={flipHorizontal:!1,maxDetections:5,scoreThreshold:.5,nmsRadius:20};function validateMultiPersonInputConfig(e){var t=e.maxDetections,r=e.scoreThreshold,n=e.nmsRadius;if(t<=0)throw new Error(\"Invalid maxDetections \"+t+\". Should be > 0\");if(r<0||r>1)throw new Error(\"Invalid scoreThreshold \"+r+\". Should be in range [0.0, 1.0]\");if(n<=0)throw new Error(\"Invalid nmsRadius \"+n+\".\")}var PoseNet=function(){function e(e,t){this.baseModel=e,this.inputResolution=t}return e.prototype.estimateMultiplePoses=function(e,t){return void 0===t&&(t=MULTI_PERSON_INFERENCE_CONFIG),__awaiter(this,void 0,void 0,function(){var r,n,o,i,s,a,u,l,f,c,d,p,h,m,g,_,I,E,v,N,y;return __generator(this,function(T){switch(T.label){case 0:return r=__assign({},MULTI_PERSON_INFERENCE_CONFIG,t),validateMultiPersonInputConfig(t),n=this.baseModel.outputStride,o=this.inputResolution,assertValidOutputStride(n),assertValidResolution(this.inputResolution,n),i=getInputTensorDimensions(e),s=i[0],a=i[1],u=padAndResizeTo(e,[o,o]),l=u.resized,f=u.padding,c=this.baseModel.predict(l),d=c.heatmapScores,p=c.offsets,h=c.displacementFwd,m=c.displacementBwd,[4,toTensorBuffers3D([d,p,h,m])];case 1:return g=T.sent(),_=g[0],I=g[1],E=g[2],v=g[3],[4,decodeMultiplePoses(_,I,E,v,n,r.maxDetections,r.scoreThreshold,r.nmsRadius)];case 2:return N=T.sent(),y=scaleAndFlipPoses(N,[s,a],[o,o],f,r.flipHorizontal),d.dispose(),p.dispose(),h.dispose(),m.dispose(),l.dispose(),[2,y]}})})},e.prototype.estimateSinglePose=function(e,t){return void 0===t&&(t=SINGLE_PERSON_INFERENCE_CONFIG),__awaiter(this,void 0,void 0,function(){var r,n,o,i,s,a,u,l,f,c,d,p,h,m,g,_;return __generator(this,function(I){switch(I.label){case 0:return r=__assign({},SINGLE_PERSON_INFERENCE_CONFIG,t),n=this.baseModel.outputStride,o=this.inputResolution,assertValidOutputStride(n),assertValidResolution(o,n),i=getInputTensorDimensions(e),s=i[0],a=i[1],u=padAndResizeTo(e,[o,o]),l=u.resized,f=u.padding,c=this.baseModel.predict(l),d=c.heatmapScores,p=c.offsets,h=c.displacementFwd,m=c.displacementBwd,[4,decodeSinglePose(d,p,n)];case 1:return g=I.sent(),_=scaleAndFlipPoses([g],[s,a],[o,o],f,r.flipHorizontal),d.dispose(),p.dispose(),h.dispose(),m.dispose(),l.dispose(),[2,_[0]]}})})},e.prototype.estimatePoses=function(e,t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(r){switch(r.label){case 0:return\"single-person\"!=t.decodingMethod?[3,2]:[4,this.estimateSinglePose(e,t)];case 1:return[2,[r.sent()]];case 2:return[2,this.estimateMultiplePoses(e,t)]}})})},e.prototype.dispose=function(){this.baseModel.dispose()},e}();function loadMobileNet(e){return __awaiter(this,void 0,void 0,function(){var t,r,n,o,i,s;return __generator(this,function(a){switch(a.label){case 0:if(t=e.outputStride,r=e.quantBytes,n=e.multiplier,null==tf)throw new Error(\"Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this\\n        model.\");return o=mobileNetCheckpoint(t,n,r),[4,loadGraphModel(e.modelUrl||o)];case 1:return i=a.sent(),s=new MobileNet(i,t),[2,new PoseNet(s,e.inputResolution)]}})})}function loadResNet(e){return __awaiter(this,void 0,void 0,function(){var t,r,n,o,i;return __generator(this,function(s){switch(s.label){case 0:if(t=e.outputStride,r=e.quantBytes,null==tf)throw new Error(\"Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this\\n        model.\");return n=resNet50Checkpoint(t,r),[4,loadGraphModel(e.modelUrl||n)];case 1:return o=s.sent(),i=new ResNet(o,t),[2,new PoseNet(i,e.inputResolution)]}})})}function load(e){return void 0===e&&(e=MOBILENET_V1_CONFIG),__awaiter(this,void 0,void 0,function(){return __generator(this,function(t){return\"ResNet50\"===(e=validateModelConfig(e)).architecture?[2,loadResNet(e)]:\"MobileNetV1\"===e.architecture?[2,loadMobileNet(e)]:[2,null]})})}export{decodeMultiplePoses,decodeSinglePose,MobileNet,partChannels,partIds,partNames,poseChain,load,PoseNet,VALID_INPUT_RESOLUTION,getAdjacentKeyPoints,getBoundingBox,getBoundingBoxPoints,scalePose};\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.chromotome = {})));\n}(this, (function (exports) { 'use strict';\n\n  var misc = [\n    {\n      name: 'frozen-rose',\n      colors: ['#29368f', '#e9697b', '#1b164d', '#f7d996'],\n      background: '#f2e8e4'\n    },\n    {\n      name: 'winter-night',\n      colors: ['#122438', '#dd672e', '#87c7ca', '#ebebeb'],\n      background: '#ebebeb'\n    },\n    {\n      name: 'saami',\n      colors: ['#eab700', '#e64818', '#2c6393', '#eecfca'],\n      background: '#e7e6e4'\n    },\n    {\n      name: 'knotberry1',\n      colors: ['#20342a', '#f74713', '#686d2c', '#e9b4a6'],\n      background: '#e5ded8'\n    },\n    {\n      name: 'knotberry2',\n      colors: ['#1d3b1a', '#eb4b11', '#e5bc00', '#f29881'],\n      background: '#eae2d0'\n    },\n    {\n      name: 'tricolor',\n      colors: ['#ec643b', '#56b7ab', '#f8cb57', '#1f1e43'],\n      background: '#f7f2df'\n    },\n    {\n      name: 'foxshelter',\n      colors: ['#ff3931', '#007861', '#311f27', '#bab9a4'],\n      background: '#dddddd'\n    },\n    {\n      name: 'hermes',\n      colors: ['#253852', '#51222f', '#b53435', '#ecbb51'],\n      background: '#eeccc2'\n    },\n    {\n      name: 'olympia',\n      colors: ['#ff3250', '#ffb33a', '#008c36', '#0085c6', '#4c4c4c'],\n      stroke: '#0b0b0b',\n      background: '#faf2e5'\n    },\n    {\n      name: 'byrnes',\n      colors: ['#c54514', '#dca215', '#23507f'],\n      stroke: '#0b0b0b',\n      background: '#e8e7d4'\n    },\n    {\n      name: 'butterfly',\n      colors: ['#f40104', '#f6c0b3', '#99673a', '#f0f1f4'],\n      stroke: '#191e36',\n      background: '#191e36'\n    },\n    {\n      name: 'floratopia',\n      colors: ['#bf4a2b', '#cd902a', '#4e4973', '#f5d4bc'],\n      stroke: '#1e1a43',\n      background: '#1e1a43'\n    },\n    {\n      name: 'verena',\n      colors: ['#f1594a', '#f5b50e', '#14a160', '#2969de', '#885fa4'],\n      stroke: '#1a1a1a',\n      background: '#e2e6e8'\n    },\n    {\n      name: 'empusa',\n      colors: [\n        '#c92a28',\n        '#e69301',\n        '#1f8793',\n        '#13652b',\n        '#e7d8b0',\n        '#48233b',\n        '#e3b3ac'\n      ],\n      stroke: '#1a1a1a',\n      background: '#f0f0f2'\n    },\n    {\n      name: 'florida_citrus',\n      colors: ['#ea7251', '#ebf7f0', '#02aca5'],\n      stroke: '#050100',\n      background: '#9ae2d3'\n    },\n    {\n      name: 'lemon_citrus',\n      colors: ['#e2d574', '#f1f4f7', '#69c5ab'],\n      stroke: '#463231',\n      background: '#f79eac'\n    },\n    {\n      name: 'yuma_punk',\n      colors: ['#f05e3b', '#ebdec4', '#ffdb00'],\n      stroke: '#ebdec4',\n      background: '#161616'\n    },\n    {\n      name: 'moir',\n      colors: ['#a49f4f', '#d4501e', '#f7c558', '#ebbaa6'],\n      stroke: '#161716',\n      background: '#f7f4ef'\n    },\n    {\n      name: 'tokyo',\n      colors: ['#d13821', '#1d295b', '#51587d', '#e7e7e7'],\n      stroke: '#0b0e3e',\n      background: '#c7b09e'\n    },\n    {\n      name: 'bauhaus01',\n      colors: ['#ea542f', '#f19c1b', '#4f8ba9'],\n      stroke: '#221e1f',\n      background: '#e7dbc4'\n    },\n    {\n      name: 'bauhaus02',\n      colors: ['#bb2f2a', '#e9b500', '#0165b7'],\n      stroke: '#000000',\n      background: '#e5d6b8'\n    }\n  ];\n\n  var colourscafe = [\n    {\n      name: 'cc239',\n      colors: ['#e3dd34', '#78496b', '#f0527f', '#a7e0e2'],\n      background: '#e0eff0'\n    },\n    {\n      name: 'cc234',\n      colors: ['#ffce49', '#ede8dc', '#ff5736', '#ff99b4'],\n      background: '#f7f4ed'\n    },\n    {\n      name: 'cc232',\n      colors: ['#5c5f46', '#ff7044', '#ffce39', '#66aeaa'],\n      background: '#e9ecde'\n    },\n    {\n      name: 'cc238',\n      colors: ['#553c60', '#ffb0a0', '#ff6749', '#fbe090'],\n      background: '#f5e9de'\n    },\n    {\n      name: 'cc242',\n      colors: ['#bbd444', '#fcd744', '#fa7b53', '#423c6f'],\n      background: '#faf4e4'\n    },\n    {\n      name: 'cc245',\n      colors: ['#0d4a4e', '#ff947b', '#ead3a2', '#5284ab'],\n      background: '#f6f4ed'\n    },\n    {\n      name: 'cc273',\n      colors: ['#363d4a', '#7b8a56', '#ff9369', '#f4c172'],\n      background: '#f0efe2'\n    }\n  ];\n\n  var ranganath = [\n    {\n      name: 'rag-mysore',\n      colors: ['#ec6c26', '#613a53', '#e8ac52', '#639aa0'],\n      background: '#d5cda1'\n    },\n    {\n      name: 'rag-gol',\n      colors: ['#d3693e', '#803528', '#f1b156', '#90a798'],\n      background: '#f0e0a4'\n    },\n    {\n      name: 'rag-belur',\n      colors: ['#f46e26', '#68485f', '#3d273a', '#535d55'],\n      background: '#dcd4a6'\n    },\n    {\n      name: 'rag-bangalore',\n      colors: ['#ea720e', '#ca5130', '#e9c25a', '#52534f'],\n      background: '#f9ecd3'\n    },\n    {\n      name: 'rag-taj',\n      colors: ['#ce565e', '#8e1752', '#f8a100', '#3ac1a6'],\n      background: '#efdea2'\n    },\n    {\n      name: 'rag-virupaksha',\n      colors: ['#f5736a', '#925951', '#feba4c', '#9d9b9d'],\n      background: '#eedfa2'\n    }\n  ];\n\n  var roygbivs = [\n    {\n      name: 'retro',\n      colors: [\n        '#69766f',\n        '#9ed6cb',\n        '#f7e5cc',\n        '#9d8f7f',\n        '#936454',\n        '#bf5c32',\n        '#efad57'\n      ]\n    },\n    {\n      name: 'retro-washedout',\n      colors: [\n        '#878a87',\n        '#cbdbc8',\n        '#e8e0d4',\n        '#b29e91',\n        '#9f736c',\n        '#b76254',\n        '#dfa372'\n      ]\n    },\n    {\n      name: 'roygbiv-warm',\n      colors: [\n        '#705f84',\n        '#687d99',\n        '#6c843e',\n        '#fc9a1a',\n        '#dc383a',\n        '#aa3a33',\n        '#9c4257'\n      ]\n    },\n    {\n      name: 'roygbiv-toned',\n      colors: [\n        '#817c77',\n        '#396c68',\n        '#89e3b7',\n        '#f59647',\n        '#d63644',\n        '#893f49',\n        '#4d3240'\n      ]\n    },\n    {\n      name: 'present-correct',\n      colors: [\n        '#fd3741',\n        '#fe4f11',\n        '#ff6800',\n        '#ffa61a',\n        '#ffc219',\n        '#ffd114',\n        '#fcd82e',\n        '#f4d730',\n        '#ced562',\n        '#8ac38f',\n        '#79b7a0',\n        '#72b5b1',\n        '#5b9bae',\n        '#6ba1b7',\n        '#49619d',\n        '#604791',\n        '#721e7f',\n        '#9b2b77',\n        '#ab2562',\n        '#ca2847'\n      ]\n    }\n  ];\n\n  var tundra = [\n    {\n      name: 'tundra1',\n      colors: ['#40708c', '#8e998c', '#5d3f37', '#ed6954', '#f2e9e2']\n    },\n    {\n      name: 'tundra2',\n      colors: ['#5f9e93', '#3d3638', '#733632', '#b66239', '#b0a1a4', '#e3dad2']\n    },\n    {\n      name: 'tundra3',\n      colors: [\n        '#87c3ca',\n        '#7b7377',\n        '#b2475d',\n        '#7d3e3e',\n        '#eb7f64',\n        '#d9c67a',\n        '#f3f2f2'\n      ]\n    },\n    {\n      name: 'tundra4',\n      colors: [\n        '#d53939',\n        '#b6754d',\n        '#a88d5f',\n        '#524643',\n        '#3c5a53',\n        '#7d8c7c',\n        '#dad6cd'\n      ]\n    }\n  ];\n\n  var rohlfs = [\n    {\n      name: 'rohlfs_1R',\n      colors: ['#004996', '#567bae', '#ff4c48', '#ffbcb3'],\n      stroke: '#004996',\n      background: '#fff8e7'\n    },\n    {\n      name: 'rohlfs_1Y',\n      colors: ['#004996', '#567bae', '#ffc000', '#ffdca4'],\n      stroke: '#004996',\n      background: '#fff8e7'\n    },\n    {\n      name: 'rohlfs_1G',\n      colors: ['#004996', '#567bae', '#60bf3c', '#d2deb1'],\n      stroke: '#004996',\n      background: '#fff8e7'\n    },\n    {\n      name: 'rohlfs_2',\n      colors: ['#4d3d9a', '#f76975', '#ffffff', '#eff0dd'],\n      stroke: '#211029',\n      background: '#58bdbc'\n    },\n    {\n      name: 'rohlfs_3',\n      colors: ['#abdfdf', '#fde500', '#58bdbc', '#eff0dd'],\n      stroke: '#211029',\n      background: '#f76975'\n    },\n    {\n      name: 'rohlfs_4',\n      colors: ['#fde500', '#2f2043', '#f76975', '#eff0dd'],\n      stroke: '#211029',\n      background: '#fbbeca'\n    }\n  ];\n\n  var ducci = [\n    {\n      name: 'ducci_jb',\n      colors: ['#395e54', '#e77b4d', '#050006', '#e55486'],\n      stroke: '#050006',\n      background: '#efe0bc'\n    },\n    {\n      name: 'ducci_a',\n      colors: ['#809498', '#d3990e', '#000000', '#ecddc5'],\n      stroke: '#ecddc5',\n      background: '#863f52'\n    },\n    {\n      name: 'ducci_b',\n      colors: ['#ecddc5', '#79b27b', '#000000', '#ac6548'],\n      stroke: '#ac6548',\n      background: '#d5c08e'\n    },\n    {\n      name: 'ducci_d',\n      colors: ['#f3cb4d', '#f2f5e3', '#20191b', '#67875c'],\n      stroke: '#67875c',\n      background: '#433d5f'\n    },\n    {\n      name: 'ducci_e',\n      colors: ['#c37c2b', '#f6ecce', '#000000', '#386a7a'],\n      stroke: '#386a7a',\n      background: '#e3cd98'\n    },\n    {\n      name: 'ducci_f',\n      colors: ['#596f7e', '#eae6c7', '#463c21', '#f4cb4c'],\n      stroke: '#f4cb4c',\n      background: '#e67300'\n    },\n    {\n      name: 'ducci_g',\n      colors: ['#c75669', '#000000', '#11706a'],\n      stroke: '#11706a',\n      background: '#ecddc5'\n    },\n    {\n      name: 'ducci_h',\n      colors: ['#6b5c6e', '#4a2839', '#d9574a'],\n      stroke: '#d9574a',\n      background: '#ffc34b'\n    },\n    {\n      name: 'ducci_i',\n      colors: ['#e9dcad', '#143331', '#ffc000'],\n      stroke: '#ffc000',\n      background: '#a74c02'\n    },\n    {\n      name: 'ducci_j',\n      colors: ['#c47c2b', '#5f5726', '#000000', '#7e8a84'],\n      stroke: '#7e8a84',\n      background: '#ecddc5'\n    },\n    {\n      name: 'ducci_o',\n      colors: ['#c15e1f', '#e4a13a', '#000000', '#4d545a'],\n      stroke: '#4d545a',\n      background: '#dfc79b'\n    },\n    {\n      name: 'ducci_q',\n      colors: ['#4bae8c', '#d0c1a0', '#2d3538'],\n      stroke: '#2d3538',\n      background: '#d06440'\n    },\n    {\n      name: 'ducci_u',\n      colors: ['#f6d700', '#f2d692', '#000000', '#5d3552'],\n      stroke: '#5d3552',\n      background: '#ff7426'\n    },\n    {\n      name: 'ducci_v',\n      colors: ['#c65f75', '#d3990e', '#000000', '#597e7a'],\n      stroke: '#597e7a',\n      background: '#f6eccb'\n    },\n    {\n      name: 'ducci_x',\n      colors: ['#dd614a', '#f5cedb', '#1a1e4f'],\n      stroke: '#1a1e4f',\n      background: '#fbb900'\n    }\n  ];\n\n  var judson = [\n    {\n      name: 'jud_playground',\n      colors: ['#f04924', '#fcce09', '#408ac9'],\n      stroke: '#2e2925',\n      background: '#ffffff'\n    },\n    {\n      name: 'jud_horizon',\n      colors: ['#f8c3df', '#f2e420', '#28b3d0', '#648731', '#ef6a7d'],\n      stroke: '#030305',\n      background: '#f2f0e1'\n    },\n    {\n      name: 'jud_mural',\n      colors: ['#ca3122', '#e5af16', '#4a93a2', '#0e7e39', '#e2b9bd'],\n      stroke: '#1c1616',\n      background: '#e3ded8'\n    },\n    {\n      name: 'jud_cabinet',\n      colors: ['#f0afb7', '#f6bc12', '#1477bb', '#41bb9b'],\n      stroke: '#020508',\n      background: '#e3ded8'\n    }\n  ];\n\n  var iivonen = [\n    {\n      name: 'iiso_zeitung',\n      colors: ['#ee8067', '#f3df76', '#00a9c0', '#f7ab76'],\n      stroke: '#111a17',\n      background: '#f5efcb'\n    },\n    {\n      name: 'iiso_curcuit',\n      colors: ['#f0865c', '#f2b07b', '#6bc4d2', '#1a3643'],\n      stroke: '#0f1417',\n      background: '#f0f0e8'\n    },\n    {\n      name: 'iiso_airlines',\n      colors: ['#fe765a', '#ffb468', '#4b588f', '#faf1e0'],\n      stroke: '#1c1616',\n      background: '#fae5c8'\n    },\n    {\n      name: 'iiso_daily',\n      colors: ['#e76c4a', '#f0d967', '#7f8cb6', '#1daeb1', '#ef9640'],\n      stroke: '#000100',\n      background: '#e2ded2'\n    }\n  ];\n\n  var kovecses = [\n    {\n      name: 'kov_01',\n      colors: ['#d24c23', '#7ba6bc', '#f0c667', '#ede2b3', '#672b35', '#142a36'],\n      stroke: '#132a37',\n      background: '#108266'\n    },\n    {\n      name: 'kov_02',\n      colors: ['#e8dccc', '#e94641', '#eeaeae'],\n      stroke: '#e8dccc',\n      background: '#6c96be'\n    },\n    {\n      name: 'kov_03',\n      colors: ['#e3937b', '#d93f1d', '#090d15', '#e6cca7'],\n      stroke: '#090d15',\n      background: '#558947'\n    },\n    {\n      name: 'kov_04',\n      colors: ['#d03718', '#292b36', '#33762f', '#ead7c9', '#ce7028', '#689d8d'],\n      stroke: '#292b36',\n      background: '#deb330'\n    },\n    {\n      name: 'kov_05',\n      colors: ['#de3f1a', '#de9232', '#007158', '#e6cdaf', '#869679'],\n      stroke: '#010006',\n      background: '#7aa5a6'\n    },\n    {\n      name: 'kov_06',\n      colors: [\n        '#a87c2a',\n        '#bdc9b1',\n        '#f14616',\n        '#ecbfaf',\n        '#017724',\n        '#0e2733',\n        '#2b9ae9'\n      ],\n      stroke: '#292319',\n      background: '#dfd4c1'\n    },\n    {\n      name: 'kov_06b',\n      colors: [\n        '#d57846',\n        '#dfe0cc',\n        '#de442f',\n        '#e7d3c5',\n        '#5ec227',\n        '#302f35',\n        '#63bdb3'\n      ],\n      stroke: '#292319',\n      background: '#dfd4c1'\n    },\n    {\n      name: 'kov_07',\n      colors: ['#c91619', '#fdecd2', '#f4a000', '#4c2653'],\n      stroke: '#111',\n      background: '#89c2cd'\n    }\n  ];\n\n  var tsuchimochi = [\n    {\n      name: 'tsu_arcade',\n      colors: ['#4aad8b', '#e15147', '#f3b551', '#cec8b8', '#d1af84', '#544e47'],\n      stroke: '#251c12',\n      background: '#cfc7b9'\n    },\n    {\n      name: 'tsu_harutan',\n      colors: ['#75974a', '#c83e3c', '#f39140', '#e4ded2', '#f8c5a4', '#434f55'],\n      stroke: '#251c12',\n      background: '#cfc7b9'\n    },\n    {\n      name: 'tsu_akasaka',\n      colors: ['#687f72', '#cc7d6c', '#dec36f', '#dec7af', '#ad8470', '#424637'],\n      stroke: '#251c12',\n      background: '#cfc7b9'\n    }\n  ];\n\n  var duotone = [\n    {\n      name: 'dt01',\n      colors: ['#172a89', '#f7f7f3'],\n      stroke: '#172a89',\n      background: '#f3abb0'\n    },\n    {\n      name: 'dt02',\n      colors: ['#302956', '#f3c507'],\n      stroke: '#302956',\n      background: '#eee3d3'\n    },\n    {\n      name: 'dt03',\n      colors: ['#000000', '#a7a7a7'],\n      stroke: '#000000',\n      background: '#0a5e78'\n    },\n    {\n      name: 'dt04',\n      colors: ['#50978e', '#f7f0df'],\n      stroke: '#000000',\n      background: '#f7f0df'\n    },\n    {\n      name: 'dt05',\n      colors: ['#ee5d65', '#f0e5cb'],\n      stroke: '#080708',\n      background: '#f0e5cb'\n    },\n    {\n      name: 'dt06',\n      colors: ['#271f47', '#e7ceb5'],\n      stroke: '#271f47',\n      background: '#cc2b1c'\n    },\n    {\n      name: 'dt07',\n      colors: ['#6a98a5', '#d24c18'],\n      stroke: '#efebda',\n      background: '#efebda'\n    },\n    {\n      name: 'dt08',\n      colors: ['#5d9d88', '#ebb43b'],\n      stroke: '#efebda',\n      background: '#efebda'\n    },\n    {\n      name: 'dt09',\n      colors: ['#052e57', '#de8d80'],\n      stroke: '#efebda',\n      background: '#efebda'\n    }\n  ];\n\n  var hilda = [\n    {\n      name: 'hilda01',\n      colors: ['#ec5526', '#f4ac12', '#9ebbc1', '#f7f4e2'],\n      stroke: '#1e1b1e',\n      background: '#e7e8d4'\n    },\n    {\n      name: 'hilda02',\n      colors: ['#eb5627', '#eebb20', '#4e9eb8', '#f7f5d0'],\n      stroke: '#201d13',\n      background: '#77c1c0'\n    },\n    {\n      name: 'hilda03',\n      colors: ['#e95145', '#f8b917', '#b8bdc1', '#ffb2a2'],\n      stroke: '#010101',\n      background: '#6b7752'\n    },\n    {\n      name: 'hilda04',\n      colors: ['#e95145', '#f6bf7a', '#589da1', '#f5d9bc'],\n      stroke: '#000001',\n      background: '#f5ede1'\n    },\n    {\n      name: 'hilda05',\n      colors: ['#ff6555', '#ffb58f', '#d8eecf', '#8c4b47', '#bf7f93'],\n      stroke: '#2b0404',\n      background: '#ffda82'\n    },\n    {\n      name: 'hilda06',\n      colors: ['#f75952', '#ffce84', '#74b7b2', '#f6f6f6', '#b17d71'],\n      stroke: '#0e0603',\n      background: '#f6ecd4'\n    }\n  ];\n\n  const pals = misc.concat(\n    ranganath,\n    roygbivs,\n    tundra,\n    colourscafe,\n    rohlfs,\n    ducci,\n    judson,\n    iivonen,\n    kovecses,\n    tsuchimochi,\n    duotone,\n    hilda\n  );\n\n  var palettes = pals.map(p => {\n    p.size = p.colors.length;\n    return p;\n  });\n\n  function getRandom() {\n    return palettes[Math.floor(Math.random() * palettes.length)];\n  }\n\n  function get(name) {\n    if (name === undefined) return getRandom();\n    return palettes.find(pal => pal.name == name);\n  }\n\n  function getAll() {\n    return palettes;\n  }\n\n  function getNames() {\n    return palettes.map(p => p.name);\n  }\n\n  exports.getRandom = getRandom;\n  exports.get = get;\n  exports.getAll = getAll;\n  exports.getNames = getNames;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = $getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  var args = [];\n  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    ReflectApply(this.listener, this.target, args);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","module.exports =\n  global.performance &&\n  global.performance.now ? function now() {\n    return performance.now()\n  } : Date.now || function now() {\n    return +new Date\n  }\n","if performance? and performance.now\n  module.exports = -> performance.now()\nelse if process? and process.hrtime\n  module.exports = -> (getNanoSeconds() - nodeLoadTime) / 1e6\n  hrtime = process.hrtime\n  getNanoSeconds = ->\n    hr = hrtime()\n    hr[0] * 1e9 + hr[1]\n  moduleLoadTime = getNanoSeconds()\n  upTime = process.uptime() * 1e9\n  nodeLoadTime = moduleLoadTime - upTime\nelse if Date.now\n  module.exports = -> Date.now() - loadTime\n  loadTime = Date.now()\nelse\n  module.exports = -> new Date().getTime() - loadTime\n  loadTime = new Date().getTime()\n","var now = require('performance-now')\n  , root = typeof window === 'undefined' ? global : window\n  , vendors = ['moz', 'webkit']\n  , suffix = 'AnimationFrame'\n  , raf = root['request' + suffix]\n  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix]\n\nfor(var i = 0; !raf && i < vendors.length; i++) {\n  raf = root[vendors[i] + 'Request' + suffix]\n  caf = root[vendors[i] + 'Cancel' + suffix]\n      || root[vendors[i] + 'CancelRequest' + suffix]\n}\n\n// Some versions of FF have rAF but not cAF\nif(!raf || !caf) {\n  var last = 0\n    , id = 0\n    , queue = []\n    , frameDuration = 1000 / 60\n\n  raf = function(callback) {\n    if(queue.length === 0) {\n      var _now = now()\n        , next = Math.max(0, frameDuration - (_now - last))\n      last = next + _now\n      setTimeout(function() {\n        var cp = queue.slice(0)\n        // Clear queue here to prevent\n        // callbacks from appending listeners\n        // to the current frame's queue\n        queue.length = 0\n        for(var i = 0; i < cp.length; i++) {\n          if(!cp[i].cancelled) {\n            try{\n              cp[i].callback(last)\n            } catch(e) {\n              setTimeout(function() { throw e }, 0)\n            }\n          }\n        }\n      }, Math.round(next))\n    }\n    queue.push({\n      handle: ++id,\n      callback: callback,\n      cancelled: false\n    })\n    return id\n  }\n\n  caf = function(handle) {\n    for(var i = 0; i < queue.length; i++) {\n      if(queue[i].handle === handle) {\n        queue[i].cancelled = true\n      }\n    }\n  }\n}\n\nmodule.exports = function(fn) {\n  // Wrap in a new function to prevent\n  // `cancel` potentially being assigned\n  // to the native rAF function\n  return raf.call(root, fn)\n}\nmodule.exports.cancel = function() {\n  caf.apply(root, arguments)\n}\nmodule.exports.polyfill = function(object) {\n  if (!object) {\n    object = root;\n  }\n  object.requestAnimationFrame = raf\n  object.cancelAnimationFrame = caf\n}\n","var inherits = require('inherits')\nvar EventEmitter = require('events').EventEmitter\nvar now = require('right-now')\nvar raf = require('raf')\n\nmodule.exports = Engine\nfunction Engine(fn) {\n    if (!(this instanceof Engine)) \n        return new Engine(fn)\n    this.running = false\n    this.last = now()\n    this._frame = 0\n    this._tick = this.tick.bind(this)\n\n    if (fn)\n        this.on('tick', fn)\n}\n\ninherits(Engine, EventEmitter)\n\nEngine.prototype.start = function() {\n    if (this.running) \n        return\n    this.running = true\n    this.last = now()\n    this._frame = raf(this._tick)\n    return this\n}\n\nEngine.prototype.stop = function() {\n    this.running = false\n    if (this._frame !== 0)\n        raf.cancel(this._frame)\n    this._frame = 0\n    return this\n}\n\nEngine.prototype.tick = function() {\n    this._frame = raf(this._tick)\n    var time = now()\n    var dt = time - this.last\n    this.emit('tick', dt)\n    this.last = time\n}","/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = typeof window === 'object' && window.window === window\n  ? window : typeof self === 'object' && self.self === self\n  ? self : typeof global === 'object' && global.global === global\n  ? global\n  : this\n\nfunction bom (blob, opts) {\n  if (typeof opts === 'undefined') opts = { autoBom: false }\n  else if (typeof opts !== 'object') {\n    console.warn('Deprecated: Expected third argument to be a object')\n    opts = { autoBom: !opts }\n  }\n\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })\n  }\n  return blob\n}\n\nfunction download (url, name, opts) {\n  var xhr = new XMLHttpRequest()\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts)\n  }\n  xhr.onerror = function () {\n    console.error('could not download file')\n  }\n  xhr.send()\n}\n\nfunction corsEnabled (url) {\n  var xhr = new XMLHttpRequest()\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false)\n  try {\n    xhr.send()\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299\n}\n\n// `a.click()` doesn't work for all browsers (#465)\nfunction click (node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'))\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents')\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,\n                          20, false, false, false, false, 0, null)\n    node.dispatchEvent(evt)\n  }\n}\n\nvar saveAs = _global.saveAs || (\n  // probably in some web worker\n  (typeof window !== 'object' || window !== _global)\n    ? function saveAs () { /* noop */ }\n\n  // Use download attribute first if possible (#193 Lumia mobile)\n  : 'download' in HTMLAnchorElement.prototype\n  ? function saveAs (blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL\n    var a = document.createElement('a')\n    name = name || blob.name || 'download'\n\n    a.download = name\n    a.rel = 'noopener' // tabnabbing\n\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href)\n          ? download(blob, name, opts)\n          : click(a, a.target = '_blank')\n      } else {\n        click(a)\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob)\n      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s\n      setTimeout(function () { click(a) }, 0)\n    }\n  }\n\n  // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator\n  ? function saveAs (blob, name, opts) {\n    name = name || blob.name || 'download'\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts)\n      } else {\n        var a = document.createElement('a')\n        a.href = blob\n        a.target = '_blank'\n        setTimeout(function () { click(a) })\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name)\n    }\n  }\n\n  // Fallback to using FileReader and a popup\n  : function saveAs (blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank')\n    if (popup) {\n      popup.document.title =\n      popup.document.body.innerText = 'downloading...'\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts)\n\n    var force = blob.type === 'application/octet-stream'\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\n\n    if ((isChromeIOS || (force && isSafari)) && typeof FileReader === 'object') {\n      // Safari doesn't allow downloading of blob URLs\n      var reader = new FileReader()\n      reader.onloadend = function () {\n        var url = reader.result\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n        if (popup) popup.location.href = url\n        else location = url\n        popup = null // reverse-tabnabbing #460\n      }\n      reader.readAsDataURL(blob)\n    } else {\n      var URL = _global.URL || _global.webkitURL\n      var url = URL.createObjectURL(blob)\n      if (popup) popup.location = url\n      else location.href = url\n      popup = null // reverse-tabnabbing #460\n      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s\n    }\n  }\n)\n\n_global.saveAs = saveAs.saveAs = saveAs\n\nif (typeof module !== 'undefined') {\n  module.exports = saveAs;\n}\n","import Loop from 'raf-loop';\nimport { saveAs } from 'file-saver';\n\nconst DEFAULTS = {\n    debug: false,\n    width: 480,\n    height: 480,\n    pixelRatio: window.devicePixelRatio,\n    clickToggleDebug: true,\n    pixelate: 1\n};\n\nclass SketchEngine {\n    constructor(canvasEl, opts = {}) {\n        this.options = {\n            ...DEFAULTS,\n            ...opts\n        };\n\n        this.canvasEl = canvasEl;\n        this.canvasCtx = this.canvasEl.getContext('2d');\n        window.ctx = this.canvasCtx;\n\n        this.frame = 0;\n\n        this.loop = Loop(this.update.bind(this));\n\n        this._renderer = () => {};\n\n        this._addEventListeners();\n        this.updateDimensions(this.options.width, this.options.height, this.options.pixelate, this.options.pixelRatio);\n    }\n\n    _addEventListeners() {\n        this.canvasEl.addEventListener('click', () => {\n            this.options.debug = !this.options.debug;\n\n            document.body.classList.toggle('debug', this.options.debug);\n        }, false);\n    }\n\n    updateDimensions(width, height, pixelate, pixelRatio) {\n        this.canvasEl.width = width * pixelRatio;\n        this.canvasEl.height = height * pixelRatio;\n        this.canvasEl.width = width * pixelRatio;\n        this.canvasEl.height = height * pixelRatio;\n\n        this.canvasEl.style.width = `${width * pixelate}px`;\n        this.canvasEl.style.height = `${height * pixelate}px`;\n\n        this.canvasCtx.scale(pixelRatio, pixelRatio);\n    }\n\n    onRender(fn = () => {}) {\n        this._renderer = fn;\n    }\n\n    start() {\n        this.loop.start();\n    }\n\n    update(dt) {\n        this._renderer({\n            debug: this.options.debug,\n            frame: this.frame,\n            deltaTime: dt,\n            width: this.options.width,\n            height: this.options.height\n        });\n\n        this.frame++;\n    }\n\n    stop() {\n        this.loop.stop();\n    }\n\n    saveFrame() {\n      const d = new Date();\n\n      const dStr = [\n        d.getFullYear(),\n        (d.getMonth() + 1).toString().padStart(2, '0'),\n        d.getDate().toString().padStart(2, '0'),\n      ].join('-');\n\n\n      this.canvasEl.toBlob((blob) => {\n          saveAs(blob, `${ dStr }-${ this.frame }.png`);\n      }, 'image/png');\n    }\n}\n\nexport default SketchEngine;\n","const media = {\n  el: false,\n  width: 0,\n  height: 0\n};\n\nexport const getMediaInfo = () => media;\n\nexport const getWebcam = () => {\n  return navigator.mediaDevices.getUserMedia({\n    audio: false,\n    video: true\n  });\n}\n\nexport const createVideo = (stream) => {\n  return new Promise((resolve, reject) => {\n    const videoEl = document.querySelector('video');\n    videoEl.srcObject = stream;\n    videoEl.style.position = 'fixed';\n    videoEl.style.opacity = '0';\n    videoEl.style.pointerEvents = 'none';\n    videoEl.style.transform = 'scale(0)';\n    document.body.appendChild(videoEl);\n\n    media.el = videoEl;\n\n    const onCanPlay = () => videoEl.play();\n    videoEl.addEventListener('canplay', e => {\n      media.width = e.target.videoWidth;\n      media.height = e.target.videoHeight;\n      videoEl.width = media.width;\n      videoEl.height = media.height;\n\n      onCanPlay();\n      videoEl.removeEventListener('canplay', onCanPlay);\n\n      resolve(videoEl);\n    });\n  });\n}\n\nexport const initialiseWebcam = () => {\n  return getWebcam()\n    .then(createVideo)\n    .then(() => getMediaInfo);\n}\n","export const trackMouse = () => {\n  window.mouseX = 0;\n  window.mouseY = 0;\n\n  document.getElementById('canvas').addEventListener('mousemove', e => {\n    window.mouseX = e.x - e.target.offsetLeft;\n    window.mouseY = e.y - e.target.offsetTop;\n  });\n}\n\nexport const interpolate = (t, n1, n2) => {\n  return ((n2 - n1) * t) + n1;\n};\n\nexport const randomBetween = (min, max) => {\n  return ((max - min) * Math.random()) + min;\n}\n\nexport const mapRange = (v, r1l, r1u, r2l, r2u) => {\n  return r2l + (r2u - r2l) * (v - r1l) / (r1u - r1l);\n}\n\nexport const distance = (x1, y1, x2, y2) => {\n  let a = x1 - x2;\n  let b = y1 - y2;\n\n  return Math.sqrt(a * a + b * b);\n}\n\nexport const clamp = (value, max, min = 0) => {\n  return Math.min(Math.max(value, min), max);\n}\n\nexport const shuffle = (array) => {\n  let _arr = array.slice();\n  for (let i = _arr.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [_arr[i], _arr[j]] = [_arr[j], _arr[i]];\n  }\n\n  return _arr;\n}\n\n\nexport const color = (r, g, b) => {\n  return { r, g, b };\n}\n\nexport const colorToString = ({ r, g, b }) => {\n  return `rgb(${ r }, ${ g }, ${ b })`;\n}\n\nexport const colourInterpolate = (t, color1, color2) => {\n  return color(\n    interpolate(t, color1.r, color2.r),\n    interpolate(t, color1.g, color2.g),\n    interpolate(t, color1.b, color2.b),\n  );\n}\n\nexport const getPointFromAngleRadius = (angle, radius, x = 0, y = 0) => {\n  return {\n    x: x + (Math.cos(angle) * radius),\n    y: y + (Math.sin(angle) * radius)\n  };\n}\n\n\n\n/**\n * Creates an array of stepped colours through an array of colours\n *\n * @param {Array.<{ r: number, g: number, b: number }>} colours\n * @param {number} granularity\n *\n * @returns {Array.<{ r: number, g: number, b: number }>}\n */\nexport const getInterpolatedColours = (colours = [], granularity = 100) => {\n  let colourStop = 1 / (colours.length - 1);\n  let granularityStop = 1 / granularity;\n\n  let colourArr = [];\n\n  for (let i = 0; i <= 1; i += granularityStop) {\n    let t = (i % colourStop) / colourStop;\n    let currColourIdx = Math.floor(i / colourStop);\n    colourArr.push(colourInterpolate(t, colours[currColourIdx], colours[currColourIdx + 1]));\n  }\n\n  return colourArr;\n}\n\n\n\n/**\n * Finds what would be the most relevant colour\n * in a colour array most likely created by\n * getInterpolatedColours\n *\n * @param {number} t\n * @param {Array.<{ r: number, g: number, b: number }>} colourArr\n *\n * @returns {{ r: number, g: number, b: number }}\n */\nexport const getClosestColour = (t, colourArr) => {\n  return colourArr[Math.round((colourArr.length - 1) * t)];\n}\n","import * as posenet from '@tensorflow-models/posenet';\nimport * as tome from 'chromotome';\n\nimport Engine from './utils/engine';\nimport { initialiseWebcam, getMediaInfo } from './utils/camera';\nimport { trackMouse } from './utils/utils';\n// import Engine from './utils/engine3d';\n\nconst WIDTH = 480;\nconst HEIGHT = 480;\nconst THRESHOLD = 0.75;\nconst KEYS = ['nose', 'leftEye', 'rightEye', 'leftEar', 'rightEar', 'leftShoulder', 'rightShoulder'];\n\nconst el = document.getElementById('canvas');\n// const el = document.getElementById('container');\n\nconst app = new Engine(el, {\n  debug: false,\n  width: WIDTH,\n  height: HEIGHT\n});\n\nconst cols = 30;\nconst rows = 30;\n\nconst tileSize = WIDTH / cols;\n\nfunction getReleventPose(poses) {\n  const datas = [];\n\n  poses.forEach(poseData => {\n    const data = {};\n\n    poseData.keypoints.forEach(p => {\n      if (KEYS.includes(p.part) && p.score > THRESHOLD) {\n        data[p.part] = p.position;\n      }\n    })\n\n    datas.push(data);\n  });\n\n  return datas;\n}\n\nlet running = false;\nlet poseData = [{}, {}, {}];\n\nlet palette = tome.get('present-correct');\nlet colors = [{}, {}, {}];\n\nlet mouthType = [0, 0, 0];\nlet hairType = [0, 0, 0];\n\nconst randomMouth = () => Math.floor(Math.random() * 3);\nconst randomHair = () => Math.floor(Math.random() * 3);\n\nconst randomColor = () => {\n  return palette.colors[Math.floor(Math.random() * palette.colors.length)];\n}\n\nfunction getPose() {\n  if (!running) {\n    running = true;\n\n    net.estimateMultiplePoses(getMediaInfo().el, {\n      flipHorizontal: true,\n      maxDetections: 3,\n      scoreThreshold: 0.6,\n      nmsRadius: 20\n    })\n      .then(getReleventPose)\n      .then(poses => {\n        poses.forEach((data, idx) => {\n          const oldData = {...poseData[idx]};\n\n          poseData[idx] = {\n            ...poseData[idx],\n            ...data\n          };\n\n          KEYS.forEach(k => {\n            if (!(k in oldData)) {\n              colors[idx][k] = randomColor();\n            }\n          })\n        });\n\n        running = false;\n      });\n  }\n}\n\nconst floorToIndex = ({ x, y }) => {\n  return {\n    x: Math.floor(x / tileSize),\n    y: Math.floor(y / tileSize)\n  };\n}\n\nconst checkHas = (arr, idx) => {\n  for (let i = 0; i < arr.length; i++) {\n    console.log(arr, poseData[idx]);\n    if (!(arr[i] in poseData[idx])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nconst drawPart = (idx, key) => {\n  if (!checkHas([key], idx)) {\n    return false;\n  }\n\n  const { x, y } = floorToIndex(poseData[idx][key]);\n\n  ctx.fillStyle = colors[idx][key];\n\n  ctx.save();\n  ctx.translate(x * tileSize, y * tileSize);\n  switch (key) {\n    case 'nose':\n      ctx.beginPath();\n      ctx.moveTo(tileSize / 2, 0);\n      ctx.lineTo(tileSize, tileSize * 2);\n      ctx.lineTo(0, tileSize * 2);\n      ctx.fill();\n      break;\n    case 'leftEye':\n    case 'rightEye':\n      ctx.beginPath();\n      ctx.arc(tileSize / 2, tileSize / 2, tileSize / 2, 0, Math.PI * 2);\n      ctx.fill();\n      break;\n    case 'leftEar':\n      ctx.beginPath();\n      ctx.arc(tileSize / 2, tileSize / 2, tileSize, Math.PI * 0.5, Math.PI * 1.5);\n      ctx.fill();\n      break;\n    case 'rightEar':\n      ctx.beginPath();\n      ctx.arc(tileSize / 2, tileSize / 2, tileSize, Math.PI * 1.5, Math.PI * 2.5);\n      ctx.fill();\n      break;\n    case 'leftShoulder':\n    case 'rightShoulder':\n      break;\n    default:\n      ctx.fillRect(0, 0, tileSize, tileSize);\n  }\n\n  ctx.restore();\n}\n\nconst drawBody = (idx) => {\n  if (!checkHas(['leftShoulder', 'rightShoulder'], idx)) {\n    return false;\n  }\n\n  const { x: x1, y: y1 } = floorToIndex(poseData[idx]['leftShoulder']);\n  const { x: x2, y: y2 } = floorToIndex(poseData[idx]['rightShoulder']);\n\n  ctx.strokeStyle = colors[idx]['leftShoulder'];\n  ctx.beginPath();\n  ctx.moveTo(x1 * tileSize, y1 * tileSize);\n  ctx.lineTo(x2 * tileSize, y2 * tileSize);\n  ctx.stroke();\n  ctx.closePath();\n}\n\nconst drawHair = (idx) => {\n  console.log(poseData[idx]);\n  if (!checkHas(['rightEye', 'leftEye', 'rightEar', 'leftEar'], idx)) {\n    return false;\n  }\n\n  const topX = Math.min.apply(this, ['rightEye', 'leftEye']\n    .map(k => floorToIndex(poseData[idx][k]).y));\n\n  const leftX = floorToIndex(poseData[idx]['leftEye']).x;\n  const rightX = floorToIndex(poseData[idx]['rightEye']).x;\n\n  for (let x = leftX - 1; x <= rightX + 1; x++) {\n    ctx.save();\n    ctx.translate(x * tileSize, (topX - 3) * tileSize);\n\n    if (hairType[idx] == 0) {\n      ctx.beginPath();\n      ctx.moveTo(tileSize, 0);\n      ctx.lineTo(0, tileSize);\n      ctx.stroke();\n    }\n\n    if (hairType[idx] == 1) {\n      ctx.beginPath();\n      ctx.moveTo(tileSize, 0);\n      ctx.bezierCurveTo(\n        tileSize, tileSize * 0.25,\n        tileSize * 0.25, tileSize,\n        0, tileSize\n      );\n      ctx.stroke();\n    }\n\n    if (hairType[idx] == 2) {\n      ctx.beginPath();\n      ctx.moveTo(tileSize * (Math.random() * 2), tileSize * (Math.random() * 2));\n      ctx.lineTo(tileSize * (Math.random() * 2), tileSize * (Math.random() * 2));\n      ctx.stroke();\n    }\n\n    ctx.restore();\n  }\n}\n\nconst drawMouth = (idx) => {\n  if (!checkHas(['nose', 'rightEar', 'leftEar'], idx)) {\n    return false;\n  }\n\n  const bottomX = floorToIndex(poseData[idx]['nose']).y\n  const leftX = floorToIndex(poseData[idx]['nose']).x - 2;\n  const rightX = floorToIndex(poseData[idx]['nose']).x + 2;\n\n  let len = (rightX - leftX)\n\n  ctx.save();\n  ctx.translate((leftX + 1) * tileSize, (bottomX + 4) * tileSize);\n\n  if (mouthType[idx] == 0) {\n    for (let x = 0; x < rightX - leftX; x++) {\n      ctx.strokeRect(x * tileSize, 0, tileSize / 2, tileSize);\n      ctx.strokeRect((x * tileSize) + (tileSize / 2), 0, tileSize / 2, tileSize);\n    }\n  }\n\n  if (mouthType[idx] == 1) {\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo((rightX - leftX) * tileSize, 0);\n    ctx.stroke();\n  }\n\n  if (mouthType[idx] == 2) {\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.bezierCurveTo(\n      0, tileSize,\n      len * tileSize, tileSize,\n      len * tileSize, 0\n    );\n    ctx.stroke();\n  }\n\n  ctx.restore();\n}\n\napp.onRender(({ frame, width, height, debug }) => {\n  ctx.clearRect(0, 0, width, height);\n\n  getPose();\n\n  if (poseData && Object.keys(poseData[0]).length) {\n    KEYS.forEach(k => {\n      drawPart(0, k);\n    })\n\n    drawBody(0);\n    drawHair(0);\n    drawMouth(0);\n  }\n});\n\ntrackMouse();\n\napp.canvasEl.addEventListener('click', () => {\n  for (let i = 0; i < poseData.length; i++) {\n    mouthType[i] = randomMouth();\n    hairType[i] = randomHair();\n\n    KEYS.forEach(k => {\n      colors[i][k] = randomColor();\n    })\n  }\n})\n\ninitialiseWebcam()\n  .then(() => {\n    console.log('loading model');\n\n    return posenet.load({\n      architecture: 'MobileNetV1',\n      outputStride: 16,\n      inputResolution: 257,\n      multiplier: 0.75\n    })\n  })\n  .then(net => {\n    window.net = net;\n\n    app.start();\n  })\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else {\n        window.location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}